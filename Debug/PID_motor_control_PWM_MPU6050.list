
PID_motor_control_PWM_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800baa0  0800baa0  0001baa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf38  0800bf38  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf38  0800bf38  0001bf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf40  0800bf40  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf40  0800bf40  0001bf40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf44  0800bf44  0001bf44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800bf48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000278  0800c1c0  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800c1c0  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c4b  00000000  00000000  000202eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f58  00000000  00000000  00034f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  00037e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eed  00000000  00000000  00039188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cb1  00000000  00000000  0003a075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000196f1  00000000  00000000  0005fd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2e0f  00000000  00000000  00079417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006514  00000000  00000000  0015c228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0016273c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000278 	.word	0x20000278
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba84 	.word	0x0800ba84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000027c 	.word	0x2000027c
 800020c:	0800ba84 	.word	0x0800ba84

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	0000      	movs	r0, r0
	...

08000fc8 <CalculateAccAngle>:
// */
//
#include "calculate_angle.h"

void CalculateAccAngle(Angle_t* angle, MPU6050_t* mpu)
{
 8000fc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
	angle->acc_roll = atan2(mpu->Accel_Y_RAW, sqrt(pow(mpu->Accel_X_RAW, 2) + pow(mpu->Accel_Z_RAW, 2))) * 180 / M_PI;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fac2 	bl	8000564 <__aeabi_i2d>
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	460d      	mov	r5, r1
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff faba 	bl	8000564 <__aeabi_i2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8001150 <CalculateAccAngle+0x188>
 8000ff8:	ec43 2b10 	vmov	d0, r2, r3
 8000ffc:	f009 fb2a 	bl	800a654 <pow>
 8001000:	ec59 8b10 	vmov	r8, r9, d0
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff faaa 	bl	8000564 <__aeabi_i2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8001150 <CalculateAccAngle+0x188>
 8001018:	ec43 2b10 	vmov	d0, r2, r3
 800101c:	f009 fb1a 	bl	800a654 <pow>
 8001020:	ec53 2b10 	vmov	r2, r3, d0
 8001024:	4640      	mov	r0, r8
 8001026:	4649      	mov	r1, r9
 8001028:	f7ff f950 	bl	80002cc <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	ec43 2b17 	vmov	d7, r2, r3
 8001034:	eeb0 0a47 	vmov.f32	s0, s14
 8001038:	eef0 0a67 	vmov.f32	s1, s15
 800103c:	f009 fb7a 	bl	800a734 <sqrt>
 8001040:	eeb0 7a40 	vmov.f32	s14, s0
 8001044:	eef0 7a60 	vmov.f32	s15, s1
 8001048:	eeb0 1a47 	vmov.f32	s2, s14
 800104c:	eef0 1a67 	vmov.f32	s3, s15
 8001050:	ec45 4b10 	vmov	d0, r4, r5
 8001054:	f009 fafc 	bl	800a650 <atan2>
 8001058:	ec51 0b10 	vmov	r0, r1, d0
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <CalculateAccAngle+0x198>)
 8001062:	f7ff fae9 	bl	8000638 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	a33a      	add	r3, pc, #232	; (adr r3, 8001158 <CalculateAccAngle+0x190>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fc0a 	bl	800088c <__aeabi_ddiv>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fdd2 	bl	8000c28 <__aeabi_d2f>
 8001084:	4602      	mov	r2, r0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
	angle->acc_pitch = atan2(-mpu->Accel_X_RAW, sqrt(pow(mpu->Accel_Y_RAW, 2) + pow(mpu->Accel_Z_RAW, 2))) * 180 / M_PI;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	425b      	negs	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa66 	bl	8000564 <__aeabi_i2d>
 8001098:	4604      	mov	r4, r0
 800109a:	460d      	mov	r5, r1
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa5e 	bl	8000564 <__aeabi_i2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001150 <CalculateAccAngle+0x188>
 80010b0:	ec43 2b10 	vmov	d0, r2, r3
 80010b4:	f009 face 	bl	800a654 <pow>
 80010b8:	ec59 8b10 	vmov	r8, r9, d0
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa4e 	bl	8000564 <__aeabi_i2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8001150 <CalculateAccAngle+0x188>
 80010d0:	ec43 2b10 	vmov	d0, r2, r3
 80010d4:	f009 fabe 	bl	800a654 <pow>
 80010d8:	ec53 2b10 	vmov	r2, r3, d0
 80010dc:	4640      	mov	r0, r8
 80010de:	4649      	mov	r1, r9
 80010e0:	f7ff f8f4 	bl	80002cc <__adddf3>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	ec43 2b17 	vmov	d7, r2, r3
 80010ec:	eeb0 0a47 	vmov.f32	s0, s14
 80010f0:	eef0 0a67 	vmov.f32	s1, s15
 80010f4:	f009 fb1e 	bl	800a734 <sqrt>
 80010f8:	eeb0 7a40 	vmov.f32	s14, s0
 80010fc:	eef0 7a60 	vmov.f32	s15, s1
 8001100:	eeb0 1a47 	vmov.f32	s2, s14
 8001104:	eef0 1a67 	vmov.f32	s3, s15
 8001108:	ec45 4b10 	vmov	d0, r4, r5
 800110c:	f009 faa0 	bl	800a650 <atan2>
 8001110:	ec51 0b10 	vmov	r0, r1, d0
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <CalculateAccAngle+0x198>)
 800111a:	f7ff fa8d 	bl	8000638 <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	a30c      	add	r3, pc, #48	; (adr r3, 8001158 <CalculateAccAngle+0x190>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fbae 	bl	800088c <__aeabi_ddiv>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fd76 	bl	8000c28 <__aeabi_d2f>
 800113c:	4602      	mov	r2, r0
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	605a      	str	r2, [r3, #4]

}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800114c:	f3af 8000 	nop.w
 8001150:	00000000 	.word	0x00000000
 8001154:	40000000 	.word	0x40000000
 8001158:	54442d18 	.word	0x54442d18
 800115c:	400921fb 	.word	0x400921fb
 8001160:	40668000 	.word	0x40668000

08001164 <read_potentiometers_values>:
uint16_t ADC_VAL[3];

PID_TypeDef t_PID;

void	read_potentiometers_values(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	  ADC_Select_CH0();
 8001168:	f001 fdc4 	bl	8002cf4 <ADC_Select_CH0>
	  HAL_ADC_Start(&hadc1);
 800116c:	481d      	ldr	r0, [pc, #116]	; (80011e4 <read_potentiometers_values+0x80>)
 800116e:	f001 ff1d 	bl	8002fac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001172:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001176:	481b      	ldr	r0, [pc, #108]	; (80011e4 <read_potentiometers_values+0x80>)
 8001178:	f002 f81d 	bl	80031b6 <HAL_ADC_PollForConversion>
	  ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 800117c:	4819      	ldr	r0, [pc, #100]	; (80011e4 <read_potentiometers_values+0x80>)
 800117e:	f002 f9b5 	bl	80034ec <HAL_ADC_GetValue>
 8001182:	4603      	mov	r3, r0
 8001184:	b29a      	uxth	r2, r3
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <read_potentiometers_values+0x84>)
 8001188:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 800118a:	4816      	ldr	r0, [pc, #88]	; (80011e4 <read_potentiometers_values+0x80>)
 800118c:	f001 ffe0 	bl	8003150 <HAL_ADC_Stop>

	  ADC_Select_CH1();
 8001190:	f001 fdd0 	bl	8002d34 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <read_potentiometers_values+0x80>)
 8001196:	f001 ff09 	bl	8002fac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800119a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <read_potentiometers_values+0x80>)
 80011a0:	f002 f809 	bl	80031b6 <HAL_ADC_PollForConversion>
	  ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 80011a4:	480f      	ldr	r0, [pc, #60]	; (80011e4 <read_potentiometers_values+0x80>)
 80011a6:	f002 f9a1 	bl	80034ec <HAL_ADC_GetValue>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <read_potentiometers_values+0x84>)
 80011b0:	805a      	strh	r2, [r3, #2]
	  HAL_ADC_Stop(&hadc1);
 80011b2:	480c      	ldr	r0, [pc, #48]	; (80011e4 <read_potentiometers_values+0x80>)
 80011b4:	f001 ffcc 	bl	8003150 <HAL_ADC_Stop>

	  ADC_Select_CH4();
 80011b8:	f001 fddc 	bl	8002d74 <ADC_Select_CH4>
	  HAL_ADC_Start(&hadc1);
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <read_potentiometers_values+0x80>)
 80011be:	f001 fef5 	bl	8002fac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80011c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <read_potentiometers_values+0x80>)
 80011c8:	f001 fff5 	bl	80031b6 <HAL_ADC_PollForConversion>
	  ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <read_potentiometers_values+0x80>)
 80011ce:	f002 f98d 	bl	80034ec <HAL_ADC_GetValue>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <read_potentiometers_values+0x84>)
 80011d8:	809a      	strh	r2, [r3, #4]
	  HAL_ADC_Stop(&hadc1);
 80011da:	4802      	ldr	r0, [pc, #8]	; (80011e4 <read_potentiometers_values+0x80>)
 80011dc:	f001 ffb8 	bl	8003150 <HAL_ADC_Stop>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000294 	.word	0x20000294
 80011e8:	20000438 	.word	0x20000438

080011ec <_write>:

int _write(int file, char *ptr, int len)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <_write+0x28>)
 8001204:	f005 fd46 	bl	8006c94 <HAL_UART_Transmit>
	return len;
 8001208:	687b      	ldr	r3, [r7, #4]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200003d8 	.word	0x200003d8

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b0b3      	sub	sp, #204	; 0xcc
 800121c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121e:	f001 fe0f 	bl	8002e40 <HAL_Init>
  /* USER CODE BEGIN Init */
  MPU6050_t mpu;
  Angle_t	angle;
  double	pot_P_value, pot_I_value, pot_D_value;

  double	dt = 0.0;
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
  uint32_t	start_time = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001234:	f000 f90a 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001238:	f000 fab4 	bl	80017a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800123c:	f000 fa92 	bl	8001764 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001240:	f000 fa66 	bl	8001710 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001244:	f000 fa0c 	bl	8001660 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001248:	f000 f96e 	bl	8001528 <MX_ADC1_Init>
  MX_I2C1_Init();
 800124c:	f000 f9da 	bl	8001604 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  while (MPU6050_Init(&hi2c1) == 1);
 8001250:	bf00      	nop
 8001252:	4871      	ldr	r0, [pc, #452]	; (8001418 <main+0x200>)
 8001254:	f000 fb26 	bl	80018a4 <MPU6050_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d0f9      	beq.n	8001252 <main+0x3a>

//  PID(&t_PID, &input, &output, &setpoint, 2.3, 0.5, 0.2, _PID_P_ON_E, _PID_CD_DIRECT);	///1.5	0.8		0.07
  PID(&t_PID, &input, &output, &setpoint, 0, 0, 0, _PID_P_ON_E, _PID_CD_DIRECT);			///1.8	1.1		0.12
 800125e:	2300      	movs	r3, #0
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	2301      	movs	r3, #1
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	ed9f 2b66 	vldr	d2, [pc, #408]	; 8001400 <main+0x1e8>
 800126a:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8001400 <main+0x1e8>
 800126e:	ed9f 0b64 	vldr	d0, [pc, #400]	; 8001400 <main+0x1e8>
 8001272:	4b6a      	ldr	r3, [pc, #424]	; (800141c <main+0x204>)
 8001274:	4a6a      	ldr	r2, [pc, #424]	; (8001420 <main+0x208>)
 8001276:	496b      	ldr	r1, [pc, #428]	; (8001424 <main+0x20c>)
 8001278:	486b      	ldr	r0, [pc, #428]	; (8001428 <main+0x210>)
 800127a:	f000 ff05 	bl	8002088 <PID>
  PID_SetMode(&t_PID, _PID_MODE_AUTOMATIC);
 800127e:	2101      	movs	r1, #1
 8001280:	4869      	ldr	r0, [pc, #420]	; (8001428 <main+0x210>)
 8001282:	f001 f879 	bl	8002378 <PID_SetMode>
  PID_SetSampleTime(&t_PID, 1);
 8001286:	2101      	movs	r1, #1
 8001288:	4867      	ldr	r0, [pc, #412]	; (8001428 <main+0x210>)
 800128a:	f001 fa03 	bl	8002694 <PID_SetSampleTime>
  PID_SetOutputLimits(&t_PID, -255, 255);
 800128e:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8001408 <main+0x1f0>
 8001292:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8001410 <main+0x1f8>
 8001296:	4864      	ldr	r0, [pc, #400]	; (8001428 <main+0x210>)
 8001298:	f001 f88c 	bl	80023b4 <PID_SetOutputLimits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  read_potentiometers_values();
 800129c:	f7ff ff62 	bl	8001164 <read_potentiometers_values>

	  pot_P_value = map1(ADC_VAL[0], 0, 4095, 0, 30, 1); // Map ADC_VAL[0] to range 1-5 with step 0.3
 80012a0:	4b62      	ldr	r3, [pc, #392]	; (800142c <main+0x214>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ac:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80012b0:	eeb3 2a0e 	vmov.f32	s4, #62	; 0x41f00000  30.0
 80012b4:	eddf 1a5e 	vldr	s3, [pc, #376]	; 8001430 <main+0x218>
 80012b8:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8001434 <main+0x21c>
 80012bc:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8001430 <main+0x218>
 80012c0:	eeb0 0a67 	vmov.f32	s0, s15
 80012c4:	f001 fcc2 	bl	8002c4c <map1>
 80012c8:	ee10 3a10 	vmov	r3, s0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f95b 	bl	8000588 <__aeabi_f2d>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	  pot_I_value = map1(ADC_VAL[1], 0, 4095, 0, 20, 0.1);   // Map ADC_VAL[1] to range 0-20 with step 0.1
 80012da:	4b54      	ldr	r3, [pc, #336]	; (800142c <main+0x214>)
 80012dc:	885b      	ldrh	r3, [r3, #2]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e6:	eddf 2a54 	vldr	s5, [pc, #336]	; 8001438 <main+0x220>
 80012ea:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 80012ee:	eddf 1a50 	vldr	s3, [pc, #320]	; 8001430 <main+0x218>
 80012f2:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8001434 <main+0x21c>
 80012f6:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8001430 <main+0x218>
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	f001 fca5 	bl	8002c4c <map1>
 8001302:	ee10 3a10 	vmov	r3, s0
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f93e 	bl	8000588 <__aeabi_f2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	  pot_D_value = map1(ADC_VAL[2], 0, 4095, 0, 2, 0.01);   // Map ADC_VAL[2] to range 0-2 with step 0.01
 8001314:	4b45      	ldr	r3, [pc, #276]	; (800142c <main+0x214>)
 8001316:	889b      	ldrh	r3, [r3, #4]
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001320:	eddf 2a46 	vldr	s5, [pc, #280]	; 800143c <main+0x224>
 8001324:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
 8001328:	eddf 1a41 	vldr	s3, [pc, #260]	; 8001430 <main+0x218>
 800132c:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8001434 <main+0x21c>
 8001330:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8001430 <main+0x218>
 8001334:	eeb0 0a67 	vmov.f32	s0, s15
 8001338:	f001 fc88 	bl	8002c4c <map1>
 800133c:	ee10 3a10 	vmov	r3, s0
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f921 	bl	8000588 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
//	  pot_P_value = 1;
//	  pot_I_value = 0;
//	  pot_D_value = 0;

  	  MPU6050_Read_All(&hi2c1, &mpu);
 800134e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001352:	4619      	mov	r1, r3
 8001354:	4830      	ldr	r0, [pc, #192]	; (8001418 <main+0x200>)
 8001356:	f000 fb03 	bl	8001960 <MPU6050_Read_All>
	  CalculateAccAngle(&angle, &mpu);
 800135a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe30 	bl	8000fc8 <CalculateAccAngle>
//	  pot2_value = 0;
	  input = mpu.KalmanAngleX;
 8001368:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800136c:	492d      	ldr	r1, [pc, #180]	; (8001424 <main+0x20c>)
 800136e:	e9c1 2300 	strd	r2, r3, [r1]
//	  input = angle.acc_roll;

	  PID_SetTunings(&t_PID, pot_P_value, pot_I_value, pot_D_value);
 8001372:	ed97 2b22 	vldr	d2, [r7, #136]	; 0x88
 8001376:	ed97 1b24 	vldr	d1, [r7, #144]	; 0x90
 800137a:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 800137e:	482a      	ldr	r0, [pc, #168]	; (8001428 <main+0x210>)
 8001380:	f001 f886 	bl	8002490 <PID_SetTunings>
	  PID_Compute(&t_PID);
 8001384:	4828      	ldr	r0, [pc, #160]	; (8001428 <main+0x210>)
 8001386:	f000 fecb 	bl	8002120 <PID_Compute>
//	  set_PID_range(&MIN_PID_VALUE, &MAX_PID_VALUE, dt, pot_P_value, pot_I_value, pot_D_value);
//	  printf("output1 = %f\t min = %f\t max = %f\n\r", output1, MIN_PID_VALUE, MAX_PID_VALUE);

//	  start_time = current_time;

	  printf("Angle = %f\t ", mpu.KalmanAngleX);
 800138a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800138e:	482c      	ldr	r0, [pc, #176]	; (8001440 <main+0x228>)
 8001390:	f007 f95a 	bl	8008648 <iprintf>
//	  set_PID_range(&MIN_PID_VALUE, &MAX_PID_VALUE, dt, pot_P_value, pot_I_value, pot_D_value);
	  double pwm = map(output, -255, 255, 5, 95);
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <main+0x208>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fbfb 	bl	8000b98 <__aeabi_d2iz>
 80013a2:	235f      	movs	r3, #95	; 0x5f
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2305      	movs	r3, #5
 80013a8:	22ff      	movs	r2, #255	; 0xff
 80013aa:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 80013ae:	f001 fd01 	bl	8002db4 <map>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8d5 	bl	8000564 <__aeabi_i2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
//	  double pwm = map(output1, MIN_PID_VALUE, MAX_PID_VALUE, 30, 70);
	  TIM2->CCR3 = pwm;
 80013c2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80013c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80013ca:	f7ff fc0d 	bl	8000be8 <__aeabi_d2uiz>
 80013ce:	4603      	mov	r3, r0
 80013d0:	63e3      	str	r3, [r4, #60]	; 0x3c
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013d2:	2108      	movs	r1, #8
 80013d4:	481b      	ldr	r0, [pc, #108]	; (8001444 <main+0x22c>)
 80013d6:	f004 ff85 	bl	80062e4 <HAL_TIM_PWM_Start>

	  printf("pwm = %f\t P = %f\t I = %f\t D = %f\n\r", pwm, pot_P_value, pot_I_value, pot_D_value);
 80013da:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80013de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013e2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80013e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013ea:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80013ee:	e9cd 2300 	strd	r2, r3, [sp]
 80013f2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80013f6:	4814      	ldr	r0, [pc, #80]	; (8001448 <main+0x230>)
 80013f8:	f007 f926 	bl	8008648 <iprintf>
  {
 80013fc:	e74e      	b.n	800129c <main+0x84>
 80013fe:	bf00      	nop
	...
 800140c:	406fe000 	.word	0x406fe000
 8001410:	00000000 	.word	0x00000000
 8001414:	c06fe000 	.word	0xc06fe000
 8001418:	200002dc 	.word	0x200002dc
 800141c:	20000420 	.word	0x20000420
 8001420:	20000430 	.word	0x20000430
 8001424:	20000428 	.word	0x20000428
 8001428:	20000440 	.word	0x20000440
 800142c:	20000438 	.word	0x20000438
 8001430:	00000000 	.word	0x00000000
 8001434:	457ff000 	.word	0x457ff000
 8001438:	3dcccccd 	.word	0x3dcccccd
 800143c:	3c23d70a 	.word	0x3c23d70a
 8001440:	0800baa0 	.word	0x0800baa0
 8001444:	20000330 	.word	0x20000330
 8001448:	0800bab0 	.word	0x0800bab0

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	; 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	2234      	movs	r2, #52	; 0x34
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f007 fa3a 	bl	80088d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <SystemClock_Config+0xd4>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a29      	ldr	r2, [pc, #164]	; (8001520 <SystemClock_Config+0xd4>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <SystemClock_Config+0xd4>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <SystemClock_Config+0xd8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001498:	4a22      	ldr	r2, [pc, #136]	; (8001524 <SystemClock_Config+0xd8>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <SystemClock_Config+0xd8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	2301      	movs	r3, #1
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b4:	2310      	movs	r3, #16
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b8:	2302      	movs	r3, #2
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014bc:	2300      	movs	r3, #0
 80014be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014c0:	2310      	movs	r3, #16
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014ca:	2304      	movs	r3, #4
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fc14 	bl	8005d08 <HAL_RCC_OscConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014e6:	f000 f9d7 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ea:	230f      	movs	r3, #15
 80014ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ee:	2302      	movs	r3, #2
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	2102      	movs	r1, #2
 8001506:	4618      	mov	r0, r3
 8001508:	f004 f8b4 	bl	8005674 <HAL_RCC_ClockConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001512:	f000 f9c1 	bl	8001898 <Error_Handler>
  }
}
 8001516:	bf00      	nop
 8001518:	3750      	adds	r7, #80	; 0x50
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	40007000 	.word	0x40007000

08001528 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800153a:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <MX_ADC1_Init+0xd0>)
 800153c:	4a2f      	ldr	r2, [pc, #188]	; (80015fc <MX_ADC1_Init+0xd4>)
 800153e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <MX_ADC1_Init+0xd0>)
 8001542:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001546:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <MX_ADC1_Init+0xd0>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <MX_ADC1_Init+0xd0>)
 8001550:	2201      	movs	r2, #1
 8001552:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <MX_ADC1_Init+0xd0>)
 8001556:	2201      	movs	r2, #1
 8001558:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <MX_ADC1_Init+0xd0>)
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <MX_ADC1_Init+0xd0>)
 8001564:	2200      	movs	r2, #0
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <MX_ADC1_Init+0xd0>)
 800156a:	4a25      	ldr	r2, [pc, #148]	; (8001600 <MX_ADC1_Init+0xd8>)
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <MX_ADC1_Init+0xd0>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <MX_ADC1_Init+0xd0>)
 8001576:	2203      	movs	r2, #3
 8001578:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_ADC1_Init+0xd0>)
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_ADC1_Init+0xd0>)
 8001584:	2201      	movs	r2, #1
 8001586:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001588:	481b      	ldr	r0, [pc, #108]	; (80015f8 <MX_ADC1_Init+0xd0>)
 800158a:	f001 fccb 	bl	8002f24 <HAL_ADC_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001594:	f000 f980 	bl	8001898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001598:	2300      	movs	r3, #0
 800159a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015a0:	2307      	movs	r3, #7
 80015a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	4813      	ldr	r0, [pc, #76]	; (80015f8 <MX_ADC1_Init+0xd0>)
 80015aa:	f001 ffcb 	bl	8003544 <HAL_ADC_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015b4:	f000 f970 	bl	8001898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015bc:	2302      	movs	r3, #2
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <MX_ADC1_Init+0xd0>)
 80015c6:	f001 ffbd 	bl	8003544 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015d0:	f000 f962 	bl	8001898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015d4:	2304      	movs	r3, #4
 80015d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80015d8:	2303      	movs	r3, #3
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_ADC1_Init+0xd0>)
 80015e2:	f001 ffaf 	bl	8003544 <HAL_ADC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80015ec:	f000 f954 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000294 	.word	0x20000294
 80015fc:	40012000 	.word	0x40012000
 8001600:	0f000001 	.word	0x0f000001

08001604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_I2C1_Init+0x50>)
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <MX_I2C1_Init+0x54>)
 800160c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_I2C1_Init+0x50>)
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <MX_I2C1_Init+0x58>)
 8001612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_I2C1_Init+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_I2C1_Init+0x50>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_I2C1_Init+0x50>)
 8001622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_I2C1_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_I2C1_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_I2C1_Init+0x50>)
 8001642:	f002 fff3 	bl	800462c <HAL_I2C_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800164c:	f000 f924 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200002dc 	.word	0x200002dc
 8001658:	40005400 	.word	0x40005400
 800165c:	00061a80 	.word	0x00061a80

08001660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	615a      	str	r2, [r3, #20]
 8001680:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <MX_TIM2_Init+0xac>)
 8001684:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001688:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_TIM2_Init+0xac>)
 800168c:	2253      	movs	r2, #83	; 0x53
 800168e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <MX_TIM2_Init+0xac>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <MX_TIM2_Init+0xac>)
 8001698:	2263      	movs	r2, #99	; 0x63
 800169a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <MX_TIM2_Init+0xac>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <MX_TIM2_Init+0xac>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016a8:	4818      	ldr	r0, [pc, #96]	; (800170c <MX_TIM2_Init+0xac>)
 80016aa:	f004 fdcb 	bl	8006244 <HAL_TIM_PWM_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80016b4:	f000 f8f0 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	4619      	mov	r1, r3
 80016c6:	4811      	ldr	r0, [pc, #68]	; (800170c <MX_TIM2_Init+0xac>)
 80016c8:	f005 fa18 	bl	8006afc <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80016d2:	f000 f8e1 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d6:	2360      	movs	r3, #96	; 0x60
 80016d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2208      	movs	r2, #8
 80016ea:	4619      	mov	r1, r3
 80016ec:	4807      	ldr	r0, [pc, #28]	; (800170c <MX_TIM2_Init+0xac>)
 80016ee:	f004 fec1 	bl	8006474 <HAL_TIM_PWM_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80016f8:	f000 f8ce 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016fc:	4803      	ldr	r0, [pc, #12]	; (800170c <MX_TIM2_Init+0xac>)
 80016fe:	f001 f919 	bl	8002934 <HAL_TIM_MspPostInit>

}
 8001702:	bf00      	nop
 8001704:	3728      	adds	r7, #40	; 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000330 	.word	0x20000330

08001710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <MX_USART2_UART_Init+0x50>)
 8001718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001748:	f005 fa54 	bl	8006bf4 <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001752:	f000 f8a1 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200003d8 	.word	0x200003d8
 8001760:	40004400 	.word	0x40004400

08001764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_DMA_Init+0x3c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <MX_DMA_Init+0x3c>)
 8001774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_DMA_Init+0x3c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	200c      	movs	r0, #12
 800178c:	f002 f9ed 	bl	8003b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001790:	200c      	movs	r0, #12
 8001792:	f002 fa06 	bl	8003ba2 <HAL_NVIC_EnableIRQ>

}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b33      	ldr	r3, [pc, #204]	; (800188c <MX_GPIO_Init+0xe8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a32      	ldr	r2, [pc, #200]	; (800188c <MX_GPIO_Init+0xe8>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b30      	ldr	r3, [pc, #192]	; (800188c <MX_GPIO_Init+0xe8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <MX_GPIO_Init+0xe8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a2b      	ldr	r2, [pc, #172]	; (800188c <MX_GPIO_Init+0xe8>)
 80017e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b29      	ldr	r3, [pc, #164]	; (800188c <MX_GPIO_Init+0xe8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b25      	ldr	r3, [pc, #148]	; (800188c <MX_GPIO_Init+0xe8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a24      	ldr	r2, [pc, #144]	; (800188c <MX_GPIO_Init+0xe8>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <MX_GPIO_Init+0xe8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <MX_GPIO_Init+0xe8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a1d      	ldr	r2, [pc, #116]	; (800188c <MX_GPIO_Init+0xe8>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_GPIO_Init+0xe8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2120      	movs	r1, #32
 800182e:	4818      	ldr	r0, [pc, #96]	; (8001890 <MX_GPIO_Init+0xec>)
 8001830:	f002 fee2 	bl	80045f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800183a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4812      	ldr	r0, [pc, #72]	; (8001894 <MX_GPIO_Init+0xf0>)
 800184c:	f002 fd40 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001850:	2301      	movs	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001854:	2303      	movs	r3, #3
 8001856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	480c      	ldr	r0, [pc, #48]	; (8001894 <MX_GPIO_Init+0xf0>)
 8001864:	f002 fd34 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001868:	2320      	movs	r3, #32
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4804      	ldr	r0, [pc, #16]	; (8001890 <MX_GPIO_Init+0xec>)
 8001880:	f002 fd26 	bl	80042d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	; 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000
 8001894:	40020800 	.word	0x40020800

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <Error_Handler+0x8>
	...

080018a4 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af04      	add	r7, sp, #16
 80018aa:	6078      	str	r0, [r7, #4]
    uint8_t Data;

    // check device ID WHO_AM_I

//    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, HAL_MAX_DELAY);
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80018ac:	2364      	movs	r3, #100	; 0x64
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	2301      	movs	r3, #1
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	f107 030f 	add.w	r3, r7, #15
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	2275      	movs	r2, #117	; 0x75
 80018be:	21d0      	movs	r1, #208	; 0xd0
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f003 f8f1 	bl	8004aa8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b68      	cmp	r3, #104	; 0x68
 80018ca:	d13d      	bne.n	8001948 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80018d0:	2364      	movs	r3, #100	; 0x64
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	2301      	movs	r3, #1
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	f107 030e 	add.w	r3, r7, #14
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	226b      	movs	r2, #107	; 0x6b
 80018e2:	21d0      	movs	r1, #208	; 0xd0
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f002 ffe5 	bl	80048b4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80018ea:	2307      	movs	r3, #7
 80018ec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	9302      	str	r3, [sp, #8]
 80018f2:	2301      	movs	r3, #1
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	f107 030e 	add.w	r3, r7, #14
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2301      	movs	r3, #1
 80018fe:	2219      	movs	r2, #25
 8001900:	21d0      	movs	r1, #208	; 0xd0
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f002 ffd6 	bl	80048b4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001908:	2300      	movs	r3, #0
 800190a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800190c:	2364      	movs	r3, #100	; 0x64
 800190e:	9302      	str	r3, [sp, #8]
 8001910:	2301      	movs	r3, #1
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	f107 030e 	add.w	r3, r7, #14
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2301      	movs	r3, #1
 800191c:	221c      	movs	r2, #28
 800191e:	21d0      	movs	r1, #208	; 0xd0
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f002 ffc7 	bl	80048b4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001926:	2300      	movs	r3, #0
 8001928:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800192a:	2364      	movs	r3, #100	; 0x64
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	f107 030e 	add.w	r3, r7, #14
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	221b      	movs	r2, #27
 800193c:	21d0      	movs	r1, #208	; 0xd0
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f002 ffb8 	bl	80048b4 <HAL_I2C_Mem_Write>
        return 0;
 8001944:	2300      	movs	r3, #0
 8001946:	e003      	b.n	8001950 <MPU6050_Init+0xac>
    }
    else
    {
    	printf("Error in init\n");
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <MPU6050_Init+0xb4>)
 800194a:	f006 fee3 	bl	8008714 <puts>
    }
    return 1;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	0800bad4 	.word	0x0800bad4
 800195c:	00000000 	.word	0x00000000

08001960 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001964:	b094      	sub	sp, #80	; 0x50
 8001966:	af04      	add	r7, sp, #16
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    if (HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout) == HAL_OK)
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	230e      	movs	r3, #14
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2301      	movs	r3, #1
 800197c:	223b      	movs	r2, #59	; 0x3b
 800197e:	21d0      	movs	r1, #208	; 0xd0
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f003 f891 	bl	8004aa8 <HAL_I2C_Mem_Read>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	f040 80af 	bne.w	8001aec <MPU6050_Read_All+0x18c>
    {
		DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800198e:	7a3b      	ldrb	r3, [r7, #8]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	b21a      	sxth	r2, r3
 8001994:	7a7b      	ldrb	r3, [r7, #9]
 8001996:	b21b      	sxth	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b21a      	sxth	r2, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	801a      	strh	r2, [r3, #0]
		DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80019a0:	7abb      	ldrb	r3, [r7, #10]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	7afb      	ldrb	r3, [r7, #11]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b21a      	sxth	r2, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	805a      	strh	r2, [r3, #2]
		DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80019b2:	7b3b      	ldrb	r3, [r7, #12]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	7b7b      	ldrb	r3, [r7, #13]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	b21a      	sxth	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	809a      	strh	r2, [r3, #4]
		temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	86fb      	strh	r3, [r7, #54]	; 0x36
		DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80019d2:	7c3b      	ldrb	r3, [r7, #16]
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	7c7b      	ldrb	r3, [r7, #17]
 80019da:	b21b      	sxth	r3, r3
 80019dc:	4313      	orrs	r3, r2
 80019de:	b21a      	sxth	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	841a      	strh	r2, [r3, #32]
		DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80019e4:	7cbb      	ldrb	r3, [r7, #18]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	7cfb      	ldrb	r3, [r7, #19]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	845a      	strh	r2, [r3, #34]	; 0x22
		DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80019f6:	7d3b      	ldrb	r3, [r7, #20]
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	b21a      	sxth	r2, r3
 80019fc:	7d7b      	ldrb	r3, [r7, #21]
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	4313      	orrs	r3, r2
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	849a      	strh	r2, [r3, #36]	; 0x24

		DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fda8 	bl	8000564 <__aeabi_i2d>
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4bbf      	ldr	r3, [pc, #764]	; (8001d18 <MPU6050_Read_All+0x3b8>)
 8001a1a:	f7fe ff37 	bl	800088c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	e9c1 2302 	strd	r2, r3, [r1, #8]
		DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd98 	bl	8000564 <__aeabi_i2d>
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4bb7      	ldr	r3, [pc, #732]	; (8001d18 <MPU6050_Read_All+0x3b8>)
 8001a3a:	f7fe ff27 	bl	800088c <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	e9c1 2304 	strd	r2, r3, [r1, #16]
		DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd88 	bl	8000564 <__aeabi_i2d>
 8001a54:	a3aa      	add	r3, pc, #680	; (adr r3, 8001d00 <MPU6050_Read_All+0x3a0>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7fe ff17 	bl	800088c <__aeabi_ddiv>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	6839      	ldr	r1, [r7, #0]
 8001a64:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001a68:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a74:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8001d1c <MPU6050_Read_All+0x3bc>
 8001a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7c:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001d20 <MPU6050_Read_All+0x3c0>
 8001a80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd67 	bl	8000564 <__aeabi_i2d>
 8001a96:	a39c      	add	r3, pc, #624	; (adr r3, 8001d08 <MPU6050_Read_All+0x3a8>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fef6 	bl	800088c <__aeabi_ddiv>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	6839      	ldr	r1, [r7, #0]
 8001aa6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd57 	bl	8000564 <__aeabi_i2d>
 8001ab6:	a394      	add	r3, pc, #592	; (adr r3, 8001d08 <MPU6050_Read_All+0x3a8>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fee6 	bl	800088c <__aeabi_ddiv>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	6839      	ldr	r1, [r7, #0]
 8001ac6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd47 	bl	8000564 <__aeabi_i2d>
 8001ad6:	a38c      	add	r3, pc, #560	; (adr r3, 8001d08 <MPU6050_Read_All+0x3a8>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fed6 	bl	800088c <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	6839      	ldr	r1, [r7, #0]
 8001ae6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001aea:	e002      	b.n	8001af2 <MPU6050_Read_All+0x192>
    }
    else
    	printf("Error on I2C Memory Read\n");
 8001aec:	488d      	ldr	r0, [pc, #564]	; (8001d24 <MPU6050_Read_All+0x3c4>)
 8001aee:	f006 fe11 	bl	8008714 <puts>
    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001af2:	f001 fa0b 	bl	8002f0c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <MPU6050_Read_All+0x3c8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd20 	bl	8000544 <__aeabi_ui2d>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <MPU6050_Read_All+0x3cc>)
 8001b0a:	f7fe febf 	bl	800088c <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001b16:	f001 f9f9 	bl	8002f0c <HAL_GetTick>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a82      	ldr	r2, [pc, #520]	; (8001d28 <MPU6050_Read_All+0x3c8>)
 8001b1e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b26:	461a      	mov	r2, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2e:	fb03 f202 	mul.w	r2, r3, r2
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fd0c 	bl	8000564 <__aeabi_i2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	ec43 2b10 	vmov	d0, r2, r3
 8001b54:	f008 fdee 	bl	800a734 <sqrt>
 8001b58:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b68:	f7fe ffce 	bl	8000b08 <__aeabi_dcmpeq>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d11f      	bne.n	8001bb2 <MPU6050_Read_All+0x252>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fcf3 	bl	8000564 <__aeabi_i2d>
 8001b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b82:	f7fe fe83 	bl	800088c <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	ec43 2b17 	vmov	d7, r2, r3
 8001b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b92:	eef0 0a67 	vmov.f32	s1, s15
 8001b96:	f008 fdfb 	bl	800a790 <atan>
 8001b9a:	ec51 0b10 	vmov	r0, r1, d0
 8001b9e:	a35c      	add	r3, pc, #368	; (adr r3, 8001d10 <MPU6050_Read_All+0x3b0>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fd48 	bl	8000638 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001bb0:	e005      	b.n	8001bbe <MPU6050_Read_All+0x25e>
    }
    else
    {
        roll = 0.0;
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc4:	425b      	negs	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fccc 	bl	8000564 <__aeabi_i2d>
 8001bcc:	4682      	mov	sl, r0
 8001bce:	468b      	mov	fp, r1
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fcc4 	bl	8000564 <__aeabi_i2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	ec43 2b11 	vmov	d1, r2, r3
 8001be4:	ec4b ab10 	vmov	d0, sl, fp
 8001be8:	f008 fd32 	bl	800a650 <atan2>
 8001bec:	ec51 0b10 	vmov	r0, r1, d0
 8001bf0:	a347      	add	r3, pc, #284	; (adr r3, 8001d10 <MPU6050_Read_All+0x3b0>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fd1f 	bl	8000638 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <MPU6050_Read_All+0x3d0>)
 8001c08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c0c:	f7fe ff86 	bl	8000b1c <__aeabi_dcmplt>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00a      	beq.n	8001c2c <MPU6050_Read_All+0x2cc>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <MPU6050_Read_All+0x3d4>)
 8001c22:	f7fe ff99 	bl	8000b58 <__aeabi_dcmpgt>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d114      	bne.n	8001c56 <MPU6050_Read_All+0x2f6>
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <MPU6050_Read_All+0x3d4>)
 8001c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c36:	f7fe ff8f 	bl	8000b58 <__aeabi_dcmpgt>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d015      	beq.n	8001c6c <MPU6050_Read_All+0x30c>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <MPU6050_Read_All+0x3d0>)
 8001c4c:	f7fe ff66 	bl	8000b1c <__aeabi_dcmplt>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <MPU6050_Read_All+0x30c>
    {
        KalmanY.angle = pitch;
 8001c56:	4938      	ldr	r1, [pc, #224]	; (8001d38 <MPU6050_Read_All+0x3d8>)
 8001c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c66:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001c6a:	e014      	b.n	8001c96 <MPU6050_Read_All+0x336>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001c72:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001c76:	eeb0 1a47 	vmov.f32	s2, s14
 8001c7a:	eef0 1a67 	vmov.f32	s3, s15
 8001c7e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c82:	482d      	ldr	r0, [pc, #180]	; (8001d38 <MPU6050_Read_All+0x3d8>)
 8001c84:	f000 f85c 	bl	8001d40 <Kalman_getAngle>
 8001c88:	eeb0 7a40 	vmov.f32	s14, s0
 8001c8c:	eef0 7a60 	vmov.f32	s15, s1
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001c9c:	4690      	mov	r8, r2
 8001c9e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <MPU6050_Read_All+0x3d4>)
 8001ca8:	4640      	mov	r0, r8
 8001caa:	4649      	mov	r1, r9
 8001cac:	f7fe ff54 	bl	8000b58 <__aeabi_dcmpgt>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <MPU6050_Read_All+0x368>
        DataStruct->Gx = -DataStruct->Gx;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001cce:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001cd2:	eeb0 1a47 	vmov.f32	s2, s14
 8001cd6:	eef0 1a67 	vmov.f32	s3, s15
 8001cda:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001cde:	4817      	ldr	r0, [pc, #92]	; (8001d3c <MPU6050_Read_All+0x3dc>)
 8001ce0:	f000 f82e 	bl	8001d40 <Kalman_getAngle>
 8001ce4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ce8:	eef0 7a60 	vmov.f32	s15, s1
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001cf2:	bf00      	nop
 8001cf4:	3740      	adds	r7, #64	; 0x40
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cfc:	f3af 8000 	nop.w
 8001d00:	00000000 	.word	0x00000000
 8001d04:	40cc2900 	.word	0x40cc2900
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	40606000 	.word	0x40606000
 8001d10:	1a63c1f8 	.word	0x1a63c1f8
 8001d14:	404ca5dc 	.word	0x404ca5dc
 8001d18:	40d00000 	.word	0x40d00000
 8001d1c:	43aa0000 	.word	0x43aa0000
 8001d20:	42121eb8 	.word	0x42121eb8
 8001d24:	0800bae4 	.word	0x0800bae4
 8001d28:	200004c0 	.word	0x200004c0
 8001d2c:	408f4000 	.word	0x408f4000
 8001d30:	c0568000 	.word	0xc0568000
 8001d34:	40568000 	.word	0x40568000
 8001d38:	20000048 	.word	0x20000048
 8001d3c:	20000000 	.word	0x20000000

08001d40 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b096      	sub	sp, #88	; 0x58
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	61f8      	str	r0, [r7, #28]
 8001d48:	ed87 0b04 	vstr	d0, [r7, #16]
 8001d4c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001d50:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d5e:	f7fe fab3 	bl	80002c8 <__aeabi_dsub>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d78:	f7fe fc5e 	bl	8000638 <__aeabi_dmul>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7fe faa2 	bl	80002cc <__adddf3>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	69f9      	ldr	r1, [r7, #28]
 8001d8e:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001da2:	f7fe fc49 	bl	8000638 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001db4:	f7fe fa88 	bl	80002c8 <__aeabi_dsub>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001dc6:	f7fe fa7f 	bl	80002c8 <__aeabi_dsub>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fa78 	bl	80002cc <__adddf3>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001de8:	f7fe fc26 	bl	8000638 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4620      	mov	r0, r4
 8001df2:	4629      	mov	r1, r5
 8001df4:	f7fe fa6a 	bl	80002cc <__adddf3>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	69f9      	ldr	r1, [r7, #28]
 8001dfe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e12:	f7fe fc11 	bl	8000638 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	f7fe fa53 	bl	80002c8 <__aeabi_dsub>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	69f9      	ldr	r1, [r7, #28]
 8001e28:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e3c:	f7fe fbfc 	bl	8000638 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4620      	mov	r0, r4
 8001e46:	4629      	mov	r1, r5
 8001e48:	f7fe fa3e 	bl	80002c8 <__aeabi_dsub>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	69f9      	ldr	r1, [r7, #28]
 8001e52:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e66:	f7fe fbe7 	bl	8000638 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fa2b 	bl	80002cc <__adddf3>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	69f9      	ldr	r1, [r7, #28]
 8001e7c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e8c:	f7fe fa1e 	bl	80002cc <__adddf3>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001e9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ea2:	f7fe fcf3 	bl	800088c <__aeabi_ddiv>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001eb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001eb8:	f7fe fce8 	bl	800088c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001eca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ece:	f7fe f9fb 	bl	80002c8 <__aeabi_dsub>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001ee0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ee4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ee8:	f7fe fba6 	bl	8000638 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	f7fe f9ea 	bl	80002cc <__adddf3>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	69f9      	ldr	r1, [r7, #28]
 8001efe:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001f08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f10:	f7fe fb92 	bl	8000638 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4620      	mov	r0, r4
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	f7fe f9d6 	bl	80002cc <__adddf3>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	69f9      	ldr	r1, [r7, #28]
 8001f26:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f30:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001f44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f4c:	f7fe fb74 	bl	8000638 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe f9b6 	bl	80002c8 <__aeabi_dsub>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	69f9      	ldr	r1, [r7, #28]
 8001f62:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f6c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f74:	f7fe fb60 	bl	8000638 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	4629      	mov	r1, r5
 8001f80:	f7fe f9a2 	bl	80002c8 <__aeabi_dsub>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	69f9      	ldr	r1, [r7, #28]
 8001f8a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f94:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f9c:	f7fe fb4c 	bl	8000638 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	f7fe f98e 	bl	80002c8 <__aeabi_dsub>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	69f9      	ldr	r1, [r7, #28]
 8001fb2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001fbc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fc0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fc4:	f7fe fb38 	bl	8000638 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4620      	mov	r0, r4
 8001fce:	4629      	mov	r1, r5
 8001fd0:	f7fe f97a 	bl	80002c8 <__aeabi_dsub>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	69f9      	ldr	r1, [r7, #28]
 8001fda:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001fe4:	ec43 2b17 	vmov	d7, r2, r3
};
 8001fe8:	eeb0 0a47 	vmov.f32	s0, s14
 8001fec:	eef0 0a67 	vmov.f32	s1, s15
 8001ff0:	3758      	adds	r7, #88	; 0x58
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bdb0      	pop	{r4, r5, r7, pc}

08001ff6 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	uPID->LastInput = *uPID->MyInput;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->LastError = *uPID->MySetpoint - *uPID->MyInput;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe f94d 	bl	80002c8 <__aeabi_dsub>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	if (uPID->OutputSum > uPID->OutMax)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002044:	f7fe fd88 	bl	8000b58 <__aeabi_dcmpgt>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <PID_Init+0x66>
	{
		uPID->OutputSum = uPID->OutMax;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 800205a:	e011      	b.n	8002080 <PID_Init+0x8a>
	else if (uPID->OutputSum < uPID->OutMin)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002068:	f7fe fd58 	bl	8000b1c <__aeabi_dcmplt>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d100      	bne.n	8002074 <PID_Init+0x7e>
}
 8002072:	e005      	b.n	8002080 <PID_Init+0x8a>
		uPID->OutputSum = uPID->OutMin;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6278      	str	r0, [r7, #36]	; 0x24
 8002090:	6239      	str	r1, [r7, #32]
 8002092:	61fa      	str	r2, [r7, #28]
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	ed87 0b04 	vstr	d0, [r7, #16]
 800209a:	ed87 1b02 	vstr	d1, [r7, #8]
 800209e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	64da      	str	r2, [r3, #76]	; 0x4c
	uPID->MyInput    = Input;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	6a3a      	ldr	r2, [r7, #32]
 80020ac:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->MySetpoint = Setpoint;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	651a      	str	r2, [r3, #80]	; 0x50
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	2200      	movs	r2, #0
 80020b8:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80020ba:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002110 <PID+0x88>
 80020be:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002118 <PID+0x90>
 80020c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020c4:	f000 f976 	bl	80023b4 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	2264      	movs	r2, #100	; 0x64
 80020cc:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 80020ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020d2:	4619      	mov	r1, r3
 80020d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020d6:	f000 fa9d 	bl	8002614 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80020da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80020de:	4619      	mov	r1, r3
 80020e0:	ed97 2b00 	vldr	d2, [r7]
 80020e4:	ed97 1b02 	vldr	d1, [r7, #8]
 80020e8:	ed97 0b04 	vldr	d0, [r7, #16]
 80020ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020ee:	f000 f9e9 	bl	80024c4 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 80020f2:	f000 ff0b 	bl	8002f0c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	1ad2      	subs	r2, r2, r3
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	605a      	str	r2, [r3, #4]

}
 8002102:	bf00      	nop
 8002104:	3728      	adds	r7, #40	; 0x28
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	f3af 8000 	nop.w
 8002110:	00000000 	.word	0x00000000
 8002114:	406fe000 	.word	0x406fe000
	...

08002120 <PID_Compute>:
//	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
//}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002120:	b5b0      	push	{r4, r5, r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	785b      	ldrb	r3, [r3, #1]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <PID_Compute+0x14>
	{
		return _FALSE;
 8002130:	2300      	movs	r3, #0
 8002132:	e114      	b.n	800235e <PID_Compute+0x23e>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002134:	f000 feea 	bl	8002f0c <HAL_GetTick>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	6a3a      	ldr	r2, [r7, #32]
 800214a:	429a      	cmp	r2, r3
 800214c:	f0c0 8106 	bcc.w	800235c <PID_Compute+0x23c>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002160:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002168:	f7fe f8ae 	bl	80002c8 <__aeabi_dsub>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	e9c7 2304 	strd	r2, r3, [r7, #16]
//		dInput  = (input - uPID->LastInput);
		dInput  = (error - uPID->LastError);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800217a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800217e:	f7fe f8a3 	bl	80002c8 <__aeabi_dsub>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (error < -5 || error > 5 || error == 0)
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	4b78      	ldr	r3, [pc, #480]	; (8002370 <PID_Compute+0x250>)
 8002190:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002194:	f7fe fcc2 	bl	8000b1c <__aeabi_dcmplt>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d114      	bne.n	80021c8 <PID_Compute+0xa8>
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b74      	ldr	r3, [pc, #464]	; (8002374 <PID_Compute+0x254>)
 80021a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021a8:	f7fe fcd6 	bl	8000b58 <__aeabi_dcmpgt>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10a      	bne.n	80021c8 <PID_Compute+0xa8>
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021be:	f7fe fca3 	bl	8000b08 <__aeabi_dcmpeq>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <PID_Compute+0xb8>
			uPID->OutputSum = 0;
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80021d6:	e01d      	b.n	8002214 <PID_Compute+0xf4>
		else
			uPID->OutputSum += (uPID->Ki * error * 300);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80021e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021e8:	f7fe fa26 	bl	8000638 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	a35c      	add	r3, pc, #368	; (adr r3, 8002368 <PID_Compute+0x248>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	f7fe fa1d 	bl	8000638 <__aeabi_dmul>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4620      	mov	r0, r4
 8002204:	4629      	mov	r1, r5
 8002206:	f7fe f861 	bl	80002cc <__adddf3>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d114      	bne.n	8002246 <PID_Compute+0x126>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800222c:	f7fe fa04 	bl	8000638 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4620      	mov	r0, r4
 8002236:	4629      	mov	r1, r5
 8002238:	f7fe f846 	bl	80002c8 <__aeabi_dsub>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		}

		if (uPID->OutputSum > uPID->OutMax)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002252:	f7fe fc81 	bl	8000b58 <__aeabi_dcmpgt>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <PID_Compute+0x14a>
		{
			uPID->OutputSum = uPID->OutMax;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8002268:	e010      	b.n	800228c <PID_Compute+0x16c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002276:	f7fe fc51 	bl	8000b1c <__aeabi_dcmplt>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <PID_Compute+0x16c>
		{
			uPID->OutputSum = uPID->OutMin;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		}
		else { }

		if (uPID->POnE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <PID_Compute+0x18c>
		{
			output = uPID->Kp * error;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800229a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800229e:	f7fe f9cb 	bl	8000638 <__aeabi_dmul>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80022aa:	e005      	b.n	80022b8 <PID_Compute+0x198>
		}
		else
		{
			output = 0;
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput / 300;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80022c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c8:	f7fe f9b6 	bl	8000638 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	a324      	add	r3, pc, #144	; (adr r3, 8002368 <PID_Compute+0x248>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f7fe fad7 	bl	800088c <__aeabi_ddiv>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4620      	mov	r0, r4
 80022e4:	4629      	mov	r1, r5
 80022e6:	f7fd ffef 	bl	80002c8 <__aeabi_dsub>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022f2:	f7fd ffeb 	bl	80002cc <__adddf3>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002308:	f7fe fc26 	bl	8000b58 <__aeabi_dcmpgt>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <PID_Compute+0x1fe>
		{
			output = uPID->OutMax;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002318:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800231c:	e00e      	b.n	800233c <PID_Compute+0x21c>
		}
		else if (output < uPID->OutMin)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002324:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002328:	f7fe fbf8 	bl	8000b1c <__aeabi_dcmplt>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d004      	beq.n	800233c <PID_Compute+0x21c>
		{
			output = uPID->OutMin;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002338:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		*uPID->MyOutput = output;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002344:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800234e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		uPID->LastTime = now;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002356:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <PID_Compute+0x23e>

	}
	else
	{
		return _FALSE;
 800235c:	2300      	movs	r3, #0
	}

}
 800235e:	4618      	mov	r0, r3
 8002360:	3730      	adds	r7, #48	; 0x30
 8002362:	46bd      	mov	sp, r7
 8002364:	bdb0      	pop	{r4, r5, r7, pc}
 8002366:	bf00      	nop
 8002368:	00000000 	.word	0x00000000
 800236c:	4072c000 	.word	0x4072c000
 8002370:	c0140000 	.word	0xc0140000
 8002374:	40140000 	.word	0x40140000

08002378 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	2b01      	cmp	r3, #1
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <PID_SetMode+0x2e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	785b      	ldrb	r3, [r3, #1]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fe28 	bl	8001ff6 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	705a      	strb	r2, [r3, #1]

}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6178      	str	r0, [r7, #20]
 80023bc:	ed87 0b02 	vstr	d0, [r7, #8]
 80023c0:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80023c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023cc:	f7fe fbba 	bl	8000b44 <__aeabi_dcmpge>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d158      	bne.n	8002488 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 80023d6:	6979      	ldr	r1, [r7, #20]
 80023d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023dc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	uPID->OutMax = Max;
 80023e0:	6979      	ldr	r1, [r7, #20]
 80023e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023e6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d04b      	beq.n	800248a <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002400:	f7fe fbaa 	bl	8000b58 <__aeabi_dcmpgt>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002414:	e9c1 2300 	strd	r2, r3, [r1]
 8002418:	e012      	b.n	8002440 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002428:	f7fe fb78 	bl	8000b1c <__aeabi_dcmplt>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d006      	beq.n	8002440 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800243c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800244c:	f7fe fb84 	bl	8000b58 <__aeabi_dcmpgt>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800245c:	6979      	ldr	r1, [r7, #20]
 800245e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8002462:	e012      	b.n	800248a <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002470:	f7fe fb54 	bl	8000b1c <__aeabi_dcmplt>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002480:	6979      	ldr	r1, [r7, #20]
 8002482:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8002486:	e000      	b.n	800248a <PID_SetOutputLimits+0xd6>
		return;
 8002488:	bf00      	nop
		}
		else { }

	}

}
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <PID_SetTunings>:

/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	61f8      	str	r0, [r7, #28]
 8002498:	ed87 0b04 	vstr	d0, [r7, #16]
 800249c:	ed87 1b02 	vstr	d1, [r7, #8]
 80024a0:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	789b      	ldrb	r3, [r3, #2]
 80024a8:	4619      	mov	r1, r3
 80024aa:	ed97 2b00 	vldr	d2, [r7]
 80024ae:	ed97 1b02 	vldr	d1, [r7, #8]
 80024b2:	ed97 0b04 	vldr	d0, [r7, #16]
 80024b6:	69f8      	ldr	r0, [r7, #28]
 80024b8:	f000 f804 	bl	80024c4 <PID_SetTunings2>
}
 80024bc:	bf00      	nop
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	61f8      	str	r0, [r7, #28]
 80024cc:	ed87 0b04 	vstr	d0, [r7, #16]
 80024d0:	ed87 1b02 	vstr	d1, [r7, #8]
 80024d4:	ed87 2b00 	vstr	d2, [r7]
 80024d8:	460b      	mov	r3, r1
 80024da:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024e8:	f7fe fb18 	bl	8000b1c <__aeabi_dcmplt>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 8089 	bne.w	8002606 <PID_SetTunings2+0x142>
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002500:	f7fe fb0c 	bl	8000b1c <__aeabi_dcmplt>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d17d      	bne.n	8002606 <PID_SetTunings2+0x142>
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002516:	f7fe fb01 	bl	8000b1c <__aeabi_dcmplt>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d172      	bne.n	8002606 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	7efa      	ldrb	r2, [r7, #27]
 8002524:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002526:	7efb      	ldrb	r3, [r7, #27]
 8002528:	2b01      	cmp	r3, #1
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002538:	69f9      	ldr	r1, [r7, #28]
 800253a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800253e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002542:	69f9      	ldr	r1, [r7, #28]
 8002544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002548:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800254c:	69f9      	ldr	r1, [r7, #28]
 800254e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002552:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd fff2 	bl	8000544 <__aeabi_ui2d>
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <PID_SetTunings2+0x14c>)
 8002566:	f7fe f991 	bl	800088c <__aeabi_ddiv>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8002572:	69f9      	ldr	r1, [r7, #28]
 8002574:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002578:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800257c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002580:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002584:	f7fe f858 	bl	8000638 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	69f9      	ldr	r1, [r7, #28]
 800258e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002596:	e9d7 0100 	ldrd	r0, r1, [r7]
 800259a:	f7fe f977 	bl	800088c <__aeabi_ddiv>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	69f9      	ldr	r1, [r7, #28]
 80025a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	78db      	ldrb	r3, [r3, #3]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d12b      	bne.n	8002608 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80025b6:	f04f 0000 	mov.w	r0, #0
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	f7fd fe83 	bl	80002c8 <__aeabi_dsub>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	69f9      	ldr	r1, [r7, #28]
 80025c8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	f7fd fe75 	bl	80002c8 <__aeabi_dsub>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	69f9      	ldr	r1, [r7, #28]
 80025e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80025ee:	f04f 0000 	mov.w	r0, #0
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	f7fd fe67 	bl	80002c8 <__aeabi_dsub>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	69f9      	ldr	r1, [r7, #28]
 8002600:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002604:	e000      	b.n	8002608 <PID_SetTunings2+0x144>
		return;
 8002606:	bf00      	nop

	}

}
 8002608:	3728      	adds	r7, #40	; 0x28
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	408f4000 	.word	0x408f4000

08002614 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02e      	beq.n	8002686 <PID_SetControllerDirection+0x72>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	78db      	ldrb	r3, [r3, #3]
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	429a      	cmp	r2, r3
 8002630:	d029      	beq.n	8002686 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002638:	f04f 0000 	mov.w	r0, #0
 800263c:	f04f 0100 	mov.w	r1, #0
 8002640:	f7fd fe42 	bl	80002c8 <__aeabi_dsub>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002654:	f04f 0000 	mov.w	r0, #0
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	f7fd fe34 	bl	80002c8 <__aeabi_dsub>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002670:	f04f 0000 	mov.w	r0, #0
 8002674:	f04f 0100 	mov.w	r1, #0
 8002678:	f7fd fe26 	bl	80002c8 <__aeabi_dsub>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	70da      	strb	r2, [r3, #3]

}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002694:	b5b0      	push	{r4, r5, r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	dd2e      	ble.n	8002702 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80026a4:	6838      	ldr	r0, [r7, #0]
 80026a6:	f7fd ff5d 	bl	8000564 <__aeabi_i2d>
 80026aa:	4604      	mov	r4, r0
 80026ac:	460d      	mov	r5, r1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd ff46 	bl	8000544 <__aeabi_ui2d>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4620      	mov	r0, r4
 80026be:	4629      	mov	r1, r5
 80026c0:	f7fe f8e4 	bl	800088c <__aeabi_ddiv>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80026d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d6:	f7fd ffaf 	bl	8000638 <__aeabi_dmul>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80026ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ee:	f7fe f8cd 	bl	800088c <__aeabi_ddiv>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]

	}

}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800270c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_MspInit+0x4c>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_MspInit+0x4c>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_MspInit+0x4c>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_MspInit+0x4c>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_MspInit+0x4c>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_MspInit+0x4c>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800274a:	2007      	movs	r0, #7
 800274c:	f001 fa02 	bl	8003b54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800

0800275c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <HAL_ADC_MspInit+0x8c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d12f      	bne.n	80027de <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_ADC_MspInit+0x90>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a19      	ldr	r2, [pc, #100]	; (80027ec <HAL_ADC_MspInit+0x90>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_ADC_MspInit+0x90>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_ADC_MspInit+0x90>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_ADC_MspInit+0x90>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_ADC_MspInit+0x90>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80027b6:	2313      	movs	r3, #19
 80027b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ba:	2303      	movs	r3, #3
 80027bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	4809      	ldr	r0, [pc, #36]	; (80027f0 <HAL_ADC_MspInit+0x94>)
 80027ca:	f001 fd81 	bl	80042d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	2012      	movs	r0, #18
 80027d4:	f001 f9c9 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80027d8:	2012      	movs	r0, #18
 80027da:	f001 f9e2 	bl	8003ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027de:	bf00      	nop
 80027e0:	3728      	adds	r7, #40	; 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40012000 	.word	0x40012000
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020000 	.word	0x40020000

080027f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a19      	ldr	r2, [pc, #100]	; (8002878 <HAL_I2C_MspInit+0x84>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d12c      	bne.n	8002870 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_I2C_MspInit+0x88>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <HAL_I2C_MspInit+0x88>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_I2C_MspInit+0x88>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002838:	2312      	movs	r3, #18
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002844:	2304      	movs	r3, #4
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	480c      	ldr	r0, [pc, #48]	; (8002880 <HAL_I2C_MspInit+0x8c>)
 8002850:	f001 fd3e 	bl	80042d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_I2C_MspInit+0x88>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_I2C_MspInit+0x88>)
 800285e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002862:	6413      	str	r3, [r2, #64]	; 0x40
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_I2C_MspInit+0x88>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002870:	bf00      	nop
 8002872:	3728      	adds	r7, #40	; 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40005400 	.word	0x40005400
 800287c:	40023800 	.word	0x40023800
 8002880:	40020400 	.word	0x40020400

08002884 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d143      	bne.n	800291e <HAL_TIM_PWM_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	4b23      	ldr	r3, [pc, #140]	; (8002928 <HAL_TIM_PWM_MspInit+0xa4>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a22      	ldr	r2, [pc, #136]	; (8002928 <HAL_TIM_PWM_MspInit+0xa4>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_TIM_PWM_MspInit+0xa4>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH3 Init */
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 80028b4:	4a1e      	ldr	r2, [pc, #120]	; (8002930 <HAL_TIM_PWM_MspInit+0xac>)
 80028b6:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 80028ba:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80028be:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 80028ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d2:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 80028d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028da:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 80028de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028e2:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f0:	4b0e      	ldr	r3, [pc, #56]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80028f6:	480d      	ldr	r0, [pc, #52]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 80028f8:	f001 f96e 	bl	8003bd8 <HAL_DMA_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8002902:	f7fe ffc9 	bl	8001898 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 800290a:	621a      	str	r2, [r3, #32]
 800290c:	4a07      	ldr	r2, [pc, #28]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a05      	ldr	r2, [pc, #20]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <HAL_TIM_PWM_MspInit+0xa8>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	20000378 	.word	0x20000378
 8002930:	40026028 	.word	0x40026028

08002934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002954:	d11e      	bne.n	8002994 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_TIM_MspPostInit+0x68>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a0f      	ldr	r2, [pc, #60]	; (800299c <HAL_TIM_MspPostInit+0x68>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HAL_TIM_MspPostInit+0x68>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002976:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002984:	2301      	movs	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	4619      	mov	r1, r3
 800298e:	4804      	ldr	r0, [pc, #16]	; (80029a0 <HAL_TIM_MspPostInit+0x6c>)
 8002990:	f001 fc9e 	bl	80042d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002994:	bf00      	nop
 8002996:	3720      	adds	r7, #32
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800
 80029a0:	40020400 	.word	0x40020400

080029a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <HAL_UART_MspInit+0x94>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d133      	bne.n	8002a2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <HAL_UART_MspInit+0x98>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <HAL_UART_MspInit+0x98>)
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_UART_MspInit+0x98>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <HAL_UART_MspInit+0x98>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <HAL_UART_MspInit+0x98>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_UART_MspInit+0x98>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029fe:	230c      	movs	r3, #12
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a0e:	2307      	movs	r3, #7
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	4809      	ldr	r0, [pc, #36]	; (8002a40 <HAL_UART_MspInit+0x9c>)
 8002a1a:	f001 fc59 	bl	80042d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	2026      	movs	r0, #38	; 0x26
 8002a24:	f001 f8a1 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a28:	2026      	movs	r0, #38	; 0x26
 8002a2a:	f001 f8ba 	bl	8003ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a2e:	bf00      	nop
 8002a30:	3728      	adds	r7, #40	; 0x28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40004400 	.word	0x40004400
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020000 	.word	0x40020000

08002a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a48:	e7fe      	b.n	8002a48 <NMI_Handler+0x4>

08002a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a4e:	e7fe      	b.n	8002a4e <HardFault_Handler+0x4>

08002a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <MemManage_Handler+0x4>

08002a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a5a:	e7fe      	b.n	8002a5a <BusFault_Handler+0x4>

08002a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <UsageFault_Handler+0x4>

08002a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a90:	f000 fa28 	bl	8002ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8002a9c:	4802      	ldr	r0, [pc, #8]	; (8002aa8 <DMA1_Stream1_IRQHandler+0x10>)
 8002a9e:	f001 f9db 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000378 	.word	0x20000378

08002aac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ab0:	4802      	ldr	r0, [pc, #8]	; (8002abc <ADC_IRQHandler+0x10>)
 8002ab2:	f000 fc0b 	bl	80032cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000294 	.word	0x20000294

08002ac0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ac4:	4802      	ldr	r0, [pc, #8]	; (8002ad0 <USART2_IRQHandler+0x10>)
 8002ac6:	f004 f971 	bl	8006dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200003d8 	.word	0x200003d8

08002ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return 1;
 8002ad8:	2301      	movs	r3, #1
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <_kill>:

int _kill(int pid, int sig)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aee:	f005 ff43 	bl	8008978 <__errno>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2216      	movs	r2, #22
 8002af6:	601a      	str	r2, [r3, #0]
  return -1;
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_exit>:

void _exit (int status)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ffe7 	bl	8002ae4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b16:	e7fe      	b.n	8002b16 <_exit+0x12>

08002b18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e00a      	b.n	8002b40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b2a:	f3af 8000 	nop.w
 8002b2e:	4601      	mov	r1, r0
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	60ba      	str	r2, [r7, #8]
 8002b36:	b2ca      	uxtb	r2, r1
 8002b38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	dbf0      	blt.n	8002b2a <_read+0x12>
  }

  return len;
 8002b48:	687b      	ldr	r3, [r7, #4]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b7a:	605a      	str	r2, [r3, #4]
  return 0;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <_isatty>:

int _isatty(int file)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <_sbrk+0x5c>)
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <_sbrk+0x60>)
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <_sbrk+0x64>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <_sbrk+0x64>)
 8002bda:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <_sbrk+0x68>)
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <_sbrk+0x64>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d207      	bcs.n	8002bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bec:	f005 fec4 	bl	8008978 <__errno>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	e009      	b.n	8002c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <_sbrk+0x64>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <_sbrk+0x64>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <_sbrk+0x64>)
 8002c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20020000 	.word	0x20020000
 8002c1c:	00000400 	.word	0x00000400
 8002c20:	200004c4 	.word	0x200004c4
 8002c24:	20000618 	.word	0x20000618

08002c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <SystemInit+0x20>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <SystemInit+0x20>)
 8002c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <map1>:
//	}
//	return len;
//}

float map1(float x, float in_min, float in_max, float out_min, float out_max, float step)
{
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c56:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c5a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002c5e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002c62:	ed87 2a01 	vstr	s4, [r7, #4]
 8002c66:	edc7 2a00 	vstr	s5, [r7]
    float mapped_value = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002c6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c76:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c7e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c82:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c86:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c96:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c9e:	edc7 7a07 	vstr	s15, [r7, #28]
    return round(mapped_value / step) * step;
 8002ca2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ca6:	edd7 7a00 	vldr	s15, [r7]
 8002caa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002cae:	ee16 0a90 	vmov	r0, s13
 8002cb2:	f7fd fc69 	bl	8000588 <__aeabi_f2d>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	ec43 2b10 	vmov	d0, r2, r3
 8002cbe:	f007 fff5 	bl	800acac <round>
 8002cc2:	ec55 4b10 	vmov	r4, r5, d0
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f7fd fc5e 	bl	8000588 <__aeabi_f2d>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	f7fd fcb0 	bl	8000638 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7fd ffa2 	bl	8000c28 <__aeabi_d2f>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	ee07 3a90 	vmov	s15, r3
}
 8002cea:	eeb0 0a67 	vmov.f32	s0, s15
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bdb0      	pop	{r4, r5, r7, pc}

08002cf4 <ADC_Select_CH0>:

void ADC_Select_CH0(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002d0e:	2307      	movs	r3, #7
 8002d10:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d12:	463b      	mov	r3, r7
 8002d14:	4619      	mov	r1, r3
 8002d16:	4806      	ldr	r0, [pc, #24]	; (8002d30 <ADC_Select_CH0+0x3c>)
 8002d18:	f000 fc14 	bl	8003544 <HAL_ADC_ConfigChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <ADC_Select_CH0+0x32>
	  {
	    Error_Handler();
 8002d22:	f7fe fdb9 	bl	8001898 <Error_Handler>
	  }
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000294 	.word	0x20000294

08002d34 <ADC_Select_CH1>:

void ADC_Select_CH1(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002d4e:	2307      	movs	r3, #7
 8002d50:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d52:	463b      	mov	r3, r7
 8002d54:	4619      	mov	r1, r3
 8002d56:	4806      	ldr	r0, [pc, #24]	; (8002d70 <ADC_Select_CH1+0x3c>)
 8002d58:	f000 fbf4 	bl	8003544 <HAL_ADC_ConfigChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <ADC_Select_CH1+0x32>
	  {
	    Error_Handler();
 8002d62:	f7fe fd99 	bl	8001898 <Error_Handler>
	  }
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000294 	.word	0x20000294

08002d74 <ADC_Select_CH4>:

void ADC_Select_CH4(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002d7a:	463b      	mov	r3, r7
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8002d86:	2304      	movs	r3, #4
 8002d88:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002d8e:	2307      	movs	r3, #7
 8002d90:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d92:	463b      	mov	r3, r7
 8002d94:	4619      	mov	r1, r3
 8002d96:	4806      	ldr	r0, [pc, #24]	; (8002db0 <ADC_Select_CH4+0x3c>)
 8002d98:	f000 fbd4 	bl	8003544 <HAL_ADC_ConfigChannel>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <ADC_Select_CH4+0x32>
	  {
	    Error_Handler();
 8002da2:	f7fe fd79 	bl	8001898 <Error_Handler>
	  }
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000294 	.word	0x20000294

08002db4 <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	69b9      	ldr	r1, [r7, #24]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	1a8a      	subs	r2, r1, r2
 8002dce:	fb03 f202 	mul.w	r2, r3, r2
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1acb      	subs	r3, r1, r3
 8002dd8:	fb92 f2f3 	sdiv	r2, r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4413      	add	r3, r2
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002df0:	f7ff ff1a 	bl	8002c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002df4:	480c      	ldr	r0, [pc, #48]	; (8002e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002df6:	490d      	ldr	r1, [pc, #52]	; (8002e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002df8:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dfc:	e002      	b.n	8002e04 <LoopCopyDataInit>

08002dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e02:	3304      	adds	r3, #4

08002e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e08:	d3f9      	bcc.n	8002dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e0c:	4c0a      	ldr	r4, [pc, #40]	; (8002e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e10:	e001      	b.n	8002e16 <LoopFillZerobss>

08002e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e14:	3204      	adds	r2, #4

08002e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e18:	d3fb      	bcc.n	8002e12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e1a:	f005 fdb3 	bl	8008984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e1e:	f7fe f9fb 	bl	8001218 <main>
  bx  lr    
 8002e22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e2c:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002e30:	0800bf48 	.word	0x0800bf48
  ldr r2, =_sbss
 8002e34:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8002e38:	20000618 	.word	0x20000618

08002e3c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e3c:	e7fe      	b.n	8002e3c <CAN1_RX0_IRQHandler>
	...

08002e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_Init+0x40>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <HAL_Init+0x40>)
 8002e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_Init+0x40>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <HAL_Init+0x40>)
 8002e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_Init+0x40>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_Init+0x40>)
 8002e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e68:	2003      	movs	r0, #3
 8002e6a:	f000 fe73 	bl	8003b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f000 f808 	bl	8002e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e74:	f7ff fc4a 	bl	800270c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023c00 	.word	0x40023c00

08002e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_InitTick+0x54>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_InitTick+0x58>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4619      	mov	r1, r3
 8002e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fe8b 	bl	8003bbe <HAL_SYSTICK_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e00e      	b.n	8002ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b0f      	cmp	r3, #15
 8002eb6:	d80a      	bhi.n	8002ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	f000 fe53 	bl	8003b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ec4:	4a06      	ldr	r2, [pc, #24]	; (8002ee0 <HAL_InitTick+0x5c>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000090 	.word	0x20000090
 8002edc:	20000098 	.word	0x20000098
 8002ee0:	20000094 	.word	0x20000094

08002ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_IncTick+0x20>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_IncTick+0x24>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_IncTick+0x24>)
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000098 	.word	0x20000098
 8002f08:	200004c8 	.word	0x200004c8

08002f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_GetTick+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	200004c8 	.word	0x200004c8

08002f24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e033      	b.n	8002fa2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fc0a 	bl	800275c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d118      	bne.n	8002f94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f6a:	f023 0302 	bic.w	r3, r3, #2
 8002f6e:	f043 0202 	orr.w	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fc16 	bl	80037a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f023 0303 	bic.w	r3, r3, #3
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
 8002f92:	e001      	b.n	8002f98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_Start+0x1a>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e0b2      	b.n	800312c <HAL_ADC_Start+0x180>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d018      	beq.n	800300e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fec:	4b52      	ldr	r3, [pc, #328]	; (8003138 <HAL_ADC_Start+0x18c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_ADC_Start+0x190>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0c9a      	lsrs	r2, r3, #18
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003000:	e002      	b.n	8003008 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	3b01      	subs	r3, #1
 8003006:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f9      	bne.n	8003002 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d17a      	bne.n	8003112 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003046:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305a:	d106      	bne.n	800306a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	f023 0206 	bic.w	r2, r3, #6
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
 8003068:	e002      	b.n	8003070 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003078:	4b31      	ldr	r3, [pc, #196]	; (8003140 <HAL_ADC_Start+0x194>)
 800307a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003084:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	2b00      	cmp	r3, #0
 8003090:	d12a      	bne.n	80030e8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2b      	ldr	r2, [pc, #172]	; (8003144 <HAL_ADC_Start+0x198>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d015      	beq.n	80030c8 <HAL_ADC_Start+0x11c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a29      	ldr	r2, [pc, #164]	; (8003148 <HAL_ADC_Start+0x19c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d105      	bne.n	80030b2 <HAL_ADC_Start+0x106>
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <HAL_ADC_Start+0x194>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a25      	ldr	r2, [pc, #148]	; (800314c <HAL_ADC_Start+0x1a0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d136      	bne.n	800312a <HAL_ADC_Start+0x17e>
 80030bc:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_ADC_Start+0x194>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d130      	bne.n	800312a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d129      	bne.n	800312a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	e020      	b.n	800312a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_ADC_Start+0x198>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d11b      	bne.n	800312a <HAL_ADC_Start+0x17e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d114      	bne.n	800312a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	e00b      	b.n	800312a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f043 0210 	orr.w	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	20000090 	.word	0x20000090
 800313c:	431bde83 	.word	0x431bde83
 8003140:	40012300 	.word	0x40012300
 8003144:	40012000 	.word	0x40012000
 8003148:	40012100 	.word	0x40012100
 800314c:	40012200 	.word	0x40012200

08003150 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_ADC_Stop+0x16>
 8003162:	2302      	movs	r3, #2
 8003164:	e021      	b.n	80031aa <HAL_ADC_Stop+0x5a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d2:	d113      	bne.n	80031fc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e2:	d10b      	bne.n	80031fc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e063      	b.n	80032c4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80031fc:	f7ff fe86 	bl	8002f0c <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003202:	e021      	b.n	8003248 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320a:	d01d      	beq.n	8003248 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <HAL_ADC_PollForConversion+0x6c>
 8003212:	f7ff fe7b 	bl	8002f0c <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d212      	bcs.n	8003248 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b02      	cmp	r3, #2
 800322e:	d00b      	beq.n	8003248 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f043 0204 	orr.w	r2, r3, #4
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e03d      	b.n	80032c4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d1d6      	bne.n	8003204 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f06f 0212 	mvn.w	r2, #18
 800325e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d123      	bne.n	80032c2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11f      	bne.n	80032c2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800328c:	2b00      	cmp	r3, #0
 800328e:	d006      	beq.n	800329e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800329a:	2b00      	cmp	r3, #0
 800329c:	d111      	bne.n	80032c2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d049      	beq.n	8003396 <HAL_ADC_IRQHandler+0xca>
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d046      	beq.n	8003396 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d12b      	bne.n	8003386 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003332:	2b00      	cmp	r3, #0
 8003334:	d127      	bne.n	8003386 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003340:	2b00      	cmp	r3, #0
 8003342:	d006      	beq.n	8003352 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800334e:	2b00      	cmp	r3, #0
 8003350:	d119      	bne.n	8003386 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0220 	bic.w	r2, r2, #32
 8003360:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d105      	bne.n	8003386 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f043 0201 	orr.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8bd 	bl	8003506 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0212 	mvn.w	r2, #18
 8003394:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d057      	beq.n	800345c <HAL_ADC_IRQHandler+0x190>
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d054      	beq.n	800345c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d139      	bne.n	800344c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d12b      	bne.n	800344c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d124      	bne.n	800344c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800340c:	2b00      	cmp	r3, #0
 800340e:	d11d      	bne.n	800344c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003414:	2b00      	cmp	r3, #0
 8003416:	d119      	bne.n	800344c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003426:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 faa7 	bl	80039a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f06f 020c 	mvn.w	r2, #12
 800345a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d017      	beq.n	80034a2 <HAL_ADC_IRQHandler+0x1d6>
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d014      	beq.n	80034a2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10d      	bne.n	80034a2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f841 	bl	800351a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0201 	mvn.w	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034b0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x218>
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d012      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f06f 0220 	mvn.w	r2, #32
 80034d2:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f82a 	bl	800352e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f06f 0220 	mvn.w	r2, #32
 80034e2:	601a      	str	r2, [r3, #0]
  }
}
 80034e4:	bf00      	nop
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x1c>
 800355c:	2302      	movs	r3, #2
 800355e:	e113      	b.n	8003788 <HAL_ADC_ConfigChannel+0x244>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b09      	cmp	r3, #9
 800356e:	d925      	bls.n	80035bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68d9      	ldr	r1, [r3, #12]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	3b1e      	subs	r3, #30
 8003586:	2207      	movs	r2, #7
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43da      	mvns	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	400a      	ands	r2, r1
 8003594:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68d9      	ldr	r1, [r3, #12]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	4618      	mov	r0, r3
 80035a8:	4603      	mov	r3, r0
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4403      	add	r3, r0
 80035ae:	3b1e      	subs	r3, #30
 80035b0:	409a      	lsls	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	e022      	b.n	8003602 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6919      	ldr	r1, [r3, #16]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	4613      	mov	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	4413      	add	r3, r2
 80035d0:	2207      	movs	r2, #7
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43da      	mvns	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	400a      	ands	r2, r1
 80035de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6919      	ldr	r1, [r3, #16]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	4618      	mov	r0, r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4403      	add	r3, r0
 80035f8:	409a      	lsls	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b06      	cmp	r3, #6
 8003608:	d824      	bhi.n	8003654 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	3b05      	subs	r3, #5
 800361c:	221f      	movs	r2, #31
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43da      	mvns	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	400a      	ands	r2, r1
 800362a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	4618      	mov	r0, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	3b05      	subs	r3, #5
 8003646:	fa00 f203 	lsl.w	r2, r0, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	635a      	str	r2, [r3, #52]	; 0x34
 8003652:	e04c      	b.n	80036ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b0c      	cmp	r3, #12
 800365a:	d824      	bhi.n	80036a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	3b23      	subs	r3, #35	; 0x23
 800366e:	221f      	movs	r2, #31
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43da      	mvns	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	400a      	ands	r2, r1
 800367c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	4618      	mov	r0, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	3b23      	subs	r3, #35	; 0x23
 8003698:	fa00 f203 	lsl.w	r2, r0, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
 80036a4:	e023      	b.n	80036ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	3b41      	subs	r3, #65	; 0x41
 80036b8:	221f      	movs	r2, #31
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43da      	mvns	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	400a      	ands	r2, r1
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	4618      	mov	r0, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	3b41      	subs	r3, #65	; 0x41
 80036e2:	fa00 f203 	lsl.w	r2, r0, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036ee:	4b29      	ldr	r3, [pc, #164]	; (8003794 <HAL_ADC_ConfigChannel+0x250>)
 80036f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a28      	ldr	r2, [pc, #160]	; (8003798 <HAL_ADC_ConfigChannel+0x254>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d10f      	bne.n	800371c <HAL_ADC_ConfigChannel+0x1d8>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b12      	cmp	r3, #18
 8003702:	d10b      	bne.n	800371c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <HAL_ADC_ConfigChannel+0x254>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d12b      	bne.n	800377e <HAL_ADC_ConfigChannel+0x23a>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_ADC_ConfigChannel+0x258>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <HAL_ADC_ConfigChannel+0x1f4>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b11      	cmp	r3, #17
 8003736:	d122      	bne.n	800377e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a11      	ldr	r2, [pc, #68]	; (800379c <HAL_ADC_ConfigChannel+0x258>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d111      	bne.n	800377e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_ADC_ConfigChannel+0x25c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <HAL_ADC_ConfigChannel+0x260>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	0c9a      	lsrs	r2, r3, #18
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003770:	e002      	b.n	8003778 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	3b01      	subs	r3, #1
 8003776:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f9      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40012300 	.word	0x40012300
 8003798:	40012000 	.word	0x40012000
 800379c:	10000012 	.word	0x10000012
 80037a0:	20000090 	.word	0x20000090
 80037a4:	431bde83 	.word	0x431bde83

080037a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037b0:	4b79      	ldr	r3, [pc, #484]	; (8003998 <ADC_Init+0x1f0>)
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	021a      	lsls	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6899      	ldr	r1, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	4a58      	ldr	r2, [pc, #352]	; (800399c <ADC_Init+0x1f4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800384e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6899      	ldr	r1, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	e00f      	b.n	80038a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0202 	bic.w	r2, r2, #2
 80038b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6899      	ldr	r1, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7e1b      	ldrb	r3, [r3, #24]
 80038c0:	005a      	lsls	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01b      	beq.n	800390c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	3b01      	subs	r3, #1
 8003900:	035a      	lsls	r2, r3, #13
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	e007      	b.n	800391c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	3b01      	subs	r3, #1
 8003938:	051a      	lsls	r2, r3, #20
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800395e:	025a      	lsls	r2, r3, #9
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6899      	ldr	r1, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	029a      	lsls	r2, r3, #10
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	40012300 	.word	0x40012300
 800399c:	0f000001 	.word	0x0f000001

080039a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039d0:	4013      	ands	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e6:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	60d3      	str	r3, [r2, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <__NVIC_GetPriorityGrouping+0x18>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f003 0307 	and.w	r3, r3, #7
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	db0b      	blt.n	8003a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	4907      	ldr	r1, [pc, #28]	; (8003a50 <__NVIC_EnableIRQ+0x38>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	2001      	movs	r0, #1
 8003a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	e000e100 	.word	0xe000e100

08003a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	6039      	str	r1, [r7, #0]
 8003a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	db0a      	blt.n	8003a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	490c      	ldr	r1, [pc, #48]	; (8003aa0 <__NVIC_SetPriority+0x4c>)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	0112      	lsls	r2, r2, #4
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	440b      	add	r3, r1
 8003a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a7c:	e00a      	b.n	8003a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	4908      	ldr	r1, [pc, #32]	; (8003aa4 <__NVIC_SetPriority+0x50>)
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	3b04      	subs	r3, #4
 8003a8c:	0112      	lsls	r2, r2, #4
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	440b      	add	r3, r1
 8003a92:	761a      	strb	r2, [r3, #24]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000e100 	.word	0xe000e100
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b089      	sub	sp, #36	; 0x24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f1c3 0307 	rsb	r3, r3, #7
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	bf28      	it	cs
 8003ac6:	2304      	movcs	r3, #4
 8003ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3304      	adds	r3, #4
 8003ace:	2b06      	cmp	r3, #6
 8003ad0:	d902      	bls.n	8003ad8 <NVIC_EncodePriority+0x30>
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3b03      	subs	r3, #3
 8003ad6:	e000      	b.n	8003ada <NVIC_EncodePriority+0x32>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	401a      	ands	r2, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003af0:	f04f 31ff 	mov.w	r1, #4294967295
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	fa01 f303 	lsl.w	r3, r1, r3
 8003afa:	43d9      	mvns	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b00:	4313      	orrs	r3, r2
         );
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3724      	adds	r7, #36	; 0x24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b20:	d301      	bcc.n	8003b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b22:	2301      	movs	r3, #1
 8003b24:	e00f      	b.n	8003b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <SysTick_Config+0x40>)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b2e:	210f      	movs	r1, #15
 8003b30:	f04f 30ff 	mov.w	r0, #4294967295
 8003b34:	f7ff ff8e 	bl	8003a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <SysTick_Config+0x40>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b3e:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <SysTick_Config+0x40>)
 8003b40:	2207      	movs	r2, #7
 8003b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	e000e010 	.word	0xe000e010

08003b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff29 	bl	80039b4 <__NVIC_SetPriorityGrouping>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	4603      	mov	r3, r0
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b7c:	f7ff ff3e 	bl	80039fc <__NVIC_GetPriorityGrouping>
 8003b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	6978      	ldr	r0, [r7, #20]
 8003b88:	f7ff ff8e 	bl	8003aa8 <NVIC_EncodePriority>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff ff5d 	bl	8003a54 <__NVIC_SetPriority>
}
 8003b9a:	bf00      	nop
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	4603      	mov	r3, r0
 8003baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff31 	bl	8003a18 <__NVIC_EnableIRQ>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ffa2 	bl	8003b10 <SysTick_Config>
 8003bcc:	4603      	mov	r3, r0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003be4:	f7ff f992 	bl	8002f0c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e099      	b.n	8003d28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c14:	e00f      	b.n	8003c36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c16:	f7ff f979 	bl	8002f0c <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b05      	cmp	r3, #5
 8003c22:	d908      	bls.n	8003c36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e078      	b.n	8003d28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e8      	bne.n	8003c16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <HAL_DMA_Init+0x158>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d107      	bne.n	8003ca0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f023 0307 	bic.w	r3, r3, #7
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d117      	bne.n	8003cfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00e      	beq.n	8003cfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fa7b 	bl	80041d8 <DMA_CheckFifoParam>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2240      	movs	r2, #64	; 0x40
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e016      	b.n	8003d28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fa32 	bl	800416c <DMA_CalcBaseAndBitshift>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d10:	223f      	movs	r2, #63	; 0x3f
 8003d12:	409a      	lsls	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	f010803f 	.word	0xf010803f

08003d34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d42:	f7ff f8e3 	bl	8002f0c <HAL_GetTick>
 8003d46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d008      	beq.n	8003d66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2280      	movs	r2, #128	; 0x80
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e052      	b.n	8003e0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0216 	bic.w	r2, r2, #22
 8003d74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <HAL_DMA_Abort+0x62>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0208 	bic.w	r2, r2, #8
 8003da4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003db6:	e013      	b.n	8003de0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003db8:	f7ff f8a8 	bl	8002f0c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b05      	cmp	r3, #5
 8003dc4:	d90c      	bls.n	8003de0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e015      	b.n	8003e0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e4      	bne.n	8003db8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	223f      	movs	r2, #63	; 0x3f
 8003df4:	409a      	lsls	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d004      	beq.n	8003e32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2280      	movs	r2, #128	; 0x80
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e00c      	b.n	8003e4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2205      	movs	r2, #5
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e64:	4b8e      	ldr	r3, [pc, #568]	; (80040a0 <HAL_DMA_IRQHandler+0x248>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a8e      	ldr	r2, [pc, #568]	; (80040a4 <HAL_DMA_IRQHandler+0x24c>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	0a9b      	lsrs	r3, r3, #10
 8003e70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	2208      	movs	r2, #8
 8003e84:	409a      	lsls	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01a      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
 8003eaa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	f043 0201 	orr.w	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	2201      	movs	r2, #1
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d012      	beq.n	8003efa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	f043 0202 	orr.w	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	2204      	movs	r2, #4
 8003f00:	409a      	lsls	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d012      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00b      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	f043 0204 	orr.w	r2, r3, #4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	2210      	movs	r2, #16
 8003f36:	409a      	lsls	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d043      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d03c      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f52:	2210      	movs	r2, #16
 8003f54:	409a      	lsls	r2, r3
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d018      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d024      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	4798      	blx	r3
 8003f86:	e01f      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01b      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
 8003f98:	e016      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d107      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0208 	bic.w	r2, r2, #8
 8003fb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	2220      	movs	r2, #32
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 808f 	beq.w	80040f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8087 	beq.w	80040f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	2220      	movs	r2, #32
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d136      	bne.n	8004070 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0216 	bic.w	r2, r2, #22
 8004010:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004020:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <HAL_DMA_IRQHandler+0x1da>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0208 	bic.w	r2, r2, #8
 8004040:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	223f      	movs	r2, #63	; 0x3f
 8004048:	409a      	lsls	r2, r3
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004062:	2b00      	cmp	r3, #0
 8004064:	d07e      	beq.n	8004164 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
        }
        return;
 800406e:	e079      	b.n	8004164 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01d      	beq.n	80040ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10d      	bne.n	80040a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	2b00      	cmp	r3, #0
 8004092:	d031      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4798      	blx	r3
 800409c:	e02c      	b.n	80040f8 <HAL_DMA_IRQHandler+0x2a0>
 800409e:	bf00      	nop
 80040a0:	20000090 	.word	0x20000090
 80040a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d023      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
 80040b8:	e01e      	b.n	80040f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10f      	bne.n	80040e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0210 	bic.w	r2, r2, #16
 80040d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d032      	beq.n	8004166 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d022      	beq.n	8004152 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2205      	movs	r2, #5
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	3301      	adds	r3, #1
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	429a      	cmp	r2, r3
 800412e:	d307      	bcc.n	8004140 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f2      	bne.n	8004124 <HAL_DMA_IRQHandler+0x2cc>
 800413e:	e000      	b.n	8004142 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004140:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
 8004162:	e000      	b.n	8004166 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004164:	bf00      	nop
    }
  }
}
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	3b10      	subs	r3, #16
 800417c:	4a14      	ldr	r2, [pc, #80]	; (80041d0 <DMA_CalcBaseAndBitshift+0x64>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004186:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <DMA_CalcBaseAndBitshift+0x68>)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b03      	cmp	r3, #3
 8004198:	d909      	bls.n	80041ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041a2:	f023 0303 	bic.w	r3, r3, #3
 80041a6:	1d1a      	adds	r2, r3, #4
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	659a      	str	r2, [r3, #88]	; 0x58
 80041ac:	e007      	b.n	80041be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041b6:	f023 0303 	bic.w	r3, r3, #3
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	aaaaaaab 	.word	0xaaaaaaab
 80041d4:	0800bb18 	.word	0x0800bb18

080041d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11f      	bne.n	8004232 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d856      	bhi.n	80042a6 <DMA_CheckFifoParam+0xce>
 80041f8:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <DMA_CheckFifoParam+0x28>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004211 	.word	0x08004211
 8004204:	08004223 	.word	0x08004223
 8004208:	08004211 	.word	0x08004211
 800420c:	080042a7 	.word	0x080042a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d046      	beq.n	80042aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004220:	e043      	b.n	80042aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800422a:	d140      	bne.n	80042ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004230:	e03d      	b.n	80042ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423a:	d121      	bne.n	8004280 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b03      	cmp	r3, #3
 8004240:	d837      	bhi.n	80042b2 <DMA_CheckFifoParam+0xda>
 8004242:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <DMA_CheckFifoParam+0x70>)
 8004244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004248:	08004259 	.word	0x08004259
 800424c:	0800425f 	.word	0x0800425f
 8004250:	08004259 	.word	0x08004259
 8004254:	08004271 	.word	0x08004271
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
      break;
 800425c:	e030      	b.n	80042c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d025      	beq.n	80042b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800426e:	e022      	b.n	80042b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004278:	d11f      	bne.n	80042ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800427e:	e01c      	b.n	80042ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d903      	bls.n	800428e <DMA_CheckFifoParam+0xb6>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d003      	beq.n	8004294 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800428c:	e018      	b.n	80042c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
      break;
 8004292:	e015      	b.n	80042c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00e      	beq.n	80042be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
      break;
 80042a4:	e00b      	b.n	80042be <DMA_CheckFifoParam+0xe6>
      break;
 80042a6:	bf00      	nop
 80042a8:	e00a      	b.n	80042c0 <DMA_CheckFifoParam+0xe8>
      break;
 80042aa:	bf00      	nop
 80042ac:	e008      	b.n	80042c0 <DMA_CheckFifoParam+0xe8>
      break;
 80042ae:	bf00      	nop
 80042b0:	e006      	b.n	80042c0 <DMA_CheckFifoParam+0xe8>
      break;
 80042b2:	bf00      	nop
 80042b4:	e004      	b.n	80042c0 <DMA_CheckFifoParam+0xe8>
      break;
 80042b6:	bf00      	nop
 80042b8:	e002      	b.n	80042c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80042ba:	bf00      	nop
 80042bc:	e000      	b.n	80042c0 <DMA_CheckFifoParam+0xe8>
      break;
 80042be:	bf00      	nop
    }
  } 
  
  return status; 
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop

080042d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042de:	2300      	movs	r3, #0
 80042e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	e165      	b.n	80045b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042ec:	2201      	movs	r2, #1
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	429a      	cmp	r2, r3
 8004306:	f040 8154 	bne.w	80045b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b01      	cmp	r3, #1
 8004314:	d005      	beq.n	8004322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800431e:	2b02      	cmp	r3, #2
 8004320:	d130      	bne.n	8004384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	2203      	movs	r2, #3
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43db      	mvns	r3, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4013      	ands	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4313      	orrs	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004358:	2201      	movs	r2, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 0201 	and.w	r2, r3, #1
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	2b03      	cmp	r3, #3
 800438e:	d017      	beq.n	80043c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	2203      	movs	r2, #3
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d123      	bne.n	8004414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	08da      	lsrs	r2, r3, #3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3208      	adds	r2, #8
 80043d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	220f      	movs	r2, #15
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	08da      	lsrs	r2, r3, #3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3208      	adds	r2, #8
 800440e:	69b9      	ldr	r1, [r7, #24]
 8004410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	2203      	movs	r2, #3
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0203 	and.w	r2, r3, #3
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80ae 	beq.w	80045b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	4b5d      	ldr	r3, [pc, #372]	; (80045d0 <HAL_GPIO_Init+0x300>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	4a5c      	ldr	r2, [pc, #368]	; (80045d0 <HAL_GPIO_Init+0x300>)
 8004460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004464:	6453      	str	r3, [r2, #68]	; 0x44
 8004466:	4b5a      	ldr	r3, [pc, #360]	; (80045d0 <HAL_GPIO_Init+0x300>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004472:	4a58      	ldr	r2, [pc, #352]	; (80045d4 <HAL_GPIO_Init+0x304>)
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	3302      	adds	r3, #2
 800447a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	220f      	movs	r2, #15
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4013      	ands	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a4f      	ldr	r2, [pc, #316]	; (80045d8 <HAL_GPIO_Init+0x308>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d025      	beq.n	80044ea <HAL_GPIO_Init+0x21a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4e      	ldr	r2, [pc, #312]	; (80045dc <HAL_GPIO_Init+0x30c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01f      	beq.n	80044e6 <HAL_GPIO_Init+0x216>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4d      	ldr	r2, [pc, #308]	; (80045e0 <HAL_GPIO_Init+0x310>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d019      	beq.n	80044e2 <HAL_GPIO_Init+0x212>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a4c      	ldr	r2, [pc, #304]	; (80045e4 <HAL_GPIO_Init+0x314>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_GPIO_Init+0x20e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4b      	ldr	r2, [pc, #300]	; (80045e8 <HAL_GPIO_Init+0x318>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00d      	beq.n	80044da <HAL_GPIO_Init+0x20a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4a      	ldr	r2, [pc, #296]	; (80045ec <HAL_GPIO_Init+0x31c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <HAL_GPIO_Init+0x206>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a49      	ldr	r2, [pc, #292]	; (80045f0 <HAL_GPIO_Init+0x320>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_GPIO_Init+0x202>
 80044ce:	2306      	movs	r3, #6
 80044d0:	e00c      	b.n	80044ec <HAL_GPIO_Init+0x21c>
 80044d2:	2307      	movs	r3, #7
 80044d4:	e00a      	b.n	80044ec <HAL_GPIO_Init+0x21c>
 80044d6:	2305      	movs	r3, #5
 80044d8:	e008      	b.n	80044ec <HAL_GPIO_Init+0x21c>
 80044da:	2304      	movs	r3, #4
 80044dc:	e006      	b.n	80044ec <HAL_GPIO_Init+0x21c>
 80044de:	2303      	movs	r3, #3
 80044e0:	e004      	b.n	80044ec <HAL_GPIO_Init+0x21c>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e002      	b.n	80044ec <HAL_GPIO_Init+0x21c>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_GPIO_Init+0x21c>
 80044ea:	2300      	movs	r3, #0
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	f002 0203 	and.w	r2, r2, #3
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	4093      	lsls	r3, r2
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044fc:	4935      	ldr	r1, [pc, #212]	; (80045d4 <HAL_GPIO_Init+0x304>)
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	3302      	adds	r3, #2
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800450a:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <HAL_GPIO_Init+0x324>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	43db      	mvns	r3, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4013      	ands	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800452e:	4a31      	ldr	r2, [pc, #196]	; (80045f4 <HAL_GPIO_Init+0x324>)
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004534:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <HAL_GPIO_Init+0x324>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004558:	4a26      	ldr	r2, [pc, #152]	; (80045f4 <HAL_GPIO_Init+0x324>)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800455e:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <HAL_GPIO_Init+0x324>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004582:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <HAL_GPIO_Init+0x324>)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <HAL_GPIO_Init+0x324>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045ac:	4a11      	ldr	r2, [pc, #68]	; (80045f4 <HAL_GPIO_Init+0x324>)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3301      	adds	r3, #1
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b0f      	cmp	r3, #15
 80045bc:	f67f ae96 	bls.w	80042ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	3724      	adds	r7, #36	; 0x24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800
 80045d4:	40013800 	.word	0x40013800
 80045d8:	40020000 	.word	0x40020000
 80045dc:	40020400 	.word	0x40020400
 80045e0:	40020800 	.word	0x40020800
 80045e4:	40020c00 	.word	0x40020c00
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40021400 	.word	0x40021400
 80045f0:	40021800 	.word	0x40021800
 80045f4:	40013c00 	.word	0x40013c00

080045f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	807b      	strh	r3, [r7, #2]
 8004604:	4613      	mov	r3, r2
 8004606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004608:	787b      	ldrb	r3, [r7, #1]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004614:	e003      	b.n	800461e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004616:	887b      	ldrh	r3, [r7, #2]
 8004618:	041a      	lsls	r2, r3, #16
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	619a      	str	r2, [r3, #24]
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e12b      	b.n	8004896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fe f8ce 	bl	80027f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2224      	movs	r2, #36	; 0x24
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800467e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800468e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004690:	f001 f8e2 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8004694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4a81      	ldr	r2, [pc, #516]	; (80048a0 <HAL_I2C_Init+0x274>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d807      	bhi.n	80046b0 <HAL_I2C_Init+0x84>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a80      	ldr	r2, [pc, #512]	; (80048a4 <HAL_I2C_Init+0x278>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	bf94      	ite	ls
 80046a8:	2301      	movls	r3, #1
 80046aa:	2300      	movhi	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e006      	b.n	80046be <HAL_I2C_Init+0x92>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a7d      	ldr	r2, [pc, #500]	; (80048a8 <HAL_I2C_Init+0x27c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	bf94      	ite	ls
 80046b8:	2301      	movls	r3, #1
 80046ba:	2300      	movhi	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0e7      	b.n	8004896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a78      	ldr	r2, [pc, #480]	; (80048ac <HAL_I2C_Init+0x280>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0c9b      	lsrs	r3, r3, #18
 80046d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a6a      	ldr	r2, [pc, #424]	; (80048a0 <HAL_I2C_Init+0x274>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d802      	bhi.n	8004700 <HAL_I2C_Init+0xd4>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3301      	adds	r3, #1
 80046fe:	e009      	b.n	8004714 <HAL_I2C_Init+0xe8>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	4a69      	ldr	r2, [pc, #420]	; (80048b0 <HAL_I2C_Init+0x284>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	3301      	adds	r3, #1
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	430b      	orrs	r3, r1
 800471a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004726:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	495c      	ldr	r1, [pc, #368]	; (80048a0 <HAL_I2C_Init+0x274>)
 8004730:	428b      	cmp	r3, r1
 8004732:	d819      	bhi.n	8004768 <HAL_I2C_Init+0x13c>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1e59      	subs	r1, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004742:	1c59      	adds	r1, r3, #1
 8004744:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004748:	400b      	ands	r3, r1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_I2C_Init+0x138>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1e59      	subs	r1, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	fbb1 f3f3 	udiv	r3, r1, r3
 800475c:	3301      	adds	r3, #1
 800475e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004762:	e051      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 8004764:	2304      	movs	r3, #4
 8004766:	e04f      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d111      	bne.n	8004794 <HAL_I2C_Init+0x168>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1e58      	subs	r0, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	440b      	add	r3, r1
 800477e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e012      	b.n	80047ba <HAL_I2C_Init+0x18e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1e58      	subs	r0, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	0099      	lsls	r1, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047aa:	3301      	adds	r3, #1
 80047ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Init+0x196>
 80047be:	2301      	movs	r3, #1
 80047c0:	e022      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10e      	bne.n	80047e8 <HAL_I2C_Init+0x1bc>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1e58      	subs	r0, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6859      	ldr	r1, [r3, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	440b      	add	r3, r1
 80047d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e6:	e00f      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1e58      	subs	r0, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	0099      	lsls	r1, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fe:	3301      	adds	r3, #1
 8004800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	6809      	ldr	r1, [r1, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004836:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6911      	ldr	r1, [r2, #16]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68d2      	ldr	r2, [r2, #12]
 8004842:	4311      	orrs	r1, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	430b      	orrs	r3, r1
 800484a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	000186a0 	.word	0x000186a0
 80048a4:	001e847f 	.word	0x001e847f
 80048a8:	003d08ff 	.word	0x003d08ff
 80048ac:	431bde83 	.word	0x431bde83
 80048b0:	10624dd3 	.word	0x10624dd3

080048b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	4608      	mov	r0, r1
 80048be:	4611      	mov	r1, r2
 80048c0:	461a      	mov	r2, r3
 80048c2:	4603      	mov	r3, r0
 80048c4:	817b      	strh	r3, [r7, #10]
 80048c6:	460b      	mov	r3, r1
 80048c8:	813b      	strh	r3, [r7, #8]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ce:	f7fe fb1d 	bl	8002f0c <HAL_GetTick>
 80048d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b20      	cmp	r3, #32
 80048de:	f040 80d9 	bne.w	8004a94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	2319      	movs	r3, #25
 80048e8:	2201      	movs	r2, #1
 80048ea:	496d      	ldr	r1, [pc, #436]	; (8004aa0 <HAL_I2C_Mem_Write+0x1ec>)
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fc8b 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
 80048fa:	e0cc      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_I2C_Mem_Write+0x56>
 8004906:	2302      	movs	r3, #2
 8004908:	e0c5      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d007      	beq.n	8004930 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800493e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2221      	movs	r2, #33	; 0x21
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2240      	movs	r2, #64	; 0x40
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a3a      	ldr	r2, [r7, #32]
 800495a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a4d      	ldr	r2, [pc, #308]	; (8004aa4 <HAL_I2C_Mem_Write+0x1f0>)
 8004970:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004972:	88f8      	ldrh	r0, [r7, #6]
 8004974:	893a      	ldrh	r2, [r7, #8]
 8004976:	8979      	ldrh	r1, [r7, #10]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	4603      	mov	r3, r0
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fac2 	bl	8004f0c <I2C_RequestMemoryWrite>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d052      	beq.n	8004a34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e081      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fd50 	bl	800543c <I2C_WaitOnTXEFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00d      	beq.n	80049be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d107      	bne.n	80049ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e06b      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	781a      	ldrb	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d11b      	bne.n	8004a34 <HAL_I2C_Mem_Write+0x180>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d017      	beq.n	8004a34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1aa      	bne.n	8004992 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fd43 	bl	80054cc <I2C_WaitOnBTFFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d107      	bne.n	8004a64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e016      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e000      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	00100002 	.word	0x00100002
 8004aa4:	ffff0000 	.word	0xffff0000

08004aa8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	817b      	strh	r3, [r7, #10]
 8004aba:	460b      	mov	r3, r1
 8004abc:	813b      	strh	r3, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ac2:	f7fe fa23 	bl	8002f0c <HAL_GetTick>
 8004ac6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	f040 8214 	bne.w	8004efe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	2319      	movs	r3, #25
 8004adc:	2201      	movs	r2, #1
 8004ade:	497b      	ldr	r1, [pc, #492]	; (8004ccc <HAL_I2C_Mem_Read+0x224>)
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fb91 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
 8004aee:	e207      	b.n	8004f00 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_I2C_Mem_Read+0x56>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e200      	b.n	8004f00 <HAL_I2C_Mem_Read+0x458>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d007      	beq.n	8004b24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2222      	movs	r2, #34	; 0x22
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2240      	movs	r2, #64	; 0x40
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a5b      	ldr	r2, [pc, #364]	; (8004cd0 <HAL_I2C_Mem_Read+0x228>)
 8004b64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b66:	88f8      	ldrh	r0, [r7, #6]
 8004b68:	893a      	ldrh	r2, [r7, #8]
 8004b6a:	8979      	ldrh	r1, [r7, #10]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	4603      	mov	r3, r0
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fa5e 	bl	8005038 <I2C_RequestMemoryRead>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e1bc      	b.n	8004f00 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d113      	bne.n	8004bb6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	623b      	str	r3, [r7, #32]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	623b      	str	r3, [r7, #32]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	623b      	str	r3, [r7, #32]
 8004ba2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e190      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d11b      	bne.n	8004bf6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	e170      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d11b      	bne.n	8004c36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	e150      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c4c:	e144      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	f200 80f1 	bhi.w	8004e3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d123      	bne.n	8004ca8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fc79 	bl	800555c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e145      	b.n	8004f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ca6:	e117      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d14e      	bne.n	8004d4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	4906      	ldr	r1, [pc, #24]	; (8004cd4 <HAL_I2C_Mem_Read+0x22c>)
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 faa4 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d008      	beq.n	8004cd8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e11a      	b.n	8004f00 <HAL_I2C_Mem_Read+0x458>
 8004cca:	bf00      	nop
 8004ccc:	00100002 	.word	0x00100002
 8004cd0:	ffff0000 	.word	0xffff0000
 8004cd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d4c:	e0c4      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2200      	movs	r2, #0
 8004d56:	496c      	ldr	r1, [pc, #432]	; (8004f08 <HAL_I2C_Mem_Read+0x460>)
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fa55 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0cb      	b.n	8004f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	2200      	movs	r2, #0
 8004db2:	4955      	ldr	r1, [pc, #340]	; (8004f08 <HAL_I2C_Mem_Read+0x460>)
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fa27 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e09d      	b.n	8004f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e38:	e04e      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fb8c 	bl	800555c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e058      	b.n	8004f00 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d124      	bne.n	8004ed8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d107      	bne.n	8004ea6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f47f aeb6 	bne.w	8004c4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	e000      	b.n	8004f00 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004efe:	2302      	movs	r3, #2
  }
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3728      	adds	r7, #40	; 0x28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	00010004 	.word	0x00010004

08004f0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	4608      	mov	r0, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	817b      	strh	r3, [r7, #10]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	813b      	strh	r3, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f960 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5c:	d103      	bne.n	8004f66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e05f      	b.n	800502a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f6a:	897b      	ldrh	r3, [r7, #10]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	6a3a      	ldr	r2, [r7, #32]
 8004f7e:	492d      	ldr	r1, [pc, #180]	; (8005034 <I2C_RequestMemoryWrite+0x128>)
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f9bb 	bl	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e04c      	b.n	800502a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa8:	6a39      	ldr	r1, [r7, #32]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fa46 	bl	800543c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00d      	beq.n	8004fd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d107      	bne.n	8004fce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e02b      	b.n	800502a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d105      	bne.n	8004fe4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd8:	893b      	ldrh	r3, [r7, #8]
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	611a      	str	r2, [r3, #16]
 8004fe2:	e021      	b.n	8005028 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fe4:	893b      	ldrh	r3, [r7, #8]
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff4:	6a39      	ldr	r1, [r7, #32]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fa20 	bl	800543c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b04      	cmp	r3, #4
 8005008:	d107      	bne.n	800501a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e005      	b.n	800502a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800501e:	893b      	ldrh	r3, [r7, #8]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	00010002 	.word	0x00010002

08005038 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af02      	add	r7, sp, #8
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	4608      	mov	r0, r1
 8005042:	4611      	mov	r1, r2
 8005044:	461a      	mov	r2, r3
 8005046:	4603      	mov	r3, r0
 8005048:	817b      	strh	r3, [r7, #10]
 800504a:	460b      	mov	r3, r1
 800504c:	813b      	strh	r3, [r7, #8]
 800504e:	4613      	mov	r3, r2
 8005050:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005060:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	2200      	movs	r2, #0
 800507a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f8c2 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00d      	beq.n	80050a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005098:	d103      	bne.n	80050a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e0aa      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050a6:	897b      	ldrh	r3, [r7, #10]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	6a3a      	ldr	r2, [r7, #32]
 80050ba:	4952      	ldr	r1, [pc, #328]	; (8005204 <I2C_RequestMemoryRead+0x1cc>)
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f91d 	bl	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e097      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e4:	6a39      	ldr	r1, [r7, #32]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f9a8 	bl	800543c <I2C_WaitOnTXEFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00d      	beq.n	800510e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d107      	bne.n	800510a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e076      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d105      	bne.n	8005120 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005114:	893b      	ldrh	r3, [r7, #8]
 8005116:	b2da      	uxtb	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	611a      	str	r2, [r3, #16]
 800511e:	e021      	b.n	8005164 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005120:	893b      	ldrh	r3, [r7, #8]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	b29b      	uxth	r3, r3
 8005126:	b2da      	uxtb	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800512e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005130:	6a39      	ldr	r1, [r7, #32]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f982 	bl	800543c <I2C_WaitOnTXEFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	2b04      	cmp	r3, #4
 8005144:	d107      	bne.n	8005156 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e050      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800515a:	893b      	ldrh	r3, [r7, #8]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005166:	6a39      	ldr	r1, [r7, #32]
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f967 	bl	800543c <I2C_WaitOnTXEFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00d      	beq.n	8005190 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	2b04      	cmp	r3, #4
 800517a:	d107      	bne.n	800518c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e035      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800519e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f82b 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00d      	beq.n	80051d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c6:	d103      	bne.n	80051d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e013      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051d4:	897b      	ldrh	r3, [r7, #10]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	6a3a      	ldr	r2, [r7, #32]
 80051e8:	4906      	ldr	r1, [pc, #24]	; (8005204 <I2C_RequestMemoryRead+0x1cc>)
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f886 	bl	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	00010002 	.word	0x00010002

08005208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005218:	e048      	b.n	80052ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d044      	beq.n	80052ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005222:	f7fd fe73 	bl	8002f0c <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d139      	bne.n	80052ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d10d      	bne.n	800525e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	43da      	mvns	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4013      	ands	r3, r2
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	bf0c      	ite	eq
 8005254:	2301      	moveq	r3, #1
 8005256:	2300      	movne	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	e00c      	b.n	8005278 <I2C_WaitOnFlagUntilTimeout+0x70>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	43da      	mvns	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4013      	ands	r3, r2
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	429a      	cmp	r2, r3
 800527c:	d116      	bne.n	80052ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	f043 0220 	orr.w	r2, r3, #32
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e023      	b.n	80052f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d10d      	bne.n	80052d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	43da      	mvns	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4013      	ands	r3, r2
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	bf0c      	ite	eq
 80052c8:	2301      	moveq	r3, #1
 80052ca:	2300      	movne	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	e00c      	b.n	80052ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	43da      	mvns	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4013      	ands	r3, r2
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	bf0c      	ite	eq
 80052e4:	2301      	moveq	r3, #1
 80052e6:	2300      	movne	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d093      	beq.n	800521a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800530a:	e071      	b.n	80053f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531a:	d123      	bne.n	8005364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005334:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	f043 0204 	orr.w	r2, r3, #4
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e067      	b.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d041      	beq.n	80053f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536c:	f7fd fdce 	bl	8002f0c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	429a      	cmp	r2, r3
 800537a:	d302      	bcc.n	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d136      	bne.n	80053f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	d10c      	bne.n	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	43da      	mvns	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf14      	ite	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	2300      	moveq	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	e00b      	b.n	80053be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	43da      	mvns	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4013      	ands	r3, r2
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	bf14      	ite	ne
 80053b8:	2301      	movne	r3, #1
 80053ba:	2300      	moveq	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d016      	beq.n	80053f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	f043 0220 	orr.w	r2, r3, #32
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e021      	b.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	0c1b      	lsrs	r3, r3, #16
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d10c      	bne.n	8005414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	43da      	mvns	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4013      	ands	r3, r2
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e00b      	b.n	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	43da      	mvns	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4013      	ands	r3, r2
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	bf14      	ite	ne
 8005426:	2301      	movne	r3, #1
 8005428:	2300      	moveq	r3, #0
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	f47f af6d 	bne.w	800530c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005448:	e034      	b.n	80054b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f8e3 	bl	8005616 <I2C_IsAcknowledgeFailed>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e034      	b.n	80054c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d028      	beq.n	80054b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7fd fd53 	bl	8002f0c <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11d      	bne.n	80054b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d016      	beq.n	80054b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e007      	b.n	80054c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054be:	2b80      	cmp	r3, #128	; 0x80
 80054c0:	d1c3      	bne.n	800544a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054d8:	e034      	b.n	8005544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f89b 	bl	8005616 <I2C_IsAcknowledgeFailed>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e034      	b.n	8005554 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f0:	d028      	beq.n	8005544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f2:	f7fd fd0b 	bl	8002f0c <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d302      	bcc.n	8005508 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d11d      	bne.n	8005544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b04      	cmp	r3, #4
 8005514:	d016      	beq.n	8005544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e007      	b.n	8005554 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b04      	cmp	r3, #4
 8005550:	d1c3      	bne.n	80054da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005568:	e049      	b.n	80055fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b10      	cmp	r3, #16
 8005576:	d119      	bne.n	80055ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0210 	mvn.w	r2, #16
 8005580:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e030      	b.n	800560e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ac:	f7fd fcae 	bl	8002f0c <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d302      	bcc.n	80055c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d11d      	bne.n	80055fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055cc:	2b40      	cmp	r3, #64	; 0x40
 80055ce:	d016      	beq.n	80055fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f043 0220 	orr.w	r2, r3, #32
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e007      	b.n	800560e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d1ae      	bne.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562c:	d11b      	bne.n	8005666 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005636:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f043 0204 	orr.w	r2, r3, #4
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0cc      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005688:	4b68      	ldr	r3, [pc, #416]	; (800582c <HAL_RCC_ClockConfig+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d90c      	bls.n	80056b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b65      	ldr	r3, [pc, #404]	; (800582c <HAL_RCC_ClockConfig+0x1b8>)
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b63      	ldr	r3, [pc, #396]	; (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0b8      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d020      	beq.n	80056fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c8:	4b59      	ldr	r3, [pc, #356]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	4a58      	ldr	r2, [pc, #352]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056e0:	4b53      	ldr	r3, [pc, #332]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a52      	ldr	r2, [pc, #328]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ec:	4b50      	ldr	r3, [pc, #320]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	494d      	ldr	r1, [pc, #308]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d044      	beq.n	8005794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d107      	bne.n	8005722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005712:	4b47      	ldr	r3, [pc, #284]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d119      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e07f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d003      	beq.n	8005732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572e:	2b03      	cmp	r3, #3
 8005730:	d107      	bne.n	8005742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005732:	4b3f      	ldr	r3, [pc, #252]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e06f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005742:	4b3b      	ldr	r3, [pc, #236]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e067      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005752:	4b37      	ldr	r3, [pc, #220]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f023 0203 	bic.w	r2, r3, #3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	4934      	ldr	r1, [pc, #208]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	4313      	orrs	r3, r2
 8005762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005764:	f7fd fbd2 	bl	8002f0c <HAL_GetTick>
 8005768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576a:	e00a      	b.n	8005782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800576c:	f7fd fbce 	bl	8002f0c <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	; 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e04f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005782:	4b2b      	ldr	r3, [pc, #172]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 020c 	and.w	r2, r3, #12
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	429a      	cmp	r2, r3
 8005792:	d1eb      	bne.n	800576c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005794:	4b25      	ldr	r3, [pc, #148]	; (800582c <HAL_RCC_ClockConfig+0x1b8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d20c      	bcs.n	80057bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a2:	4b22      	ldr	r3, [pc, #136]	; (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b20      	ldr	r3, [pc, #128]	; (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e032      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c8:	4b19      	ldr	r3, [pc, #100]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4916      	ldr	r1, [pc, #88]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e6:	4b12      	ldr	r3, [pc, #72]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	490e      	ldr	r1, [pc, #56]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057fa:	f000 f855 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 80057fe:	4602      	mov	r2, r0
 8005800:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	490a      	ldr	r1, [pc, #40]	; (8005834 <HAL_RCC_ClockConfig+0x1c0>)
 800580c:	5ccb      	ldrb	r3, [r1, r3]
 800580e:	fa22 f303 	lsr.w	r3, r2, r3
 8005812:	4a09      	ldr	r2, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x1c4>)
 8005814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <HAL_RCC_ClockConfig+0x1c8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f7fd fb32 	bl	8002e84 <HAL_InitTick>

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40023c00 	.word	0x40023c00
 8005830:	40023800 	.word	0x40023800
 8005834:	0800bb00 	.word	0x0800bb00
 8005838:	20000090 	.word	0x20000090
 800583c:	20000094 	.word	0x20000094

08005840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005844:	4b03      	ldr	r3, [pc, #12]	; (8005854 <HAL_RCC_GetHCLKFreq+0x14>)
 8005846:	681b      	ldr	r3, [r3, #0]
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000090 	.word	0x20000090

08005858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800585c:	f7ff fff0 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	0a9b      	lsrs	r3, r3, #10
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	4903      	ldr	r1, [pc, #12]	; (800587c <HAL_RCC_GetPCLK1Freq+0x24>)
 800586e:	5ccb      	ldrb	r3, [r1, r3]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40023800 	.word	0x40023800
 800587c:	0800bb10 	.word	0x0800bb10

08005880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005884:	f7ff ffdc 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005888:	4602      	mov	r2, r0
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	0b5b      	lsrs	r3, r3, #13
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	4903      	ldr	r1, [pc, #12]	; (80058a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005896:	5ccb      	ldrb	r3, [r1, r3]
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40023800 	.word	0x40023800
 80058a4:	0800bb10 	.word	0x0800bb10

080058a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ac:	b0ae      	sub	sp, #184	; 0xb8
 80058ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058ce:	4bcb      	ldr	r3, [pc, #812]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b0c      	cmp	r3, #12
 80058d8:	f200 8206 	bhi.w	8005ce8 <HAL_RCC_GetSysClockFreq+0x440>
 80058dc:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	08005919 	.word	0x08005919
 80058e8:	08005ce9 	.word	0x08005ce9
 80058ec:	08005ce9 	.word	0x08005ce9
 80058f0:	08005ce9 	.word	0x08005ce9
 80058f4:	08005921 	.word	0x08005921
 80058f8:	08005ce9 	.word	0x08005ce9
 80058fc:	08005ce9 	.word	0x08005ce9
 8005900:	08005ce9 	.word	0x08005ce9
 8005904:	08005929 	.word	0x08005929
 8005908:	08005ce9 	.word	0x08005ce9
 800590c:	08005ce9 	.word	0x08005ce9
 8005910:	08005ce9 	.word	0x08005ce9
 8005914:	08005b19 	.word	0x08005b19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005918:	4bb9      	ldr	r3, [pc, #740]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x358>)
 800591a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800591e:	e1e7      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005920:	4bb8      	ldr	r3, [pc, #736]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005926:	e1e3      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005928:	4bb4      	ldr	r3, [pc, #720]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005934:	4bb1      	ldr	r3, [pc, #708]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d071      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005940:	4bae      	ldr	r3, [pc, #696]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	099b      	lsrs	r3, r3, #6
 8005946:	2200      	movs	r2, #0
 8005948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800594c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800595c:	2300      	movs	r3, #0
 800595e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005966:	4622      	mov	r2, r4
 8005968:	462b      	mov	r3, r5
 800596a:	f04f 0000 	mov.w	r0, #0
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	0159      	lsls	r1, r3, #5
 8005974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005978:	0150      	lsls	r0, r2, #5
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4621      	mov	r1, r4
 8005980:	1a51      	subs	r1, r2, r1
 8005982:	6439      	str	r1, [r7, #64]	; 0x40
 8005984:	4629      	mov	r1, r5
 8005986:	eb63 0301 	sbc.w	r3, r3, r1
 800598a:	647b      	str	r3, [r7, #68]	; 0x44
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005998:	4649      	mov	r1, r9
 800599a:	018b      	lsls	r3, r1, #6
 800599c:	4641      	mov	r1, r8
 800599e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059a2:	4641      	mov	r1, r8
 80059a4:	018a      	lsls	r2, r1, #6
 80059a6:	4641      	mov	r1, r8
 80059a8:	1a51      	subs	r1, r2, r1
 80059aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80059ac:	4649      	mov	r1, r9
 80059ae:	eb63 0301 	sbc.w	r3, r3, r1
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80059c0:	4649      	mov	r1, r9
 80059c2:	00cb      	lsls	r3, r1, #3
 80059c4:	4641      	mov	r1, r8
 80059c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ca:	4641      	mov	r1, r8
 80059cc:	00ca      	lsls	r2, r1, #3
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	4622      	mov	r2, r4
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	633b      	str	r3, [r7, #48]	; 0x30
 80059da:	462b      	mov	r3, r5
 80059dc:	460a      	mov	r2, r1
 80059de:	eb42 0303 	adc.w	r3, r2, r3
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059f0:	4629      	mov	r1, r5
 80059f2:	024b      	lsls	r3, r1, #9
 80059f4:	4621      	mov	r1, r4
 80059f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059fa:	4621      	mov	r1, r4
 80059fc:	024a      	lsls	r2, r1, #9
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005a14:	f7fb f958 	bl	8000cc8 <__aeabi_uldivmod>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a22:	e067      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a24:	4b75      	ldr	r3, [pc, #468]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	099b      	lsrs	r3, r3, #6
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a30:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a3e:	2300      	movs	r3, #0
 8005a40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005a46:	4622      	mov	r2, r4
 8005a48:	462b      	mov	r3, r5
 8005a4a:	f04f 0000 	mov.w	r0, #0
 8005a4e:	f04f 0100 	mov.w	r1, #0
 8005a52:	0159      	lsls	r1, r3, #5
 8005a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a58:	0150      	lsls	r0, r2, #5
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4621      	mov	r1, r4
 8005a60:	1a51      	subs	r1, r2, r1
 8005a62:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a64:	4629      	mov	r1, r5
 8005a66:	eb63 0301 	sbc.w	r3, r3, r1
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005a78:	4649      	mov	r1, r9
 8005a7a:	018b      	lsls	r3, r1, #6
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a82:	4641      	mov	r1, r8
 8005a84:	018a      	lsls	r2, r1, #6
 8005a86:	4641      	mov	r1, r8
 8005a88:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aa6:	4692      	mov	sl, r2
 8005aa8:	469b      	mov	fp, r3
 8005aaa:	4623      	mov	r3, r4
 8005aac:	eb1a 0303 	adds.w	r3, sl, r3
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	462b      	mov	r3, r5
 8005ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	028b      	lsls	r3, r1, #10
 8005aca:	4621      	mov	r1, r4
 8005acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	028a      	lsls	r2, r1, #10
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005adc:	2200      	movs	r2, #0
 8005ade:	673b      	str	r3, [r7, #112]	; 0x70
 8005ae0:	677a      	str	r2, [r7, #116]	; 0x74
 8005ae2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005ae6:	f7fb f8ef 	bl	8000cc8 <__aeabi_uldivmod>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4613      	mov	r3, r2
 8005af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005af4:	4b41      	ldr	r3, [pc, #260]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	0c1b      	lsrs	r3, r3, #16
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	3301      	adds	r3, #1
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005b16:	e0eb      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b18:	4b38      	ldr	r3, [pc, #224]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b24:	4b35      	ldr	r3, [pc, #212]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d06b      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b30:	4b32      	ldr	r3, [pc, #200]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	099b      	lsrs	r3, r3, #6
 8005b36:	2200      	movs	r2, #0
 8005b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	663b      	str	r3, [r7, #96]	; 0x60
 8005b44:	2300      	movs	r3, #0
 8005b46:	667b      	str	r3, [r7, #100]	; 0x64
 8005b48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	462b      	mov	r3, r5
 8005b50:	f04f 0000 	mov.w	r0, #0
 8005b54:	f04f 0100 	mov.w	r1, #0
 8005b58:	0159      	lsls	r1, r3, #5
 8005b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b5e:	0150      	lsls	r0, r2, #5
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4621      	mov	r1, r4
 8005b66:	1a51      	subs	r1, r2, r1
 8005b68:	61b9      	str	r1, [r7, #24]
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	eb63 0301 	sbc.w	r3, r3, r1
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005b7e:	4659      	mov	r1, fp
 8005b80:	018b      	lsls	r3, r1, #6
 8005b82:	4651      	mov	r1, sl
 8005b84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b88:	4651      	mov	r1, sl
 8005b8a:	018a      	lsls	r2, r1, #6
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	ebb2 0801 	subs.w	r8, r2, r1
 8005b92:	4659      	mov	r1, fp
 8005b94:	eb63 0901 	sbc.w	r9, r3, r1
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ba4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ba8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bac:	4690      	mov	r8, r2
 8005bae:	4699      	mov	r9, r3
 8005bb0:	4623      	mov	r3, r4
 8005bb2:	eb18 0303 	adds.w	r3, r8, r3
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	462b      	mov	r3, r5
 8005bba:	eb49 0303 	adc.w	r3, r9, r3
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005bcc:	4629      	mov	r1, r5
 8005bce:	024b      	lsls	r3, r1, #9
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	024a      	lsls	r2, r1, #9
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4619      	mov	r1, r3
 8005bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005be2:	2200      	movs	r2, #0
 8005be4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005be6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005be8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bec:	f7fb f86c 	bl	8000cc8 <__aeabi_uldivmod>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bfa:	e065      	b.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x420>
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	00f42400 	.word	0x00f42400
 8005c04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c08:	4b3d      	ldr	r3, [pc, #244]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	099b      	lsrs	r3, r3, #6
 8005c0e:	2200      	movs	r2, #0
 8005c10:	4618      	mov	r0, r3
 8005c12:	4611      	mov	r1, r2
 8005c14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c18:	653b      	str	r3, [r7, #80]	; 0x50
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005c22:	4642      	mov	r2, r8
 8005c24:	464b      	mov	r3, r9
 8005c26:	f04f 0000 	mov.w	r0, #0
 8005c2a:	f04f 0100 	mov.w	r1, #0
 8005c2e:	0159      	lsls	r1, r3, #5
 8005c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c34:	0150      	lsls	r0, r2, #5
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4641      	mov	r1, r8
 8005c3c:	1a51      	subs	r1, r2, r1
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	4649      	mov	r1, r9
 8005c42:	eb63 0301 	sbc.w	r3, r3, r1
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005c54:	4659      	mov	r1, fp
 8005c56:	018b      	lsls	r3, r1, #6
 8005c58:	4651      	mov	r1, sl
 8005c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c5e:	4651      	mov	r1, sl
 8005c60:	018a      	lsls	r2, r1, #6
 8005c62:	4651      	mov	r1, sl
 8005c64:	1a54      	subs	r4, r2, r1
 8005c66:	4659      	mov	r1, fp
 8005c68:	eb63 0501 	sbc.w	r5, r3, r1
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	00eb      	lsls	r3, r5, #3
 8005c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c7a:	00e2      	lsls	r2, r4, #3
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	461d      	mov	r5, r3
 8005c80:	4643      	mov	r3, r8
 8005c82:	18e3      	adds	r3, r4, r3
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	464b      	mov	r3, r9
 8005c88:	eb45 0303 	adc.w	r3, r5, r3
 8005c8c:	607b      	str	r3, [r7, #4]
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	028b      	lsls	r3, r1, #10
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	028a      	lsls	r2, r1, #10
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005cb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cba:	f7fb f805 	bl	8000cc8 <__aeabi_uldivmod>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	0f1b      	lsrs	r3, r3, #28
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005cd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005ce6:	e003      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005cee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	37b8      	adds	r7, #184	; 0xb8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023800 	.word	0x40023800
 8005d04:	00f42400 	.word	0x00f42400

08005d08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e28d      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8083 	beq.w	8005e2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d28:	4b94      	ldr	r3, [pc, #592]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 030c 	and.w	r3, r3, #12
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d019      	beq.n	8005d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d34:	4b91      	ldr	r3, [pc, #580]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d106      	bne.n	8005d4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d40:	4b8e      	ldr	r3, [pc, #568]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4c:	d00c      	beq.n	8005d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d4e:	4b8b      	ldr	r3, [pc, #556]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d56:	2b0c      	cmp	r3, #12
 8005d58:	d112      	bne.n	8005d80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d5a:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d66:	d10b      	bne.n	8005d80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d68:	4b84      	ldr	r3, [pc, #528]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d05b      	beq.n	8005e2c <HAL_RCC_OscConfig+0x124>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d157      	bne.n	8005e2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e25a      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d88:	d106      	bne.n	8005d98 <HAL_RCC_OscConfig+0x90>
 8005d8a:	4b7c      	ldr	r3, [pc, #496]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a7b      	ldr	r2, [pc, #492]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	e01d      	b.n	8005dd4 <HAL_RCC_OscConfig+0xcc>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005da0:	d10c      	bne.n	8005dbc <HAL_RCC_OscConfig+0xb4>
 8005da2:	4b76      	ldr	r3, [pc, #472]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a75      	ldr	r2, [pc, #468]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	4b73      	ldr	r3, [pc, #460]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a72      	ldr	r2, [pc, #456]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCC_OscConfig+0xcc>
 8005dbc:	4b6f      	ldr	r3, [pc, #444]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a6e      	ldr	r2, [pc, #440]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	4b6c      	ldr	r3, [pc, #432]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a6b      	ldr	r2, [pc, #428]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d013      	beq.n	8005e04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ddc:	f7fd f896 	bl	8002f0c <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de4:	f7fd f892 	bl	8002f0c <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b64      	cmp	r3, #100	; 0x64
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e21f      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df6:	4b61      	ldr	r3, [pc, #388]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0xdc>
 8005e02:	e014      	b.n	8005e2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fd f882 	bl	8002f0c <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e0c:	f7fd f87e 	bl	8002f0c <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b64      	cmp	r3, #100	; 0x64
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e20b      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e1e:	4b57      	ldr	r3, [pc, #348]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0x104>
 8005e2a:	e000      	b.n	8005e2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d06f      	beq.n	8005f1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e3a:	4b50      	ldr	r3, [pc, #320]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d017      	beq.n	8005e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e46:	4b4d      	ldr	r3, [pc, #308]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d105      	bne.n	8005e5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e52:	4b4a      	ldr	r3, [pc, #296]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00b      	beq.n	8005e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e5e:	4b47      	ldr	r3, [pc, #284]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	d11c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e6a:	4b44      	ldr	r3, [pc, #272]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d116      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e76:	4b41      	ldr	r3, [pc, #260]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_RCC_OscConfig+0x186>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d001      	beq.n	8005e8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e1d3      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8e:	4b3b      	ldr	r3, [pc, #236]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4937      	ldr	r1, [pc, #220]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea2:	e03a      	b.n	8005f1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d020      	beq.n	8005eee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eac:	4b34      	ldr	r3, [pc, #208]	; (8005f80 <HAL_RCC_OscConfig+0x278>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb2:	f7fd f82b 	bl	8002f0c <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eba:	f7fd f827 	bl	8002f0c <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e1b4      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ecc:	4b2b      	ldr	r3, [pc, #172]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed8:	4b28      	ldr	r3, [pc, #160]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4925      	ldr	r1, [pc, #148]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	600b      	str	r3, [r1, #0]
 8005eec:	e015      	b.n	8005f1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eee:	4b24      	ldr	r3, [pc, #144]	; (8005f80 <HAL_RCC_OscConfig+0x278>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef4:	f7fd f80a 	bl	8002f0c <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005efc:	f7fd f806 	bl	8002f0c <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e193      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f0e:	4b1b      	ldr	r3, [pc, #108]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d036      	beq.n	8005f94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d016      	beq.n	8005f5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f2e:	4b15      	ldr	r3, [pc, #84]	; (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f34:	f7fc ffea 	bl	8002f0c <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f3c:	f7fc ffe6 	bl	8002f0c <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e173      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x234>
 8005f5a:	e01b      	b.n	8005f94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f62:	f7fc ffd3 	bl	8002f0c <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f68:	e00e      	b.n	8005f88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f6a:	f7fc ffcf 	bl	8002f0c <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d907      	bls.n	8005f88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e15c      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	42470000 	.word	0x42470000
 8005f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f88:	4b8a      	ldr	r3, [pc, #552]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1ea      	bne.n	8005f6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8097 	beq.w	80060d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fa6:	4b83      	ldr	r3, [pc, #524]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	4b7f      	ldr	r3, [pc, #508]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	4a7e      	ldr	r2, [pc, #504]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fc2:	4b7c      	ldr	r3, [pc, #496]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd2:	4b79      	ldr	r3, [pc, #484]	; (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d118      	bne.n	8006010 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fde:	4b76      	ldr	r3, [pc, #472]	; (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a75      	ldr	r2, [pc, #468]	; (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fea:	f7fc ff8f 	bl	8002f0c <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff2:	f7fc ff8b 	bl	8002f0c <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e118      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006004:	4b6c      	ldr	r3, [pc, #432]	; (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d106      	bne.n	8006026 <HAL_RCC_OscConfig+0x31e>
 8006018:	4b66      	ldr	r3, [pc, #408]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	4a65      	ldr	r2, [pc, #404]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	6713      	str	r3, [r2, #112]	; 0x70
 8006024:	e01c      	b.n	8006060 <HAL_RCC_OscConfig+0x358>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b05      	cmp	r3, #5
 800602c:	d10c      	bne.n	8006048 <HAL_RCC_OscConfig+0x340>
 800602e:	4b61      	ldr	r3, [pc, #388]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006032:	4a60      	ldr	r2, [pc, #384]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006034:	f043 0304 	orr.w	r3, r3, #4
 8006038:	6713      	str	r3, [r2, #112]	; 0x70
 800603a:	4b5e      	ldr	r3, [pc, #376]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	4a5d      	ldr	r2, [pc, #372]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	6713      	str	r3, [r2, #112]	; 0x70
 8006046:	e00b      	b.n	8006060 <HAL_RCC_OscConfig+0x358>
 8006048:	4b5a      	ldr	r3, [pc, #360]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604c:	4a59      	ldr	r2, [pc, #356]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	6713      	str	r3, [r2, #112]	; 0x70
 8006054:	4b57      	ldr	r3, [pc, #348]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006058:	4a56      	ldr	r2, [pc, #344]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800605a:	f023 0304 	bic.w	r3, r3, #4
 800605e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d015      	beq.n	8006094 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006068:	f7fc ff50 	bl	8002f0c <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606e:	e00a      	b.n	8006086 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006070:	f7fc ff4c 	bl	8002f0c <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	f241 3288 	movw	r2, #5000	; 0x1388
 800607e:	4293      	cmp	r3, r2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e0d7      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006086:	4b4b      	ldr	r3, [pc, #300]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0ee      	beq.n	8006070 <HAL_RCC_OscConfig+0x368>
 8006092:	e014      	b.n	80060be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006094:	f7fc ff3a 	bl	8002f0c <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800609c:	f7fc ff36 	bl	8002f0c <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e0c1      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060b2:	4b40      	ldr	r3, [pc, #256]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1ee      	bne.n	800609c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d105      	bne.n	80060d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060c4:	4b3b      	ldr	r3, [pc, #236]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	4a3a      	ldr	r2, [pc, #232]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80ad 	beq.w	8006234 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060da:	4b36      	ldr	r3, [pc, #216]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 030c 	and.w	r3, r3, #12
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d060      	beq.n	80061a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d145      	bne.n	800617a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	4b33      	ldr	r3, [pc, #204]	; (80061bc <HAL_RCC_OscConfig+0x4b4>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f4:	f7fc ff0a 	bl	8002f0c <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060fc:	f7fc ff06 	bl	8002f0c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e093      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610e:	4b29      	ldr	r3, [pc, #164]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f0      	bne.n	80060fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	019b      	lsls	r3, r3, #6
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	3b01      	subs	r3, #1
 8006134:	041b      	lsls	r3, r3, #16
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	061b      	lsls	r3, r3, #24
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006144:	071b      	lsls	r3, r3, #28
 8006146:	491b      	ldr	r1, [pc, #108]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006148:	4313      	orrs	r3, r2
 800614a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800614c:	4b1b      	ldr	r3, [pc, #108]	; (80061bc <HAL_RCC_OscConfig+0x4b4>)
 800614e:	2201      	movs	r2, #1
 8006150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006152:	f7fc fedb 	bl	8002f0c <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800615a:	f7fc fed7 	bl	8002f0c <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e064      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616c:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f0      	beq.n	800615a <HAL_RCC_OscConfig+0x452>
 8006178:	e05c      	b.n	8006234 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800617a:	4b10      	ldr	r3, [pc, #64]	; (80061bc <HAL_RCC_OscConfig+0x4b4>)
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fc fec4 	bl	8002f0c <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006188:	f7fc fec0 	bl	8002f0c <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e04d      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619a:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f0      	bne.n	8006188 <HAL_RCC_OscConfig+0x480>
 80061a6:	e045      	b.n	8006234 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e040      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
 80061b4:	40023800 	.word	0x40023800
 80061b8:	40007000 	.word	0x40007000
 80061bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061c0:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <HAL_RCC_OscConfig+0x538>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d030      	beq.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d129      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d122      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061f0:	4013      	ands	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d119      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	3b01      	subs	r3, #1
 800620a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800620c:	429a      	cmp	r2, r3
 800620e:	d10f      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800621c:	429a      	cmp	r2, r3
 800621e:	d107      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d001      	beq.n	8006234 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40023800 	.word	0x40023800

08006244 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e041      	b.n	80062da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fc fb0a 	bl	8002884 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3304      	adds	r3, #4
 8006280:	4619      	mov	r1, r3
 8006282:	4610      	mov	r0, r2
 8006284:	f000 f9b8 	bl	80065f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d109      	bne.n	8006308 <HAL_TIM_PWM_Start+0x24>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	bf14      	ite	ne
 8006300:	2301      	movne	r3, #1
 8006302:	2300      	moveq	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	e022      	b.n	800634e <HAL_TIM_PWM_Start+0x6a>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b04      	cmp	r3, #4
 800630c:	d109      	bne.n	8006322 <HAL_TIM_PWM_Start+0x3e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b01      	cmp	r3, #1
 8006318:	bf14      	ite	ne
 800631a:	2301      	movne	r3, #1
 800631c:	2300      	moveq	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	e015      	b.n	800634e <HAL_TIM_PWM_Start+0x6a>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b08      	cmp	r3, #8
 8006326:	d109      	bne.n	800633c <HAL_TIM_PWM_Start+0x58>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	e008      	b.n	800634e <HAL_TIM_PWM_Start+0x6a>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	bf14      	ite	ne
 8006348:	2301      	movne	r3, #1
 800634a:	2300      	moveq	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e07c      	b.n	8006450 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <HAL_TIM_PWM_Start+0x82>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006364:	e013      	b.n	800638e <HAL_TIM_PWM_Start+0xaa>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b04      	cmp	r3, #4
 800636a:	d104      	bne.n	8006376 <HAL_TIM_PWM_Start+0x92>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006374:	e00b      	b.n	800638e <HAL_TIM_PWM_Start+0xaa>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d104      	bne.n	8006386 <HAL_TIM_PWM_Start+0xa2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006384:	e003      	b.n	800638e <HAL_TIM_PWM_Start+0xaa>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2202      	movs	r2, #2
 800638a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2201      	movs	r2, #1
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fb8a 	bl	8006ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a2d      	ldr	r2, [pc, #180]	; (8006458 <HAL_TIM_PWM_Start+0x174>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d004      	beq.n	80063b0 <HAL_TIM_PWM_Start+0xcc>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a2c      	ldr	r2, [pc, #176]	; (800645c <HAL_TIM_PWM_Start+0x178>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d101      	bne.n	80063b4 <HAL_TIM_PWM_Start+0xd0>
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <HAL_TIM_PWM_Start+0xd2>
 80063b4:	2300      	movs	r3, #0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a22      	ldr	r2, [pc, #136]	; (8006458 <HAL_TIM_PWM_Start+0x174>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d022      	beq.n	800641a <HAL_TIM_PWM_Start+0x136>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063dc:	d01d      	beq.n	800641a <HAL_TIM_PWM_Start+0x136>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <HAL_TIM_PWM_Start+0x17c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d018      	beq.n	800641a <HAL_TIM_PWM_Start+0x136>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1d      	ldr	r2, [pc, #116]	; (8006464 <HAL_TIM_PWM_Start+0x180>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <HAL_TIM_PWM_Start+0x136>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1c      	ldr	r2, [pc, #112]	; (8006468 <HAL_TIM_PWM_Start+0x184>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00e      	beq.n	800641a <HAL_TIM_PWM_Start+0x136>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a16      	ldr	r2, [pc, #88]	; (800645c <HAL_TIM_PWM_Start+0x178>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d009      	beq.n	800641a <HAL_TIM_PWM_Start+0x136>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a18      	ldr	r2, [pc, #96]	; (800646c <HAL_TIM_PWM_Start+0x188>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d004      	beq.n	800641a <HAL_TIM_PWM_Start+0x136>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a16      	ldr	r2, [pc, #88]	; (8006470 <HAL_TIM_PWM_Start+0x18c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d111      	bne.n	800643e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b06      	cmp	r3, #6
 800642a:	d010      	beq.n	800644e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643c:	e007      	b.n	800644e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0201 	orr.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40010000 	.word	0x40010000
 800645c:	40010400 	.word	0x40010400
 8006460:	40000400 	.word	0x40000400
 8006464:	40000800 	.word	0x40000800
 8006468:	40000c00 	.word	0x40000c00
 800646c:	40014000 	.word	0x40014000
 8006470:	40001800 	.word	0x40001800

08006474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800648e:	2302      	movs	r3, #2
 8006490:	e0ae      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b0c      	cmp	r3, #12
 800649e:	f200 809f 	bhi.w	80065e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064a2:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064dd 	.word	0x080064dd
 80064ac:	080065e1 	.word	0x080065e1
 80064b0:	080065e1 	.word	0x080065e1
 80064b4:	080065e1 	.word	0x080065e1
 80064b8:	0800651d 	.word	0x0800651d
 80064bc:	080065e1 	.word	0x080065e1
 80064c0:	080065e1 	.word	0x080065e1
 80064c4:	080065e1 	.word	0x080065e1
 80064c8:	0800655f 	.word	0x0800655f
 80064cc:	080065e1 	.word	0x080065e1
 80064d0:	080065e1 	.word	0x080065e1
 80064d4:	080065e1 	.word	0x080065e1
 80064d8:	0800659f 	.word	0x0800659f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f934 	bl	8006750 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0208 	orr.w	r2, r2, #8
 80064f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0204 	bic.w	r2, r2, #4
 8006506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6999      	ldr	r1, [r3, #24]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	619a      	str	r2, [r3, #24]
      break;
 800651a:	e064      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 f984 	bl	8006830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6999      	ldr	r1, [r3, #24]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	021a      	lsls	r2, r3, #8
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	619a      	str	r2, [r3, #24]
      break;
 800655c:	e043      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f000 f9d9 	bl	800691c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0208 	orr.w	r2, r2, #8
 8006578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0204 	bic.w	r2, r2, #4
 8006588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69d9      	ldr	r1, [r3, #28]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	61da      	str	r2, [r3, #28]
      break;
 800659c:	e023      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fa2d 	bl	8006a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69d9      	ldr	r1, [r3, #28]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	021a      	lsls	r2, r3, #8
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	61da      	str	r2, [r3, #28]
      break;
 80065de:	e002      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
      break;
 80065e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a46      	ldr	r2, [pc, #280]	; (8006724 <TIM_Base_SetConfig+0x12c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d013      	beq.n	8006638 <TIM_Base_SetConfig+0x40>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006616:	d00f      	beq.n	8006638 <TIM_Base_SetConfig+0x40>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a43      	ldr	r2, [pc, #268]	; (8006728 <TIM_Base_SetConfig+0x130>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00b      	beq.n	8006638 <TIM_Base_SetConfig+0x40>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a42      	ldr	r2, [pc, #264]	; (800672c <TIM_Base_SetConfig+0x134>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d007      	beq.n	8006638 <TIM_Base_SetConfig+0x40>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a41      	ldr	r2, [pc, #260]	; (8006730 <TIM_Base_SetConfig+0x138>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d003      	beq.n	8006638 <TIM_Base_SetConfig+0x40>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a40      	ldr	r2, [pc, #256]	; (8006734 <TIM_Base_SetConfig+0x13c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d108      	bne.n	800664a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a35      	ldr	r2, [pc, #212]	; (8006724 <TIM_Base_SetConfig+0x12c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d02b      	beq.n	80066aa <TIM_Base_SetConfig+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006658:	d027      	beq.n	80066aa <TIM_Base_SetConfig+0xb2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a32      	ldr	r2, [pc, #200]	; (8006728 <TIM_Base_SetConfig+0x130>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d023      	beq.n	80066aa <TIM_Base_SetConfig+0xb2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a31      	ldr	r2, [pc, #196]	; (800672c <TIM_Base_SetConfig+0x134>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d01f      	beq.n	80066aa <TIM_Base_SetConfig+0xb2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a30      	ldr	r2, [pc, #192]	; (8006730 <TIM_Base_SetConfig+0x138>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d01b      	beq.n	80066aa <TIM_Base_SetConfig+0xb2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a2f      	ldr	r2, [pc, #188]	; (8006734 <TIM_Base_SetConfig+0x13c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d017      	beq.n	80066aa <TIM_Base_SetConfig+0xb2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a2e      	ldr	r2, [pc, #184]	; (8006738 <TIM_Base_SetConfig+0x140>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d013      	beq.n	80066aa <TIM_Base_SetConfig+0xb2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a2d      	ldr	r2, [pc, #180]	; (800673c <TIM_Base_SetConfig+0x144>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00f      	beq.n	80066aa <TIM_Base_SetConfig+0xb2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a2c      	ldr	r2, [pc, #176]	; (8006740 <TIM_Base_SetConfig+0x148>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00b      	beq.n	80066aa <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a2b      	ldr	r2, [pc, #172]	; (8006744 <TIM_Base_SetConfig+0x14c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d007      	beq.n	80066aa <TIM_Base_SetConfig+0xb2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a2a      	ldr	r2, [pc, #168]	; (8006748 <TIM_Base_SetConfig+0x150>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d003      	beq.n	80066aa <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a29      	ldr	r2, [pc, #164]	; (800674c <TIM_Base_SetConfig+0x154>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d108      	bne.n	80066bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a10      	ldr	r2, [pc, #64]	; (8006724 <TIM_Base_SetConfig+0x12c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_Base_SetConfig+0xf8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a12      	ldr	r2, [pc, #72]	; (8006734 <TIM_Base_SetConfig+0x13c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d103      	bne.n	80066f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b01      	cmp	r3, #1
 8006708:	d105      	bne.n	8006716 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f023 0201 	bic.w	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	611a      	str	r2, [r3, #16]
  }
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40010000 	.word	0x40010000
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40010400 	.word	0x40010400
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800
 8006744:	40001800 	.word	0x40001800
 8006748:	40001c00 	.word	0x40001c00
 800674c:	40002000 	.word	0x40002000

08006750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f023 0201 	bic.w	r2, r3, #1
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 0302 	bic.w	r3, r3, #2
 8006798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a20      	ldr	r2, [pc, #128]	; (8006828 <TIM_OC1_SetConfig+0xd8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_OC1_SetConfig+0x64>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1f      	ldr	r2, [pc, #124]	; (800682c <TIM_OC1_SetConfig+0xdc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d10c      	bne.n	80067ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 0308 	bic.w	r3, r3, #8
 80067ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f023 0304 	bic.w	r3, r3, #4
 80067cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a15      	ldr	r2, [pc, #84]	; (8006828 <TIM_OC1_SetConfig+0xd8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d003      	beq.n	80067de <TIM_OC1_SetConfig+0x8e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a14      	ldr	r2, [pc, #80]	; (800682c <TIM_OC1_SetConfig+0xdc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d111      	bne.n	8006802 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400

08006830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f023 0210 	bic.w	r2, r3, #16
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0320 	bic.w	r3, r3, #32
 800687a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a22      	ldr	r2, [pc, #136]	; (8006914 <TIM_OC2_SetConfig+0xe4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_OC2_SetConfig+0x68>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a21      	ldr	r2, [pc, #132]	; (8006918 <TIM_OC2_SetConfig+0xe8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d10d      	bne.n	80068b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800689e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a17      	ldr	r2, [pc, #92]	; (8006914 <TIM_OC2_SetConfig+0xe4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_OC2_SetConfig+0x94>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a16      	ldr	r2, [pc, #88]	; (8006918 <TIM_OC2_SetConfig+0xe8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d113      	bne.n	80068ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40010000 	.word	0x40010000
 8006918:	40010400 	.word	0x40010400

0800691c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0303 	bic.w	r3, r3, #3
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a21      	ldr	r2, [pc, #132]	; (80069fc <TIM_OC3_SetConfig+0xe0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC3_SetConfig+0x66>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a20      	ldr	r2, [pc, #128]	; (8006a00 <TIM_OC3_SetConfig+0xe4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d10d      	bne.n	800699e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800699c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a16      	ldr	r2, [pc, #88]	; (80069fc <TIM_OC3_SetConfig+0xe0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_OC3_SetConfig+0x92>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a15      	ldr	r2, [pc, #84]	; (8006a00 <TIM_OC3_SetConfig+0xe4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d113      	bne.n	80069d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	621a      	str	r2, [r3, #32]
}
 80069f0:	bf00      	nop
 80069f2:	371c      	adds	r7, #28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40010400 	.word	0x40010400

08006a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	031b      	lsls	r3, r3, #12
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a12      	ldr	r2, [pc, #72]	; (8006aa8 <TIM_OC4_SetConfig+0xa4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <TIM_OC4_SetConfig+0x68>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a11      	ldr	r2, [pc, #68]	; (8006aac <TIM_OC4_SetConfig+0xa8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d109      	bne.n	8006a80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	019b      	lsls	r3, r3, #6
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40010400 	.word	0x40010400

08006ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a1a      	ldr	r2, [r3, #32]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	401a      	ands	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a1a      	ldr	r2, [r3, #32]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e05a      	b.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d022      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b60:	d01d      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1d      	ldr	r2, [pc, #116]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d018      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a1b      	ldr	r2, [pc, #108]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1a      	ldr	r2, [pc, #104]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a17      	ldr	r2, [pc, #92]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a15      	ldr	r2, [pc, #84]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d10c      	bne.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40000400 	.word	0x40000400
 8006be0:	40000800 	.word	0x40000800
 8006be4:	40000c00 	.word	0x40000c00
 8006be8:	40010400 	.word	0x40010400
 8006bec:	40014000 	.word	0x40014000
 8006bf0:	40001800 	.word	0x40001800

08006bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e042      	b.n	8006c8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d106      	bne.n	8006c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fb fec2 	bl	80029a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2224      	movs	r2, #36	; 0x24
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fd69 	bl	8007710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695a      	ldr	r2, [r3, #20]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d175      	bne.n	8006da0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <HAL_UART_Transmit+0x2c>
 8006cba:	88fb      	ldrh	r3, [r7, #6]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e06e      	b.n	8006da2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2221      	movs	r2, #33	; 0x21
 8006cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cd2:	f7fc f91b 	bl	8002f0c <HAL_GetTick>
 8006cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	88fa      	ldrh	r2, [r7, #6]
 8006cdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	88fa      	ldrh	r2, [r7, #6]
 8006ce2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cec:	d108      	bne.n	8006d00 <HAL_UART_Transmit+0x6c>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e003      	b.n	8006d08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d08:	e02e      	b.n	8006d68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2200      	movs	r2, #0
 8006d12:	2180      	movs	r1, #128	; 0x80
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fb05 	bl	8007324 <UART_WaitOnFlagUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e03a      	b.n	8006da2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10b      	bne.n	8006d4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	3302      	adds	r3, #2
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	e007      	b.n	8006d5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	781a      	ldrb	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	3301      	adds	r3, #1
 8006d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1cb      	bne.n	8006d0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2140      	movs	r1, #64	; 0x40
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fad1 	bl	8007324 <UART_WaitOnFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e006      	b.n	8006da2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e000      	b.n	8006da2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006da0:	2302      	movs	r3, #2
  }
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b0ba      	sub	sp, #232	; 0xe8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10f      	bne.n	8006e12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <HAL_UART_IRQHandler+0x66>
 8006dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fbc2 	bl	8007594 <UART_Receive_IT>
      return;
 8006e10:	e25b      	b.n	80072ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80de 	beq.w	8006fd8 <HAL_UART_IRQHandler+0x22c>
 8006e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d106      	bne.n	8006e36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80d1 	beq.w	8006fd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00b      	beq.n	8006e5a <HAL_UART_IRQHandler+0xae>
 8006e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e52:	f043 0201 	orr.w	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <HAL_UART_IRQHandler+0xd2>
 8006e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e76:	f043 0202 	orr.w	r2, r3, #2
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00b      	beq.n	8006ea2 <HAL_UART_IRQHandler+0xf6>
 8006e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d005      	beq.n	8006ea2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9a:	f043 0204 	orr.w	r2, r3, #4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d011      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x126>
 8006eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d105      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eca:	f043 0208 	orr.w	r2, r3, #8
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 81f2 	beq.w	80072c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_UART_IRQHandler+0x14e>
 8006ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fb4d 	bl	8007594 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b40      	cmp	r3, #64	; 0x40
 8006f06:	bf0c      	ite	eq
 8006f08:	2301      	moveq	r3, #1
 8006f0a:	2300      	movne	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <HAL_UART_IRQHandler+0x17a>
 8006f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d04f      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa55 	bl	80073d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d141      	bne.n	8006fbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3314      	adds	r3, #20
 8006f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3314      	adds	r3, #20
 8006f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1d9      	bne.n	8006f3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d013      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f92:	4a7e      	ldr	r2, [pc, #504]	; (800718c <HAL_UART_IRQHandler+0x3e0>)
 8006f94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fc ff3a 	bl	8003e14 <HAL_DMA_Abort_IT>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d016      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb4:	e00e      	b.n	8006fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f99e 	bl	80072f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fbc:	e00a      	b.n	8006fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f99a 	bl	80072f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc4:	e006      	b.n	8006fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f996 	bl	80072f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006fd2:	e175      	b.n	80072c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd4:	bf00      	nop
    return;
 8006fd6:	e173      	b.n	80072c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	f040 814f 	bne.w	8007280 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8148 	beq.w	8007280 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 8141 	beq.w	8007280 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ffe:	2300      	movs	r3, #0
 8007000:	60bb      	str	r3, [r7, #8]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	f040 80b6 	bne.w	8007190 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007030:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 8145 	beq.w	80072c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800703e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007042:	429a      	cmp	r2, r3
 8007044:	f080 813e 	bcs.w	80072c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800704e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705a:	f000 8088 	beq.w	800716e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	330c      	adds	r3, #12
 8007064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800707c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	330c      	adds	r3, #12
 8007086:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800708a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800708e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007096:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1d9      	bne.n	800705e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3314      	adds	r3, #20
 80070b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3314      	adds	r3, #20
 80070ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e1      	bne.n	80070aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3314      	adds	r3, #20
 80070ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3314      	adds	r3, #20
 8007106:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800710a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800710c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007110:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e3      	bne.n	80070e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2220      	movs	r2, #32
 8007122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	330c      	adds	r3, #12
 8007132:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800713c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800713e:	f023 0310 	bic.w	r3, r3, #16
 8007142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	330c      	adds	r3, #12
 800714c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007150:	65ba      	str	r2, [r7, #88]	; 0x58
 8007152:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800715e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e3      	bne.n	800712c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007168:	4618      	mov	r0, r3
 800716a:	f7fc fde3 	bl	8003d34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800717c:	b29b      	uxth	r3, r3
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	b29b      	uxth	r3, r3
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f8c1 	bl	800730c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800718a:	e09b      	b.n	80072c4 <HAL_UART_IRQHandler+0x518>
 800718c:	0800749d 	.word	0x0800749d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007198:	b29b      	uxth	r3, r3
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 808e 	beq.w	80072c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80071ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8089 	beq.w	80072c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	330c      	adds	r3, #12
 80071bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	330c      	adds	r3, #12
 80071d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80071da:	647a      	str	r2, [r7, #68]	; 0x44
 80071dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e3      	bne.n	80071b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3314      	adds	r3, #20
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	623b      	str	r3, [r7, #32]
   return(result);
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	f023 0301 	bic.w	r3, r3, #1
 8007204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3314      	adds	r3, #20
 800720e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007212:	633a      	str	r2, [r7, #48]	; 0x30
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e3      	bne.n	80071ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	60fb      	str	r3, [r7, #12]
   return(result);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0310 	bic.w	r3, r3, #16
 800724a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	330c      	adds	r3, #12
 8007254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007258:	61fa      	str	r2, [r7, #28]
 800725a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	69b9      	ldr	r1, [r7, #24]
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	617b      	str	r3, [r7, #20]
   return(result);
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e3      	bne.n	8007234 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007272:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f847 	bl	800730c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800727e:	e023      	b.n	80072c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007288:	2b00      	cmp	r3, #0
 800728a:	d009      	beq.n	80072a0 <HAL_UART_IRQHandler+0x4f4>
 800728c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f913 	bl	80074c4 <UART_Transmit_IT>
    return;
 800729e:	e014      	b.n	80072ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00e      	beq.n	80072ca <HAL_UART_IRQHandler+0x51e>
 80072ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d008      	beq.n	80072ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f953 	bl	8007564 <UART_EndTransmit_IT>
    return;
 80072be:	e004      	b.n	80072ca <HAL_UART_IRQHandler+0x51e>
    return;
 80072c0:	bf00      	nop
 80072c2:	e002      	b.n	80072ca <HAL_UART_IRQHandler+0x51e>
      return;
 80072c4:	bf00      	nop
 80072c6:	e000      	b.n	80072ca <HAL_UART_IRQHandler+0x51e>
      return;
 80072c8:	bf00      	nop
  }
}
 80072ca:	37e8      	adds	r7, #232	; 0xe8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	4613      	mov	r3, r2
 8007332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007334:	e03b      	b.n	80073ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733c:	d037      	beq.n	80073ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733e:	f7fb fde5 	bl	8002f0c <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	6a3a      	ldr	r2, [r7, #32]
 800734a:	429a      	cmp	r2, r3
 800734c:	d302      	bcc.n	8007354 <UART_WaitOnFlagUntilTimeout+0x30>
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e03a      	b.n	80073ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	d023      	beq.n	80073ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b80      	cmp	r3, #128	; 0x80
 800736a:	d020      	beq.n	80073ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d01d      	beq.n	80073ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b08      	cmp	r3, #8
 800737e:	d116      	bne.n	80073ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 f81d 	bl	80073d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2208      	movs	r2, #8
 80073a0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e00f      	b.n	80073ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	4013      	ands	r3, r2
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	bf0c      	ite	eq
 80073be:	2301      	moveq	r3, #1
 80073c0:	2300      	movne	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	461a      	mov	r2, r3
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d0b4      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b095      	sub	sp, #84	; 0x54
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	330c      	adds	r3, #12
 80073fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073fe:	643a      	str	r2, [r7, #64]	; 0x40
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e5      	bne.n	80073de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3314      	adds	r3, #20
 8007418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	61fb      	str	r3, [r7, #28]
   return(result);
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	64bb      	str	r3, [r7, #72]	; 0x48
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3314      	adds	r3, #20
 8007430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007434:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e5      	bne.n	8007412 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	2b01      	cmp	r3, #1
 800744c:	d119      	bne.n	8007482 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	330c      	adds	r3, #12
 8007454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	60bb      	str	r3, [r7, #8]
   return(result);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f023 0310 	bic.w	r3, r3, #16
 8007464:	647b      	str	r3, [r7, #68]	; 0x44
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	330c      	adds	r3, #12
 800746c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800746e:	61ba      	str	r2, [r7, #24]
 8007470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	6979      	ldr	r1, [r7, #20]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	613b      	str	r3, [r7, #16]
   return(result);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e5      	bne.n	800744e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007490:	bf00      	nop
 8007492:	3754      	adds	r7, #84	; 0x54
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7ff ff1e 	bl	80072f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074bc:	bf00      	nop
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b21      	cmp	r3, #33	; 0x21
 80074d6:	d13e      	bne.n	8007556 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e0:	d114      	bne.n	800750c <UART_Transmit_IT+0x48>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d110      	bne.n	800750c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	1c9a      	adds	r2, r3, #2
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	621a      	str	r2, [r3, #32]
 800750a:	e008      	b.n	800751e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	1c59      	adds	r1, r3, #1
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6211      	str	r1, [r2, #32]
 8007516:	781a      	ldrb	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007522:	b29b      	uxth	r3, r3
 8007524:	3b01      	subs	r3, #1
 8007526:	b29b      	uxth	r3, r3
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	4619      	mov	r1, r3
 800752c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10f      	bne.n	8007552 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007540:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007550:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	e000      	b.n	8007558 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007556:	2302      	movs	r3, #2
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800757a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff fea3 	bl	80072d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08c      	sub	sp, #48	; 0x30
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b22      	cmp	r3, #34	; 0x22
 80075a6:	f040 80ae 	bne.w	8007706 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b2:	d117      	bne.n	80075e4 <UART_Receive_IT+0x50>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d113      	bne.n	80075e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	1c9a      	adds	r2, r3, #2
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	629a      	str	r2, [r3, #40]	; 0x28
 80075e2:	e026      	b.n	8007632 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f6:	d007      	beq.n	8007608 <UART_Receive_IT+0x74>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10a      	bne.n	8007616 <UART_Receive_IT+0x82>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d106      	bne.n	8007616 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	b2da      	uxtb	r2, r3
 8007610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007612:	701a      	strb	r2, [r3, #0]
 8007614:	e008      	b.n	8007628 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007622:	b2da      	uxtb	r2, r3
 8007624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007626:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b01      	subs	r3, #1
 800763a:	b29b      	uxth	r3, r3
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	4619      	mov	r1, r3
 8007640:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007642:	2b00      	cmp	r3, #0
 8007644:	d15d      	bne.n	8007702 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0220 	bic.w	r2, r2, #32
 8007654:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007664:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	695a      	ldr	r2, [r3, #20]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0201 	bic.w	r2, r2, #1
 8007674:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	2b01      	cmp	r3, #1
 800768a:	d135      	bne.n	80076f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	330c      	adds	r3, #12
 8007698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	613b      	str	r3, [r7, #16]
   return(result);
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f023 0310 	bic.w	r3, r3, #16
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	330c      	adds	r3, #12
 80076b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b2:	623a      	str	r2, [r7, #32]
 80076b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	69f9      	ldr	r1, [r7, #28]
 80076b8:	6a3a      	ldr	r2, [r7, #32]
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	61bb      	str	r3, [r7, #24]
   return(result);
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d10a      	bne.n	80076ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff fe0b 	bl	800730c <HAL_UARTEx_RxEventCallback>
 80076f6:	e002      	b.n	80076fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fdf3 	bl	80072e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	e002      	b.n	8007708 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	e000      	b.n	8007708 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007706:	2302      	movs	r3, #2
  }
}
 8007708:	4618      	mov	r0, r3
 800770a:	3730      	adds	r7, #48	; 0x30
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007714:	b0c0      	sub	sp, #256	; 0x100
 8007716:	af00      	add	r7, sp, #0
 8007718:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772c:	68d9      	ldr	r1, [r3, #12]
 800772e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	ea40 0301 	orr.w	r3, r0, r1
 8007738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800773a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	431a      	orrs	r2, r3
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	431a      	orrs	r2, r3
 8007750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	4313      	orrs	r3, r2
 8007758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007768:	f021 010c 	bic.w	r1, r1, #12
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007776:	430b      	orrs	r3, r1
 8007778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800777a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778a:	6999      	ldr	r1, [r3, #24]
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	ea40 0301 	orr.w	r3, r0, r1
 8007796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4b8f      	ldr	r3, [pc, #572]	; (80079dc <UART_SetConfig+0x2cc>)
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d005      	beq.n	80077b0 <UART_SetConfig+0xa0>
 80077a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b8d      	ldr	r3, [pc, #564]	; (80079e0 <UART_SetConfig+0x2d0>)
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d104      	bne.n	80077ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077b0:	f7fe f866 	bl	8005880 <HAL_RCC_GetPCLK2Freq>
 80077b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80077b8:	e003      	b.n	80077c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077ba:	f7fe f84d 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 80077be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077cc:	f040 810c 	bne.w	80079e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80077de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80077e2:	4622      	mov	r2, r4
 80077e4:	462b      	mov	r3, r5
 80077e6:	1891      	adds	r1, r2, r2
 80077e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80077ea:	415b      	adcs	r3, r3
 80077ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077f2:	4621      	mov	r1, r4
 80077f4:	eb12 0801 	adds.w	r8, r2, r1
 80077f8:	4629      	mov	r1, r5
 80077fa:	eb43 0901 	adc.w	r9, r3, r1
 80077fe:	f04f 0200 	mov.w	r2, #0
 8007802:	f04f 0300 	mov.w	r3, #0
 8007806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800780a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800780e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007812:	4690      	mov	r8, r2
 8007814:	4699      	mov	r9, r3
 8007816:	4623      	mov	r3, r4
 8007818:	eb18 0303 	adds.w	r3, r8, r3
 800781c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007820:	462b      	mov	r3, r5
 8007822:	eb49 0303 	adc.w	r3, r9, r3
 8007826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800782a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007836:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800783a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800783e:	460b      	mov	r3, r1
 8007840:	18db      	adds	r3, r3, r3
 8007842:	653b      	str	r3, [r7, #80]	; 0x50
 8007844:	4613      	mov	r3, r2
 8007846:	eb42 0303 	adc.w	r3, r2, r3
 800784a:	657b      	str	r3, [r7, #84]	; 0x54
 800784c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007854:	f7f9 fa38 	bl	8000cc8 <__aeabi_uldivmod>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4b61      	ldr	r3, [pc, #388]	; (80079e4 <UART_SetConfig+0x2d4>)
 800785e:	fba3 2302 	umull	r2, r3, r3, r2
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	011c      	lsls	r4, r3, #4
 8007866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800786a:	2200      	movs	r2, #0
 800786c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007870:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007878:	4642      	mov	r2, r8
 800787a:	464b      	mov	r3, r9
 800787c:	1891      	adds	r1, r2, r2
 800787e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007880:	415b      	adcs	r3, r3
 8007882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007888:	4641      	mov	r1, r8
 800788a:	eb12 0a01 	adds.w	sl, r2, r1
 800788e:	4649      	mov	r1, r9
 8007890:	eb43 0b01 	adc.w	fp, r3, r1
 8007894:	f04f 0200 	mov.w	r2, #0
 8007898:	f04f 0300 	mov.w	r3, #0
 800789c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078a8:	4692      	mov	sl, r2
 80078aa:	469b      	mov	fp, r3
 80078ac:	4643      	mov	r3, r8
 80078ae:	eb1a 0303 	adds.w	r3, sl, r3
 80078b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078b6:	464b      	mov	r3, r9
 80078b8:	eb4b 0303 	adc.w	r3, fp, r3
 80078bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80078d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80078d4:	460b      	mov	r3, r1
 80078d6:	18db      	adds	r3, r3, r3
 80078d8:	643b      	str	r3, [r7, #64]	; 0x40
 80078da:	4613      	mov	r3, r2
 80078dc:	eb42 0303 	adc.w	r3, r2, r3
 80078e0:	647b      	str	r3, [r7, #68]	; 0x44
 80078e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80078ea:	f7f9 f9ed 	bl	8000cc8 <__aeabi_uldivmod>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4611      	mov	r1, r2
 80078f4:	4b3b      	ldr	r3, [pc, #236]	; (80079e4 <UART_SetConfig+0x2d4>)
 80078f6:	fba3 2301 	umull	r2, r3, r3, r1
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	2264      	movs	r2, #100	; 0x64
 80078fe:	fb02 f303 	mul.w	r3, r2, r3
 8007902:	1acb      	subs	r3, r1, r3
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800790a:	4b36      	ldr	r3, [pc, #216]	; (80079e4 <UART_SetConfig+0x2d4>)
 800790c:	fba3 2302 	umull	r2, r3, r3, r2
 8007910:	095b      	lsrs	r3, r3, #5
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007918:	441c      	add	r4, r3
 800791a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800791e:	2200      	movs	r2, #0
 8007920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007924:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800792c:	4642      	mov	r2, r8
 800792e:	464b      	mov	r3, r9
 8007930:	1891      	adds	r1, r2, r2
 8007932:	63b9      	str	r1, [r7, #56]	; 0x38
 8007934:	415b      	adcs	r3, r3
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800793c:	4641      	mov	r1, r8
 800793e:	1851      	adds	r1, r2, r1
 8007940:	6339      	str	r1, [r7, #48]	; 0x30
 8007942:	4649      	mov	r1, r9
 8007944:	414b      	adcs	r3, r1
 8007946:	637b      	str	r3, [r7, #52]	; 0x34
 8007948:	f04f 0200 	mov.w	r2, #0
 800794c:	f04f 0300 	mov.w	r3, #0
 8007950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007954:	4659      	mov	r1, fp
 8007956:	00cb      	lsls	r3, r1, #3
 8007958:	4651      	mov	r1, sl
 800795a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800795e:	4651      	mov	r1, sl
 8007960:	00ca      	lsls	r2, r1, #3
 8007962:	4610      	mov	r0, r2
 8007964:	4619      	mov	r1, r3
 8007966:	4603      	mov	r3, r0
 8007968:	4642      	mov	r2, r8
 800796a:	189b      	adds	r3, r3, r2
 800796c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007970:	464b      	mov	r3, r9
 8007972:	460a      	mov	r2, r1
 8007974:	eb42 0303 	adc.w	r3, r2, r3
 8007978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800797c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007988:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800798c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007990:	460b      	mov	r3, r1
 8007992:	18db      	adds	r3, r3, r3
 8007994:	62bb      	str	r3, [r7, #40]	; 0x28
 8007996:	4613      	mov	r3, r2
 8007998:	eb42 0303 	adc.w	r3, r2, r3
 800799c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800799e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80079a6:	f7f9 f98f 	bl	8000cc8 <__aeabi_uldivmod>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <UART_SetConfig+0x2d4>)
 80079b0:	fba3 1302 	umull	r1, r3, r3, r2
 80079b4:	095b      	lsrs	r3, r3, #5
 80079b6:	2164      	movs	r1, #100	; 0x64
 80079b8:	fb01 f303 	mul.w	r3, r1, r3
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	3332      	adds	r3, #50	; 0x32
 80079c2:	4a08      	ldr	r2, [pc, #32]	; (80079e4 <UART_SetConfig+0x2d4>)
 80079c4:	fba2 2303 	umull	r2, r3, r2, r3
 80079c8:	095b      	lsrs	r3, r3, #5
 80079ca:	f003 0207 	and.w	r2, r3, #7
 80079ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4422      	add	r2, r4
 80079d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079d8:	e106      	b.n	8007be8 <UART_SetConfig+0x4d8>
 80079da:	bf00      	nop
 80079dc:	40011000 	.word	0x40011000
 80079e0:	40011400 	.word	0x40011400
 80079e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ec:	2200      	movs	r2, #0
 80079ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80079f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80079fa:	4642      	mov	r2, r8
 80079fc:	464b      	mov	r3, r9
 80079fe:	1891      	adds	r1, r2, r2
 8007a00:	6239      	str	r1, [r7, #32]
 8007a02:	415b      	adcs	r3, r3
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
 8007a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a0a:	4641      	mov	r1, r8
 8007a0c:	1854      	adds	r4, r2, r1
 8007a0e:	4649      	mov	r1, r9
 8007a10:	eb43 0501 	adc.w	r5, r3, r1
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	f04f 0300 	mov.w	r3, #0
 8007a1c:	00eb      	lsls	r3, r5, #3
 8007a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a22:	00e2      	lsls	r2, r4, #3
 8007a24:	4614      	mov	r4, r2
 8007a26:	461d      	mov	r5, r3
 8007a28:	4643      	mov	r3, r8
 8007a2a:	18e3      	adds	r3, r4, r3
 8007a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a30:	464b      	mov	r3, r9
 8007a32:	eb45 0303 	adc.w	r3, r5, r3
 8007a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a56:	4629      	mov	r1, r5
 8007a58:	008b      	lsls	r3, r1, #2
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a60:	4621      	mov	r1, r4
 8007a62:	008a      	lsls	r2, r1, #2
 8007a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a68:	f7f9 f92e 	bl	8000cc8 <__aeabi_uldivmod>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4b60      	ldr	r3, [pc, #384]	; (8007bf4 <UART_SetConfig+0x4e4>)
 8007a72:	fba3 2302 	umull	r2, r3, r3, r2
 8007a76:	095b      	lsrs	r3, r3, #5
 8007a78:	011c      	lsls	r4, r3, #4
 8007a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a8c:	4642      	mov	r2, r8
 8007a8e:	464b      	mov	r3, r9
 8007a90:	1891      	adds	r1, r2, r2
 8007a92:	61b9      	str	r1, [r7, #24]
 8007a94:	415b      	adcs	r3, r3
 8007a96:	61fb      	str	r3, [r7, #28]
 8007a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a9c:	4641      	mov	r1, r8
 8007a9e:	1851      	adds	r1, r2, r1
 8007aa0:	6139      	str	r1, [r7, #16]
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	414b      	adcs	r3, r1
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ab4:	4659      	mov	r1, fp
 8007ab6:	00cb      	lsls	r3, r1, #3
 8007ab8:	4651      	mov	r1, sl
 8007aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007abe:	4651      	mov	r1, sl
 8007ac0:	00ca      	lsls	r2, r1, #3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4642      	mov	r2, r8
 8007aca:	189b      	adds	r3, r3, r2
 8007acc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ad0:	464b      	mov	r3, r9
 8007ad2:	460a      	mov	r2, r1
 8007ad4:	eb42 0303 	adc.w	r3, r2, r3
 8007ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ae6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ae8:	f04f 0200 	mov.w	r2, #0
 8007aec:	f04f 0300 	mov.w	r3, #0
 8007af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007af4:	4649      	mov	r1, r9
 8007af6:	008b      	lsls	r3, r1, #2
 8007af8:	4641      	mov	r1, r8
 8007afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007afe:	4641      	mov	r1, r8
 8007b00:	008a      	lsls	r2, r1, #2
 8007b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b06:	f7f9 f8df 	bl	8000cc8 <__aeabi_uldivmod>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4611      	mov	r1, r2
 8007b10:	4b38      	ldr	r3, [pc, #224]	; (8007bf4 <UART_SetConfig+0x4e4>)
 8007b12:	fba3 2301 	umull	r2, r3, r3, r1
 8007b16:	095b      	lsrs	r3, r3, #5
 8007b18:	2264      	movs	r2, #100	; 0x64
 8007b1a:	fb02 f303 	mul.w	r3, r2, r3
 8007b1e:	1acb      	subs	r3, r1, r3
 8007b20:	011b      	lsls	r3, r3, #4
 8007b22:	3332      	adds	r3, #50	; 0x32
 8007b24:	4a33      	ldr	r2, [pc, #204]	; (8007bf4 <UART_SetConfig+0x4e4>)
 8007b26:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2a:	095b      	lsrs	r3, r3, #5
 8007b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b30:	441c      	add	r4, r3
 8007b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b36:	2200      	movs	r2, #0
 8007b38:	673b      	str	r3, [r7, #112]	; 0x70
 8007b3a:	677a      	str	r2, [r7, #116]	; 0x74
 8007b3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b40:	4642      	mov	r2, r8
 8007b42:	464b      	mov	r3, r9
 8007b44:	1891      	adds	r1, r2, r2
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	415b      	adcs	r3, r3
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b50:	4641      	mov	r1, r8
 8007b52:	1851      	adds	r1, r2, r1
 8007b54:	6039      	str	r1, [r7, #0]
 8007b56:	4649      	mov	r1, r9
 8007b58:	414b      	adcs	r3, r1
 8007b5a:	607b      	str	r3, [r7, #4]
 8007b5c:	f04f 0200 	mov.w	r2, #0
 8007b60:	f04f 0300 	mov.w	r3, #0
 8007b64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b68:	4659      	mov	r1, fp
 8007b6a:	00cb      	lsls	r3, r1, #3
 8007b6c:	4651      	mov	r1, sl
 8007b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b72:	4651      	mov	r1, sl
 8007b74:	00ca      	lsls	r2, r1, #3
 8007b76:	4610      	mov	r0, r2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	189b      	adds	r3, r3, r2
 8007b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b82:	464b      	mov	r3, r9
 8007b84:	460a      	mov	r2, r1
 8007b86:	eb42 0303 	adc.w	r3, r2, r3
 8007b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	663b      	str	r3, [r7, #96]	; 0x60
 8007b96:	667a      	str	r2, [r7, #100]	; 0x64
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	008b      	lsls	r3, r1, #2
 8007ba8:	4641      	mov	r1, r8
 8007baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bae:	4641      	mov	r1, r8
 8007bb0:	008a      	lsls	r2, r1, #2
 8007bb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007bb6:	f7f9 f887 	bl	8000cc8 <__aeabi_uldivmod>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <UART_SetConfig+0x4e4>)
 8007bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc4:	095b      	lsrs	r3, r3, #5
 8007bc6:	2164      	movs	r1, #100	; 0x64
 8007bc8:	fb01 f303 	mul.w	r3, r1, r3
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	011b      	lsls	r3, r3, #4
 8007bd0:	3332      	adds	r3, #50	; 0x32
 8007bd2:	4a08      	ldr	r2, [pc, #32]	; (8007bf4 <UART_SetConfig+0x4e4>)
 8007bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	f003 020f 	and.w	r2, r3, #15
 8007bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4422      	add	r2, r4
 8007be6:	609a      	str	r2, [r3, #8]
}
 8007be8:	bf00      	nop
 8007bea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bf4:	51eb851f 	.word	0x51eb851f

08007bf8 <__cvt>:
 8007bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bfc:	ec55 4b10 	vmov	r4, r5, d0
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	460e      	mov	r6, r1
 8007c04:	4619      	mov	r1, r3
 8007c06:	462b      	mov	r3, r5
 8007c08:	bfbb      	ittet	lt
 8007c0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c0e:	461d      	movlt	r5, r3
 8007c10:	2300      	movge	r3, #0
 8007c12:	232d      	movlt	r3, #45	; 0x2d
 8007c14:	700b      	strb	r3, [r1, #0]
 8007c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c1c:	4691      	mov	r9, r2
 8007c1e:	f023 0820 	bic.w	r8, r3, #32
 8007c22:	bfbc      	itt	lt
 8007c24:	4622      	movlt	r2, r4
 8007c26:	4614      	movlt	r4, r2
 8007c28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c2c:	d005      	beq.n	8007c3a <__cvt+0x42>
 8007c2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c32:	d100      	bne.n	8007c36 <__cvt+0x3e>
 8007c34:	3601      	adds	r6, #1
 8007c36:	2102      	movs	r1, #2
 8007c38:	e000      	b.n	8007c3c <__cvt+0x44>
 8007c3a:	2103      	movs	r1, #3
 8007c3c:	ab03      	add	r3, sp, #12
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	ab02      	add	r3, sp, #8
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	ec45 4b10 	vmov	d0, r4, r5
 8007c48:	4653      	mov	r3, sl
 8007c4a:	4632      	mov	r2, r6
 8007c4c:	f000 ff4c 	bl	8008ae8 <_dtoa_r>
 8007c50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c54:	4607      	mov	r7, r0
 8007c56:	d102      	bne.n	8007c5e <__cvt+0x66>
 8007c58:	f019 0f01 	tst.w	r9, #1
 8007c5c:	d022      	beq.n	8007ca4 <__cvt+0xac>
 8007c5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c62:	eb07 0906 	add.w	r9, r7, r6
 8007c66:	d110      	bne.n	8007c8a <__cvt+0x92>
 8007c68:	783b      	ldrb	r3, [r7, #0]
 8007c6a:	2b30      	cmp	r3, #48	; 0x30
 8007c6c:	d10a      	bne.n	8007c84 <__cvt+0x8c>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2300      	movs	r3, #0
 8007c72:	4620      	mov	r0, r4
 8007c74:	4629      	mov	r1, r5
 8007c76:	f7f8 ff47 	bl	8000b08 <__aeabi_dcmpeq>
 8007c7a:	b918      	cbnz	r0, 8007c84 <__cvt+0x8c>
 8007c7c:	f1c6 0601 	rsb	r6, r6, #1
 8007c80:	f8ca 6000 	str.w	r6, [sl]
 8007c84:	f8da 3000 	ldr.w	r3, [sl]
 8007c88:	4499      	add	r9, r3
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7f8 ff39 	bl	8000b08 <__aeabi_dcmpeq>
 8007c96:	b108      	cbz	r0, 8007c9c <__cvt+0xa4>
 8007c98:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c9c:	2230      	movs	r2, #48	; 0x30
 8007c9e:	9b03      	ldr	r3, [sp, #12]
 8007ca0:	454b      	cmp	r3, r9
 8007ca2:	d307      	bcc.n	8007cb4 <__cvt+0xbc>
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ca8:	1bdb      	subs	r3, r3, r7
 8007caa:	4638      	mov	r0, r7
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	b004      	add	sp, #16
 8007cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb4:	1c59      	adds	r1, r3, #1
 8007cb6:	9103      	str	r1, [sp, #12]
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	e7f0      	b.n	8007c9e <__cvt+0xa6>

08007cbc <__exponent>:
 8007cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	bfb8      	it	lt
 8007cc4:	4249      	neglt	r1, r1
 8007cc6:	f803 2b02 	strb.w	r2, [r3], #2
 8007cca:	bfb4      	ite	lt
 8007ccc:	222d      	movlt	r2, #45	; 0x2d
 8007cce:	222b      	movge	r2, #43	; 0x2b
 8007cd0:	2909      	cmp	r1, #9
 8007cd2:	7042      	strb	r2, [r0, #1]
 8007cd4:	dd2a      	ble.n	8007d2c <__exponent+0x70>
 8007cd6:	f10d 0207 	add.w	r2, sp, #7
 8007cda:	4617      	mov	r7, r2
 8007cdc:	260a      	movs	r6, #10
 8007cde:	4694      	mov	ip, r2
 8007ce0:	fb91 f5f6 	sdiv	r5, r1, r6
 8007ce4:	fb06 1415 	mls	r4, r6, r5, r1
 8007ce8:	3430      	adds	r4, #48	; 0x30
 8007cea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007cee:	460c      	mov	r4, r1
 8007cf0:	2c63      	cmp	r4, #99	; 0x63
 8007cf2:	f102 32ff 	add.w	r2, r2, #4294967295
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	dcf1      	bgt.n	8007cde <__exponent+0x22>
 8007cfa:	3130      	adds	r1, #48	; 0x30
 8007cfc:	f1ac 0402 	sub.w	r4, ip, #2
 8007d00:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d04:	1c41      	adds	r1, r0, #1
 8007d06:	4622      	mov	r2, r4
 8007d08:	42ba      	cmp	r2, r7
 8007d0a:	d30a      	bcc.n	8007d22 <__exponent+0x66>
 8007d0c:	f10d 0209 	add.w	r2, sp, #9
 8007d10:	eba2 020c 	sub.w	r2, r2, ip
 8007d14:	42bc      	cmp	r4, r7
 8007d16:	bf88      	it	hi
 8007d18:	2200      	movhi	r2, #0
 8007d1a:	4413      	add	r3, r2
 8007d1c:	1a18      	subs	r0, r3, r0
 8007d1e:	b003      	add	sp, #12
 8007d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d22:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d26:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d2a:	e7ed      	b.n	8007d08 <__exponent+0x4c>
 8007d2c:	2330      	movs	r3, #48	; 0x30
 8007d2e:	3130      	adds	r1, #48	; 0x30
 8007d30:	7083      	strb	r3, [r0, #2]
 8007d32:	70c1      	strb	r1, [r0, #3]
 8007d34:	1d03      	adds	r3, r0, #4
 8007d36:	e7f1      	b.n	8007d1c <__exponent+0x60>

08007d38 <_printf_float>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	ed2d 8b02 	vpush	{d8}
 8007d40:	b08d      	sub	sp, #52	; 0x34
 8007d42:	460c      	mov	r4, r1
 8007d44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d48:	4616      	mov	r6, r2
 8007d4a:	461f      	mov	r7, r3
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	f000 fdc9 	bl	80088e4 <_localeconv_r>
 8007d52:	f8d0 a000 	ldr.w	sl, [r0]
 8007d56:	4650      	mov	r0, sl
 8007d58:	f7f8 faaa 	bl	80002b0 <strlen>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	9305      	str	r3, [sp, #20]
 8007d64:	f8d8 3000 	ldr.w	r3, [r8]
 8007d68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d6c:	3307      	adds	r3, #7
 8007d6e:	f023 0307 	bic.w	r3, r3, #7
 8007d72:	f103 0208 	add.w	r2, r3, #8
 8007d76:	f8c8 2000 	str.w	r2, [r8]
 8007d7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d82:	9307      	str	r3, [sp, #28]
 8007d84:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d88:	ee08 0a10 	vmov	s16, r0
 8007d8c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007d90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d94:	4b9e      	ldr	r3, [pc, #632]	; (8008010 <_printf_float+0x2d8>)
 8007d96:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9a:	f7f8 fee7 	bl	8000b6c <__aeabi_dcmpun>
 8007d9e:	bb88      	cbnz	r0, 8007e04 <_printf_float+0xcc>
 8007da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007da4:	4b9a      	ldr	r3, [pc, #616]	; (8008010 <_printf_float+0x2d8>)
 8007da6:	f04f 32ff 	mov.w	r2, #4294967295
 8007daa:	f7f8 fec1 	bl	8000b30 <__aeabi_dcmple>
 8007dae:	bb48      	cbnz	r0, 8007e04 <_printf_float+0xcc>
 8007db0:	2200      	movs	r2, #0
 8007db2:	2300      	movs	r3, #0
 8007db4:	4640      	mov	r0, r8
 8007db6:	4649      	mov	r1, r9
 8007db8:	f7f8 feb0 	bl	8000b1c <__aeabi_dcmplt>
 8007dbc:	b110      	cbz	r0, 8007dc4 <_printf_float+0x8c>
 8007dbe:	232d      	movs	r3, #45	; 0x2d
 8007dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dc4:	4a93      	ldr	r2, [pc, #588]	; (8008014 <_printf_float+0x2dc>)
 8007dc6:	4b94      	ldr	r3, [pc, #592]	; (8008018 <_printf_float+0x2e0>)
 8007dc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007dcc:	bf94      	ite	ls
 8007dce:	4690      	movls	r8, r2
 8007dd0:	4698      	movhi	r8, r3
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	6123      	str	r3, [r4, #16]
 8007dd6:	9b05      	ldr	r3, [sp, #20]
 8007dd8:	f023 0304 	bic.w	r3, r3, #4
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	f04f 0900 	mov.w	r9, #0
 8007de2:	9700      	str	r7, [sp, #0]
 8007de4:	4633      	mov	r3, r6
 8007de6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007de8:	4621      	mov	r1, r4
 8007dea:	4628      	mov	r0, r5
 8007dec:	f000 f9da 	bl	80081a4 <_printf_common>
 8007df0:	3001      	adds	r0, #1
 8007df2:	f040 8090 	bne.w	8007f16 <_printf_float+0x1de>
 8007df6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfa:	b00d      	add	sp, #52	; 0x34
 8007dfc:	ecbd 8b02 	vpop	{d8}
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	4642      	mov	r2, r8
 8007e06:	464b      	mov	r3, r9
 8007e08:	4640      	mov	r0, r8
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	f7f8 feae 	bl	8000b6c <__aeabi_dcmpun>
 8007e10:	b140      	cbz	r0, 8007e24 <_printf_float+0xec>
 8007e12:	464b      	mov	r3, r9
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bfbc      	itt	lt
 8007e18:	232d      	movlt	r3, #45	; 0x2d
 8007e1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e1e:	4a7f      	ldr	r2, [pc, #508]	; (800801c <_printf_float+0x2e4>)
 8007e20:	4b7f      	ldr	r3, [pc, #508]	; (8008020 <_printf_float+0x2e8>)
 8007e22:	e7d1      	b.n	8007dc8 <_printf_float+0x90>
 8007e24:	6863      	ldr	r3, [r4, #4]
 8007e26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e2a:	9206      	str	r2, [sp, #24]
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	d13f      	bne.n	8007eb0 <_printf_float+0x178>
 8007e30:	2306      	movs	r3, #6
 8007e32:	6063      	str	r3, [r4, #4]
 8007e34:	9b05      	ldr	r3, [sp, #20]
 8007e36:	6861      	ldr	r1, [r4, #4]
 8007e38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9303      	str	r3, [sp, #12]
 8007e40:	ab0a      	add	r3, sp, #40	; 0x28
 8007e42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e46:	ab09      	add	r3, sp, #36	; 0x24
 8007e48:	ec49 8b10 	vmov	d0, r8, r9
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	6022      	str	r2, [r4, #0]
 8007e50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e54:	4628      	mov	r0, r5
 8007e56:	f7ff fecf 	bl	8007bf8 <__cvt>
 8007e5a:	9b06      	ldr	r3, [sp, #24]
 8007e5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e5e:	2b47      	cmp	r3, #71	; 0x47
 8007e60:	4680      	mov	r8, r0
 8007e62:	d108      	bne.n	8007e76 <_printf_float+0x13e>
 8007e64:	1cc8      	adds	r0, r1, #3
 8007e66:	db02      	blt.n	8007e6e <_printf_float+0x136>
 8007e68:	6863      	ldr	r3, [r4, #4]
 8007e6a:	4299      	cmp	r1, r3
 8007e6c:	dd41      	ble.n	8007ef2 <_printf_float+0x1ba>
 8007e6e:	f1ab 0302 	sub.w	r3, fp, #2
 8007e72:	fa5f fb83 	uxtb.w	fp, r3
 8007e76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e7a:	d820      	bhi.n	8007ebe <_printf_float+0x186>
 8007e7c:	3901      	subs	r1, #1
 8007e7e:	465a      	mov	r2, fp
 8007e80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e84:	9109      	str	r1, [sp, #36]	; 0x24
 8007e86:	f7ff ff19 	bl	8007cbc <__exponent>
 8007e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e8c:	1813      	adds	r3, r2, r0
 8007e8e:	2a01      	cmp	r2, #1
 8007e90:	4681      	mov	r9, r0
 8007e92:	6123      	str	r3, [r4, #16]
 8007e94:	dc02      	bgt.n	8007e9c <_printf_float+0x164>
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	07d2      	lsls	r2, r2, #31
 8007e9a:	d501      	bpl.n	8007ea0 <_printf_float+0x168>
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	6123      	str	r3, [r4, #16]
 8007ea0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d09c      	beq.n	8007de2 <_printf_float+0xaa>
 8007ea8:	232d      	movs	r3, #45	; 0x2d
 8007eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eae:	e798      	b.n	8007de2 <_printf_float+0xaa>
 8007eb0:	9a06      	ldr	r2, [sp, #24]
 8007eb2:	2a47      	cmp	r2, #71	; 0x47
 8007eb4:	d1be      	bne.n	8007e34 <_printf_float+0xfc>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1bc      	bne.n	8007e34 <_printf_float+0xfc>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e7b9      	b.n	8007e32 <_printf_float+0xfa>
 8007ebe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ec2:	d118      	bne.n	8007ef6 <_printf_float+0x1be>
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	6863      	ldr	r3, [r4, #4]
 8007ec8:	dd0b      	ble.n	8007ee2 <_printf_float+0x1aa>
 8007eca:	6121      	str	r1, [r4, #16]
 8007ecc:	b913      	cbnz	r3, 8007ed4 <_printf_float+0x19c>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	07d0      	lsls	r0, r2, #31
 8007ed2:	d502      	bpl.n	8007eda <_printf_float+0x1a2>
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	440b      	add	r3, r1
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	65a1      	str	r1, [r4, #88]	; 0x58
 8007edc:	f04f 0900 	mov.w	r9, #0
 8007ee0:	e7de      	b.n	8007ea0 <_printf_float+0x168>
 8007ee2:	b913      	cbnz	r3, 8007eea <_printf_float+0x1b2>
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	07d2      	lsls	r2, r2, #31
 8007ee8:	d501      	bpl.n	8007eee <_printf_float+0x1b6>
 8007eea:	3302      	adds	r3, #2
 8007eec:	e7f4      	b.n	8007ed8 <_printf_float+0x1a0>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e7f2      	b.n	8007ed8 <_printf_float+0x1a0>
 8007ef2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	db05      	blt.n	8007f08 <_printf_float+0x1d0>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	6121      	str	r1, [r4, #16]
 8007f00:	07d8      	lsls	r0, r3, #31
 8007f02:	d5ea      	bpl.n	8007eda <_printf_float+0x1a2>
 8007f04:	1c4b      	adds	r3, r1, #1
 8007f06:	e7e7      	b.n	8007ed8 <_printf_float+0x1a0>
 8007f08:	2900      	cmp	r1, #0
 8007f0a:	bfd4      	ite	le
 8007f0c:	f1c1 0202 	rsble	r2, r1, #2
 8007f10:	2201      	movgt	r2, #1
 8007f12:	4413      	add	r3, r2
 8007f14:	e7e0      	b.n	8007ed8 <_printf_float+0x1a0>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	055a      	lsls	r2, r3, #21
 8007f1a:	d407      	bmi.n	8007f2c <_printf_float+0x1f4>
 8007f1c:	6923      	ldr	r3, [r4, #16]
 8007f1e:	4642      	mov	r2, r8
 8007f20:	4631      	mov	r1, r6
 8007f22:	4628      	mov	r0, r5
 8007f24:	47b8      	blx	r7
 8007f26:	3001      	adds	r0, #1
 8007f28:	d12c      	bne.n	8007f84 <_printf_float+0x24c>
 8007f2a:	e764      	b.n	8007df6 <_printf_float+0xbe>
 8007f2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f30:	f240 80e0 	bls.w	80080f4 <_printf_float+0x3bc>
 8007f34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f7f8 fde4 	bl	8000b08 <__aeabi_dcmpeq>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d034      	beq.n	8007fae <_printf_float+0x276>
 8007f44:	4a37      	ldr	r2, [pc, #220]	; (8008024 <_printf_float+0x2ec>)
 8007f46:	2301      	movs	r3, #1
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f43f af51 	beq.w	8007df6 <_printf_float+0xbe>
 8007f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	db02      	blt.n	8007f62 <_printf_float+0x22a>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	07d8      	lsls	r0, r3, #31
 8007f60:	d510      	bpl.n	8007f84 <_printf_float+0x24c>
 8007f62:	ee18 3a10 	vmov	r3, s16
 8007f66:	4652      	mov	r2, sl
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f af41 	beq.w	8007df6 <_printf_float+0xbe>
 8007f74:	f04f 0800 	mov.w	r8, #0
 8007f78:	f104 091a 	add.w	r9, r4, #26
 8007f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	4543      	cmp	r3, r8
 8007f82:	dc09      	bgt.n	8007f98 <_printf_float+0x260>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	079b      	lsls	r3, r3, #30
 8007f88:	f100 8107 	bmi.w	800819a <_printf_float+0x462>
 8007f8c:	68e0      	ldr	r0, [r4, #12]
 8007f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f90:	4298      	cmp	r0, r3
 8007f92:	bfb8      	it	lt
 8007f94:	4618      	movlt	r0, r3
 8007f96:	e730      	b.n	8007dfa <_printf_float+0xc2>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	464a      	mov	r2, r9
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	f43f af27 	beq.w	8007df6 <_printf_float+0xbe>
 8007fa8:	f108 0801 	add.w	r8, r8, #1
 8007fac:	e7e6      	b.n	8007f7c <_printf_float+0x244>
 8007fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	dc39      	bgt.n	8008028 <_printf_float+0x2f0>
 8007fb4:	4a1b      	ldr	r2, [pc, #108]	; (8008024 <_printf_float+0x2ec>)
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f43f af19 	beq.w	8007df6 <_printf_float+0xbe>
 8007fc4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	d102      	bne.n	8007fd2 <_printf_float+0x29a>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	07d9      	lsls	r1, r3, #31
 8007fd0:	d5d8      	bpl.n	8007f84 <_printf_float+0x24c>
 8007fd2:	ee18 3a10 	vmov	r3, s16
 8007fd6:	4652      	mov	r2, sl
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	f43f af09 	beq.w	8007df6 <_printf_float+0xbe>
 8007fe4:	f04f 0900 	mov.w	r9, #0
 8007fe8:	f104 0a1a 	add.w	sl, r4, #26
 8007fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fee:	425b      	negs	r3, r3
 8007ff0:	454b      	cmp	r3, r9
 8007ff2:	dc01      	bgt.n	8007ff8 <_printf_float+0x2c0>
 8007ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ff6:	e792      	b.n	8007f1e <_printf_float+0x1e6>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4652      	mov	r2, sl
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	47b8      	blx	r7
 8008002:	3001      	adds	r0, #1
 8008004:	f43f aef7 	beq.w	8007df6 <_printf_float+0xbe>
 8008008:	f109 0901 	add.w	r9, r9, #1
 800800c:	e7ee      	b.n	8007fec <_printf_float+0x2b4>
 800800e:	bf00      	nop
 8008010:	7fefffff 	.word	0x7fefffff
 8008014:	0800bb20 	.word	0x0800bb20
 8008018:	0800bb24 	.word	0x0800bb24
 800801c:	0800bb28 	.word	0x0800bb28
 8008020:	0800bb2c 	.word	0x0800bb2c
 8008024:	0800bb30 	.word	0x0800bb30
 8008028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800802a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800802c:	429a      	cmp	r2, r3
 800802e:	bfa8      	it	ge
 8008030:	461a      	movge	r2, r3
 8008032:	2a00      	cmp	r2, #0
 8008034:	4691      	mov	r9, r2
 8008036:	dc37      	bgt.n	80080a8 <_printf_float+0x370>
 8008038:	f04f 0b00 	mov.w	fp, #0
 800803c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008040:	f104 021a 	add.w	r2, r4, #26
 8008044:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008046:	9305      	str	r3, [sp, #20]
 8008048:	eba3 0309 	sub.w	r3, r3, r9
 800804c:	455b      	cmp	r3, fp
 800804e:	dc33      	bgt.n	80080b8 <_printf_float+0x380>
 8008050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008054:	429a      	cmp	r2, r3
 8008056:	db3b      	blt.n	80080d0 <_printf_float+0x398>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	07da      	lsls	r2, r3, #31
 800805c:	d438      	bmi.n	80080d0 <_printf_float+0x398>
 800805e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008062:	eba2 0903 	sub.w	r9, r2, r3
 8008066:	9b05      	ldr	r3, [sp, #20]
 8008068:	1ad2      	subs	r2, r2, r3
 800806a:	4591      	cmp	r9, r2
 800806c:	bfa8      	it	ge
 800806e:	4691      	movge	r9, r2
 8008070:	f1b9 0f00 	cmp.w	r9, #0
 8008074:	dc35      	bgt.n	80080e2 <_printf_float+0x3aa>
 8008076:	f04f 0800 	mov.w	r8, #0
 800807a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800807e:	f104 0a1a 	add.w	sl, r4, #26
 8008082:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008086:	1a9b      	subs	r3, r3, r2
 8008088:	eba3 0309 	sub.w	r3, r3, r9
 800808c:	4543      	cmp	r3, r8
 800808e:	f77f af79 	ble.w	8007f84 <_printf_float+0x24c>
 8008092:	2301      	movs	r3, #1
 8008094:	4652      	mov	r2, sl
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	f43f aeaa 	beq.w	8007df6 <_printf_float+0xbe>
 80080a2:	f108 0801 	add.w	r8, r8, #1
 80080a6:	e7ec      	b.n	8008082 <_printf_float+0x34a>
 80080a8:	4613      	mov	r3, r2
 80080aa:	4631      	mov	r1, r6
 80080ac:	4642      	mov	r2, r8
 80080ae:	4628      	mov	r0, r5
 80080b0:	47b8      	blx	r7
 80080b2:	3001      	adds	r0, #1
 80080b4:	d1c0      	bne.n	8008038 <_printf_float+0x300>
 80080b6:	e69e      	b.n	8007df6 <_printf_float+0xbe>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4631      	mov	r1, r6
 80080bc:	4628      	mov	r0, r5
 80080be:	9205      	str	r2, [sp, #20]
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	f43f ae97 	beq.w	8007df6 <_printf_float+0xbe>
 80080c8:	9a05      	ldr	r2, [sp, #20]
 80080ca:	f10b 0b01 	add.w	fp, fp, #1
 80080ce:	e7b9      	b.n	8008044 <_printf_float+0x30c>
 80080d0:	ee18 3a10 	vmov	r3, s16
 80080d4:	4652      	mov	r2, sl
 80080d6:	4631      	mov	r1, r6
 80080d8:	4628      	mov	r0, r5
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	d1be      	bne.n	800805e <_printf_float+0x326>
 80080e0:	e689      	b.n	8007df6 <_printf_float+0xbe>
 80080e2:	9a05      	ldr	r2, [sp, #20]
 80080e4:	464b      	mov	r3, r9
 80080e6:	4442      	add	r2, r8
 80080e8:	4631      	mov	r1, r6
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b8      	blx	r7
 80080ee:	3001      	adds	r0, #1
 80080f0:	d1c1      	bne.n	8008076 <_printf_float+0x33e>
 80080f2:	e680      	b.n	8007df6 <_printf_float+0xbe>
 80080f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080f6:	2a01      	cmp	r2, #1
 80080f8:	dc01      	bgt.n	80080fe <_printf_float+0x3c6>
 80080fa:	07db      	lsls	r3, r3, #31
 80080fc:	d53a      	bpl.n	8008174 <_printf_float+0x43c>
 80080fe:	2301      	movs	r3, #1
 8008100:	4642      	mov	r2, r8
 8008102:	4631      	mov	r1, r6
 8008104:	4628      	mov	r0, r5
 8008106:	47b8      	blx	r7
 8008108:	3001      	adds	r0, #1
 800810a:	f43f ae74 	beq.w	8007df6 <_printf_float+0xbe>
 800810e:	ee18 3a10 	vmov	r3, s16
 8008112:	4652      	mov	r2, sl
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f ae6b 	beq.w	8007df6 <_printf_float+0xbe>
 8008120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008124:	2200      	movs	r2, #0
 8008126:	2300      	movs	r3, #0
 8008128:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800812c:	f7f8 fcec 	bl	8000b08 <__aeabi_dcmpeq>
 8008130:	b9d8      	cbnz	r0, 800816a <_printf_float+0x432>
 8008132:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008136:	f108 0201 	add.w	r2, r8, #1
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	d10e      	bne.n	8008162 <_printf_float+0x42a>
 8008144:	e657      	b.n	8007df6 <_printf_float+0xbe>
 8008146:	2301      	movs	r3, #1
 8008148:	4652      	mov	r2, sl
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	f43f ae50 	beq.w	8007df6 <_printf_float+0xbe>
 8008156:	f108 0801 	add.w	r8, r8, #1
 800815a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815c:	3b01      	subs	r3, #1
 800815e:	4543      	cmp	r3, r8
 8008160:	dcf1      	bgt.n	8008146 <_printf_float+0x40e>
 8008162:	464b      	mov	r3, r9
 8008164:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008168:	e6da      	b.n	8007f20 <_printf_float+0x1e8>
 800816a:	f04f 0800 	mov.w	r8, #0
 800816e:	f104 0a1a 	add.w	sl, r4, #26
 8008172:	e7f2      	b.n	800815a <_printf_float+0x422>
 8008174:	2301      	movs	r3, #1
 8008176:	4642      	mov	r2, r8
 8008178:	e7df      	b.n	800813a <_printf_float+0x402>
 800817a:	2301      	movs	r3, #1
 800817c:	464a      	mov	r2, r9
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f ae36 	beq.w	8007df6 <_printf_float+0xbe>
 800818a:	f108 0801 	add.w	r8, r8, #1
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008192:	1a5b      	subs	r3, r3, r1
 8008194:	4543      	cmp	r3, r8
 8008196:	dcf0      	bgt.n	800817a <_printf_float+0x442>
 8008198:	e6f8      	b.n	8007f8c <_printf_float+0x254>
 800819a:	f04f 0800 	mov.w	r8, #0
 800819e:	f104 0919 	add.w	r9, r4, #25
 80081a2:	e7f4      	b.n	800818e <_printf_float+0x456>

080081a4 <_printf_common>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	4616      	mov	r6, r2
 80081aa:	4699      	mov	r9, r3
 80081ac:	688a      	ldr	r2, [r1, #8]
 80081ae:	690b      	ldr	r3, [r1, #16]
 80081b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081b4:	4293      	cmp	r3, r2
 80081b6:	bfb8      	it	lt
 80081b8:	4613      	movlt	r3, r2
 80081ba:	6033      	str	r3, [r6, #0]
 80081bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081c0:	4607      	mov	r7, r0
 80081c2:	460c      	mov	r4, r1
 80081c4:	b10a      	cbz	r2, 80081ca <_printf_common+0x26>
 80081c6:	3301      	adds	r3, #1
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	0699      	lsls	r1, r3, #26
 80081ce:	bf42      	ittt	mi
 80081d0:	6833      	ldrmi	r3, [r6, #0]
 80081d2:	3302      	addmi	r3, #2
 80081d4:	6033      	strmi	r3, [r6, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	f015 0506 	ands.w	r5, r5, #6
 80081dc:	d106      	bne.n	80081ec <_printf_common+0x48>
 80081de:	f104 0a19 	add.w	sl, r4, #25
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	6832      	ldr	r2, [r6, #0]
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	dc26      	bgt.n	800823a <_printf_common+0x96>
 80081ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081f0:	1e13      	subs	r3, r2, #0
 80081f2:	6822      	ldr	r2, [r4, #0]
 80081f4:	bf18      	it	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	0692      	lsls	r2, r2, #26
 80081fa:	d42b      	bmi.n	8008254 <_printf_common+0xb0>
 80081fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008200:	4649      	mov	r1, r9
 8008202:	4638      	mov	r0, r7
 8008204:	47c0      	blx	r8
 8008206:	3001      	adds	r0, #1
 8008208:	d01e      	beq.n	8008248 <_printf_common+0xa4>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	f003 0306 	and.w	r3, r3, #6
 8008212:	2b04      	cmp	r3, #4
 8008214:	bf02      	ittt	eq
 8008216:	68e5      	ldreq	r5, [r4, #12]
 8008218:	6833      	ldreq	r3, [r6, #0]
 800821a:	1aed      	subeq	r5, r5, r3
 800821c:	68a3      	ldr	r3, [r4, #8]
 800821e:	bf0c      	ite	eq
 8008220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008224:	2500      	movne	r5, #0
 8008226:	4293      	cmp	r3, r2
 8008228:	bfc4      	itt	gt
 800822a:	1a9b      	subgt	r3, r3, r2
 800822c:	18ed      	addgt	r5, r5, r3
 800822e:	2600      	movs	r6, #0
 8008230:	341a      	adds	r4, #26
 8008232:	42b5      	cmp	r5, r6
 8008234:	d11a      	bne.n	800826c <_printf_common+0xc8>
 8008236:	2000      	movs	r0, #0
 8008238:	e008      	b.n	800824c <_printf_common+0xa8>
 800823a:	2301      	movs	r3, #1
 800823c:	4652      	mov	r2, sl
 800823e:	4649      	mov	r1, r9
 8008240:	4638      	mov	r0, r7
 8008242:	47c0      	blx	r8
 8008244:	3001      	adds	r0, #1
 8008246:	d103      	bne.n	8008250 <_printf_common+0xac>
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008250:	3501      	adds	r5, #1
 8008252:	e7c6      	b.n	80081e2 <_printf_common+0x3e>
 8008254:	18e1      	adds	r1, r4, r3
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	2030      	movs	r0, #48	; 0x30
 800825a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800825e:	4422      	add	r2, r4
 8008260:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008264:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008268:	3302      	adds	r3, #2
 800826a:	e7c7      	b.n	80081fc <_printf_common+0x58>
 800826c:	2301      	movs	r3, #1
 800826e:	4622      	mov	r2, r4
 8008270:	4649      	mov	r1, r9
 8008272:	4638      	mov	r0, r7
 8008274:	47c0      	blx	r8
 8008276:	3001      	adds	r0, #1
 8008278:	d0e6      	beq.n	8008248 <_printf_common+0xa4>
 800827a:	3601      	adds	r6, #1
 800827c:	e7d9      	b.n	8008232 <_printf_common+0x8e>
	...

08008280 <_printf_i>:
 8008280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	7e0f      	ldrb	r7, [r1, #24]
 8008286:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008288:	2f78      	cmp	r7, #120	; 0x78
 800828a:	4691      	mov	r9, r2
 800828c:	4680      	mov	r8, r0
 800828e:	460c      	mov	r4, r1
 8008290:	469a      	mov	sl, r3
 8008292:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008296:	d807      	bhi.n	80082a8 <_printf_i+0x28>
 8008298:	2f62      	cmp	r7, #98	; 0x62
 800829a:	d80a      	bhi.n	80082b2 <_printf_i+0x32>
 800829c:	2f00      	cmp	r7, #0
 800829e:	f000 80d4 	beq.w	800844a <_printf_i+0x1ca>
 80082a2:	2f58      	cmp	r7, #88	; 0x58
 80082a4:	f000 80c0 	beq.w	8008428 <_printf_i+0x1a8>
 80082a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082b0:	e03a      	b.n	8008328 <_printf_i+0xa8>
 80082b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082b6:	2b15      	cmp	r3, #21
 80082b8:	d8f6      	bhi.n	80082a8 <_printf_i+0x28>
 80082ba:	a101      	add	r1, pc, #4	; (adr r1, 80082c0 <_printf_i+0x40>)
 80082bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082c0:	08008319 	.word	0x08008319
 80082c4:	0800832d 	.word	0x0800832d
 80082c8:	080082a9 	.word	0x080082a9
 80082cc:	080082a9 	.word	0x080082a9
 80082d0:	080082a9 	.word	0x080082a9
 80082d4:	080082a9 	.word	0x080082a9
 80082d8:	0800832d 	.word	0x0800832d
 80082dc:	080082a9 	.word	0x080082a9
 80082e0:	080082a9 	.word	0x080082a9
 80082e4:	080082a9 	.word	0x080082a9
 80082e8:	080082a9 	.word	0x080082a9
 80082ec:	08008431 	.word	0x08008431
 80082f0:	08008359 	.word	0x08008359
 80082f4:	080083eb 	.word	0x080083eb
 80082f8:	080082a9 	.word	0x080082a9
 80082fc:	080082a9 	.word	0x080082a9
 8008300:	08008453 	.word	0x08008453
 8008304:	080082a9 	.word	0x080082a9
 8008308:	08008359 	.word	0x08008359
 800830c:	080082a9 	.word	0x080082a9
 8008310:	080082a9 	.word	0x080082a9
 8008314:	080083f3 	.word	0x080083f3
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	1d1a      	adds	r2, r3, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	602a      	str	r2, [r5, #0]
 8008320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008324:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008328:	2301      	movs	r3, #1
 800832a:	e09f      	b.n	800846c <_printf_i+0x1ec>
 800832c:	6820      	ldr	r0, [r4, #0]
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	0607      	lsls	r7, r0, #24
 8008332:	f103 0104 	add.w	r1, r3, #4
 8008336:	6029      	str	r1, [r5, #0]
 8008338:	d501      	bpl.n	800833e <_printf_i+0xbe>
 800833a:	681e      	ldr	r6, [r3, #0]
 800833c:	e003      	b.n	8008346 <_printf_i+0xc6>
 800833e:	0646      	lsls	r6, r0, #25
 8008340:	d5fb      	bpl.n	800833a <_printf_i+0xba>
 8008342:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008346:	2e00      	cmp	r6, #0
 8008348:	da03      	bge.n	8008352 <_printf_i+0xd2>
 800834a:	232d      	movs	r3, #45	; 0x2d
 800834c:	4276      	negs	r6, r6
 800834e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008352:	485a      	ldr	r0, [pc, #360]	; (80084bc <_printf_i+0x23c>)
 8008354:	230a      	movs	r3, #10
 8008356:	e012      	b.n	800837e <_printf_i+0xfe>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	6820      	ldr	r0, [r4, #0]
 800835c:	1d19      	adds	r1, r3, #4
 800835e:	6029      	str	r1, [r5, #0]
 8008360:	0605      	lsls	r5, r0, #24
 8008362:	d501      	bpl.n	8008368 <_printf_i+0xe8>
 8008364:	681e      	ldr	r6, [r3, #0]
 8008366:	e002      	b.n	800836e <_printf_i+0xee>
 8008368:	0641      	lsls	r1, r0, #25
 800836a:	d5fb      	bpl.n	8008364 <_printf_i+0xe4>
 800836c:	881e      	ldrh	r6, [r3, #0]
 800836e:	4853      	ldr	r0, [pc, #332]	; (80084bc <_printf_i+0x23c>)
 8008370:	2f6f      	cmp	r7, #111	; 0x6f
 8008372:	bf0c      	ite	eq
 8008374:	2308      	moveq	r3, #8
 8008376:	230a      	movne	r3, #10
 8008378:	2100      	movs	r1, #0
 800837a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800837e:	6865      	ldr	r5, [r4, #4]
 8008380:	60a5      	str	r5, [r4, #8]
 8008382:	2d00      	cmp	r5, #0
 8008384:	bfa2      	ittt	ge
 8008386:	6821      	ldrge	r1, [r4, #0]
 8008388:	f021 0104 	bicge.w	r1, r1, #4
 800838c:	6021      	strge	r1, [r4, #0]
 800838e:	b90e      	cbnz	r6, 8008394 <_printf_i+0x114>
 8008390:	2d00      	cmp	r5, #0
 8008392:	d04b      	beq.n	800842c <_printf_i+0x1ac>
 8008394:	4615      	mov	r5, r2
 8008396:	fbb6 f1f3 	udiv	r1, r6, r3
 800839a:	fb03 6711 	mls	r7, r3, r1, r6
 800839e:	5dc7      	ldrb	r7, [r0, r7]
 80083a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083a4:	4637      	mov	r7, r6
 80083a6:	42bb      	cmp	r3, r7
 80083a8:	460e      	mov	r6, r1
 80083aa:	d9f4      	bls.n	8008396 <_printf_i+0x116>
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d10b      	bne.n	80083c8 <_printf_i+0x148>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	07de      	lsls	r6, r3, #31
 80083b4:	d508      	bpl.n	80083c8 <_printf_i+0x148>
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	6861      	ldr	r1, [r4, #4]
 80083ba:	4299      	cmp	r1, r3
 80083bc:	bfde      	ittt	le
 80083be:	2330      	movle	r3, #48	; 0x30
 80083c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083c8:	1b52      	subs	r2, r2, r5
 80083ca:	6122      	str	r2, [r4, #16]
 80083cc:	f8cd a000 	str.w	sl, [sp]
 80083d0:	464b      	mov	r3, r9
 80083d2:	aa03      	add	r2, sp, #12
 80083d4:	4621      	mov	r1, r4
 80083d6:	4640      	mov	r0, r8
 80083d8:	f7ff fee4 	bl	80081a4 <_printf_common>
 80083dc:	3001      	adds	r0, #1
 80083de:	d14a      	bne.n	8008476 <_printf_i+0x1f6>
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	b004      	add	sp, #16
 80083e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	f043 0320 	orr.w	r3, r3, #32
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	4833      	ldr	r0, [pc, #204]	; (80084c0 <_printf_i+0x240>)
 80083f4:	2778      	movs	r7, #120	; 0x78
 80083f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	6829      	ldr	r1, [r5, #0]
 80083fe:	061f      	lsls	r7, r3, #24
 8008400:	f851 6b04 	ldr.w	r6, [r1], #4
 8008404:	d402      	bmi.n	800840c <_printf_i+0x18c>
 8008406:	065f      	lsls	r7, r3, #25
 8008408:	bf48      	it	mi
 800840a:	b2b6      	uxthmi	r6, r6
 800840c:	07df      	lsls	r7, r3, #31
 800840e:	bf48      	it	mi
 8008410:	f043 0320 	orrmi.w	r3, r3, #32
 8008414:	6029      	str	r1, [r5, #0]
 8008416:	bf48      	it	mi
 8008418:	6023      	strmi	r3, [r4, #0]
 800841a:	b91e      	cbnz	r6, 8008424 <_printf_i+0x1a4>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	f023 0320 	bic.w	r3, r3, #32
 8008422:	6023      	str	r3, [r4, #0]
 8008424:	2310      	movs	r3, #16
 8008426:	e7a7      	b.n	8008378 <_printf_i+0xf8>
 8008428:	4824      	ldr	r0, [pc, #144]	; (80084bc <_printf_i+0x23c>)
 800842a:	e7e4      	b.n	80083f6 <_printf_i+0x176>
 800842c:	4615      	mov	r5, r2
 800842e:	e7bd      	b.n	80083ac <_printf_i+0x12c>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	6826      	ldr	r6, [r4, #0]
 8008434:	6961      	ldr	r1, [r4, #20]
 8008436:	1d18      	adds	r0, r3, #4
 8008438:	6028      	str	r0, [r5, #0]
 800843a:	0635      	lsls	r5, r6, #24
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	d501      	bpl.n	8008444 <_printf_i+0x1c4>
 8008440:	6019      	str	r1, [r3, #0]
 8008442:	e002      	b.n	800844a <_printf_i+0x1ca>
 8008444:	0670      	lsls	r0, r6, #25
 8008446:	d5fb      	bpl.n	8008440 <_printf_i+0x1c0>
 8008448:	8019      	strh	r1, [r3, #0]
 800844a:	2300      	movs	r3, #0
 800844c:	6123      	str	r3, [r4, #16]
 800844e:	4615      	mov	r5, r2
 8008450:	e7bc      	b.n	80083cc <_printf_i+0x14c>
 8008452:	682b      	ldr	r3, [r5, #0]
 8008454:	1d1a      	adds	r2, r3, #4
 8008456:	602a      	str	r2, [r5, #0]
 8008458:	681d      	ldr	r5, [r3, #0]
 800845a:	6862      	ldr	r2, [r4, #4]
 800845c:	2100      	movs	r1, #0
 800845e:	4628      	mov	r0, r5
 8008460:	f7f7 fed6 	bl	8000210 <memchr>
 8008464:	b108      	cbz	r0, 800846a <_printf_i+0x1ea>
 8008466:	1b40      	subs	r0, r0, r5
 8008468:	6060      	str	r0, [r4, #4]
 800846a:	6863      	ldr	r3, [r4, #4]
 800846c:	6123      	str	r3, [r4, #16]
 800846e:	2300      	movs	r3, #0
 8008470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008474:	e7aa      	b.n	80083cc <_printf_i+0x14c>
 8008476:	6923      	ldr	r3, [r4, #16]
 8008478:	462a      	mov	r2, r5
 800847a:	4649      	mov	r1, r9
 800847c:	4640      	mov	r0, r8
 800847e:	47d0      	blx	sl
 8008480:	3001      	adds	r0, #1
 8008482:	d0ad      	beq.n	80083e0 <_printf_i+0x160>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	079b      	lsls	r3, r3, #30
 8008488:	d413      	bmi.n	80084b2 <_printf_i+0x232>
 800848a:	68e0      	ldr	r0, [r4, #12]
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	4298      	cmp	r0, r3
 8008490:	bfb8      	it	lt
 8008492:	4618      	movlt	r0, r3
 8008494:	e7a6      	b.n	80083e4 <_printf_i+0x164>
 8008496:	2301      	movs	r3, #1
 8008498:	4632      	mov	r2, r6
 800849a:	4649      	mov	r1, r9
 800849c:	4640      	mov	r0, r8
 800849e:	47d0      	blx	sl
 80084a0:	3001      	adds	r0, #1
 80084a2:	d09d      	beq.n	80083e0 <_printf_i+0x160>
 80084a4:	3501      	adds	r5, #1
 80084a6:	68e3      	ldr	r3, [r4, #12]
 80084a8:	9903      	ldr	r1, [sp, #12]
 80084aa:	1a5b      	subs	r3, r3, r1
 80084ac:	42ab      	cmp	r3, r5
 80084ae:	dcf2      	bgt.n	8008496 <_printf_i+0x216>
 80084b0:	e7eb      	b.n	800848a <_printf_i+0x20a>
 80084b2:	2500      	movs	r5, #0
 80084b4:	f104 0619 	add.w	r6, r4, #25
 80084b8:	e7f5      	b.n	80084a6 <_printf_i+0x226>
 80084ba:	bf00      	nop
 80084bc:	0800bb32 	.word	0x0800bb32
 80084c0:	0800bb43 	.word	0x0800bb43

080084c4 <std>:
 80084c4:	2300      	movs	r3, #0
 80084c6:	b510      	push	{r4, lr}
 80084c8:	4604      	mov	r4, r0
 80084ca:	e9c0 3300 	strd	r3, r3, [r0]
 80084ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084d2:	6083      	str	r3, [r0, #8]
 80084d4:	8181      	strh	r1, [r0, #12]
 80084d6:	6643      	str	r3, [r0, #100]	; 0x64
 80084d8:	81c2      	strh	r2, [r0, #14]
 80084da:	6183      	str	r3, [r0, #24]
 80084dc:	4619      	mov	r1, r3
 80084de:	2208      	movs	r2, #8
 80084e0:	305c      	adds	r0, #92	; 0x5c
 80084e2:	f000 f9f7 	bl	80088d4 <memset>
 80084e6:	4b0d      	ldr	r3, [pc, #52]	; (800851c <std+0x58>)
 80084e8:	6263      	str	r3, [r4, #36]	; 0x24
 80084ea:	4b0d      	ldr	r3, [pc, #52]	; (8008520 <std+0x5c>)
 80084ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80084ee:	4b0d      	ldr	r3, [pc, #52]	; (8008524 <std+0x60>)
 80084f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084f2:	4b0d      	ldr	r3, [pc, #52]	; (8008528 <std+0x64>)
 80084f4:	6323      	str	r3, [r4, #48]	; 0x30
 80084f6:	4b0d      	ldr	r3, [pc, #52]	; (800852c <std+0x68>)
 80084f8:	6224      	str	r4, [r4, #32]
 80084fa:	429c      	cmp	r4, r3
 80084fc:	d006      	beq.n	800850c <std+0x48>
 80084fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008502:	4294      	cmp	r4, r2
 8008504:	d002      	beq.n	800850c <std+0x48>
 8008506:	33d0      	adds	r3, #208	; 0xd0
 8008508:	429c      	cmp	r4, r3
 800850a:	d105      	bne.n	8008518 <std+0x54>
 800850c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008514:	f000 ba5a 	b.w	80089cc <__retarget_lock_init_recursive>
 8008518:	bd10      	pop	{r4, pc}
 800851a:	bf00      	nop
 800851c:	08008725 	.word	0x08008725
 8008520:	08008747 	.word	0x08008747
 8008524:	0800877f 	.word	0x0800877f
 8008528:	080087a3 	.word	0x080087a3
 800852c:	200004cc 	.word	0x200004cc

08008530 <stdio_exit_handler>:
 8008530:	4a02      	ldr	r2, [pc, #8]	; (800853c <stdio_exit_handler+0xc>)
 8008532:	4903      	ldr	r1, [pc, #12]	; (8008540 <stdio_exit_handler+0x10>)
 8008534:	4803      	ldr	r0, [pc, #12]	; (8008544 <stdio_exit_handler+0x14>)
 8008536:	f000 b869 	b.w	800860c <_fwalk_sglue>
 800853a:	bf00      	nop
 800853c:	2000009c 	.word	0x2000009c
 8008540:	0800a359 	.word	0x0800a359
 8008544:	200000a8 	.word	0x200000a8

08008548 <cleanup_stdio>:
 8008548:	6841      	ldr	r1, [r0, #4]
 800854a:	4b0c      	ldr	r3, [pc, #48]	; (800857c <cleanup_stdio+0x34>)
 800854c:	4299      	cmp	r1, r3
 800854e:	b510      	push	{r4, lr}
 8008550:	4604      	mov	r4, r0
 8008552:	d001      	beq.n	8008558 <cleanup_stdio+0x10>
 8008554:	f001 ff00 	bl	800a358 <_fflush_r>
 8008558:	68a1      	ldr	r1, [r4, #8]
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <cleanup_stdio+0x38>)
 800855c:	4299      	cmp	r1, r3
 800855e:	d002      	beq.n	8008566 <cleanup_stdio+0x1e>
 8008560:	4620      	mov	r0, r4
 8008562:	f001 fef9 	bl	800a358 <_fflush_r>
 8008566:	68e1      	ldr	r1, [r4, #12]
 8008568:	4b06      	ldr	r3, [pc, #24]	; (8008584 <cleanup_stdio+0x3c>)
 800856a:	4299      	cmp	r1, r3
 800856c:	d004      	beq.n	8008578 <cleanup_stdio+0x30>
 800856e:	4620      	mov	r0, r4
 8008570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008574:	f001 bef0 	b.w	800a358 <_fflush_r>
 8008578:	bd10      	pop	{r4, pc}
 800857a:	bf00      	nop
 800857c:	200004cc 	.word	0x200004cc
 8008580:	20000534 	.word	0x20000534
 8008584:	2000059c 	.word	0x2000059c

08008588 <global_stdio_init.part.0>:
 8008588:	b510      	push	{r4, lr}
 800858a:	4b0b      	ldr	r3, [pc, #44]	; (80085b8 <global_stdio_init.part.0+0x30>)
 800858c:	4c0b      	ldr	r4, [pc, #44]	; (80085bc <global_stdio_init.part.0+0x34>)
 800858e:	4a0c      	ldr	r2, [pc, #48]	; (80085c0 <global_stdio_init.part.0+0x38>)
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	4620      	mov	r0, r4
 8008594:	2200      	movs	r2, #0
 8008596:	2104      	movs	r1, #4
 8008598:	f7ff ff94 	bl	80084c4 <std>
 800859c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80085a0:	2201      	movs	r2, #1
 80085a2:	2109      	movs	r1, #9
 80085a4:	f7ff ff8e 	bl	80084c4 <std>
 80085a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80085ac:	2202      	movs	r2, #2
 80085ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b2:	2112      	movs	r1, #18
 80085b4:	f7ff bf86 	b.w	80084c4 <std>
 80085b8:	20000604 	.word	0x20000604
 80085bc:	200004cc 	.word	0x200004cc
 80085c0:	08008531 	.word	0x08008531

080085c4 <__sfp_lock_acquire>:
 80085c4:	4801      	ldr	r0, [pc, #4]	; (80085cc <__sfp_lock_acquire+0x8>)
 80085c6:	f000 ba02 	b.w	80089ce <__retarget_lock_acquire_recursive>
 80085ca:	bf00      	nop
 80085cc:	2000060d 	.word	0x2000060d

080085d0 <__sfp_lock_release>:
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <__sfp_lock_release+0x8>)
 80085d2:	f000 b9fd 	b.w	80089d0 <__retarget_lock_release_recursive>
 80085d6:	bf00      	nop
 80085d8:	2000060d 	.word	0x2000060d

080085dc <__sinit>:
 80085dc:	b510      	push	{r4, lr}
 80085de:	4604      	mov	r4, r0
 80085e0:	f7ff fff0 	bl	80085c4 <__sfp_lock_acquire>
 80085e4:	6a23      	ldr	r3, [r4, #32]
 80085e6:	b11b      	cbz	r3, 80085f0 <__sinit+0x14>
 80085e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ec:	f7ff bff0 	b.w	80085d0 <__sfp_lock_release>
 80085f0:	4b04      	ldr	r3, [pc, #16]	; (8008604 <__sinit+0x28>)
 80085f2:	6223      	str	r3, [r4, #32]
 80085f4:	4b04      	ldr	r3, [pc, #16]	; (8008608 <__sinit+0x2c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f5      	bne.n	80085e8 <__sinit+0xc>
 80085fc:	f7ff ffc4 	bl	8008588 <global_stdio_init.part.0>
 8008600:	e7f2      	b.n	80085e8 <__sinit+0xc>
 8008602:	bf00      	nop
 8008604:	08008549 	.word	0x08008549
 8008608:	20000604 	.word	0x20000604

0800860c <_fwalk_sglue>:
 800860c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008610:	4607      	mov	r7, r0
 8008612:	4688      	mov	r8, r1
 8008614:	4614      	mov	r4, r2
 8008616:	2600      	movs	r6, #0
 8008618:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800861c:	f1b9 0901 	subs.w	r9, r9, #1
 8008620:	d505      	bpl.n	800862e <_fwalk_sglue+0x22>
 8008622:	6824      	ldr	r4, [r4, #0]
 8008624:	2c00      	cmp	r4, #0
 8008626:	d1f7      	bne.n	8008618 <_fwalk_sglue+0xc>
 8008628:	4630      	mov	r0, r6
 800862a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d907      	bls.n	8008644 <_fwalk_sglue+0x38>
 8008634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008638:	3301      	adds	r3, #1
 800863a:	d003      	beq.n	8008644 <_fwalk_sglue+0x38>
 800863c:	4629      	mov	r1, r5
 800863e:	4638      	mov	r0, r7
 8008640:	47c0      	blx	r8
 8008642:	4306      	orrs	r6, r0
 8008644:	3568      	adds	r5, #104	; 0x68
 8008646:	e7e9      	b.n	800861c <_fwalk_sglue+0x10>

08008648 <iprintf>:
 8008648:	b40f      	push	{r0, r1, r2, r3}
 800864a:	b507      	push	{r0, r1, r2, lr}
 800864c:	4906      	ldr	r1, [pc, #24]	; (8008668 <iprintf+0x20>)
 800864e:	ab04      	add	r3, sp, #16
 8008650:	6808      	ldr	r0, [r1, #0]
 8008652:	f853 2b04 	ldr.w	r2, [r3], #4
 8008656:	6881      	ldr	r1, [r0, #8]
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	f001 fcdd 	bl	800a018 <_vfiprintf_r>
 800865e:	b003      	add	sp, #12
 8008660:	f85d eb04 	ldr.w	lr, [sp], #4
 8008664:	b004      	add	sp, #16
 8008666:	4770      	bx	lr
 8008668:	200000f4 	.word	0x200000f4

0800866c <_puts_r>:
 800866c:	6a03      	ldr	r3, [r0, #32]
 800866e:	b570      	push	{r4, r5, r6, lr}
 8008670:	6884      	ldr	r4, [r0, #8]
 8008672:	4605      	mov	r5, r0
 8008674:	460e      	mov	r6, r1
 8008676:	b90b      	cbnz	r3, 800867c <_puts_r+0x10>
 8008678:	f7ff ffb0 	bl	80085dc <__sinit>
 800867c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800867e:	07db      	lsls	r3, r3, #31
 8008680:	d405      	bmi.n	800868e <_puts_r+0x22>
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	0598      	lsls	r0, r3, #22
 8008686:	d402      	bmi.n	800868e <_puts_r+0x22>
 8008688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800868a:	f000 f9a0 	bl	80089ce <__retarget_lock_acquire_recursive>
 800868e:	89a3      	ldrh	r3, [r4, #12]
 8008690:	0719      	lsls	r1, r3, #28
 8008692:	d513      	bpl.n	80086bc <_puts_r+0x50>
 8008694:	6923      	ldr	r3, [r4, #16]
 8008696:	b18b      	cbz	r3, 80086bc <_puts_r+0x50>
 8008698:	3e01      	subs	r6, #1
 800869a:	68a3      	ldr	r3, [r4, #8]
 800869c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086a0:	3b01      	subs	r3, #1
 80086a2:	60a3      	str	r3, [r4, #8]
 80086a4:	b9e9      	cbnz	r1, 80086e2 <_puts_r+0x76>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	da2e      	bge.n	8008708 <_puts_r+0x9c>
 80086aa:	4622      	mov	r2, r4
 80086ac:	210a      	movs	r1, #10
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 f87b 	bl	80087aa <__swbuf_r>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d007      	beq.n	80086c8 <_puts_r+0x5c>
 80086b8:	250a      	movs	r5, #10
 80086ba:	e007      	b.n	80086cc <_puts_r+0x60>
 80086bc:	4621      	mov	r1, r4
 80086be:	4628      	mov	r0, r5
 80086c0:	f000 f8b0 	bl	8008824 <__swsetup_r>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d0e7      	beq.n	8008698 <_puts_r+0x2c>
 80086c8:	f04f 35ff 	mov.w	r5, #4294967295
 80086cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086ce:	07da      	lsls	r2, r3, #31
 80086d0:	d405      	bmi.n	80086de <_puts_r+0x72>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	059b      	lsls	r3, r3, #22
 80086d6:	d402      	bmi.n	80086de <_puts_r+0x72>
 80086d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086da:	f000 f979 	bl	80089d0 <__retarget_lock_release_recursive>
 80086de:	4628      	mov	r0, r5
 80086e0:	bd70      	pop	{r4, r5, r6, pc}
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da04      	bge.n	80086f0 <_puts_r+0x84>
 80086e6:	69a2      	ldr	r2, [r4, #24]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	dc06      	bgt.n	80086fa <_puts_r+0x8e>
 80086ec:	290a      	cmp	r1, #10
 80086ee:	d004      	beq.n	80086fa <_puts_r+0x8e>
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	6022      	str	r2, [r4, #0]
 80086f6:	7019      	strb	r1, [r3, #0]
 80086f8:	e7cf      	b.n	800869a <_puts_r+0x2e>
 80086fa:	4622      	mov	r2, r4
 80086fc:	4628      	mov	r0, r5
 80086fe:	f000 f854 	bl	80087aa <__swbuf_r>
 8008702:	3001      	adds	r0, #1
 8008704:	d1c9      	bne.n	800869a <_puts_r+0x2e>
 8008706:	e7df      	b.n	80086c8 <_puts_r+0x5c>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	250a      	movs	r5, #10
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	6022      	str	r2, [r4, #0]
 8008710:	701d      	strb	r5, [r3, #0]
 8008712:	e7db      	b.n	80086cc <_puts_r+0x60>

08008714 <puts>:
 8008714:	4b02      	ldr	r3, [pc, #8]	; (8008720 <puts+0xc>)
 8008716:	4601      	mov	r1, r0
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	f7ff bfa7 	b.w	800866c <_puts_r>
 800871e:	bf00      	nop
 8008720:	200000f4 	.word	0x200000f4

08008724 <__sread>:
 8008724:	b510      	push	{r4, lr}
 8008726:	460c      	mov	r4, r1
 8008728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872c:	f000 f900 	bl	8008930 <_read_r>
 8008730:	2800      	cmp	r0, #0
 8008732:	bfab      	itete	ge
 8008734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008736:	89a3      	ldrhlt	r3, [r4, #12]
 8008738:	181b      	addge	r3, r3, r0
 800873a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800873e:	bfac      	ite	ge
 8008740:	6563      	strge	r3, [r4, #84]	; 0x54
 8008742:	81a3      	strhlt	r3, [r4, #12]
 8008744:	bd10      	pop	{r4, pc}

08008746 <__swrite>:
 8008746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874a:	461f      	mov	r7, r3
 800874c:	898b      	ldrh	r3, [r1, #12]
 800874e:	05db      	lsls	r3, r3, #23
 8008750:	4605      	mov	r5, r0
 8008752:	460c      	mov	r4, r1
 8008754:	4616      	mov	r6, r2
 8008756:	d505      	bpl.n	8008764 <__swrite+0x1e>
 8008758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875c:	2302      	movs	r3, #2
 800875e:	2200      	movs	r2, #0
 8008760:	f000 f8d4 	bl	800890c <_lseek_r>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	4632      	mov	r2, r6
 8008772:	463b      	mov	r3, r7
 8008774:	4628      	mov	r0, r5
 8008776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800877a:	f000 b8eb 	b.w	8008954 <_write_r>

0800877e <__sseek>:
 800877e:	b510      	push	{r4, lr}
 8008780:	460c      	mov	r4, r1
 8008782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008786:	f000 f8c1 	bl	800890c <_lseek_r>
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	bf15      	itete	ne
 8008790:	6560      	strne	r0, [r4, #84]	; 0x54
 8008792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800879a:	81a3      	strheq	r3, [r4, #12]
 800879c:	bf18      	it	ne
 800879e:	81a3      	strhne	r3, [r4, #12]
 80087a0:	bd10      	pop	{r4, pc}

080087a2 <__sclose>:
 80087a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a6:	f000 b8a1 	b.w	80088ec <_close_r>

080087aa <__swbuf_r>:
 80087aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ac:	460e      	mov	r6, r1
 80087ae:	4614      	mov	r4, r2
 80087b0:	4605      	mov	r5, r0
 80087b2:	b118      	cbz	r0, 80087bc <__swbuf_r+0x12>
 80087b4:	6a03      	ldr	r3, [r0, #32]
 80087b6:	b90b      	cbnz	r3, 80087bc <__swbuf_r+0x12>
 80087b8:	f7ff ff10 	bl	80085dc <__sinit>
 80087bc:	69a3      	ldr	r3, [r4, #24]
 80087be:	60a3      	str	r3, [r4, #8]
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	071a      	lsls	r2, r3, #28
 80087c4:	d525      	bpl.n	8008812 <__swbuf_r+0x68>
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	b31b      	cbz	r3, 8008812 <__swbuf_r+0x68>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	6922      	ldr	r2, [r4, #16]
 80087ce:	1a98      	subs	r0, r3, r2
 80087d0:	6963      	ldr	r3, [r4, #20]
 80087d2:	b2f6      	uxtb	r6, r6
 80087d4:	4283      	cmp	r3, r0
 80087d6:	4637      	mov	r7, r6
 80087d8:	dc04      	bgt.n	80087e4 <__swbuf_r+0x3a>
 80087da:	4621      	mov	r1, r4
 80087dc:	4628      	mov	r0, r5
 80087de:	f001 fdbb 	bl	800a358 <_fflush_r>
 80087e2:	b9e0      	cbnz	r0, 800881e <__swbuf_r+0x74>
 80087e4:	68a3      	ldr	r3, [r4, #8]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	60a3      	str	r3, [r4, #8]
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	6022      	str	r2, [r4, #0]
 80087f0:	701e      	strb	r6, [r3, #0]
 80087f2:	6962      	ldr	r2, [r4, #20]
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d004      	beq.n	8008804 <__swbuf_r+0x5a>
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	07db      	lsls	r3, r3, #31
 80087fe:	d506      	bpl.n	800880e <__swbuf_r+0x64>
 8008800:	2e0a      	cmp	r6, #10
 8008802:	d104      	bne.n	800880e <__swbuf_r+0x64>
 8008804:	4621      	mov	r1, r4
 8008806:	4628      	mov	r0, r5
 8008808:	f001 fda6 	bl	800a358 <_fflush_r>
 800880c:	b938      	cbnz	r0, 800881e <__swbuf_r+0x74>
 800880e:	4638      	mov	r0, r7
 8008810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008812:	4621      	mov	r1, r4
 8008814:	4628      	mov	r0, r5
 8008816:	f000 f805 	bl	8008824 <__swsetup_r>
 800881a:	2800      	cmp	r0, #0
 800881c:	d0d5      	beq.n	80087ca <__swbuf_r+0x20>
 800881e:	f04f 37ff 	mov.w	r7, #4294967295
 8008822:	e7f4      	b.n	800880e <__swbuf_r+0x64>

08008824 <__swsetup_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4b2a      	ldr	r3, [pc, #168]	; (80088d0 <__swsetup_r+0xac>)
 8008828:	4605      	mov	r5, r0
 800882a:	6818      	ldr	r0, [r3, #0]
 800882c:	460c      	mov	r4, r1
 800882e:	b118      	cbz	r0, 8008838 <__swsetup_r+0x14>
 8008830:	6a03      	ldr	r3, [r0, #32]
 8008832:	b90b      	cbnz	r3, 8008838 <__swsetup_r+0x14>
 8008834:	f7ff fed2 	bl	80085dc <__sinit>
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800883e:	0718      	lsls	r0, r3, #28
 8008840:	d422      	bmi.n	8008888 <__swsetup_r+0x64>
 8008842:	06d9      	lsls	r1, r3, #27
 8008844:	d407      	bmi.n	8008856 <__swsetup_r+0x32>
 8008846:	2309      	movs	r3, #9
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800884e:	81a3      	strh	r3, [r4, #12]
 8008850:	f04f 30ff 	mov.w	r0, #4294967295
 8008854:	e034      	b.n	80088c0 <__swsetup_r+0x9c>
 8008856:	0758      	lsls	r0, r3, #29
 8008858:	d512      	bpl.n	8008880 <__swsetup_r+0x5c>
 800885a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800885c:	b141      	cbz	r1, 8008870 <__swsetup_r+0x4c>
 800885e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008862:	4299      	cmp	r1, r3
 8008864:	d002      	beq.n	800886c <__swsetup_r+0x48>
 8008866:	4628      	mov	r0, r5
 8008868:	f000 ff30 	bl	80096cc <_free_r>
 800886c:	2300      	movs	r3, #0
 800886e:	6363      	str	r3, [r4, #52]	; 0x34
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008876:	81a3      	strh	r3, [r4, #12]
 8008878:	2300      	movs	r3, #0
 800887a:	6063      	str	r3, [r4, #4]
 800887c:	6923      	ldr	r3, [r4, #16]
 800887e:	6023      	str	r3, [r4, #0]
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	f043 0308 	orr.w	r3, r3, #8
 8008886:	81a3      	strh	r3, [r4, #12]
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	b94b      	cbnz	r3, 80088a0 <__swsetup_r+0x7c>
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008896:	d003      	beq.n	80088a0 <__swsetup_r+0x7c>
 8008898:	4621      	mov	r1, r4
 800889a:	4628      	mov	r0, r5
 800889c:	f001 fdaa 	bl	800a3f4 <__smakebuf_r>
 80088a0:	89a0      	ldrh	r0, [r4, #12]
 80088a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088a6:	f010 0301 	ands.w	r3, r0, #1
 80088aa:	d00a      	beq.n	80088c2 <__swsetup_r+0x9e>
 80088ac:	2300      	movs	r3, #0
 80088ae:	60a3      	str	r3, [r4, #8]
 80088b0:	6963      	ldr	r3, [r4, #20]
 80088b2:	425b      	negs	r3, r3
 80088b4:	61a3      	str	r3, [r4, #24]
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	b943      	cbnz	r3, 80088cc <__swsetup_r+0xa8>
 80088ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088be:	d1c4      	bne.n	800884a <__swsetup_r+0x26>
 80088c0:	bd38      	pop	{r3, r4, r5, pc}
 80088c2:	0781      	lsls	r1, r0, #30
 80088c4:	bf58      	it	pl
 80088c6:	6963      	ldrpl	r3, [r4, #20]
 80088c8:	60a3      	str	r3, [r4, #8]
 80088ca:	e7f4      	b.n	80088b6 <__swsetup_r+0x92>
 80088cc:	2000      	movs	r0, #0
 80088ce:	e7f7      	b.n	80088c0 <__swsetup_r+0x9c>
 80088d0:	200000f4 	.word	0x200000f4

080088d4 <memset>:
 80088d4:	4402      	add	r2, r0
 80088d6:	4603      	mov	r3, r0
 80088d8:	4293      	cmp	r3, r2
 80088da:	d100      	bne.n	80088de <memset+0xa>
 80088dc:	4770      	bx	lr
 80088de:	f803 1b01 	strb.w	r1, [r3], #1
 80088e2:	e7f9      	b.n	80088d8 <memset+0x4>

080088e4 <_localeconv_r>:
 80088e4:	4800      	ldr	r0, [pc, #0]	; (80088e8 <_localeconv_r+0x4>)
 80088e6:	4770      	bx	lr
 80088e8:	200001e8 	.word	0x200001e8

080088ec <_close_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4d06      	ldr	r5, [pc, #24]	; (8008908 <_close_r+0x1c>)
 80088f0:	2300      	movs	r3, #0
 80088f2:	4604      	mov	r4, r0
 80088f4:	4608      	mov	r0, r1
 80088f6:	602b      	str	r3, [r5, #0]
 80088f8:	f7fa f92b 	bl	8002b52 <_close>
 80088fc:	1c43      	adds	r3, r0, #1
 80088fe:	d102      	bne.n	8008906 <_close_r+0x1a>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	b103      	cbz	r3, 8008906 <_close_r+0x1a>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	20000608 	.word	0x20000608

0800890c <_lseek_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d07      	ldr	r5, [pc, #28]	; (800892c <_lseek_r+0x20>)
 8008910:	4604      	mov	r4, r0
 8008912:	4608      	mov	r0, r1
 8008914:	4611      	mov	r1, r2
 8008916:	2200      	movs	r2, #0
 8008918:	602a      	str	r2, [r5, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	f7fa f940 	bl	8002ba0 <_lseek>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_lseek_r+0x1e>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_lseek_r+0x1e>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	20000608 	.word	0x20000608

08008930 <_read_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4d07      	ldr	r5, [pc, #28]	; (8008950 <_read_r+0x20>)
 8008934:	4604      	mov	r4, r0
 8008936:	4608      	mov	r0, r1
 8008938:	4611      	mov	r1, r2
 800893a:	2200      	movs	r2, #0
 800893c:	602a      	str	r2, [r5, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	f7fa f8ea 	bl	8002b18 <_read>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_read_r+0x1e>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_read_r+0x1e>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	20000608 	.word	0x20000608

08008954 <_write_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	; (8008974 <_write_r+0x20>)
 8008958:	4604      	mov	r4, r0
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	2200      	movs	r2, #0
 8008960:	602a      	str	r2, [r5, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	f7f8 fc42 	bl	80011ec <_write>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_write_r+0x1e>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_write_r+0x1e>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	20000608 	.word	0x20000608

08008978 <__errno>:
 8008978:	4b01      	ldr	r3, [pc, #4]	; (8008980 <__errno+0x8>)
 800897a:	6818      	ldr	r0, [r3, #0]
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	200000f4 	.word	0x200000f4

08008984 <__libc_init_array>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4d0d      	ldr	r5, [pc, #52]	; (80089bc <__libc_init_array+0x38>)
 8008988:	4c0d      	ldr	r4, [pc, #52]	; (80089c0 <__libc_init_array+0x3c>)
 800898a:	1b64      	subs	r4, r4, r5
 800898c:	10a4      	asrs	r4, r4, #2
 800898e:	2600      	movs	r6, #0
 8008990:	42a6      	cmp	r6, r4
 8008992:	d109      	bne.n	80089a8 <__libc_init_array+0x24>
 8008994:	4d0b      	ldr	r5, [pc, #44]	; (80089c4 <__libc_init_array+0x40>)
 8008996:	4c0c      	ldr	r4, [pc, #48]	; (80089c8 <__libc_init_array+0x44>)
 8008998:	f003 f874 	bl	800ba84 <_init>
 800899c:	1b64      	subs	r4, r4, r5
 800899e:	10a4      	asrs	r4, r4, #2
 80089a0:	2600      	movs	r6, #0
 80089a2:	42a6      	cmp	r6, r4
 80089a4:	d105      	bne.n	80089b2 <__libc_init_array+0x2e>
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
 80089a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ac:	4798      	blx	r3
 80089ae:	3601      	adds	r6, #1
 80089b0:	e7ee      	b.n	8008990 <__libc_init_array+0xc>
 80089b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b6:	4798      	blx	r3
 80089b8:	3601      	adds	r6, #1
 80089ba:	e7f2      	b.n	80089a2 <__libc_init_array+0x1e>
 80089bc:	0800bf40 	.word	0x0800bf40
 80089c0:	0800bf40 	.word	0x0800bf40
 80089c4:	0800bf40 	.word	0x0800bf40
 80089c8:	0800bf44 	.word	0x0800bf44

080089cc <__retarget_lock_init_recursive>:
 80089cc:	4770      	bx	lr

080089ce <__retarget_lock_acquire_recursive>:
 80089ce:	4770      	bx	lr

080089d0 <__retarget_lock_release_recursive>:
 80089d0:	4770      	bx	lr

080089d2 <quorem>:
 80089d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d6:	6903      	ldr	r3, [r0, #16]
 80089d8:	690c      	ldr	r4, [r1, #16]
 80089da:	42a3      	cmp	r3, r4
 80089dc:	4607      	mov	r7, r0
 80089de:	db7e      	blt.n	8008ade <quorem+0x10c>
 80089e0:	3c01      	subs	r4, #1
 80089e2:	f101 0814 	add.w	r8, r1, #20
 80089e6:	f100 0514 	add.w	r5, r0, #20
 80089ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089f8:	3301      	adds	r3, #1
 80089fa:	429a      	cmp	r2, r3
 80089fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a04:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a08:	d331      	bcc.n	8008a6e <quorem+0x9c>
 8008a0a:	f04f 0e00 	mov.w	lr, #0
 8008a0e:	4640      	mov	r0, r8
 8008a10:	46ac      	mov	ip, r5
 8008a12:	46f2      	mov	sl, lr
 8008a14:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a18:	b293      	uxth	r3, r2
 8008a1a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a22:	0c1a      	lsrs	r2, r3, #16
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	ebaa 0303 	sub.w	r3, sl, r3
 8008a2a:	f8dc a000 	ldr.w	sl, [ip]
 8008a2e:	fa13 f38a 	uxtah	r3, r3, sl
 8008a32:	fb06 220e 	mla	r2, r6, lr, r2
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	9b00      	ldr	r3, [sp, #0]
 8008a3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a3e:	b292      	uxth	r2, r2
 8008a40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a48:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a4c:	4581      	cmp	r9, r0
 8008a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a52:	f84c 3b04 	str.w	r3, [ip], #4
 8008a56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a5a:	d2db      	bcs.n	8008a14 <quorem+0x42>
 8008a5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a60:	b92b      	cbnz	r3, 8008a6e <quorem+0x9c>
 8008a62:	9b01      	ldr	r3, [sp, #4]
 8008a64:	3b04      	subs	r3, #4
 8008a66:	429d      	cmp	r5, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	d32c      	bcc.n	8008ac6 <quorem+0xf4>
 8008a6c:	613c      	str	r4, [r7, #16]
 8008a6e:	4638      	mov	r0, r7
 8008a70:	f001 f9a8 	bl	8009dc4 <__mcmp>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	db22      	blt.n	8008abe <quorem+0xec>
 8008a78:	3601      	adds	r6, #1
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a82:	f8d1 c000 	ldr.w	ip, [r1]
 8008a86:	b293      	uxth	r3, r2
 8008a88:	1ac3      	subs	r3, r0, r3
 8008a8a:	0c12      	lsrs	r2, r2, #16
 8008a8c:	fa13 f38c 	uxtah	r3, r3, ip
 8008a90:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a9e:	45c1      	cmp	r9, r8
 8008aa0:	f841 3b04 	str.w	r3, [r1], #4
 8008aa4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008aa8:	d2e9      	bcs.n	8008a7e <quorem+0xac>
 8008aaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008aae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ab2:	b922      	cbnz	r2, 8008abe <quorem+0xec>
 8008ab4:	3b04      	subs	r3, #4
 8008ab6:	429d      	cmp	r5, r3
 8008ab8:	461a      	mov	r2, r3
 8008aba:	d30a      	bcc.n	8008ad2 <quorem+0x100>
 8008abc:	613c      	str	r4, [r7, #16]
 8008abe:	4630      	mov	r0, r6
 8008ac0:	b003      	add	sp, #12
 8008ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac6:	6812      	ldr	r2, [r2, #0]
 8008ac8:	3b04      	subs	r3, #4
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	d1ce      	bne.n	8008a6c <quorem+0x9a>
 8008ace:	3c01      	subs	r4, #1
 8008ad0:	e7c9      	b.n	8008a66 <quorem+0x94>
 8008ad2:	6812      	ldr	r2, [r2, #0]
 8008ad4:	3b04      	subs	r3, #4
 8008ad6:	2a00      	cmp	r2, #0
 8008ad8:	d1f0      	bne.n	8008abc <quorem+0xea>
 8008ada:	3c01      	subs	r4, #1
 8008adc:	e7eb      	b.n	8008ab6 <quorem+0xe4>
 8008ade:	2000      	movs	r0, #0
 8008ae0:	e7ee      	b.n	8008ac0 <quorem+0xee>
 8008ae2:	0000      	movs	r0, r0
 8008ae4:	0000      	movs	r0, r0
	...

08008ae8 <_dtoa_r>:
 8008ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aec:	ed2d 8b04 	vpush	{d8-d9}
 8008af0:	69c5      	ldr	r5, [r0, #28]
 8008af2:	b093      	sub	sp, #76	; 0x4c
 8008af4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008af8:	ec57 6b10 	vmov	r6, r7, d0
 8008afc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b00:	9107      	str	r1, [sp, #28]
 8008b02:	4604      	mov	r4, r0
 8008b04:	920a      	str	r2, [sp, #40]	; 0x28
 8008b06:	930d      	str	r3, [sp, #52]	; 0x34
 8008b08:	b975      	cbnz	r5, 8008b28 <_dtoa_r+0x40>
 8008b0a:	2010      	movs	r0, #16
 8008b0c:	f000 fe2a 	bl	8009764 <malloc>
 8008b10:	4602      	mov	r2, r0
 8008b12:	61e0      	str	r0, [r4, #28]
 8008b14:	b920      	cbnz	r0, 8008b20 <_dtoa_r+0x38>
 8008b16:	4bae      	ldr	r3, [pc, #696]	; (8008dd0 <_dtoa_r+0x2e8>)
 8008b18:	21ef      	movs	r1, #239	; 0xef
 8008b1a:	48ae      	ldr	r0, [pc, #696]	; (8008dd4 <_dtoa_r+0x2ec>)
 8008b1c:	f001 fce6 	bl	800a4ec <__assert_func>
 8008b20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b24:	6005      	str	r5, [r0, #0]
 8008b26:	60c5      	str	r5, [r0, #12]
 8008b28:	69e3      	ldr	r3, [r4, #28]
 8008b2a:	6819      	ldr	r1, [r3, #0]
 8008b2c:	b151      	cbz	r1, 8008b44 <_dtoa_r+0x5c>
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	604a      	str	r2, [r1, #4]
 8008b32:	2301      	movs	r3, #1
 8008b34:	4093      	lsls	r3, r2
 8008b36:	608b      	str	r3, [r1, #8]
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 ff07 	bl	800994c <_Bfree>
 8008b3e:	69e3      	ldr	r3, [r4, #28]
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	1e3b      	subs	r3, r7, #0
 8008b46:	bfbb      	ittet	lt
 8008b48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b4c:	9303      	strlt	r3, [sp, #12]
 8008b4e:	2300      	movge	r3, #0
 8008b50:	2201      	movlt	r2, #1
 8008b52:	bfac      	ite	ge
 8008b54:	f8c8 3000 	strge.w	r3, [r8]
 8008b58:	f8c8 2000 	strlt.w	r2, [r8]
 8008b5c:	4b9e      	ldr	r3, [pc, #632]	; (8008dd8 <_dtoa_r+0x2f0>)
 8008b5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008b62:	ea33 0308 	bics.w	r3, r3, r8
 8008b66:	d11b      	bne.n	8008ba0 <_dtoa_r+0xb8>
 8008b68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008b74:	4333      	orrs	r3, r6
 8008b76:	f000 8593 	beq.w	80096a0 <_dtoa_r+0xbb8>
 8008b7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b7c:	b963      	cbnz	r3, 8008b98 <_dtoa_r+0xb0>
 8008b7e:	4b97      	ldr	r3, [pc, #604]	; (8008ddc <_dtoa_r+0x2f4>)
 8008b80:	e027      	b.n	8008bd2 <_dtoa_r+0xea>
 8008b82:	4b97      	ldr	r3, [pc, #604]	; (8008de0 <_dtoa_r+0x2f8>)
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	3308      	adds	r3, #8
 8008b88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	9800      	ldr	r0, [sp, #0]
 8008b8e:	b013      	add	sp, #76	; 0x4c
 8008b90:	ecbd 8b04 	vpop	{d8-d9}
 8008b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b98:	4b90      	ldr	r3, [pc, #576]	; (8008ddc <_dtoa_r+0x2f4>)
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	3303      	adds	r3, #3
 8008b9e:	e7f3      	b.n	8008b88 <_dtoa_r+0xa0>
 8008ba0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	ec51 0b17 	vmov	r0, r1, d7
 8008baa:	eeb0 8a47 	vmov.f32	s16, s14
 8008bae:	eef0 8a67 	vmov.f32	s17, s15
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f7f7 ffa8 	bl	8000b08 <__aeabi_dcmpeq>
 8008bb8:	4681      	mov	r9, r0
 8008bba:	b160      	cbz	r0, 8008bd6 <_dtoa_r+0xee>
 8008bbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	6013      	str	r3, [r2, #0]
 8008bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 8568 	beq.w	800969a <_dtoa_r+0xbb2>
 8008bca:	4b86      	ldr	r3, [pc, #536]	; (8008de4 <_dtoa_r+0x2fc>)
 8008bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	e7da      	b.n	8008b8c <_dtoa_r+0xa4>
 8008bd6:	aa10      	add	r2, sp, #64	; 0x40
 8008bd8:	a911      	add	r1, sp, #68	; 0x44
 8008bda:	4620      	mov	r0, r4
 8008bdc:	eeb0 0a48 	vmov.f32	s0, s16
 8008be0:	eef0 0a68 	vmov.f32	s1, s17
 8008be4:	f001 f994 	bl	8009f10 <__d2b>
 8008be8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008bec:	4682      	mov	sl, r0
 8008bee:	2d00      	cmp	r5, #0
 8008bf0:	d07f      	beq.n	8008cf2 <_dtoa_r+0x20a>
 8008bf2:	ee18 3a90 	vmov	r3, s17
 8008bf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bfa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008bfe:	ec51 0b18 	vmov	r0, r1, d8
 8008c02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c0a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008c0e:	4619      	mov	r1, r3
 8008c10:	2200      	movs	r2, #0
 8008c12:	4b75      	ldr	r3, [pc, #468]	; (8008de8 <_dtoa_r+0x300>)
 8008c14:	f7f7 fb58 	bl	80002c8 <__aeabi_dsub>
 8008c18:	a367      	add	r3, pc, #412	; (adr r3, 8008db8 <_dtoa_r+0x2d0>)
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f7f7 fd0b 	bl	8000638 <__aeabi_dmul>
 8008c22:	a367      	add	r3, pc, #412	; (adr r3, 8008dc0 <_dtoa_r+0x2d8>)
 8008c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c28:	f7f7 fb50 	bl	80002cc <__adddf3>
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	4628      	mov	r0, r5
 8008c30:	460f      	mov	r7, r1
 8008c32:	f7f7 fc97 	bl	8000564 <__aeabi_i2d>
 8008c36:	a364      	add	r3, pc, #400	; (adr r3, 8008dc8 <_dtoa_r+0x2e0>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fcfc 	bl	8000638 <__aeabi_dmul>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4630      	mov	r0, r6
 8008c46:	4639      	mov	r1, r7
 8008c48:	f7f7 fb40 	bl	80002cc <__adddf3>
 8008c4c:	4606      	mov	r6, r0
 8008c4e:	460f      	mov	r7, r1
 8008c50:	f7f7 ffa2 	bl	8000b98 <__aeabi_d2iz>
 8008c54:	2200      	movs	r2, #0
 8008c56:	4683      	mov	fp, r0
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	f7f7 ff5d 	bl	8000b1c <__aeabi_dcmplt>
 8008c62:	b148      	cbz	r0, 8008c78 <_dtoa_r+0x190>
 8008c64:	4658      	mov	r0, fp
 8008c66:	f7f7 fc7d 	bl	8000564 <__aeabi_i2d>
 8008c6a:	4632      	mov	r2, r6
 8008c6c:	463b      	mov	r3, r7
 8008c6e:	f7f7 ff4b 	bl	8000b08 <__aeabi_dcmpeq>
 8008c72:	b908      	cbnz	r0, 8008c78 <_dtoa_r+0x190>
 8008c74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c78:	f1bb 0f16 	cmp.w	fp, #22
 8008c7c:	d857      	bhi.n	8008d2e <_dtoa_r+0x246>
 8008c7e:	4b5b      	ldr	r3, [pc, #364]	; (8008dec <_dtoa_r+0x304>)
 8008c80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	ec51 0b18 	vmov	r0, r1, d8
 8008c8c:	f7f7 ff46 	bl	8000b1c <__aeabi_dcmplt>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d04e      	beq.n	8008d32 <_dtoa_r+0x24a>
 8008c94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c98:	2300      	movs	r3, #0
 8008c9a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c9e:	1b5b      	subs	r3, r3, r5
 8008ca0:	1e5a      	subs	r2, r3, #1
 8008ca2:	bf45      	ittet	mi
 8008ca4:	f1c3 0301 	rsbmi	r3, r3, #1
 8008ca8:	9305      	strmi	r3, [sp, #20]
 8008caa:	2300      	movpl	r3, #0
 8008cac:	2300      	movmi	r3, #0
 8008cae:	9206      	str	r2, [sp, #24]
 8008cb0:	bf54      	ite	pl
 8008cb2:	9305      	strpl	r3, [sp, #20]
 8008cb4:	9306      	strmi	r3, [sp, #24]
 8008cb6:	f1bb 0f00 	cmp.w	fp, #0
 8008cba:	db3c      	blt.n	8008d36 <_dtoa_r+0x24e>
 8008cbc:	9b06      	ldr	r3, [sp, #24]
 8008cbe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008cc2:	445b      	add	r3, fp
 8008cc4:	9306      	str	r3, [sp, #24]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	9308      	str	r3, [sp, #32]
 8008cca:	9b07      	ldr	r3, [sp, #28]
 8008ccc:	2b09      	cmp	r3, #9
 8008cce:	d868      	bhi.n	8008da2 <_dtoa_r+0x2ba>
 8008cd0:	2b05      	cmp	r3, #5
 8008cd2:	bfc4      	itt	gt
 8008cd4:	3b04      	subgt	r3, #4
 8008cd6:	9307      	strgt	r3, [sp, #28]
 8008cd8:	9b07      	ldr	r3, [sp, #28]
 8008cda:	f1a3 0302 	sub.w	r3, r3, #2
 8008cde:	bfcc      	ite	gt
 8008ce0:	2500      	movgt	r5, #0
 8008ce2:	2501      	movle	r5, #1
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	f200 8085 	bhi.w	8008df4 <_dtoa_r+0x30c>
 8008cea:	e8df f003 	tbb	[pc, r3]
 8008cee:	3b2e      	.short	0x3b2e
 8008cf0:	5839      	.short	0x5839
 8008cf2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008cf6:	441d      	add	r5, r3
 8008cf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008cfc:	2b20      	cmp	r3, #32
 8008cfe:	bfc1      	itttt	gt
 8008d00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d04:	fa08 f803 	lslgt.w	r8, r8, r3
 8008d08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008d0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008d10:	bfd6      	itet	le
 8008d12:	f1c3 0320 	rsble	r3, r3, #32
 8008d16:	ea48 0003 	orrgt.w	r0, r8, r3
 8008d1a:	fa06 f003 	lslle.w	r0, r6, r3
 8008d1e:	f7f7 fc11 	bl	8000544 <__aeabi_ui2d>
 8008d22:	2201      	movs	r2, #1
 8008d24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008d28:	3d01      	subs	r5, #1
 8008d2a:	920e      	str	r2, [sp, #56]	; 0x38
 8008d2c:	e76f      	b.n	8008c0e <_dtoa_r+0x126>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e7b3      	b.n	8008c9a <_dtoa_r+0x1b2>
 8008d32:	900c      	str	r0, [sp, #48]	; 0x30
 8008d34:	e7b2      	b.n	8008c9c <_dtoa_r+0x1b4>
 8008d36:	9b05      	ldr	r3, [sp, #20]
 8008d38:	eba3 030b 	sub.w	r3, r3, fp
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	f1cb 0300 	rsb	r3, fp, #0
 8008d42:	9308      	str	r3, [sp, #32]
 8008d44:	2300      	movs	r3, #0
 8008d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d48:	e7bf      	b.n	8008cca <_dtoa_r+0x1e2>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	dc52      	bgt.n	8008dfa <_dtoa_r+0x312>
 8008d54:	2301      	movs	r3, #1
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	9304      	str	r3, [sp, #16]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	920a      	str	r2, [sp, #40]	; 0x28
 8008d5e:	e00b      	b.n	8008d78 <_dtoa_r+0x290>
 8008d60:	2301      	movs	r3, #1
 8008d62:	e7f3      	b.n	8008d4c <_dtoa_r+0x264>
 8008d64:	2300      	movs	r3, #0
 8008d66:	9309      	str	r3, [sp, #36]	; 0x24
 8008d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d6a:	445b      	add	r3, fp
 8008d6c:	9301      	str	r3, [sp, #4]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	9304      	str	r3, [sp, #16]
 8008d74:	bfb8      	it	lt
 8008d76:	2301      	movlt	r3, #1
 8008d78:	69e0      	ldr	r0, [r4, #28]
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	2204      	movs	r2, #4
 8008d7e:	f102 0614 	add.w	r6, r2, #20
 8008d82:	429e      	cmp	r6, r3
 8008d84:	d93d      	bls.n	8008e02 <_dtoa_r+0x31a>
 8008d86:	6041      	str	r1, [r0, #4]
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 fd9f 	bl	80098cc <_Balloc>
 8008d8e:	9000      	str	r0, [sp, #0]
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d139      	bne.n	8008e08 <_dtoa_r+0x320>
 8008d94:	4b16      	ldr	r3, [pc, #88]	; (8008df0 <_dtoa_r+0x308>)
 8008d96:	4602      	mov	r2, r0
 8008d98:	f240 11af 	movw	r1, #431	; 0x1af
 8008d9c:	e6bd      	b.n	8008b1a <_dtoa_r+0x32>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e7e1      	b.n	8008d66 <_dtoa_r+0x27e>
 8008da2:	2501      	movs	r5, #1
 8008da4:	2300      	movs	r3, #0
 8008da6:	9307      	str	r3, [sp, #28]
 8008da8:	9509      	str	r5, [sp, #36]	; 0x24
 8008daa:	f04f 33ff 	mov.w	r3, #4294967295
 8008dae:	9301      	str	r3, [sp, #4]
 8008db0:	9304      	str	r3, [sp, #16]
 8008db2:	2200      	movs	r2, #0
 8008db4:	2312      	movs	r3, #18
 8008db6:	e7d1      	b.n	8008d5c <_dtoa_r+0x274>
 8008db8:	636f4361 	.word	0x636f4361
 8008dbc:	3fd287a7 	.word	0x3fd287a7
 8008dc0:	8b60c8b3 	.word	0x8b60c8b3
 8008dc4:	3fc68a28 	.word	0x3fc68a28
 8008dc8:	509f79fb 	.word	0x509f79fb
 8008dcc:	3fd34413 	.word	0x3fd34413
 8008dd0:	0800bb61 	.word	0x0800bb61
 8008dd4:	0800bb78 	.word	0x0800bb78
 8008dd8:	7ff00000 	.word	0x7ff00000
 8008ddc:	0800bb5d 	.word	0x0800bb5d
 8008de0:	0800bb54 	.word	0x0800bb54
 8008de4:	0800bb31 	.word	0x0800bb31
 8008de8:	3ff80000 	.word	0x3ff80000
 8008dec:	0800bc68 	.word	0x0800bc68
 8008df0:	0800bbd0 	.word	0x0800bbd0
 8008df4:	2301      	movs	r3, #1
 8008df6:	9309      	str	r3, [sp, #36]	; 0x24
 8008df8:	e7d7      	b.n	8008daa <_dtoa_r+0x2c2>
 8008dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	9304      	str	r3, [sp, #16]
 8008e00:	e7ba      	b.n	8008d78 <_dtoa_r+0x290>
 8008e02:	3101      	adds	r1, #1
 8008e04:	0052      	lsls	r2, r2, #1
 8008e06:	e7ba      	b.n	8008d7e <_dtoa_r+0x296>
 8008e08:	69e3      	ldr	r3, [r4, #28]
 8008e0a:	9a00      	ldr	r2, [sp, #0]
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	9b04      	ldr	r3, [sp, #16]
 8008e10:	2b0e      	cmp	r3, #14
 8008e12:	f200 80a8 	bhi.w	8008f66 <_dtoa_r+0x47e>
 8008e16:	2d00      	cmp	r5, #0
 8008e18:	f000 80a5 	beq.w	8008f66 <_dtoa_r+0x47e>
 8008e1c:	f1bb 0f00 	cmp.w	fp, #0
 8008e20:	dd38      	ble.n	8008e94 <_dtoa_r+0x3ac>
 8008e22:	4bc0      	ldr	r3, [pc, #768]	; (8009124 <_dtoa_r+0x63c>)
 8008e24:	f00b 020f 	and.w	r2, fp, #15
 8008e28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008e34:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008e38:	d019      	beq.n	8008e6e <_dtoa_r+0x386>
 8008e3a:	4bbb      	ldr	r3, [pc, #748]	; (8009128 <_dtoa_r+0x640>)
 8008e3c:	ec51 0b18 	vmov	r0, r1, d8
 8008e40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e44:	f7f7 fd22 	bl	800088c <__aeabi_ddiv>
 8008e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e4c:	f008 080f 	and.w	r8, r8, #15
 8008e50:	2503      	movs	r5, #3
 8008e52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009128 <_dtoa_r+0x640>
 8008e56:	f1b8 0f00 	cmp.w	r8, #0
 8008e5a:	d10a      	bne.n	8008e72 <_dtoa_r+0x38a>
 8008e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e60:	4632      	mov	r2, r6
 8008e62:	463b      	mov	r3, r7
 8008e64:	f7f7 fd12 	bl	800088c <__aeabi_ddiv>
 8008e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e6c:	e02b      	b.n	8008ec6 <_dtoa_r+0x3de>
 8008e6e:	2502      	movs	r5, #2
 8008e70:	e7ef      	b.n	8008e52 <_dtoa_r+0x36a>
 8008e72:	f018 0f01 	tst.w	r8, #1
 8008e76:	d008      	beq.n	8008e8a <_dtoa_r+0x3a2>
 8008e78:	4630      	mov	r0, r6
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e80:	f7f7 fbda 	bl	8000638 <__aeabi_dmul>
 8008e84:	3501      	adds	r5, #1
 8008e86:	4606      	mov	r6, r0
 8008e88:	460f      	mov	r7, r1
 8008e8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e8e:	f109 0908 	add.w	r9, r9, #8
 8008e92:	e7e0      	b.n	8008e56 <_dtoa_r+0x36e>
 8008e94:	f000 809f 	beq.w	8008fd6 <_dtoa_r+0x4ee>
 8008e98:	f1cb 0600 	rsb	r6, fp, #0
 8008e9c:	4ba1      	ldr	r3, [pc, #644]	; (8009124 <_dtoa_r+0x63c>)
 8008e9e:	4fa2      	ldr	r7, [pc, #648]	; (8009128 <_dtoa_r+0x640>)
 8008ea0:	f006 020f 	and.w	r2, r6, #15
 8008ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	ec51 0b18 	vmov	r0, r1, d8
 8008eb0:	f7f7 fbc2 	bl	8000638 <__aeabi_dmul>
 8008eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb8:	1136      	asrs	r6, r6, #4
 8008eba:	2300      	movs	r3, #0
 8008ebc:	2502      	movs	r5, #2
 8008ebe:	2e00      	cmp	r6, #0
 8008ec0:	d17e      	bne.n	8008fc0 <_dtoa_r+0x4d8>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1d0      	bne.n	8008e68 <_dtoa_r+0x380>
 8008ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ec8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 8084 	beq.w	8008fda <_dtoa_r+0x4f2>
 8008ed2:	4b96      	ldr	r3, [pc, #600]	; (800912c <_dtoa_r+0x644>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	4649      	mov	r1, r9
 8008eda:	f7f7 fe1f 	bl	8000b1c <__aeabi_dcmplt>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d07b      	beq.n	8008fda <_dtoa_r+0x4f2>
 8008ee2:	9b04      	ldr	r3, [sp, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d078      	beq.n	8008fda <_dtoa_r+0x4f2>
 8008ee8:	9b01      	ldr	r3, [sp, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dd39      	ble.n	8008f62 <_dtoa_r+0x47a>
 8008eee:	4b90      	ldr	r3, [pc, #576]	; (8009130 <_dtoa_r+0x648>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	f7f7 fb9f 	bl	8000638 <__aeabi_dmul>
 8008efa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008efe:	9e01      	ldr	r6, [sp, #4]
 8008f00:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f04:	3501      	adds	r5, #1
 8008f06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f7f7 fb2a 	bl	8000564 <__aeabi_i2d>
 8008f10:	4642      	mov	r2, r8
 8008f12:	464b      	mov	r3, r9
 8008f14:	f7f7 fb90 	bl	8000638 <__aeabi_dmul>
 8008f18:	4b86      	ldr	r3, [pc, #536]	; (8009134 <_dtoa_r+0x64c>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f7f7 f9d6 	bl	80002cc <__adddf3>
 8008f20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f28:	9303      	str	r3, [sp, #12]
 8008f2a:	2e00      	cmp	r6, #0
 8008f2c:	d158      	bne.n	8008fe0 <_dtoa_r+0x4f8>
 8008f2e:	4b82      	ldr	r3, [pc, #520]	; (8009138 <_dtoa_r+0x650>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	4640      	mov	r0, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	f7f7 f9c7 	bl	80002c8 <__aeabi_dsub>
 8008f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f3e:	4680      	mov	r8, r0
 8008f40:	4689      	mov	r9, r1
 8008f42:	f7f7 fe09 	bl	8000b58 <__aeabi_dcmpgt>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	f040 8296 	bne.w	8009478 <_dtoa_r+0x990>
 8008f4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f50:	4640      	mov	r0, r8
 8008f52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f56:	4649      	mov	r1, r9
 8008f58:	f7f7 fde0 	bl	8000b1c <__aeabi_dcmplt>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	f040 8289 	bne.w	8009474 <_dtoa_r+0x98c>
 8008f62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f2c0 814e 	blt.w	800920a <_dtoa_r+0x722>
 8008f6e:	f1bb 0f0e 	cmp.w	fp, #14
 8008f72:	f300 814a 	bgt.w	800920a <_dtoa_r+0x722>
 8008f76:	4b6b      	ldr	r3, [pc, #428]	; (8009124 <_dtoa_r+0x63c>)
 8008f78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f280 80dc 	bge.w	8009140 <_dtoa_r+0x658>
 8008f88:	9b04      	ldr	r3, [sp, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f300 80d8 	bgt.w	8009140 <_dtoa_r+0x658>
 8008f90:	f040 826f 	bne.w	8009472 <_dtoa_r+0x98a>
 8008f94:	4b68      	ldr	r3, [pc, #416]	; (8009138 <_dtoa_r+0x650>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	4640      	mov	r0, r8
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	f7f7 fb4c 	bl	8000638 <__aeabi_dmul>
 8008fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fa4:	f7f7 fdce 	bl	8000b44 <__aeabi_dcmpge>
 8008fa8:	9e04      	ldr	r6, [sp, #16]
 8008faa:	4637      	mov	r7, r6
 8008fac:	2800      	cmp	r0, #0
 8008fae:	f040 8245 	bne.w	800943c <_dtoa_r+0x954>
 8008fb2:	9d00      	ldr	r5, [sp, #0]
 8008fb4:	2331      	movs	r3, #49	; 0x31
 8008fb6:	f805 3b01 	strb.w	r3, [r5], #1
 8008fba:	f10b 0b01 	add.w	fp, fp, #1
 8008fbe:	e241      	b.n	8009444 <_dtoa_r+0x95c>
 8008fc0:	07f2      	lsls	r2, r6, #31
 8008fc2:	d505      	bpl.n	8008fd0 <_dtoa_r+0x4e8>
 8008fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fc8:	f7f7 fb36 	bl	8000638 <__aeabi_dmul>
 8008fcc:	3501      	adds	r5, #1
 8008fce:	2301      	movs	r3, #1
 8008fd0:	1076      	asrs	r6, r6, #1
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	e773      	b.n	8008ebe <_dtoa_r+0x3d6>
 8008fd6:	2502      	movs	r5, #2
 8008fd8:	e775      	b.n	8008ec6 <_dtoa_r+0x3de>
 8008fda:	9e04      	ldr	r6, [sp, #16]
 8008fdc:	465f      	mov	r7, fp
 8008fde:	e792      	b.n	8008f06 <_dtoa_r+0x41e>
 8008fe0:	9900      	ldr	r1, [sp, #0]
 8008fe2:	4b50      	ldr	r3, [pc, #320]	; (8009124 <_dtoa_r+0x63c>)
 8008fe4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fe8:	4431      	add	r1, r6
 8008fea:	9102      	str	r1, [sp, #8]
 8008fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fee:	eeb0 9a47 	vmov.f32	s18, s14
 8008ff2:	eef0 9a67 	vmov.f32	s19, s15
 8008ff6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ffa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ffe:	2900      	cmp	r1, #0
 8009000:	d044      	beq.n	800908c <_dtoa_r+0x5a4>
 8009002:	494e      	ldr	r1, [pc, #312]	; (800913c <_dtoa_r+0x654>)
 8009004:	2000      	movs	r0, #0
 8009006:	f7f7 fc41 	bl	800088c <__aeabi_ddiv>
 800900a:	ec53 2b19 	vmov	r2, r3, d9
 800900e:	f7f7 f95b 	bl	80002c8 <__aeabi_dsub>
 8009012:	9d00      	ldr	r5, [sp, #0]
 8009014:	ec41 0b19 	vmov	d9, r0, r1
 8009018:	4649      	mov	r1, r9
 800901a:	4640      	mov	r0, r8
 800901c:	f7f7 fdbc 	bl	8000b98 <__aeabi_d2iz>
 8009020:	4606      	mov	r6, r0
 8009022:	f7f7 fa9f 	bl	8000564 <__aeabi_i2d>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4640      	mov	r0, r8
 800902c:	4649      	mov	r1, r9
 800902e:	f7f7 f94b 	bl	80002c8 <__aeabi_dsub>
 8009032:	3630      	adds	r6, #48	; 0x30
 8009034:	f805 6b01 	strb.w	r6, [r5], #1
 8009038:	ec53 2b19 	vmov	r2, r3, d9
 800903c:	4680      	mov	r8, r0
 800903e:	4689      	mov	r9, r1
 8009040:	f7f7 fd6c 	bl	8000b1c <__aeabi_dcmplt>
 8009044:	2800      	cmp	r0, #0
 8009046:	d164      	bne.n	8009112 <_dtoa_r+0x62a>
 8009048:	4642      	mov	r2, r8
 800904a:	464b      	mov	r3, r9
 800904c:	4937      	ldr	r1, [pc, #220]	; (800912c <_dtoa_r+0x644>)
 800904e:	2000      	movs	r0, #0
 8009050:	f7f7 f93a 	bl	80002c8 <__aeabi_dsub>
 8009054:	ec53 2b19 	vmov	r2, r3, d9
 8009058:	f7f7 fd60 	bl	8000b1c <__aeabi_dcmplt>
 800905c:	2800      	cmp	r0, #0
 800905e:	f040 80b6 	bne.w	80091ce <_dtoa_r+0x6e6>
 8009062:	9b02      	ldr	r3, [sp, #8]
 8009064:	429d      	cmp	r5, r3
 8009066:	f43f af7c 	beq.w	8008f62 <_dtoa_r+0x47a>
 800906a:	4b31      	ldr	r3, [pc, #196]	; (8009130 <_dtoa_r+0x648>)
 800906c:	ec51 0b19 	vmov	r0, r1, d9
 8009070:	2200      	movs	r2, #0
 8009072:	f7f7 fae1 	bl	8000638 <__aeabi_dmul>
 8009076:	4b2e      	ldr	r3, [pc, #184]	; (8009130 <_dtoa_r+0x648>)
 8009078:	ec41 0b19 	vmov	d9, r0, r1
 800907c:	2200      	movs	r2, #0
 800907e:	4640      	mov	r0, r8
 8009080:	4649      	mov	r1, r9
 8009082:	f7f7 fad9 	bl	8000638 <__aeabi_dmul>
 8009086:	4680      	mov	r8, r0
 8009088:	4689      	mov	r9, r1
 800908a:	e7c5      	b.n	8009018 <_dtoa_r+0x530>
 800908c:	ec51 0b17 	vmov	r0, r1, d7
 8009090:	f7f7 fad2 	bl	8000638 <__aeabi_dmul>
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	9d00      	ldr	r5, [sp, #0]
 8009098:	930f      	str	r3, [sp, #60]	; 0x3c
 800909a:	ec41 0b19 	vmov	d9, r0, r1
 800909e:	4649      	mov	r1, r9
 80090a0:	4640      	mov	r0, r8
 80090a2:	f7f7 fd79 	bl	8000b98 <__aeabi_d2iz>
 80090a6:	4606      	mov	r6, r0
 80090a8:	f7f7 fa5c 	bl	8000564 <__aeabi_i2d>
 80090ac:	3630      	adds	r6, #48	; 0x30
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4640      	mov	r0, r8
 80090b4:	4649      	mov	r1, r9
 80090b6:	f7f7 f907 	bl	80002c8 <__aeabi_dsub>
 80090ba:	f805 6b01 	strb.w	r6, [r5], #1
 80090be:	9b02      	ldr	r3, [sp, #8]
 80090c0:	429d      	cmp	r5, r3
 80090c2:	4680      	mov	r8, r0
 80090c4:	4689      	mov	r9, r1
 80090c6:	f04f 0200 	mov.w	r2, #0
 80090ca:	d124      	bne.n	8009116 <_dtoa_r+0x62e>
 80090cc:	4b1b      	ldr	r3, [pc, #108]	; (800913c <_dtoa_r+0x654>)
 80090ce:	ec51 0b19 	vmov	r0, r1, d9
 80090d2:	f7f7 f8fb 	bl	80002cc <__adddf3>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	f7f7 fd3b 	bl	8000b58 <__aeabi_dcmpgt>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d173      	bne.n	80091ce <_dtoa_r+0x6e6>
 80090e6:	ec53 2b19 	vmov	r2, r3, d9
 80090ea:	4914      	ldr	r1, [pc, #80]	; (800913c <_dtoa_r+0x654>)
 80090ec:	2000      	movs	r0, #0
 80090ee:	f7f7 f8eb 	bl	80002c8 <__aeabi_dsub>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4640      	mov	r0, r8
 80090f8:	4649      	mov	r1, r9
 80090fa:	f7f7 fd0f 	bl	8000b1c <__aeabi_dcmplt>
 80090fe:	2800      	cmp	r0, #0
 8009100:	f43f af2f 	beq.w	8008f62 <_dtoa_r+0x47a>
 8009104:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009106:	1e6b      	subs	r3, r5, #1
 8009108:	930f      	str	r3, [sp, #60]	; 0x3c
 800910a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800910e:	2b30      	cmp	r3, #48	; 0x30
 8009110:	d0f8      	beq.n	8009104 <_dtoa_r+0x61c>
 8009112:	46bb      	mov	fp, r7
 8009114:	e04a      	b.n	80091ac <_dtoa_r+0x6c4>
 8009116:	4b06      	ldr	r3, [pc, #24]	; (8009130 <_dtoa_r+0x648>)
 8009118:	f7f7 fa8e 	bl	8000638 <__aeabi_dmul>
 800911c:	4680      	mov	r8, r0
 800911e:	4689      	mov	r9, r1
 8009120:	e7bd      	b.n	800909e <_dtoa_r+0x5b6>
 8009122:	bf00      	nop
 8009124:	0800bc68 	.word	0x0800bc68
 8009128:	0800bc40 	.word	0x0800bc40
 800912c:	3ff00000 	.word	0x3ff00000
 8009130:	40240000 	.word	0x40240000
 8009134:	401c0000 	.word	0x401c0000
 8009138:	40140000 	.word	0x40140000
 800913c:	3fe00000 	.word	0x3fe00000
 8009140:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009144:	9d00      	ldr	r5, [sp, #0]
 8009146:	4642      	mov	r2, r8
 8009148:	464b      	mov	r3, r9
 800914a:	4630      	mov	r0, r6
 800914c:	4639      	mov	r1, r7
 800914e:	f7f7 fb9d 	bl	800088c <__aeabi_ddiv>
 8009152:	f7f7 fd21 	bl	8000b98 <__aeabi_d2iz>
 8009156:	9001      	str	r0, [sp, #4]
 8009158:	f7f7 fa04 	bl	8000564 <__aeabi_i2d>
 800915c:	4642      	mov	r2, r8
 800915e:	464b      	mov	r3, r9
 8009160:	f7f7 fa6a 	bl	8000638 <__aeabi_dmul>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	4630      	mov	r0, r6
 800916a:	4639      	mov	r1, r7
 800916c:	f7f7 f8ac 	bl	80002c8 <__aeabi_dsub>
 8009170:	9e01      	ldr	r6, [sp, #4]
 8009172:	9f04      	ldr	r7, [sp, #16]
 8009174:	3630      	adds	r6, #48	; 0x30
 8009176:	f805 6b01 	strb.w	r6, [r5], #1
 800917a:	9e00      	ldr	r6, [sp, #0]
 800917c:	1bae      	subs	r6, r5, r6
 800917e:	42b7      	cmp	r7, r6
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	d134      	bne.n	80091f0 <_dtoa_r+0x708>
 8009186:	f7f7 f8a1 	bl	80002cc <__adddf3>
 800918a:	4642      	mov	r2, r8
 800918c:	464b      	mov	r3, r9
 800918e:	4606      	mov	r6, r0
 8009190:	460f      	mov	r7, r1
 8009192:	f7f7 fce1 	bl	8000b58 <__aeabi_dcmpgt>
 8009196:	b9c8      	cbnz	r0, 80091cc <_dtoa_r+0x6e4>
 8009198:	4642      	mov	r2, r8
 800919a:	464b      	mov	r3, r9
 800919c:	4630      	mov	r0, r6
 800919e:	4639      	mov	r1, r7
 80091a0:	f7f7 fcb2 	bl	8000b08 <__aeabi_dcmpeq>
 80091a4:	b110      	cbz	r0, 80091ac <_dtoa_r+0x6c4>
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	07db      	lsls	r3, r3, #31
 80091aa:	d40f      	bmi.n	80091cc <_dtoa_r+0x6e4>
 80091ac:	4651      	mov	r1, sl
 80091ae:	4620      	mov	r0, r4
 80091b0:	f000 fbcc 	bl	800994c <_Bfree>
 80091b4:	2300      	movs	r3, #0
 80091b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091b8:	702b      	strb	r3, [r5, #0]
 80091ba:	f10b 0301 	add.w	r3, fp, #1
 80091be:	6013      	str	r3, [r2, #0]
 80091c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f43f ace2 	beq.w	8008b8c <_dtoa_r+0xa4>
 80091c8:	601d      	str	r5, [r3, #0]
 80091ca:	e4df      	b.n	8008b8c <_dtoa_r+0xa4>
 80091cc:	465f      	mov	r7, fp
 80091ce:	462b      	mov	r3, r5
 80091d0:	461d      	mov	r5, r3
 80091d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091d6:	2a39      	cmp	r2, #57	; 0x39
 80091d8:	d106      	bne.n	80091e8 <_dtoa_r+0x700>
 80091da:	9a00      	ldr	r2, [sp, #0]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d1f7      	bne.n	80091d0 <_dtoa_r+0x6e8>
 80091e0:	9900      	ldr	r1, [sp, #0]
 80091e2:	2230      	movs	r2, #48	; 0x30
 80091e4:	3701      	adds	r7, #1
 80091e6:	700a      	strb	r2, [r1, #0]
 80091e8:	781a      	ldrb	r2, [r3, #0]
 80091ea:	3201      	adds	r2, #1
 80091ec:	701a      	strb	r2, [r3, #0]
 80091ee:	e790      	b.n	8009112 <_dtoa_r+0x62a>
 80091f0:	4ba3      	ldr	r3, [pc, #652]	; (8009480 <_dtoa_r+0x998>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	f7f7 fa20 	bl	8000638 <__aeabi_dmul>
 80091f8:	2200      	movs	r2, #0
 80091fa:	2300      	movs	r3, #0
 80091fc:	4606      	mov	r6, r0
 80091fe:	460f      	mov	r7, r1
 8009200:	f7f7 fc82 	bl	8000b08 <__aeabi_dcmpeq>
 8009204:	2800      	cmp	r0, #0
 8009206:	d09e      	beq.n	8009146 <_dtoa_r+0x65e>
 8009208:	e7d0      	b.n	80091ac <_dtoa_r+0x6c4>
 800920a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800920c:	2a00      	cmp	r2, #0
 800920e:	f000 80ca 	beq.w	80093a6 <_dtoa_r+0x8be>
 8009212:	9a07      	ldr	r2, [sp, #28]
 8009214:	2a01      	cmp	r2, #1
 8009216:	f300 80ad 	bgt.w	8009374 <_dtoa_r+0x88c>
 800921a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800921c:	2a00      	cmp	r2, #0
 800921e:	f000 80a5 	beq.w	800936c <_dtoa_r+0x884>
 8009222:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009226:	9e08      	ldr	r6, [sp, #32]
 8009228:	9d05      	ldr	r5, [sp, #20]
 800922a:	9a05      	ldr	r2, [sp, #20]
 800922c:	441a      	add	r2, r3
 800922e:	9205      	str	r2, [sp, #20]
 8009230:	9a06      	ldr	r2, [sp, #24]
 8009232:	2101      	movs	r1, #1
 8009234:	441a      	add	r2, r3
 8009236:	4620      	mov	r0, r4
 8009238:	9206      	str	r2, [sp, #24]
 800923a:	f000 fc3d 	bl	8009ab8 <__i2b>
 800923e:	4607      	mov	r7, r0
 8009240:	b165      	cbz	r5, 800925c <_dtoa_r+0x774>
 8009242:	9b06      	ldr	r3, [sp, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	dd09      	ble.n	800925c <_dtoa_r+0x774>
 8009248:	42ab      	cmp	r3, r5
 800924a:	9a05      	ldr	r2, [sp, #20]
 800924c:	bfa8      	it	ge
 800924e:	462b      	movge	r3, r5
 8009250:	1ad2      	subs	r2, r2, r3
 8009252:	9205      	str	r2, [sp, #20]
 8009254:	9a06      	ldr	r2, [sp, #24]
 8009256:	1aed      	subs	r5, r5, r3
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	9306      	str	r3, [sp, #24]
 800925c:	9b08      	ldr	r3, [sp, #32]
 800925e:	b1f3      	cbz	r3, 800929e <_dtoa_r+0x7b6>
 8009260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 80a3 	beq.w	80093ae <_dtoa_r+0x8c6>
 8009268:	2e00      	cmp	r6, #0
 800926a:	dd10      	ble.n	800928e <_dtoa_r+0x7a6>
 800926c:	4639      	mov	r1, r7
 800926e:	4632      	mov	r2, r6
 8009270:	4620      	mov	r0, r4
 8009272:	f000 fce1 	bl	8009c38 <__pow5mult>
 8009276:	4652      	mov	r2, sl
 8009278:	4601      	mov	r1, r0
 800927a:	4607      	mov	r7, r0
 800927c:	4620      	mov	r0, r4
 800927e:	f000 fc31 	bl	8009ae4 <__multiply>
 8009282:	4651      	mov	r1, sl
 8009284:	4680      	mov	r8, r0
 8009286:	4620      	mov	r0, r4
 8009288:	f000 fb60 	bl	800994c <_Bfree>
 800928c:	46c2      	mov	sl, r8
 800928e:	9b08      	ldr	r3, [sp, #32]
 8009290:	1b9a      	subs	r2, r3, r6
 8009292:	d004      	beq.n	800929e <_dtoa_r+0x7b6>
 8009294:	4651      	mov	r1, sl
 8009296:	4620      	mov	r0, r4
 8009298:	f000 fcce 	bl	8009c38 <__pow5mult>
 800929c:	4682      	mov	sl, r0
 800929e:	2101      	movs	r1, #1
 80092a0:	4620      	mov	r0, r4
 80092a2:	f000 fc09 	bl	8009ab8 <__i2b>
 80092a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	4606      	mov	r6, r0
 80092ac:	f340 8081 	ble.w	80093b2 <_dtoa_r+0x8ca>
 80092b0:	461a      	mov	r2, r3
 80092b2:	4601      	mov	r1, r0
 80092b4:	4620      	mov	r0, r4
 80092b6:	f000 fcbf 	bl	8009c38 <__pow5mult>
 80092ba:	9b07      	ldr	r3, [sp, #28]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	4606      	mov	r6, r0
 80092c0:	dd7a      	ble.n	80093b8 <_dtoa_r+0x8d0>
 80092c2:	f04f 0800 	mov.w	r8, #0
 80092c6:	6933      	ldr	r3, [r6, #16]
 80092c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092cc:	6918      	ldr	r0, [r3, #16]
 80092ce:	f000 fba5 	bl	8009a1c <__hi0bits>
 80092d2:	f1c0 0020 	rsb	r0, r0, #32
 80092d6:	9b06      	ldr	r3, [sp, #24]
 80092d8:	4418      	add	r0, r3
 80092da:	f010 001f 	ands.w	r0, r0, #31
 80092de:	f000 8094 	beq.w	800940a <_dtoa_r+0x922>
 80092e2:	f1c0 0320 	rsb	r3, r0, #32
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	f340 8085 	ble.w	80093f6 <_dtoa_r+0x90e>
 80092ec:	9b05      	ldr	r3, [sp, #20]
 80092ee:	f1c0 001c 	rsb	r0, r0, #28
 80092f2:	4403      	add	r3, r0
 80092f4:	9305      	str	r3, [sp, #20]
 80092f6:	9b06      	ldr	r3, [sp, #24]
 80092f8:	4403      	add	r3, r0
 80092fa:	4405      	add	r5, r0
 80092fc:	9306      	str	r3, [sp, #24]
 80092fe:	9b05      	ldr	r3, [sp, #20]
 8009300:	2b00      	cmp	r3, #0
 8009302:	dd05      	ble.n	8009310 <_dtoa_r+0x828>
 8009304:	4651      	mov	r1, sl
 8009306:	461a      	mov	r2, r3
 8009308:	4620      	mov	r0, r4
 800930a:	f000 fcef 	bl	8009cec <__lshift>
 800930e:	4682      	mov	sl, r0
 8009310:	9b06      	ldr	r3, [sp, #24]
 8009312:	2b00      	cmp	r3, #0
 8009314:	dd05      	ble.n	8009322 <_dtoa_r+0x83a>
 8009316:	4631      	mov	r1, r6
 8009318:	461a      	mov	r2, r3
 800931a:	4620      	mov	r0, r4
 800931c:	f000 fce6 	bl	8009cec <__lshift>
 8009320:	4606      	mov	r6, r0
 8009322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009324:	2b00      	cmp	r3, #0
 8009326:	d072      	beq.n	800940e <_dtoa_r+0x926>
 8009328:	4631      	mov	r1, r6
 800932a:	4650      	mov	r0, sl
 800932c:	f000 fd4a 	bl	8009dc4 <__mcmp>
 8009330:	2800      	cmp	r0, #0
 8009332:	da6c      	bge.n	800940e <_dtoa_r+0x926>
 8009334:	2300      	movs	r3, #0
 8009336:	4651      	mov	r1, sl
 8009338:	220a      	movs	r2, #10
 800933a:	4620      	mov	r0, r4
 800933c:	f000 fb28 	bl	8009990 <__multadd>
 8009340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009342:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009346:	4682      	mov	sl, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 81b0 	beq.w	80096ae <_dtoa_r+0xbc6>
 800934e:	2300      	movs	r3, #0
 8009350:	4639      	mov	r1, r7
 8009352:	220a      	movs	r2, #10
 8009354:	4620      	mov	r0, r4
 8009356:	f000 fb1b 	bl	8009990 <__multadd>
 800935a:	9b01      	ldr	r3, [sp, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	4607      	mov	r7, r0
 8009360:	f300 8096 	bgt.w	8009490 <_dtoa_r+0x9a8>
 8009364:	9b07      	ldr	r3, [sp, #28]
 8009366:	2b02      	cmp	r3, #2
 8009368:	dc59      	bgt.n	800941e <_dtoa_r+0x936>
 800936a:	e091      	b.n	8009490 <_dtoa_r+0x9a8>
 800936c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800936e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009372:	e758      	b.n	8009226 <_dtoa_r+0x73e>
 8009374:	9b04      	ldr	r3, [sp, #16]
 8009376:	1e5e      	subs	r6, r3, #1
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	42b3      	cmp	r3, r6
 800937c:	bfbf      	itttt	lt
 800937e:	9b08      	ldrlt	r3, [sp, #32]
 8009380:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009382:	9608      	strlt	r6, [sp, #32]
 8009384:	1af3      	sublt	r3, r6, r3
 8009386:	bfb4      	ite	lt
 8009388:	18d2      	addlt	r2, r2, r3
 800938a:	1b9e      	subge	r6, r3, r6
 800938c:	9b04      	ldr	r3, [sp, #16]
 800938e:	bfbc      	itt	lt
 8009390:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009392:	2600      	movlt	r6, #0
 8009394:	2b00      	cmp	r3, #0
 8009396:	bfb7      	itett	lt
 8009398:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800939c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80093a0:	1a9d      	sublt	r5, r3, r2
 80093a2:	2300      	movlt	r3, #0
 80093a4:	e741      	b.n	800922a <_dtoa_r+0x742>
 80093a6:	9e08      	ldr	r6, [sp, #32]
 80093a8:	9d05      	ldr	r5, [sp, #20]
 80093aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80093ac:	e748      	b.n	8009240 <_dtoa_r+0x758>
 80093ae:	9a08      	ldr	r2, [sp, #32]
 80093b0:	e770      	b.n	8009294 <_dtoa_r+0x7ac>
 80093b2:	9b07      	ldr	r3, [sp, #28]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	dc19      	bgt.n	80093ec <_dtoa_r+0x904>
 80093b8:	9b02      	ldr	r3, [sp, #8]
 80093ba:	b9bb      	cbnz	r3, 80093ec <_dtoa_r+0x904>
 80093bc:	9b03      	ldr	r3, [sp, #12]
 80093be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093c2:	b99b      	cbnz	r3, 80093ec <_dtoa_r+0x904>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093ca:	0d1b      	lsrs	r3, r3, #20
 80093cc:	051b      	lsls	r3, r3, #20
 80093ce:	b183      	cbz	r3, 80093f2 <_dtoa_r+0x90a>
 80093d0:	9b05      	ldr	r3, [sp, #20]
 80093d2:	3301      	adds	r3, #1
 80093d4:	9305      	str	r3, [sp, #20]
 80093d6:	9b06      	ldr	r3, [sp, #24]
 80093d8:	3301      	adds	r3, #1
 80093da:	9306      	str	r3, [sp, #24]
 80093dc:	f04f 0801 	mov.w	r8, #1
 80093e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f47f af6f 	bne.w	80092c6 <_dtoa_r+0x7de>
 80093e8:	2001      	movs	r0, #1
 80093ea:	e774      	b.n	80092d6 <_dtoa_r+0x7ee>
 80093ec:	f04f 0800 	mov.w	r8, #0
 80093f0:	e7f6      	b.n	80093e0 <_dtoa_r+0x8f8>
 80093f2:	4698      	mov	r8, r3
 80093f4:	e7f4      	b.n	80093e0 <_dtoa_r+0x8f8>
 80093f6:	d082      	beq.n	80092fe <_dtoa_r+0x816>
 80093f8:	9a05      	ldr	r2, [sp, #20]
 80093fa:	331c      	adds	r3, #28
 80093fc:	441a      	add	r2, r3
 80093fe:	9205      	str	r2, [sp, #20]
 8009400:	9a06      	ldr	r2, [sp, #24]
 8009402:	441a      	add	r2, r3
 8009404:	441d      	add	r5, r3
 8009406:	9206      	str	r2, [sp, #24]
 8009408:	e779      	b.n	80092fe <_dtoa_r+0x816>
 800940a:	4603      	mov	r3, r0
 800940c:	e7f4      	b.n	80093f8 <_dtoa_r+0x910>
 800940e:	9b04      	ldr	r3, [sp, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	dc37      	bgt.n	8009484 <_dtoa_r+0x99c>
 8009414:	9b07      	ldr	r3, [sp, #28]
 8009416:	2b02      	cmp	r3, #2
 8009418:	dd34      	ble.n	8009484 <_dtoa_r+0x99c>
 800941a:	9b04      	ldr	r3, [sp, #16]
 800941c:	9301      	str	r3, [sp, #4]
 800941e:	9b01      	ldr	r3, [sp, #4]
 8009420:	b963      	cbnz	r3, 800943c <_dtoa_r+0x954>
 8009422:	4631      	mov	r1, r6
 8009424:	2205      	movs	r2, #5
 8009426:	4620      	mov	r0, r4
 8009428:	f000 fab2 	bl	8009990 <__multadd>
 800942c:	4601      	mov	r1, r0
 800942e:	4606      	mov	r6, r0
 8009430:	4650      	mov	r0, sl
 8009432:	f000 fcc7 	bl	8009dc4 <__mcmp>
 8009436:	2800      	cmp	r0, #0
 8009438:	f73f adbb 	bgt.w	8008fb2 <_dtoa_r+0x4ca>
 800943c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800943e:	9d00      	ldr	r5, [sp, #0]
 8009440:	ea6f 0b03 	mvn.w	fp, r3
 8009444:	f04f 0800 	mov.w	r8, #0
 8009448:	4631      	mov	r1, r6
 800944a:	4620      	mov	r0, r4
 800944c:	f000 fa7e 	bl	800994c <_Bfree>
 8009450:	2f00      	cmp	r7, #0
 8009452:	f43f aeab 	beq.w	80091ac <_dtoa_r+0x6c4>
 8009456:	f1b8 0f00 	cmp.w	r8, #0
 800945a:	d005      	beq.n	8009468 <_dtoa_r+0x980>
 800945c:	45b8      	cmp	r8, r7
 800945e:	d003      	beq.n	8009468 <_dtoa_r+0x980>
 8009460:	4641      	mov	r1, r8
 8009462:	4620      	mov	r0, r4
 8009464:	f000 fa72 	bl	800994c <_Bfree>
 8009468:	4639      	mov	r1, r7
 800946a:	4620      	mov	r0, r4
 800946c:	f000 fa6e 	bl	800994c <_Bfree>
 8009470:	e69c      	b.n	80091ac <_dtoa_r+0x6c4>
 8009472:	2600      	movs	r6, #0
 8009474:	4637      	mov	r7, r6
 8009476:	e7e1      	b.n	800943c <_dtoa_r+0x954>
 8009478:	46bb      	mov	fp, r7
 800947a:	4637      	mov	r7, r6
 800947c:	e599      	b.n	8008fb2 <_dtoa_r+0x4ca>
 800947e:	bf00      	nop
 8009480:	40240000 	.word	0x40240000
 8009484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 80c8 	beq.w	800961c <_dtoa_r+0xb34>
 800948c:	9b04      	ldr	r3, [sp, #16]
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	2d00      	cmp	r5, #0
 8009492:	dd05      	ble.n	80094a0 <_dtoa_r+0x9b8>
 8009494:	4639      	mov	r1, r7
 8009496:	462a      	mov	r2, r5
 8009498:	4620      	mov	r0, r4
 800949a:	f000 fc27 	bl	8009cec <__lshift>
 800949e:	4607      	mov	r7, r0
 80094a0:	f1b8 0f00 	cmp.w	r8, #0
 80094a4:	d05b      	beq.n	800955e <_dtoa_r+0xa76>
 80094a6:	6879      	ldr	r1, [r7, #4]
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 fa0f 	bl	80098cc <_Balloc>
 80094ae:	4605      	mov	r5, r0
 80094b0:	b928      	cbnz	r0, 80094be <_dtoa_r+0x9d6>
 80094b2:	4b83      	ldr	r3, [pc, #524]	; (80096c0 <_dtoa_r+0xbd8>)
 80094b4:	4602      	mov	r2, r0
 80094b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80094ba:	f7ff bb2e 	b.w	8008b1a <_dtoa_r+0x32>
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	3202      	adds	r2, #2
 80094c2:	0092      	lsls	r2, r2, #2
 80094c4:	f107 010c 	add.w	r1, r7, #12
 80094c8:	300c      	adds	r0, #12
 80094ca:	f001 f801 	bl	800a4d0 <memcpy>
 80094ce:	2201      	movs	r2, #1
 80094d0:	4629      	mov	r1, r5
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 fc0a 	bl	8009cec <__lshift>
 80094d8:	9b00      	ldr	r3, [sp, #0]
 80094da:	3301      	adds	r3, #1
 80094dc:	9304      	str	r3, [sp, #16]
 80094de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094e2:	4413      	add	r3, r2
 80094e4:	9308      	str	r3, [sp, #32]
 80094e6:	9b02      	ldr	r3, [sp, #8]
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	46b8      	mov	r8, r7
 80094ee:	9306      	str	r3, [sp, #24]
 80094f0:	4607      	mov	r7, r0
 80094f2:	9b04      	ldr	r3, [sp, #16]
 80094f4:	4631      	mov	r1, r6
 80094f6:	3b01      	subs	r3, #1
 80094f8:	4650      	mov	r0, sl
 80094fa:	9301      	str	r3, [sp, #4]
 80094fc:	f7ff fa69 	bl	80089d2 <quorem>
 8009500:	4641      	mov	r1, r8
 8009502:	9002      	str	r0, [sp, #8]
 8009504:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009508:	4650      	mov	r0, sl
 800950a:	f000 fc5b 	bl	8009dc4 <__mcmp>
 800950e:	463a      	mov	r2, r7
 8009510:	9005      	str	r0, [sp, #20]
 8009512:	4631      	mov	r1, r6
 8009514:	4620      	mov	r0, r4
 8009516:	f000 fc71 	bl	8009dfc <__mdiff>
 800951a:	68c2      	ldr	r2, [r0, #12]
 800951c:	4605      	mov	r5, r0
 800951e:	bb02      	cbnz	r2, 8009562 <_dtoa_r+0xa7a>
 8009520:	4601      	mov	r1, r0
 8009522:	4650      	mov	r0, sl
 8009524:	f000 fc4e 	bl	8009dc4 <__mcmp>
 8009528:	4602      	mov	r2, r0
 800952a:	4629      	mov	r1, r5
 800952c:	4620      	mov	r0, r4
 800952e:	9209      	str	r2, [sp, #36]	; 0x24
 8009530:	f000 fa0c 	bl	800994c <_Bfree>
 8009534:	9b07      	ldr	r3, [sp, #28]
 8009536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009538:	9d04      	ldr	r5, [sp, #16]
 800953a:	ea43 0102 	orr.w	r1, r3, r2
 800953e:	9b06      	ldr	r3, [sp, #24]
 8009540:	4319      	orrs	r1, r3
 8009542:	d110      	bne.n	8009566 <_dtoa_r+0xa7e>
 8009544:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009548:	d029      	beq.n	800959e <_dtoa_r+0xab6>
 800954a:	9b05      	ldr	r3, [sp, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	dd02      	ble.n	8009556 <_dtoa_r+0xa6e>
 8009550:	9b02      	ldr	r3, [sp, #8]
 8009552:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009556:	9b01      	ldr	r3, [sp, #4]
 8009558:	f883 9000 	strb.w	r9, [r3]
 800955c:	e774      	b.n	8009448 <_dtoa_r+0x960>
 800955e:	4638      	mov	r0, r7
 8009560:	e7ba      	b.n	80094d8 <_dtoa_r+0x9f0>
 8009562:	2201      	movs	r2, #1
 8009564:	e7e1      	b.n	800952a <_dtoa_r+0xa42>
 8009566:	9b05      	ldr	r3, [sp, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	db04      	blt.n	8009576 <_dtoa_r+0xa8e>
 800956c:	9907      	ldr	r1, [sp, #28]
 800956e:	430b      	orrs	r3, r1
 8009570:	9906      	ldr	r1, [sp, #24]
 8009572:	430b      	orrs	r3, r1
 8009574:	d120      	bne.n	80095b8 <_dtoa_r+0xad0>
 8009576:	2a00      	cmp	r2, #0
 8009578:	dded      	ble.n	8009556 <_dtoa_r+0xa6e>
 800957a:	4651      	mov	r1, sl
 800957c:	2201      	movs	r2, #1
 800957e:	4620      	mov	r0, r4
 8009580:	f000 fbb4 	bl	8009cec <__lshift>
 8009584:	4631      	mov	r1, r6
 8009586:	4682      	mov	sl, r0
 8009588:	f000 fc1c 	bl	8009dc4 <__mcmp>
 800958c:	2800      	cmp	r0, #0
 800958e:	dc03      	bgt.n	8009598 <_dtoa_r+0xab0>
 8009590:	d1e1      	bne.n	8009556 <_dtoa_r+0xa6e>
 8009592:	f019 0f01 	tst.w	r9, #1
 8009596:	d0de      	beq.n	8009556 <_dtoa_r+0xa6e>
 8009598:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800959c:	d1d8      	bne.n	8009550 <_dtoa_r+0xa68>
 800959e:	9a01      	ldr	r2, [sp, #4]
 80095a0:	2339      	movs	r3, #57	; 0x39
 80095a2:	7013      	strb	r3, [r2, #0]
 80095a4:	462b      	mov	r3, r5
 80095a6:	461d      	mov	r5, r3
 80095a8:	3b01      	subs	r3, #1
 80095aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ae:	2a39      	cmp	r2, #57	; 0x39
 80095b0:	d06c      	beq.n	800968c <_dtoa_r+0xba4>
 80095b2:	3201      	adds	r2, #1
 80095b4:	701a      	strb	r2, [r3, #0]
 80095b6:	e747      	b.n	8009448 <_dtoa_r+0x960>
 80095b8:	2a00      	cmp	r2, #0
 80095ba:	dd07      	ble.n	80095cc <_dtoa_r+0xae4>
 80095bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095c0:	d0ed      	beq.n	800959e <_dtoa_r+0xab6>
 80095c2:	9a01      	ldr	r2, [sp, #4]
 80095c4:	f109 0301 	add.w	r3, r9, #1
 80095c8:	7013      	strb	r3, [r2, #0]
 80095ca:	e73d      	b.n	8009448 <_dtoa_r+0x960>
 80095cc:	9b04      	ldr	r3, [sp, #16]
 80095ce:	9a08      	ldr	r2, [sp, #32]
 80095d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d043      	beq.n	8009660 <_dtoa_r+0xb78>
 80095d8:	4651      	mov	r1, sl
 80095da:	2300      	movs	r3, #0
 80095dc:	220a      	movs	r2, #10
 80095de:	4620      	mov	r0, r4
 80095e0:	f000 f9d6 	bl	8009990 <__multadd>
 80095e4:	45b8      	cmp	r8, r7
 80095e6:	4682      	mov	sl, r0
 80095e8:	f04f 0300 	mov.w	r3, #0
 80095ec:	f04f 020a 	mov.w	r2, #10
 80095f0:	4641      	mov	r1, r8
 80095f2:	4620      	mov	r0, r4
 80095f4:	d107      	bne.n	8009606 <_dtoa_r+0xb1e>
 80095f6:	f000 f9cb 	bl	8009990 <__multadd>
 80095fa:	4680      	mov	r8, r0
 80095fc:	4607      	mov	r7, r0
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	3301      	adds	r3, #1
 8009602:	9304      	str	r3, [sp, #16]
 8009604:	e775      	b.n	80094f2 <_dtoa_r+0xa0a>
 8009606:	f000 f9c3 	bl	8009990 <__multadd>
 800960a:	4639      	mov	r1, r7
 800960c:	4680      	mov	r8, r0
 800960e:	2300      	movs	r3, #0
 8009610:	220a      	movs	r2, #10
 8009612:	4620      	mov	r0, r4
 8009614:	f000 f9bc 	bl	8009990 <__multadd>
 8009618:	4607      	mov	r7, r0
 800961a:	e7f0      	b.n	80095fe <_dtoa_r+0xb16>
 800961c:	9b04      	ldr	r3, [sp, #16]
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	9d00      	ldr	r5, [sp, #0]
 8009622:	4631      	mov	r1, r6
 8009624:	4650      	mov	r0, sl
 8009626:	f7ff f9d4 	bl	80089d2 <quorem>
 800962a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800962e:	9b00      	ldr	r3, [sp, #0]
 8009630:	f805 9b01 	strb.w	r9, [r5], #1
 8009634:	1aea      	subs	r2, r5, r3
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	4293      	cmp	r3, r2
 800963a:	dd07      	ble.n	800964c <_dtoa_r+0xb64>
 800963c:	4651      	mov	r1, sl
 800963e:	2300      	movs	r3, #0
 8009640:	220a      	movs	r2, #10
 8009642:	4620      	mov	r0, r4
 8009644:	f000 f9a4 	bl	8009990 <__multadd>
 8009648:	4682      	mov	sl, r0
 800964a:	e7ea      	b.n	8009622 <_dtoa_r+0xb3a>
 800964c:	9b01      	ldr	r3, [sp, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	bfc8      	it	gt
 8009652:	461d      	movgt	r5, r3
 8009654:	9b00      	ldr	r3, [sp, #0]
 8009656:	bfd8      	it	le
 8009658:	2501      	movle	r5, #1
 800965a:	441d      	add	r5, r3
 800965c:	f04f 0800 	mov.w	r8, #0
 8009660:	4651      	mov	r1, sl
 8009662:	2201      	movs	r2, #1
 8009664:	4620      	mov	r0, r4
 8009666:	f000 fb41 	bl	8009cec <__lshift>
 800966a:	4631      	mov	r1, r6
 800966c:	4682      	mov	sl, r0
 800966e:	f000 fba9 	bl	8009dc4 <__mcmp>
 8009672:	2800      	cmp	r0, #0
 8009674:	dc96      	bgt.n	80095a4 <_dtoa_r+0xabc>
 8009676:	d102      	bne.n	800967e <_dtoa_r+0xb96>
 8009678:	f019 0f01 	tst.w	r9, #1
 800967c:	d192      	bne.n	80095a4 <_dtoa_r+0xabc>
 800967e:	462b      	mov	r3, r5
 8009680:	461d      	mov	r5, r3
 8009682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009686:	2a30      	cmp	r2, #48	; 0x30
 8009688:	d0fa      	beq.n	8009680 <_dtoa_r+0xb98>
 800968a:	e6dd      	b.n	8009448 <_dtoa_r+0x960>
 800968c:	9a00      	ldr	r2, [sp, #0]
 800968e:	429a      	cmp	r2, r3
 8009690:	d189      	bne.n	80095a6 <_dtoa_r+0xabe>
 8009692:	f10b 0b01 	add.w	fp, fp, #1
 8009696:	2331      	movs	r3, #49	; 0x31
 8009698:	e796      	b.n	80095c8 <_dtoa_r+0xae0>
 800969a:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <_dtoa_r+0xbdc>)
 800969c:	f7ff ba99 	b.w	8008bd2 <_dtoa_r+0xea>
 80096a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f47f aa6d 	bne.w	8008b82 <_dtoa_r+0x9a>
 80096a8:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <_dtoa_r+0xbe0>)
 80096aa:	f7ff ba92 	b.w	8008bd2 <_dtoa_r+0xea>
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	dcb5      	bgt.n	8009620 <_dtoa_r+0xb38>
 80096b4:	9b07      	ldr	r3, [sp, #28]
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	f73f aeb1 	bgt.w	800941e <_dtoa_r+0x936>
 80096bc:	e7b0      	b.n	8009620 <_dtoa_r+0xb38>
 80096be:	bf00      	nop
 80096c0:	0800bbd0 	.word	0x0800bbd0
 80096c4:	0800bb30 	.word	0x0800bb30
 80096c8:	0800bb54 	.word	0x0800bb54

080096cc <_free_r>:
 80096cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096ce:	2900      	cmp	r1, #0
 80096d0:	d044      	beq.n	800975c <_free_r+0x90>
 80096d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096d6:	9001      	str	r0, [sp, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f1a1 0404 	sub.w	r4, r1, #4
 80096de:	bfb8      	it	lt
 80096e0:	18e4      	addlt	r4, r4, r3
 80096e2:	f000 f8e7 	bl	80098b4 <__malloc_lock>
 80096e6:	4a1e      	ldr	r2, [pc, #120]	; (8009760 <_free_r+0x94>)
 80096e8:	9801      	ldr	r0, [sp, #4]
 80096ea:	6813      	ldr	r3, [r2, #0]
 80096ec:	b933      	cbnz	r3, 80096fc <_free_r+0x30>
 80096ee:	6063      	str	r3, [r4, #4]
 80096f0:	6014      	str	r4, [r2, #0]
 80096f2:	b003      	add	sp, #12
 80096f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096f8:	f000 b8e2 	b.w	80098c0 <__malloc_unlock>
 80096fc:	42a3      	cmp	r3, r4
 80096fe:	d908      	bls.n	8009712 <_free_r+0x46>
 8009700:	6825      	ldr	r5, [r4, #0]
 8009702:	1961      	adds	r1, r4, r5
 8009704:	428b      	cmp	r3, r1
 8009706:	bf01      	itttt	eq
 8009708:	6819      	ldreq	r1, [r3, #0]
 800970a:	685b      	ldreq	r3, [r3, #4]
 800970c:	1949      	addeq	r1, r1, r5
 800970e:	6021      	streq	r1, [r4, #0]
 8009710:	e7ed      	b.n	80096ee <_free_r+0x22>
 8009712:	461a      	mov	r2, r3
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	b10b      	cbz	r3, 800971c <_free_r+0x50>
 8009718:	42a3      	cmp	r3, r4
 800971a:	d9fa      	bls.n	8009712 <_free_r+0x46>
 800971c:	6811      	ldr	r1, [r2, #0]
 800971e:	1855      	adds	r5, r2, r1
 8009720:	42a5      	cmp	r5, r4
 8009722:	d10b      	bne.n	800973c <_free_r+0x70>
 8009724:	6824      	ldr	r4, [r4, #0]
 8009726:	4421      	add	r1, r4
 8009728:	1854      	adds	r4, r2, r1
 800972a:	42a3      	cmp	r3, r4
 800972c:	6011      	str	r1, [r2, #0]
 800972e:	d1e0      	bne.n	80096f2 <_free_r+0x26>
 8009730:	681c      	ldr	r4, [r3, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	6053      	str	r3, [r2, #4]
 8009736:	440c      	add	r4, r1
 8009738:	6014      	str	r4, [r2, #0]
 800973a:	e7da      	b.n	80096f2 <_free_r+0x26>
 800973c:	d902      	bls.n	8009744 <_free_r+0x78>
 800973e:	230c      	movs	r3, #12
 8009740:	6003      	str	r3, [r0, #0]
 8009742:	e7d6      	b.n	80096f2 <_free_r+0x26>
 8009744:	6825      	ldr	r5, [r4, #0]
 8009746:	1961      	adds	r1, r4, r5
 8009748:	428b      	cmp	r3, r1
 800974a:	bf04      	itt	eq
 800974c:	6819      	ldreq	r1, [r3, #0]
 800974e:	685b      	ldreq	r3, [r3, #4]
 8009750:	6063      	str	r3, [r4, #4]
 8009752:	bf04      	itt	eq
 8009754:	1949      	addeq	r1, r1, r5
 8009756:	6021      	streq	r1, [r4, #0]
 8009758:	6054      	str	r4, [r2, #4]
 800975a:	e7ca      	b.n	80096f2 <_free_r+0x26>
 800975c:	b003      	add	sp, #12
 800975e:	bd30      	pop	{r4, r5, pc}
 8009760:	20000610 	.word	0x20000610

08009764 <malloc>:
 8009764:	4b02      	ldr	r3, [pc, #8]	; (8009770 <malloc+0xc>)
 8009766:	4601      	mov	r1, r0
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	f000 b823 	b.w	80097b4 <_malloc_r>
 800976e:	bf00      	nop
 8009770:	200000f4 	.word	0x200000f4

08009774 <sbrk_aligned>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	4e0e      	ldr	r6, [pc, #56]	; (80097b0 <sbrk_aligned+0x3c>)
 8009778:	460c      	mov	r4, r1
 800977a:	6831      	ldr	r1, [r6, #0]
 800977c:	4605      	mov	r5, r0
 800977e:	b911      	cbnz	r1, 8009786 <sbrk_aligned+0x12>
 8009780:	f000 fe96 	bl	800a4b0 <_sbrk_r>
 8009784:	6030      	str	r0, [r6, #0]
 8009786:	4621      	mov	r1, r4
 8009788:	4628      	mov	r0, r5
 800978a:	f000 fe91 	bl	800a4b0 <_sbrk_r>
 800978e:	1c43      	adds	r3, r0, #1
 8009790:	d00a      	beq.n	80097a8 <sbrk_aligned+0x34>
 8009792:	1cc4      	adds	r4, r0, #3
 8009794:	f024 0403 	bic.w	r4, r4, #3
 8009798:	42a0      	cmp	r0, r4
 800979a:	d007      	beq.n	80097ac <sbrk_aligned+0x38>
 800979c:	1a21      	subs	r1, r4, r0
 800979e:	4628      	mov	r0, r5
 80097a0:	f000 fe86 	bl	800a4b0 <_sbrk_r>
 80097a4:	3001      	adds	r0, #1
 80097a6:	d101      	bne.n	80097ac <sbrk_aligned+0x38>
 80097a8:	f04f 34ff 	mov.w	r4, #4294967295
 80097ac:	4620      	mov	r0, r4
 80097ae:	bd70      	pop	{r4, r5, r6, pc}
 80097b0:	20000614 	.word	0x20000614

080097b4 <_malloc_r>:
 80097b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b8:	1ccd      	adds	r5, r1, #3
 80097ba:	f025 0503 	bic.w	r5, r5, #3
 80097be:	3508      	adds	r5, #8
 80097c0:	2d0c      	cmp	r5, #12
 80097c2:	bf38      	it	cc
 80097c4:	250c      	movcc	r5, #12
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	4607      	mov	r7, r0
 80097ca:	db01      	blt.n	80097d0 <_malloc_r+0x1c>
 80097cc:	42a9      	cmp	r1, r5
 80097ce:	d905      	bls.n	80097dc <_malloc_r+0x28>
 80097d0:	230c      	movs	r3, #12
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	2600      	movs	r6, #0
 80097d6:	4630      	mov	r0, r6
 80097d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80098b0 <_malloc_r+0xfc>
 80097e0:	f000 f868 	bl	80098b4 <__malloc_lock>
 80097e4:	f8d8 3000 	ldr.w	r3, [r8]
 80097e8:	461c      	mov	r4, r3
 80097ea:	bb5c      	cbnz	r4, 8009844 <_malloc_r+0x90>
 80097ec:	4629      	mov	r1, r5
 80097ee:	4638      	mov	r0, r7
 80097f0:	f7ff ffc0 	bl	8009774 <sbrk_aligned>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	4604      	mov	r4, r0
 80097f8:	d155      	bne.n	80098a6 <_malloc_r+0xf2>
 80097fa:	f8d8 4000 	ldr.w	r4, [r8]
 80097fe:	4626      	mov	r6, r4
 8009800:	2e00      	cmp	r6, #0
 8009802:	d145      	bne.n	8009890 <_malloc_r+0xdc>
 8009804:	2c00      	cmp	r4, #0
 8009806:	d048      	beq.n	800989a <_malloc_r+0xe6>
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	4631      	mov	r1, r6
 800980c:	4638      	mov	r0, r7
 800980e:	eb04 0903 	add.w	r9, r4, r3
 8009812:	f000 fe4d 	bl	800a4b0 <_sbrk_r>
 8009816:	4581      	cmp	r9, r0
 8009818:	d13f      	bne.n	800989a <_malloc_r+0xe6>
 800981a:	6821      	ldr	r1, [r4, #0]
 800981c:	1a6d      	subs	r5, r5, r1
 800981e:	4629      	mov	r1, r5
 8009820:	4638      	mov	r0, r7
 8009822:	f7ff ffa7 	bl	8009774 <sbrk_aligned>
 8009826:	3001      	adds	r0, #1
 8009828:	d037      	beq.n	800989a <_malloc_r+0xe6>
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	442b      	add	r3, r5
 800982e:	6023      	str	r3, [r4, #0]
 8009830:	f8d8 3000 	ldr.w	r3, [r8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d038      	beq.n	80098aa <_malloc_r+0xf6>
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	42a2      	cmp	r2, r4
 800983c:	d12b      	bne.n	8009896 <_malloc_r+0xe2>
 800983e:	2200      	movs	r2, #0
 8009840:	605a      	str	r2, [r3, #4]
 8009842:	e00f      	b.n	8009864 <_malloc_r+0xb0>
 8009844:	6822      	ldr	r2, [r4, #0]
 8009846:	1b52      	subs	r2, r2, r5
 8009848:	d41f      	bmi.n	800988a <_malloc_r+0xd6>
 800984a:	2a0b      	cmp	r2, #11
 800984c:	d917      	bls.n	800987e <_malloc_r+0xca>
 800984e:	1961      	adds	r1, r4, r5
 8009850:	42a3      	cmp	r3, r4
 8009852:	6025      	str	r5, [r4, #0]
 8009854:	bf18      	it	ne
 8009856:	6059      	strne	r1, [r3, #4]
 8009858:	6863      	ldr	r3, [r4, #4]
 800985a:	bf08      	it	eq
 800985c:	f8c8 1000 	streq.w	r1, [r8]
 8009860:	5162      	str	r2, [r4, r5]
 8009862:	604b      	str	r3, [r1, #4]
 8009864:	4638      	mov	r0, r7
 8009866:	f104 060b 	add.w	r6, r4, #11
 800986a:	f000 f829 	bl	80098c0 <__malloc_unlock>
 800986e:	f026 0607 	bic.w	r6, r6, #7
 8009872:	1d23      	adds	r3, r4, #4
 8009874:	1af2      	subs	r2, r6, r3
 8009876:	d0ae      	beq.n	80097d6 <_malloc_r+0x22>
 8009878:	1b9b      	subs	r3, r3, r6
 800987a:	50a3      	str	r3, [r4, r2]
 800987c:	e7ab      	b.n	80097d6 <_malloc_r+0x22>
 800987e:	42a3      	cmp	r3, r4
 8009880:	6862      	ldr	r2, [r4, #4]
 8009882:	d1dd      	bne.n	8009840 <_malloc_r+0x8c>
 8009884:	f8c8 2000 	str.w	r2, [r8]
 8009888:	e7ec      	b.n	8009864 <_malloc_r+0xb0>
 800988a:	4623      	mov	r3, r4
 800988c:	6864      	ldr	r4, [r4, #4]
 800988e:	e7ac      	b.n	80097ea <_malloc_r+0x36>
 8009890:	4634      	mov	r4, r6
 8009892:	6876      	ldr	r6, [r6, #4]
 8009894:	e7b4      	b.n	8009800 <_malloc_r+0x4c>
 8009896:	4613      	mov	r3, r2
 8009898:	e7cc      	b.n	8009834 <_malloc_r+0x80>
 800989a:	230c      	movs	r3, #12
 800989c:	603b      	str	r3, [r7, #0]
 800989e:	4638      	mov	r0, r7
 80098a0:	f000 f80e 	bl	80098c0 <__malloc_unlock>
 80098a4:	e797      	b.n	80097d6 <_malloc_r+0x22>
 80098a6:	6025      	str	r5, [r4, #0]
 80098a8:	e7dc      	b.n	8009864 <_malloc_r+0xb0>
 80098aa:	605b      	str	r3, [r3, #4]
 80098ac:	deff      	udf	#255	; 0xff
 80098ae:	bf00      	nop
 80098b0:	20000610 	.word	0x20000610

080098b4 <__malloc_lock>:
 80098b4:	4801      	ldr	r0, [pc, #4]	; (80098bc <__malloc_lock+0x8>)
 80098b6:	f7ff b88a 	b.w	80089ce <__retarget_lock_acquire_recursive>
 80098ba:	bf00      	nop
 80098bc:	2000060c 	.word	0x2000060c

080098c0 <__malloc_unlock>:
 80098c0:	4801      	ldr	r0, [pc, #4]	; (80098c8 <__malloc_unlock+0x8>)
 80098c2:	f7ff b885 	b.w	80089d0 <__retarget_lock_release_recursive>
 80098c6:	bf00      	nop
 80098c8:	2000060c 	.word	0x2000060c

080098cc <_Balloc>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	69c6      	ldr	r6, [r0, #28]
 80098d0:	4604      	mov	r4, r0
 80098d2:	460d      	mov	r5, r1
 80098d4:	b976      	cbnz	r6, 80098f4 <_Balloc+0x28>
 80098d6:	2010      	movs	r0, #16
 80098d8:	f7ff ff44 	bl	8009764 <malloc>
 80098dc:	4602      	mov	r2, r0
 80098de:	61e0      	str	r0, [r4, #28]
 80098e0:	b920      	cbnz	r0, 80098ec <_Balloc+0x20>
 80098e2:	4b18      	ldr	r3, [pc, #96]	; (8009944 <_Balloc+0x78>)
 80098e4:	4818      	ldr	r0, [pc, #96]	; (8009948 <_Balloc+0x7c>)
 80098e6:	216b      	movs	r1, #107	; 0x6b
 80098e8:	f000 fe00 	bl	800a4ec <__assert_func>
 80098ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098f0:	6006      	str	r6, [r0, #0]
 80098f2:	60c6      	str	r6, [r0, #12]
 80098f4:	69e6      	ldr	r6, [r4, #28]
 80098f6:	68f3      	ldr	r3, [r6, #12]
 80098f8:	b183      	cbz	r3, 800991c <_Balloc+0x50>
 80098fa:	69e3      	ldr	r3, [r4, #28]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009902:	b9b8      	cbnz	r0, 8009934 <_Balloc+0x68>
 8009904:	2101      	movs	r1, #1
 8009906:	fa01 f605 	lsl.w	r6, r1, r5
 800990a:	1d72      	adds	r2, r6, #5
 800990c:	0092      	lsls	r2, r2, #2
 800990e:	4620      	mov	r0, r4
 8009910:	f000 fe0a 	bl	800a528 <_calloc_r>
 8009914:	b160      	cbz	r0, 8009930 <_Balloc+0x64>
 8009916:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800991a:	e00e      	b.n	800993a <_Balloc+0x6e>
 800991c:	2221      	movs	r2, #33	; 0x21
 800991e:	2104      	movs	r1, #4
 8009920:	4620      	mov	r0, r4
 8009922:	f000 fe01 	bl	800a528 <_calloc_r>
 8009926:	69e3      	ldr	r3, [r4, #28]
 8009928:	60f0      	str	r0, [r6, #12]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e4      	bne.n	80098fa <_Balloc+0x2e>
 8009930:	2000      	movs	r0, #0
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	6802      	ldr	r2, [r0, #0]
 8009936:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800993a:	2300      	movs	r3, #0
 800993c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009940:	e7f7      	b.n	8009932 <_Balloc+0x66>
 8009942:	bf00      	nop
 8009944:	0800bb61 	.word	0x0800bb61
 8009948:	0800bbe1 	.word	0x0800bbe1

0800994c <_Bfree>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	69c6      	ldr	r6, [r0, #28]
 8009950:	4605      	mov	r5, r0
 8009952:	460c      	mov	r4, r1
 8009954:	b976      	cbnz	r6, 8009974 <_Bfree+0x28>
 8009956:	2010      	movs	r0, #16
 8009958:	f7ff ff04 	bl	8009764 <malloc>
 800995c:	4602      	mov	r2, r0
 800995e:	61e8      	str	r0, [r5, #28]
 8009960:	b920      	cbnz	r0, 800996c <_Bfree+0x20>
 8009962:	4b09      	ldr	r3, [pc, #36]	; (8009988 <_Bfree+0x3c>)
 8009964:	4809      	ldr	r0, [pc, #36]	; (800998c <_Bfree+0x40>)
 8009966:	218f      	movs	r1, #143	; 0x8f
 8009968:	f000 fdc0 	bl	800a4ec <__assert_func>
 800996c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009970:	6006      	str	r6, [r0, #0]
 8009972:	60c6      	str	r6, [r0, #12]
 8009974:	b13c      	cbz	r4, 8009986 <_Bfree+0x3a>
 8009976:	69eb      	ldr	r3, [r5, #28]
 8009978:	6862      	ldr	r2, [r4, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009980:	6021      	str	r1, [r4, #0]
 8009982:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	0800bb61 	.word	0x0800bb61
 800998c:	0800bbe1 	.word	0x0800bbe1

08009990 <__multadd>:
 8009990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009994:	690d      	ldr	r5, [r1, #16]
 8009996:	4607      	mov	r7, r0
 8009998:	460c      	mov	r4, r1
 800999a:	461e      	mov	r6, r3
 800999c:	f101 0c14 	add.w	ip, r1, #20
 80099a0:	2000      	movs	r0, #0
 80099a2:	f8dc 3000 	ldr.w	r3, [ip]
 80099a6:	b299      	uxth	r1, r3
 80099a8:	fb02 6101 	mla	r1, r2, r1, r6
 80099ac:	0c1e      	lsrs	r6, r3, #16
 80099ae:	0c0b      	lsrs	r3, r1, #16
 80099b0:	fb02 3306 	mla	r3, r2, r6, r3
 80099b4:	b289      	uxth	r1, r1
 80099b6:	3001      	adds	r0, #1
 80099b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099bc:	4285      	cmp	r5, r0
 80099be:	f84c 1b04 	str.w	r1, [ip], #4
 80099c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099c6:	dcec      	bgt.n	80099a2 <__multadd+0x12>
 80099c8:	b30e      	cbz	r6, 8009a0e <__multadd+0x7e>
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	42ab      	cmp	r3, r5
 80099ce:	dc19      	bgt.n	8009a04 <__multadd+0x74>
 80099d0:	6861      	ldr	r1, [r4, #4]
 80099d2:	4638      	mov	r0, r7
 80099d4:	3101      	adds	r1, #1
 80099d6:	f7ff ff79 	bl	80098cc <_Balloc>
 80099da:	4680      	mov	r8, r0
 80099dc:	b928      	cbnz	r0, 80099ea <__multadd+0x5a>
 80099de:	4602      	mov	r2, r0
 80099e0:	4b0c      	ldr	r3, [pc, #48]	; (8009a14 <__multadd+0x84>)
 80099e2:	480d      	ldr	r0, [pc, #52]	; (8009a18 <__multadd+0x88>)
 80099e4:	21ba      	movs	r1, #186	; 0xba
 80099e6:	f000 fd81 	bl	800a4ec <__assert_func>
 80099ea:	6922      	ldr	r2, [r4, #16]
 80099ec:	3202      	adds	r2, #2
 80099ee:	f104 010c 	add.w	r1, r4, #12
 80099f2:	0092      	lsls	r2, r2, #2
 80099f4:	300c      	adds	r0, #12
 80099f6:	f000 fd6b 	bl	800a4d0 <memcpy>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4638      	mov	r0, r7
 80099fe:	f7ff ffa5 	bl	800994c <_Bfree>
 8009a02:	4644      	mov	r4, r8
 8009a04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a08:	3501      	adds	r5, #1
 8009a0a:	615e      	str	r6, [r3, #20]
 8009a0c:	6125      	str	r5, [r4, #16]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a14:	0800bbd0 	.word	0x0800bbd0
 8009a18:	0800bbe1 	.word	0x0800bbe1

08009a1c <__hi0bits>:
 8009a1c:	0c03      	lsrs	r3, r0, #16
 8009a1e:	041b      	lsls	r3, r3, #16
 8009a20:	b9d3      	cbnz	r3, 8009a58 <__hi0bits+0x3c>
 8009a22:	0400      	lsls	r0, r0, #16
 8009a24:	2310      	movs	r3, #16
 8009a26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a2a:	bf04      	itt	eq
 8009a2c:	0200      	lsleq	r0, r0, #8
 8009a2e:	3308      	addeq	r3, #8
 8009a30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a34:	bf04      	itt	eq
 8009a36:	0100      	lsleq	r0, r0, #4
 8009a38:	3304      	addeq	r3, #4
 8009a3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a3e:	bf04      	itt	eq
 8009a40:	0080      	lsleq	r0, r0, #2
 8009a42:	3302      	addeq	r3, #2
 8009a44:	2800      	cmp	r0, #0
 8009a46:	db05      	blt.n	8009a54 <__hi0bits+0x38>
 8009a48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a4c:	f103 0301 	add.w	r3, r3, #1
 8009a50:	bf08      	it	eq
 8009a52:	2320      	moveq	r3, #32
 8009a54:	4618      	mov	r0, r3
 8009a56:	4770      	bx	lr
 8009a58:	2300      	movs	r3, #0
 8009a5a:	e7e4      	b.n	8009a26 <__hi0bits+0xa>

08009a5c <__lo0bits>:
 8009a5c:	6803      	ldr	r3, [r0, #0]
 8009a5e:	f013 0207 	ands.w	r2, r3, #7
 8009a62:	d00c      	beq.n	8009a7e <__lo0bits+0x22>
 8009a64:	07d9      	lsls	r1, r3, #31
 8009a66:	d422      	bmi.n	8009aae <__lo0bits+0x52>
 8009a68:	079a      	lsls	r2, r3, #30
 8009a6a:	bf49      	itett	mi
 8009a6c:	085b      	lsrmi	r3, r3, #1
 8009a6e:	089b      	lsrpl	r3, r3, #2
 8009a70:	6003      	strmi	r3, [r0, #0]
 8009a72:	2201      	movmi	r2, #1
 8009a74:	bf5c      	itt	pl
 8009a76:	6003      	strpl	r3, [r0, #0]
 8009a78:	2202      	movpl	r2, #2
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	4770      	bx	lr
 8009a7e:	b299      	uxth	r1, r3
 8009a80:	b909      	cbnz	r1, 8009a86 <__lo0bits+0x2a>
 8009a82:	0c1b      	lsrs	r3, r3, #16
 8009a84:	2210      	movs	r2, #16
 8009a86:	b2d9      	uxtb	r1, r3
 8009a88:	b909      	cbnz	r1, 8009a8e <__lo0bits+0x32>
 8009a8a:	3208      	adds	r2, #8
 8009a8c:	0a1b      	lsrs	r3, r3, #8
 8009a8e:	0719      	lsls	r1, r3, #28
 8009a90:	bf04      	itt	eq
 8009a92:	091b      	lsreq	r3, r3, #4
 8009a94:	3204      	addeq	r2, #4
 8009a96:	0799      	lsls	r1, r3, #30
 8009a98:	bf04      	itt	eq
 8009a9a:	089b      	lsreq	r3, r3, #2
 8009a9c:	3202      	addeq	r2, #2
 8009a9e:	07d9      	lsls	r1, r3, #31
 8009aa0:	d403      	bmi.n	8009aaa <__lo0bits+0x4e>
 8009aa2:	085b      	lsrs	r3, r3, #1
 8009aa4:	f102 0201 	add.w	r2, r2, #1
 8009aa8:	d003      	beq.n	8009ab2 <__lo0bits+0x56>
 8009aaa:	6003      	str	r3, [r0, #0]
 8009aac:	e7e5      	b.n	8009a7a <__lo0bits+0x1e>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	e7e3      	b.n	8009a7a <__lo0bits+0x1e>
 8009ab2:	2220      	movs	r2, #32
 8009ab4:	e7e1      	b.n	8009a7a <__lo0bits+0x1e>
	...

08009ab8 <__i2b>:
 8009ab8:	b510      	push	{r4, lr}
 8009aba:	460c      	mov	r4, r1
 8009abc:	2101      	movs	r1, #1
 8009abe:	f7ff ff05 	bl	80098cc <_Balloc>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	b928      	cbnz	r0, 8009ad2 <__i2b+0x1a>
 8009ac6:	4b05      	ldr	r3, [pc, #20]	; (8009adc <__i2b+0x24>)
 8009ac8:	4805      	ldr	r0, [pc, #20]	; (8009ae0 <__i2b+0x28>)
 8009aca:	f240 1145 	movw	r1, #325	; 0x145
 8009ace:	f000 fd0d 	bl	800a4ec <__assert_func>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	6144      	str	r4, [r0, #20]
 8009ad6:	6103      	str	r3, [r0, #16]
 8009ad8:	bd10      	pop	{r4, pc}
 8009ada:	bf00      	nop
 8009adc:	0800bbd0 	.word	0x0800bbd0
 8009ae0:	0800bbe1 	.word	0x0800bbe1

08009ae4 <__multiply>:
 8009ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	4691      	mov	r9, r2
 8009aea:	690a      	ldr	r2, [r1, #16]
 8009aec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	bfb8      	it	lt
 8009af4:	460b      	movlt	r3, r1
 8009af6:	460c      	mov	r4, r1
 8009af8:	bfbc      	itt	lt
 8009afa:	464c      	movlt	r4, r9
 8009afc:	4699      	movlt	r9, r3
 8009afe:	6927      	ldr	r7, [r4, #16]
 8009b00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b04:	68a3      	ldr	r3, [r4, #8]
 8009b06:	6861      	ldr	r1, [r4, #4]
 8009b08:	eb07 060a 	add.w	r6, r7, sl
 8009b0c:	42b3      	cmp	r3, r6
 8009b0e:	b085      	sub	sp, #20
 8009b10:	bfb8      	it	lt
 8009b12:	3101      	addlt	r1, #1
 8009b14:	f7ff feda 	bl	80098cc <_Balloc>
 8009b18:	b930      	cbnz	r0, 8009b28 <__multiply+0x44>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	4b44      	ldr	r3, [pc, #272]	; (8009c30 <__multiply+0x14c>)
 8009b1e:	4845      	ldr	r0, [pc, #276]	; (8009c34 <__multiply+0x150>)
 8009b20:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009b24:	f000 fce2 	bl	800a4ec <__assert_func>
 8009b28:	f100 0514 	add.w	r5, r0, #20
 8009b2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b30:	462b      	mov	r3, r5
 8009b32:	2200      	movs	r2, #0
 8009b34:	4543      	cmp	r3, r8
 8009b36:	d321      	bcc.n	8009b7c <__multiply+0x98>
 8009b38:	f104 0314 	add.w	r3, r4, #20
 8009b3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b40:	f109 0314 	add.w	r3, r9, #20
 8009b44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b48:	9202      	str	r2, [sp, #8]
 8009b4a:	1b3a      	subs	r2, r7, r4
 8009b4c:	3a15      	subs	r2, #21
 8009b4e:	f022 0203 	bic.w	r2, r2, #3
 8009b52:	3204      	adds	r2, #4
 8009b54:	f104 0115 	add.w	r1, r4, #21
 8009b58:	428f      	cmp	r7, r1
 8009b5a:	bf38      	it	cc
 8009b5c:	2204      	movcc	r2, #4
 8009b5e:	9201      	str	r2, [sp, #4]
 8009b60:	9a02      	ldr	r2, [sp, #8]
 8009b62:	9303      	str	r3, [sp, #12]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d80c      	bhi.n	8009b82 <__multiply+0x9e>
 8009b68:	2e00      	cmp	r6, #0
 8009b6a:	dd03      	ble.n	8009b74 <__multiply+0x90>
 8009b6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d05b      	beq.n	8009c2c <__multiply+0x148>
 8009b74:	6106      	str	r6, [r0, #16]
 8009b76:	b005      	add	sp, #20
 8009b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b7c:	f843 2b04 	str.w	r2, [r3], #4
 8009b80:	e7d8      	b.n	8009b34 <__multiply+0x50>
 8009b82:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b86:	f1ba 0f00 	cmp.w	sl, #0
 8009b8a:	d024      	beq.n	8009bd6 <__multiply+0xf2>
 8009b8c:	f104 0e14 	add.w	lr, r4, #20
 8009b90:	46a9      	mov	r9, r5
 8009b92:	f04f 0c00 	mov.w	ip, #0
 8009b96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b9a:	f8d9 1000 	ldr.w	r1, [r9]
 8009b9e:	fa1f fb82 	uxth.w	fp, r2
 8009ba2:	b289      	uxth	r1, r1
 8009ba4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ba8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009bac:	f8d9 2000 	ldr.w	r2, [r9]
 8009bb0:	4461      	add	r1, ip
 8009bb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8009bba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bbe:	b289      	uxth	r1, r1
 8009bc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009bc4:	4577      	cmp	r7, lr
 8009bc6:	f849 1b04 	str.w	r1, [r9], #4
 8009bca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bce:	d8e2      	bhi.n	8009b96 <__multiply+0xb2>
 8009bd0:	9a01      	ldr	r2, [sp, #4]
 8009bd2:	f845 c002 	str.w	ip, [r5, r2]
 8009bd6:	9a03      	ldr	r2, [sp, #12]
 8009bd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	f1b9 0f00 	cmp.w	r9, #0
 8009be2:	d021      	beq.n	8009c28 <__multiply+0x144>
 8009be4:	6829      	ldr	r1, [r5, #0]
 8009be6:	f104 0c14 	add.w	ip, r4, #20
 8009bea:	46ae      	mov	lr, r5
 8009bec:	f04f 0a00 	mov.w	sl, #0
 8009bf0:	f8bc b000 	ldrh.w	fp, [ip]
 8009bf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009bf8:	fb09 220b 	mla	r2, r9, fp, r2
 8009bfc:	4452      	add	r2, sl
 8009bfe:	b289      	uxth	r1, r1
 8009c00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c04:	f84e 1b04 	str.w	r1, [lr], #4
 8009c08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c10:	f8be 1000 	ldrh.w	r1, [lr]
 8009c14:	fb09 110a 	mla	r1, r9, sl, r1
 8009c18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009c1c:	4567      	cmp	r7, ip
 8009c1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c22:	d8e5      	bhi.n	8009bf0 <__multiply+0x10c>
 8009c24:	9a01      	ldr	r2, [sp, #4]
 8009c26:	50a9      	str	r1, [r5, r2]
 8009c28:	3504      	adds	r5, #4
 8009c2a:	e799      	b.n	8009b60 <__multiply+0x7c>
 8009c2c:	3e01      	subs	r6, #1
 8009c2e:	e79b      	b.n	8009b68 <__multiply+0x84>
 8009c30:	0800bbd0 	.word	0x0800bbd0
 8009c34:	0800bbe1 	.word	0x0800bbe1

08009c38 <__pow5mult>:
 8009c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c3c:	4615      	mov	r5, r2
 8009c3e:	f012 0203 	ands.w	r2, r2, #3
 8009c42:	4606      	mov	r6, r0
 8009c44:	460f      	mov	r7, r1
 8009c46:	d007      	beq.n	8009c58 <__pow5mult+0x20>
 8009c48:	4c25      	ldr	r4, [pc, #148]	; (8009ce0 <__pow5mult+0xa8>)
 8009c4a:	3a01      	subs	r2, #1
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c52:	f7ff fe9d 	bl	8009990 <__multadd>
 8009c56:	4607      	mov	r7, r0
 8009c58:	10ad      	asrs	r5, r5, #2
 8009c5a:	d03d      	beq.n	8009cd8 <__pow5mult+0xa0>
 8009c5c:	69f4      	ldr	r4, [r6, #28]
 8009c5e:	b97c      	cbnz	r4, 8009c80 <__pow5mult+0x48>
 8009c60:	2010      	movs	r0, #16
 8009c62:	f7ff fd7f 	bl	8009764 <malloc>
 8009c66:	4602      	mov	r2, r0
 8009c68:	61f0      	str	r0, [r6, #28]
 8009c6a:	b928      	cbnz	r0, 8009c78 <__pow5mult+0x40>
 8009c6c:	4b1d      	ldr	r3, [pc, #116]	; (8009ce4 <__pow5mult+0xac>)
 8009c6e:	481e      	ldr	r0, [pc, #120]	; (8009ce8 <__pow5mult+0xb0>)
 8009c70:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009c74:	f000 fc3a 	bl	800a4ec <__assert_func>
 8009c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c7c:	6004      	str	r4, [r0, #0]
 8009c7e:	60c4      	str	r4, [r0, #12]
 8009c80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c88:	b94c      	cbnz	r4, 8009c9e <__pow5mult+0x66>
 8009c8a:	f240 2171 	movw	r1, #625	; 0x271
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7ff ff12 	bl	8009ab8 <__i2b>
 8009c94:	2300      	movs	r3, #0
 8009c96:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	6003      	str	r3, [r0, #0]
 8009c9e:	f04f 0900 	mov.w	r9, #0
 8009ca2:	07eb      	lsls	r3, r5, #31
 8009ca4:	d50a      	bpl.n	8009cbc <__pow5mult+0x84>
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	4622      	mov	r2, r4
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7ff ff1a 	bl	8009ae4 <__multiply>
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	4680      	mov	r8, r0
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7ff fe49 	bl	800994c <_Bfree>
 8009cba:	4647      	mov	r7, r8
 8009cbc:	106d      	asrs	r5, r5, #1
 8009cbe:	d00b      	beq.n	8009cd8 <__pow5mult+0xa0>
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	b938      	cbnz	r0, 8009cd4 <__pow5mult+0x9c>
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7ff ff0b 	bl	8009ae4 <__multiply>
 8009cce:	6020      	str	r0, [r4, #0]
 8009cd0:	f8c0 9000 	str.w	r9, [r0]
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	e7e4      	b.n	8009ca2 <__pow5mult+0x6a>
 8009cd8:	4638      	mov	r0, r7
 8009cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cde:	bf00      	nop
 8009ce0:	0800bd30 	.word	0x0800bd30
 8009ce4:	0800bb61 	.word	0x0800bb61
 8009ce8:	0800bbe1 	.word	0x0800bbe1

08009cec <__lshift>:
 8009cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	6849      	ldr	r1, [r1, #4]
 8009cf4:	6923      	ldr	r3, [r4, #16]
 8009cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cfa:	68a3      	ldr	r3, [r4, #8]
 8009cfc:	4607      	mov	r7, r0
 8009cfe:	4691      	mov	r9, r2
 8009d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d04:	f108 0601 	add.w	r6, r8, #1
 8009d08:	42b3      	cmp	r3, r6
 8009d0a:	db0b      	blt.n	8009d24 <__lshift+0x38>
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	f7ff fddd 	bl	80098cc <_Balloc>
 8009d12:	4605      	mov	r5, r0
 8009d14:	b948      	cbnz	r0, 8009d2a <__lshift+0x3e>
 8009d16:	4602      	mov	r2, r0
 8009d18:	4b28      	ldr	r3, [pc, #160]	; (8009dbc <__lshift+0xd0>)
 8009d1a:	4829      	ldr	r0, [pc, #164]	; (8009dc0 <__lshift+0xd4>)
 8009d1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009d20:	f000 fbe4 	bl	800a4ec <__assert_func>
 8009d24:	3101      	adds	r1, #1
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	e7ee      	b.n	8009d08 <__lshift+0x1c>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f100 0114 	add.w	r1, r0, #20
 8009d30:	f100 0210 	add.w	r2, r0, #16
 8009d34:	4618      	mov	r0, r3
 8009d36:	4553      	cmp	r3, sl
 8009d38:	db33      	blt.n	8009da2 <__lshift+0xb6>
 8009d3a:	6920      	ldr	r0, [r4, #16]
 8009d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d40:	f104 0314 	add.w	r3, r4, #20
 8009d44:	f019 091f 	ands.w	r9, r9, #31
 8009d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d50:	d02b      	beq.n	8009daa <__lshift+0xbe>
 8009d52:	f1c9 0e20 	rsb	lr, r9, #32
 8009d56:	468a      	mov	sl, r1
 8009d58:	2200      	movs	r2, #0
 8009d5a:	6818      	ldr	r0, [r3, #0]
 8009d5c:	fa00 f009 	lsl.w	r0, r0, r9
 8009d60:	4310      	orrs	r0, r2
 8009d62:	f84a 0b04 	str.w	r0, [sl], #4
 8009d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d6a:	459c      	cmp	ip, r3
 8009d6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d70:	d8f3      	bhi.n	8009d5a <__lshift+0x6e>
 8009d72:	ebac 0304 	sub.w	r3, ip, r4
 8009d76:	3b15      	subs	r3, #21
 8009d78:	f023 0303 	bic.w	r3, r3, #3
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	f104 0015 	add.w	r0, r4, #21
 8009d82:	4584      	cmp	ip, r0
 8009d84:	bf38      	it	cc
 8009d86:	2304      	movcc	r3, #4
 8009d88:	50ca      	str	r2, [r1, r3]
 8009d8a:	b10a      	cbz	r2, 8009d90 <__lshift+0xa4>
 8009d8c:	f108 0602 	add.w	r6, r8, #2
 8009d90:	3e01      	subs	r6, #1
 8009d92:	4638      	mov	r0, r7
 8009d94:	612e      	str	r6, [r5, #16]
 8009d96:	4621      	mov	r1, r4
 8009d98:	f7ff fdd8 	bl	800994c <_Bfree>
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009da6:	3301      	adds	r3, #1
 8009da8:	e7c5      	b.n	8009d36 <__lshift+0x4a>
 8009daa:	3904      	subs	r1, #4
 8009dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009db4:	459c      	cmp	ip, r3
 8009db6:	d8f9      	bhi.n	8009dac <__lshift+0xc0>
 8009db8:	e7ea      	b.n	8009d90 <__lshift+0xa4>
 8009dba:	bf00      	nop
 8009dbc:	0800bbd0 	.word	0x0800bbd0
 8009dc0:	0800bbe1 	.word	0x0800bbe1

08009dc4 <__mcmp>:
 8009dc4:	b530      	push	{r4, r5, lr}
 8009dc6:	6902      	ldr	r2, [r0, #16]
 8009dc8:	690c      	ldr	r4, [r1, #16]
 8009dca:	1b12      	subs	r2, r2, r4
 8009dcc:	d10e      	bne.n	8009dec <__mcmp+0x28>
 8009dce:	f100 0314 	add.w	r3, r0, #20
 8009dd2:	3114      	adds	r1, #20
 8009dd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009dd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ddc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009de0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009de4:	42a5      	cmp	r5, r4
 8009de6:	d003      	beq.n	8009df0 <__mcmp+0x2c>
 8009de8:	d305      	bcc.n	8009df6 <__mcmp+0x32>
 8009dea:	2201      	movs	r2, #1
 8009dec:	4610      	mov	r0, r2
 8009dee:	bd30      	pop	{r4, r5, pc}
 8009df0:	4283      	cmp	r3, r0
 8009df2:	d3f3      	bcc.n	8009ddc <__mcmp+0x18>
 8009df4:	e7fa      	b.n	8009dec <__mcmp+0x28>
 8009df6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfa:	e7f7      	b.n	8009dec <__mcmp+0x28>

08009dfc <__mdiff>:
 8009dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	460c      	mov	r4, r1
 8009e02:	4606      	mov	r6, r0
 8009e04:	4611      	mov	r1, r2
 8009e06:	4620      	mov	r0, r4
 8009e08:	4690      	mov	r8, r2
 8009e0a:	f7ff ffdb 	bl	8009dc4 <__mcmp>
 8009e0e:	1e05      	subs	r5, r0, #0
 8009e10:	d110      	bne.n	8009e34 <__mdiff+0x38>
 8009e12:	4629      	mov	r1, r5
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7ff fd59 	bl	80098cc <_Balloc>
 8009e1a:	b930      	cbnz	r0, 8009e2a <__mdiff+0x2e>
 8009e1c:	4b3a      	ldr	r3, [pc, #232]	; (8009f08 <__mdiff+0x10c>)
 8009e1e:	4602      	mov	r2, r0
 8009e20:	f240 2137 	movw	r1, #567	; 0x237
 8009e24:	4839      	ldr	r0, [pc, #228]	; (8009f0c <__mdiff+0x110>)
 8009e26:	f000 fb61 	bl	800a4ec <__assert_func>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e34:	bfa4      	itt	ge
 8009e36:	4643      	movge	r3, r8
 8009e38:	46a0      	movge	r8, r4
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e40:	bfa6      	itte	ge
 8009e42:	461c      	movge	r4, r3
 8009e44:	2500      	movge	r5, #0
 8009e46:	2501      	movlt	r5, #1
 8009e48:	f7ff fd40 	bl	80098cc <_Balloc>
 8009e4c:	b920      	cbnz	r0, 8009e58 <__mdiff+0x5c>
 8009e4e:	4b2e      	ldr	r3, [pc, #184]	; (8009f08 <__mdiff+0x10c>)
 8009e50:	4602      	mov	r2, r0
 8009e52:	f240 2145 	movw	r1, #581	; 0x245
 8009e56:	e7e5      	b.n	8009e24 <__mdiff+0x28>
 8009e58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e5c:	6926      	ldr	r6, [r4, #16]
 8009e5e:	60c5      	str	r5, [r0, #12]
 8009e60:	f104 0914 	add.w	r9, r4, #20
 8009e64:	f108 0514 	add.w	r5, r8, #20
 8009e68:	f100 0e14 	add.w	lr, r0, #20
 8009e6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e74:	f108 0210 	add.w	r2, r8, #16
 8009e78:	46f2      	mov	sl, lr
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e84:	fa11 f88b 	uxtah	r8, r1, fp
 8009e88:	b299      	uxth	r1, r3
 8009e8a:	0c1b      	lsrs	r3, r3, #16
 8009e8c:	eba8 0801 	sub.w	r8, r8, r1
 8009e90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e98:	fa1f f888 	uxth.w	r8, r8
 8009e9c:	1419      	asrs	r1, r3, #16
 8009e9e:	454e      	cmp	r6, r9
 8009ea0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ea4:	f84a 3b04 	str.w	r3, [sl], #4
 8009ea8:	d8e8      	bhi.n	8009e7c <__mdiff+0x80>
 8009eaa:	1b33      	subs	r3, r6, r4
 8009eac:	3b15      	subs	r3, #21
 8009eae:	f023 0303 	bic.w	r3, r3, #3
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	3415      	adds	r4, #21
 8009eb6:	42a6      	cmp	r6, r4
 8009eb8:	bf38      	it	cc
 8009eba:	2304      	movcc	r3, #4
 8009ebc:	441d      	add	r5, r3
 8009ebe:	4473      	add	r3, lr
 8009ec0:	469e      	mov	lr, r3
 8009ec2:	462e      	mov	r6, r5
 8009ec4:	4566      	cmp	r6, ip
 8009ec6:	d30e      	bcc.n	8009ee6 <__mdiff+0xea>
 8009ec8:	f10c 0203 	add.w	r2, ip, #3
 8009ecc:	1b52      	subs	r2, r2, r5
 8009ece:	f022 0203 	bic.w	r2, r2, #3
 8009ed2:	3d03      	subs	r5, #3
 8009ed4:	45ac      	cmp	ip, r5
 8009ed6:	bf38      	it	cc
 8009ed8:	2200      	movcc	r2, #0
 8009eda:	4413      	add	r3, r2
 8009edc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ee0:	b17a      	cbz	r2, 8009f02 <__mdiff+0x106>
 8009ee2:	6107      	str	r7, [r0, #16]
 8009ee4:	e7a4      	b.n	8009e30 <__mdiff+0x34>
 8009ee6:	f856 8b04 	ldr.w	r8, [r6], #4
 8009eea:	fa11 f288 	uxtah	r2, r1, r8
 8009eee:	1414      	asrs	r4, r2, #16
 8009ef0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ef4:	b292      	uxth	r2, r2
 8009ef6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009efa:	f84e 2b04 	str.w	r2, [lr], #4
 8009efe:	1421      	asrs	r1, r4, #16
 8009f00:	e7e0      	b.n	8009ec4 <__mdiff+0xc8>
 8009f02:	3f01      	subs	r7, #1
 8009f04:	e7ea      	b.n	8009edc <__mdiff+0xe0>
 8009f06:	bf00      	nop
 8009f08:	0800bbd0 	.word	0x0800bbd0
 8009f0c:	0800bbe1 	.word	0x0800bbe1

08009f10 <__d2b>:
 8009f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	460f      	mov	r7, r1
 8009f16:	2101      	movs	r1, #1
 8009f18:	ec59 8b10 	vmov	r8, r9, d0
 8009f1c:	4616      	mov	r6, r2
 8009f1e:	f7ff fcd5 	bl	80098cc <_Balloc>
 8009f22:	4604      	mov	r4, r0
 8009f24:	b930      	cbnz	r0, 8009f34 <__d2b+0x24>
 8009f26:	4602      	mov	r2, r0
 8009f28:	4b24      	ldr	r3, [pc, #144]	; (8009fbc <__d2b+0xac>)
 8009f2a:	4825      	ldr	r0, [pc, #148]	; (8009fc0 <__d2b+0xb0>)
 8009f2c:	f240 310f 	movw	r1, #783	; 0x30f
 8009f30:	f000 fadc 	bl	800a4ec <__assert_func>
 8009f34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f3c:	bb2d      	cbnz	r5, 8009f8a <__d2b+0x7a>
 8009f3e:	9301      	str	r3, [sp, #4]
 8009f40:	f1b8 0300 	subs.w	r3, r8, #0
 8009f44:	d026      	beq.n	8009f94 <__d2b+0x84>
 8009f46:	4668      	mov	r0, sp
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	f7ff fd87 	bl	8009a5c <__lo0bits>
 8009f4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f52:	b1e8      	cbz	r0, 8009f90 <__d2b+0x80>
 8009f54:	f1c0 0320 	rsb	r3, r0, #32
 8009f58:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5c:	430b      	orrs	r3, r1
 8009f5e:	40c2      	lsrs	r2, r0
 8009f60:	6163      	str	r3, [r4, #20]
 8009f62:	9201      	str	r2, [sp, #4]
 8009f64:	9b01      	ldr	r3, [sp, #4]
 8009f66:	61a3      	str	r3, [r4, #24]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	bf14      	ite	ne
 8009f6c:	2202      	movne	r2, #2
 8009f6e:	2201      	moveq	r2, #1
 8009f70:	6122      	str	r2, [r4, #16]
 8009f72:	b1bd      	cbz	r5, 8009fa4 <__d2b+0x94>
 8009f74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f78:	4405      	add	r5, r0
 8009f7a:	603d      	str	r5, [r7, #0]
 8009f7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f80:	6030      	str	r0, [r6, #0]
 8009f82:	4620      	mov	r0, r4
 8009f84:	b003      	add	sp, #12
 8009f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f8e:	e7d6      	b.n	8009f3e <__d2b+0x2e>
 8009f90:	6161      	str	r1, [r4, #20]
 8009f92:	e7e7      	b.n	8009f64 <__d2b+0x54>
 8009f94:	a801      	add	r0, sp, #4
 8009f96:	f7ff fd61 	bl	8009a5c <__lo0bits>
 8009f9a:	9b01      	ldr	r3, [sp, #4]
 8009f9c:	6163      	str	r3, [r4, #20]
 8009f9e:	3020      	adds	r0, #32
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	e7e5      	b.n	8009f70 <__d2b+0x60>
 8009fa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fac:	6038      	str	r0, [r7, #0]
 8009fae:	6918      	ldr	r0, [r3, #16]
 8009fb0:	f7ff fd34 	bl	8009a1c <__hi0bits>
 8009fb4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fb8:	e7e2      	b.n	8009f80 <__d2b+0x70>
 8009fba:	bf00      	nop
 8009fbc:	0800bbd0 	.word	0x0800bbd0
 8009fc0:	0800bbe1 	.word	0x0800bbe1

08009fc4 <__sfputc_r>:
 8009fc4:	6893      	ldr	r3, [r2, #8]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	b410      	push	{r4}
 8009fcc:	6093      	str	r3, [r2, #8]
 8009fce:	da08      	bge.n	8009fe2 <__sfputc_r+0x1e>
 8009fd0:	6994      	ldr	r4, [r2, #24]
 8009fd2:	42a3      	cmp	r3, r4
 8009fd4:	db01      	blt.n	8009fda <__sfputc_r+0x16>
 8009fd6:	290a      	cmp	r1, #10
 8009fd8:	d103      	bne.n	8009fe2 <__sfputc_r+0x1e>
 8009fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fde:	f7fe bbe4 	b.w	80087aa <__swbuf_r>
 8009fe2:	6813      	ldr	r3, [r2, #0]
 8009fe4:	1c58      	adds	r0, r3, #1
 8009fe6:	6010      	str	r0, [r2, #0]
 8009fe8:	7019      	strb	r1, [r3, #0]
 8009fea:	4608      	mov	r0, r1
 8009fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <__sfputs_r>:
 8009ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	460f      	mov	r7, r1
 8009ff8:	4614      	mov	r4, r2
 8009ffa:	18d5      	adds	r5, r2, r3
 8009ffc:	42ac      	cmp	r4, r5
 8009ffe:	d101      	bne.n	800a004 <__sfputs_r+0x12>
 800a000:	2000      	movs	r0, #0
 800a002:	e007      	b.n	800a014 <__sfputs_r+0x22>
 800a004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a008:	463a      	mov	r2, r7
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7ff ffda 	bl	8009fc4 <__sfputc_r>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d1f3      	bne.n	8009ffc <__sfputs_r+0xa>
 800a014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a018 <_vfiprintf_r>:
 800a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	460d      	mov	r5, r1
 800a01e:	b09d      	sub	sp, #116	; 0x74
 800a020:	4614      	mov	r4, r2
 800a022:	4698      	mov	r8, r3
 800a024:	4606      	mov	r6, r0
 800a026:	b118      	cbz	r0, 800a030 <_vfiprintf_r+0x18>
 800a028:	6a03      	ldr	r3, [r0, #32]
 800a02a:	b90b      	cbnz	r3, 800a030 <_vfiprintf_r+0x18>
 800a02c:	f7fe fad6 	bl	80085dc <__sinit>
 800a030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a032:	07d9      	lsls	r1, r3, #31
 800a034:	d405      	bmi.n	800a042 <_vfiprintf_r+0x2a>
 800a036:	89ab      	ldrh	r3, [r5, #12]
 800a038:	059a      	lsls	r2, r3, #22
 800a03a:	d402      	bmi.n	800a042 <_vfiprintf_r+0x2a>
 800a03c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a03e:	f7fe fcc6 	bl	80089ce <__retarget_lock_acquire_recursive>
 800a042:	89ab      	ldrh	r3, [r5, #12]
 800a044:	071b      	lsls	r3, r3, #28
 800a046:	d501      	bpl.n	800a04c <_vfiprintf_r+0x34>
 800a048:	692b      	ldr	r3, [r5, #16]
 800a04a:	b99b      	cbnz	r3, 800a074 <_vfiprintf_r+0x5c>
 800a04c:	4629      	mov	r1, r5
 800a04e:	4630      	mov	r0, r6
 800a050:	f7fe fbe8 	bl	8008824 <__swsetup_r>
 800a054:	b170      	cbz	r0, 800a074 <_vfiprintf_r+0x5c>
 800a056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a058:	07dc      	lsls	r4, r3, #31
 800a05a:	d504      	bpl.n	800a066 <_vfiprintf_r+0x4e>
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	b01d      	add	sp, #116	; 0x74
 800a062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a066:	89ab      	ldrh	r3, [r5, #12]
 800a068:	0598      	lsls	r0, r3, #22
 800a06a:	d4f7      	bmi.n	800a05c <_vfiprintf_r+0x44>
 800a06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a06e:	f7fe fcaf 	bl	80089d0 <__retarget_lock_release_recursive>
 800a072:	e7f3      	b.n	800a05c <_vfiprintf_r+0x44>
 800a074:	2300      	movs	r3, #0
 800a076:	9309      	str	r3, [sp, #36]	; 0x24
 800a078:	2320      	movs	r3, #32
 800a07a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a07e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a082:	2330      	movs	r3, #48	; 0x30
 800a084:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a238 <_vfiprintf_r+0x220>
 800a088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a08c:	f04f 0901 	mov.w	r9, #1
 800a090:	4623      	mov	r3, r4
 800a092:	469a      	mov	sl, r3
 800a094:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a098:	b10a      	cbz	r2, 800a09e <_vfiprintf_r+0x86>
 800a09a:	2a25      	cmp	r2, #37	; 0x25
 800a09c:	d1f9      	bne.n	800a092 <_vfiprintf_r+0x7a>
 800a09e:	ebba 0b04 	subs.w	fp, sl, r4
 800a0a2:	d00b      	beq.n	800a0bc <_vfiprintf_r+0xa4>
 800a0a4:	465b      	mov	r3, fp
 800a0a6:	4622      	mov	r2, r4
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f7ff ffa1 	bl	8009ff2 <__sfputs_r>
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	f000 80a9 	beq.w	800a208 <_vfiprintf_r+0x1f0>
 800a0b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0b8:	445a      	add	r2, fp
 800a0ba:	9209      	str	r2, [sp, #36]	; 0x24
 800a0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 80a1 	beq.w	800a208 <_vfiprintf_r+0x1f0>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0d0:	f10a 0a01 	add.w	sl, sl, #1
 800a0d4:	9304      	str	r3, [sp, #16]
 800a0d6:	9307      	str	r3, [sp, #28]
 800a0d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0dc:	931a      	str	r3, [sp, #104]	; 0x68
 800a0de:	4654      	mov	r4, sl
 800a0e0:	2205      	movs	r2, #5
 800a0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e6:	4854      	ldr	r0, [pc, #336]	; (800a238 <_vfiprintf_r+0x220>)
 800a0e8:	f7f6 f892 	bl	8000210 <memchr>
 800a0ec:	9a04      	ldr	r2, [sp, #16]
 800a0ee:	b9d8      	cbnz	r0, 800a128 <_vfiprintf_r+0x110>
 800a0f0:	06d1      	lsls	r1, r2, #27
 800a0f2:	bf44      	itt	mi
 800a0f4:	2320      	movmi	r3, #32
 800a0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0fa:	0713      	lsls	r3, r2, #28
 800a0fc:	bf44      	itt	mi
 800a0fe:	232b      	movmi	r3, #43	; 0x2b
 800a100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a104:	f89a 3000 	ldrb.w	r3, [sl]
 800a108:	2b2a      	cmp	r3, #42	; 0x2a
 800a10a:	d015      	beq.n	800a138 <_vfiprintf_r+0x120>
 800a10c:	9a07      	ldr	r2, [sp, #28]
 800a10e:	4654      	mov	r4, sl
 800a110:	2000      	movs	r0, #0
 800a112:	f04f 0c0a 	mov.w	ip, #10
 800a116:	4621      	mov	r1, r4
 800a118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a11c:	3b30      	subs	r3, #48	; 0x30
 800a11e:	2b09      	cmp	r3, #9
 800a120:	d94d      	bls.n	800a1be <_vfiprintf_r+0x1a6>
 800a122:	b1b0      	cbz	r0, 800a152 <_vfiprintf_r+0x13a>
 800a124:	9207      	str	r2, [sp, #28]
 800a126:	e014      	b.n	800a152 <_vfiprintf_r+0x13a>
 800a128:	eba0 0308 	sub.w	r3, r0, r8
 800a12c:	fa09 f303 	lsl.w	r3, r9, r3
 800a130:	4313      	orrs	r3, r2
 800a132:	9304      	str	r3, [sp, #16]
 800a134:	46a2      	mov	sl, r4
 800a136:	e7d2      	b.n	800a0de <_vfiprintf_r+0xc6>
 800a138:	9b03      	ldr	r3, [sp, #12]
 800a13a:	1d19      	adds	r1, r3, #4
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	9103      	str	r1, [sp, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	bfbb      	ittet	lt
 800a144:	425b      	neglt	r3, r3
 800a146:	f042 0202 	orrlt.w	r2, r2, #2
 800a14a:	9307      	strge	r3, [sp, #28]
 800a14c:	9307      	strlt	r3, [sp, #28]
 800a14e:	bfb8      	it	lt
 800a150:	9204      	strlt	r2, [sp, #16]
 800a152:	7823      	ldrb	r3, [r4, #0]
 800a154:	2b2e      	cmp	r3, #46	; 0x2e
 800a156:	d10c      	bne.n	800a172 <_vfiprintf_r+0x15a>
 800a158:	7863      	ldrb	r3, [r4, #1]
 800a15a:	2b2a      	cmp	r3, #42	; 0x2a
 800a15c:	d134      	bne.n	800a1c8 <_vfiprintf_r+0x1b0>
 800a15e:	9b03      	ldr	r3, [sp, #12]
 800a160:	1d1a      	adds	r2, r3, #4
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	9203      	str	r2, [sp, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	bfb8      	it	lt
 800a16a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a16e:	3402      	adds	r4, #2
 800a170:	9305      	str	r3, [sp, #20]
 800a172:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a248 <_vfiprintf_r+0x230>
 800a176:	7821      	ldrb	r1, [r4, #0]
 800a178:	2203      	movs	r2, #3
 800a17a:	4650      	mov	r0, sl
 800a17c:	f7f6 f848 	bl	8000210 <memchr>
 800a180:	b138      	cbz	r0, 800a192 <_vfiprintf_r+0x17a>
 800a182:	9b04      	ldr	r3, [sp, #16]
 800a184:	eba0 000a 	sub.w	r0, r0, sl
 800a188:	2240      	movs	r2, #64	; 0x40
 800a18a:	4082      	lsls	r2, r0
 800a18c:	4313      	orrs	r3, r2
 800a18e:	3401      	adds	r4, #1
 800a190:	9304      	str	r3, [sp, #16]
 800a192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a196:	4829      	ldr	r0, [pc, #164]	; (800a23c <_vfiprintf_r+0x224>)
 800a198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a19c:	2206      	movs	r2, #6
 800a19e:	f7f6 f837 	bl	8000210 <memchr>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d03f      	beq.n	800a226 <_vfiprintf_r+0x20e>
 800a1a6:	4b26      	ldr	r3, [pc, #152]	; (800a240 <_vfiprintf_r+0x228>)
 800a1a8:	bb1b      	cbnz	r3, 800a1f2 <_vfiprintf_r+0x1da>
 800a1aa:	9b03      	ldr	r3, [sp, #12]
 800a1ac:	3307      	adds	r3, #7
 800a1ae:	f023 0307 	bic.w	r3, r3, #7
 800a1b2:	3308      	adds	r3, #8
 800a1b4:	9303      	str	r3, [sp, #12]
 800a1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b8:	443b      	add	r3, r7
 800a1ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a1bc:	e768      	b.n	800a090 <_vfiprintf_r+0x78>
 800a1be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	2001      	movs	r0, #1
 800a1c6:	e7a6      	b.n	800a116 <_vfiprintf_r+0xfe>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	3401      	adds	r4, #1
 800a1cc:	9305      	str	r3, [sp, #20]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	f04f 0c0a 	mov.w	ip, #10
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1da:	3a30      	subs	r2, #48	; 0x30
 800a1dc:	2a09      	cmp	r2, #9
 800a1de:	d903      	bls.n	800a1e8 <_vfiprintf_r+0x1d0>
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d0c6      	beq.n	800a172 <_vfiprintf_r+0x15a>
 800a1e4:	9105      	str	r1, [sp, #20]
 800a1e6:	e7c4      	b.n	800a172 <_vfiprintf_r+0x15a>
 800a1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e7f0      	b.n	800a1d4 <_vfiprintf_r+0x1bc>
 800a1f2:	ab03      	add	r3, sp, #12
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	462a      	mov	r2, r5
 800a1f8:	4b12      	ldr	r3, [pc, #72]	; (800a244 <_vfiprintf_r+0x22c>)
 800a1fa:	a904      	add	r1, sp, #16
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	f7fd fd9b 	bl	8007d38 <_printf_float>
 800a202:	4607      	mov	r7, r0
 800a204:	1c78      	adds	r0, r7, #1
 800a206:	d1d6      	bne.n	800a1b6 <_vfiprintf_r+0x19e>
 800a208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a20a:	07d9      	lsls	r1, r3, #31
 800a20c:	d405      	bmi.n	800a21a <_vfiprintf_r+0x202>
 800a20e:	89ab      	ldrh	r3, [r5, #12]
 800a210:	059a      	lsls	r2, r3, #22
 800a212:	d402      	bmi.n	800a21a <_vfiprintf_r+0x202>
 800a214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a216:	f7fe fbdb 	bl	80089d0 <__retarget_lock_release_recursive>
 800a21a:	89ab      	ldrh	r3, [r5, #12]
 800a21c:	065b      	lsls	r3, r3, #25
 800a21e:	f53f af1d 	bmi.w	800a05c <_vfiprintf_r+0x44>
 800a222:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a224:	e71c      	b.n	800a060 <_vfiprintf_r+0x48>
 800a226:	ab03      	add	r3, sp, #12
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	462a      	mov	r2, r5
 800a22c:	4b05      	ldr	r3, [pc, #20]	; (800a244 <_vfiprintf_r+0x22c>)
 800a22e:	a904      	add	r1, sp, #16
 800a230:	4630      	mov	r0, r6
 800a232:	f7fe f825 	bl	8008280 <_printf_i>
 800a236:	e7e4      	b.n	800a202 <_vfiprintf_r+0x1ea>
 800a238:	0800bd3c 	.word	0x0800bd3c
 800a23c:	0800bd46 	.word	0x0800bd46
 800a240:	08007d39 	.word	0x08007d39
 800a244:	08009ff3 	.word	0x08009ff3
 800a248:	0800bd42 	.word	0x0800bd42

0800a24c <__sflush_r>:
 800a24c:	898a      	ldrh	r2, [r1, #12]
 800a24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a252:	4605      	mov	r5, r0
 800a254:	0710      	lsls	r0, r2, #28
 800a256:	460c      	mov	r4, r1
 800a258:	d458      	bmi.n	800a30c <__sflush_r+0xc0>
 800a25a:	684b      	ldr	r3, [r1, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dc05      	bgt.n	800a26c <__sflush_r+0x20>
 800a260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a262:	2b00      	cmp	r3, #0
 800a264:	dc02      	bgt.n	800a26c <__sflush_r+0x20>
 800a266:	2000      	movs	r0, #0
 800a268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a26c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a26e:	2e00      	cmp	r6, #0
 800a270:	d0f9      	beq.n	800a266 <__sflush_r+0x1a>
 800a272:	2300      	movs	r3, #0
 800a274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a278:	682f      	ldr	r7, [r5, #0]
 800a27a:	6a21      	ldr	r1, [r4, #32]
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	d032      	beq.n	800a2e6 <__sflush_r+0x9a>
 800a280:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	075a      	lsls	r2, r3, #29
 800a286:	d505      	bpl.n	800a294 <__sflush_r+0x48>
 800a288:	6863      	ldr	r3, [r4, #4]
 800a28a:	1ac0      	subs	r0, r0, r3
 800a28c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a28e:	b10b      	cbz	r3, 800a294 <__sflush_r+0x48>
 800a290:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a292:	1ac0      	subs	r0, r0, r3
 800a294:	2300      	movs	r3, #0
 800a296:	4602      	mov	r2, r0
 800a298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a29a:	6a21      	ldr	r1, [r4, #32]
 800a29c:	4628      	mov	r0, r5
 800a29e:	47b0      	blx	r6
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	89a3      	ldrh	r3, [r4, #12]
 800a2a4:	d106      	bne.n	800a2b4 <__sflush_r+0x68>
 800a2a6:	6829      	ldr	r1, [r5, #0]
 800a2a8:	291d      	cmp	r1, #29
 800a2aa:	d82b      	bhi.n	800a304 <__sflush_r+0xb8>
 800a2ac:	4a29      	ldr	r2, [pc, #164]	; (800a354 <__sflush_r+0x108>)
 800a2ae:	410a      	asrs	r2, r1
 800a2b0:	07d6      	lsls	r6, r2, #31
 800a2b2:	d427      	bmi.n	800a304 <__sflush_r+0xb8>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	6062      	str	r2, [r4, #4]
 800a2b8:	04d9      	lsls	r1, r3, #19
 800a2ba:	6922      	ldr	r2, [r4, #16]
 800a2bc:	6022      	str	r2, [r4, #0]
 800a2be:	d504      	bpl.n	800a2ca <__sflush_r+0x7e>
 800a2c0:	1c42      	adds	r2, r0, #1
 800a2c2:	d101      	bne.n	800a2c8 <__sflush_r+0x7c>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	b903      	cbnz	r3, 800a2ca <__sflush_r+0x7e>
 800a2c8:	6560      	str	r0, [r4, #84]	; 0x54
 800a2ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2cc:	602f      	str	r7, [r5, #0]
 800a2ce:	2900      	cmp	r1, #0
 800a2d0:	d0c9      	beq.n	800a266 <__sflush_r+0x1a>
 800a2d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2d6:	4299      	cmp	r1, r3
 800a2d8:	d002      	beq.n	800a2e0 <__sflush_r+0x94>
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f7ff f9f6 	bl	80096cc <_free_r>
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	6360      	str	r0, [r4, #52]	; 0x34
 800a2e4:	e7c0      	b.n	800a268 <__sflush_r+0x1c>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	47b0      	blx	r6
 800a2ec:	1c41      	adds	r1, r0, #1
 800a2ee:	d1c8      	bne.n	800a282 <__sflush_r+0x36>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d0c5      	beq.n	800a282 <__sflush_r+0x36>
 800a2f6:	2b1d      	cmp	r3, #29
 800a2f8:	d001      	beq.n	800a2fe <__sflush_r+0xb2>
 800a2fa:	2b16      	cmp	r3, #22
 800a2fc:	d101      	bne.n	800a302 <__sflush_r+0xb6>
 800a2fe:	602f      	str	r7, [r5, #0]
 800a300:	e7b1      	b.n	800a266 <__sflush_r+0x1a>
 800a302:	89a3      	ldrh	r3, [r4, #12]
 800a304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a308:	81a3      	strh	r3, [r4, #12]
 800a30a:	e7ad      	b.n	800a268 <__sflush_r+0x1c>
 800a30c:	690f      	ldr	r7, [r1, #16]
 800a30e:	2f00      	cmp	r7, #0
 800a310:	d0a9      	beq.n	800a266 <__sflush_r+0x1a>
 800a312:	0793      	lsls	r3, r2, #30
 800a314:	680e      	ldr	r6, [r1, #0]
 800a316:	bf08      	it	eq
 800a318:	694b      	ldreq	r3, [r1, #20]
 800a31a:	600f      	str	r7, [r1, #0]
 800a31c:	bf18      	it	ne
 800a31e:	2300      	movne	r3, #0
 800a320:	eba6 0807 	sub.w	r8, r6, r7
 800a324:	608b      	str	r3, [r1, #8]
 800a326:	f1b8 0f00 	cmp.w	r8, #0
 800a32a:	dd9c      	ble.n	800a266 <__sflush_r+0x1a>
 800a32c:	6a21      	ldr	r1, [r4, #32]
 800a32e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a330:	4643      	mov	r3, r8
 800a332:	463a      	mov	r2, r7
 800a334:	4628      	mov	r0, r5
 800a336:	47b0      	blx	r6
 800a338:	2800      	cmp	r0, #0
 800a33a:	dc06      	bgt.n	800a34a <__sflush_r+0xfe>
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	f04f 30ff 	mov.w	r0, #4294967295
 800a348:	e78e      	b.n	800a268 <__sflush_r+0x1c>
 800a34a:	4407      	add	r7, r0
 800a34c:	eba8 0800 	sub.w	r8, r8, r0
 800a350:	e7e9      	b.n	800a326 <__sflush_r+0xda>
 800a352:	bf00      	nop
 800a354:	dfbffffe 	.word	0xdfbffffe

0800a358 <_fflush_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	690b      	ldr	r3, [r1, #16]
 800a35c:	4605      	mov	r5, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	b913      	cbnz	r3, 800a368 <_fflush_r+0x10>
 800a362:	2500      	movs	r5, #0
 800a364:	4628      	mov	r0, r5
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	b118      	cbz	r0, 800a372 <_fflush_r+0x1a>
 800a36a:	6a03      	ldr	r3, [r0, #32]
 800a36c:	b90b      	cbnz	r3, 800a372 <_fflush_r+0x1a>
 800a36e:	f7fe f935 	bl	80085dc <__sinit>
 800a372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0f3      	beq.n	800a362 <_fflush_r+0xa>
 800a37a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a37c:	07d0      	lsls	r0, r2, #31
 800a37e:	d404      	bmi.n	800a38a <_fflush_r+0x32>
 800a380:	0599      	lsls	r1, r3, #22
 800a382:	d402      	bmi.n	800a38a <_fflush_r+0x32>
 800a384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a386:	f7fe fb22 	bl	80089ce <__retarget_lock_acquire_recursive>
 800a38a:	4628      	mov	r0, r5
 800a38c:	4621      	mov	r1, r4
 800a38e:	f7ff ff5d 	bl	800a24c <__sflush_r>
 800a392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a394:	07da      	lsls	r2, r3, #31
 800a396:	4605      	mov	r5, r0
 800a398:	d4e4      	bmi.n	800a364 <_fflush_r+0xc>
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	059b      	lsls	r3, r3, #22
 800a39e:	d4e1      	bmi.n	800a364 <_fflush_r+0xc>
 800a3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3a2:	f7fe fb15 	bl	80089d0 <__retarget_lock_release_recursive>
 800a3a6:	e7dd      	b.n	800a364 <_fflush_r+0xc>

0800a3a8 <__swhatbuf_r>:
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	b096      	sub	sp, #88	; 0x58
 800a3b4:	4615      	mov	r5, r2
 800a3b6:	461e      	mov	r6, r3
 800a3b8:	da0d      	bge.n	800a3d6 <__swhatbuf_r+0x2e>
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3c0:	f04f 0100 	mov.w	r1, #0
 800a3c4:	bf0c      	ite	eq
 800a3c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a3ca:	2340      	movne	r3, #64	; 0x40
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	6031      	str	r1, [r6, #0]
 800a3d0:	602b      	str	r3, [r5, #0]
 800a3d2:	b016      	add	sp, #88	; 0x58
 800a3d4:	bd70      	pop	{r4, r5, r6, pc}
 800a3d6:	466a      	mov	r2, sp
 800a3d8:	f000 f848 	bl	800a46c <_fstat_r>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	dbec      	blt.n	800a3ba <__swhatbuf_r+0x12>
 800a3e0:	9901      	ldr	r1, [sp, #4]
 800a3e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a3e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a3ea:	4259      	negs	r1, r3
 800a3ec:	4159      	adcs	r1, r3
 800a3ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3f2:	e7eb      	b.n	800a3cc <__swhatbuf_r+0x24>

0800a3f4 <__smakebuf_r>:
 800a3f4:	898b      	ldrh	r3, [r1, #12]
 800a3f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3f8:	079d      	lsls	r5, r3, #30
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	d507      	bpl.n	800a410 <__smakebuf_r+0x1c>
 800a400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	6123      	str	r3, [r4, #16]
 800a408:	2301      	movs	r3, #1
 800a40a:	6163      	str	r3, [r4, #20]
 800a40c:	b002      	add	sp, #8
 800a40e:	bd70      	pop	{r4, r5, r6, pc}
 800a410:	ab01      	add	r3, sp, #4
 800a412:	466a      	mov	r2, sp
 800a414:	f7ff ffc8 	bl	800a3a8 <__swhatbuf_r>
 800a418:	9900      	ldr	r1, [sp, #0]
 800a41a:	4605      	mov	r5, r0
 800a41c:	4630      	mov	r0, r6
 800a41e:	f7ff f9c9 	bl	80097b4 <_malloc_r>
 800a422:	b948      	cbnz	r0, 800a438 <__smakebuf_r+0x44>
 800a424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a428:	059a      	lsls	r2, r3, #22
 800a42a:	d4ef      	bmi.n	800a40c <__smakebuf_r+0x18>
 800a42c:	f023 0303 	bic.w	r3, r3, #3
 800a430:	f043 0302 	orr.w	r3, r3, #2
 800a434:	81a3      	strh	r3, [r4, #12]
 800a436:	e7e3      	b.n	800a400 <__smakebuf_r+0xc>
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	6020      	str	r0, [r4, #0]
 800a43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a440:	81a3      	strh	r3, [r4, #12]
 800a442:	9b00      	ldr	r3, [sp, #0]
 800a444:	6163      	str	r3, [r4, #20]
 800a446:	9b01      	ldr	r3, [sp, #4]
 800a448:	6120      	str	r0, [r4, #16]
 800a44a:	b15b      	cbz	r3, 800a464 <__smakebuf_r+0x70>
 800a44c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a450:	4630      	mov	r0, r6
 800a452:	f000 f81d 	bl	800a490 <_isatty_r>
 800a456:	b128      	cbz	r0, 800a464 <__smakebuf_r+0x70>
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	f023 0303 	bic.w	r3, r3, #3
 800a45e:	f043 0301 	orr.w	r3, r3, #1
 800a462:	81a3      	strh	r3, [r4, #12]
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	431d      	orrs	r5, r3
 800a468:	81a5      	strh	r5, [r4, #12]
 800a46a:	e7cf      	b.n	800a40c <__smakebuf_r+0x18>

0800a46c <_fstat_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4d07      	ldr	r5, [pc, #28]	; (800a48c <_fstat_r+0x20>)
 800a470:	2300      	movs	r3, #0
 800a472:	4604      	mov	r4, r0
 800a474:	4608      	mov	r0, r1
 800a476:	4611      	mov	r1, r2
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	f7f8 fb76 	bl	8002b6a <_fstat>
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	d102      	bne.n	800a488 <_fstat_r+0x1c>
 800a482:	682b      	ldr	r3, [r5, #0]
 800a484:	b103      	cbz	r3, 800a488 <_fstat_r+0x1c>
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	bd38      	pop	{r3, r4, r5, pc}
 800a48a:	bf00      	nop
 800a48c:	20000608 	.word	0x20000608

0800a490 <_isatty_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d06      	ldr	r5, [pc, #24]	; (800a4ac <_isatty_r+0x1c>)
 800a494:	2300      	movs	r3, #0
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	602b      	str	r3, [r5, #0]
 800a49c:	f7f8 fb75 	bl	8002b8a <_isatty>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d102      	bne.n	800a4aa <_isatty_r+0x1a>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	b103      	cbz	r3, 800a4aa <_isatty_r+0x1a>
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}
 800a4ac:	20000608 	.word	0x20000608

0800a4b0 <_sbrk_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4d06      	ldr	r5, [pc, #24]	; (800a4cc <_sbrk_r+0x1c>)
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	4608      	mov	r0, r1
 800a4ba:	602b      	str	r3, [r5, #0]
 800a4bc:	f7f8 fb7e 	bl	8002bbc <_sbrk>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_sbrk_r+0x1a>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_sbrk_r+0x1a>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	20000608 	.word	0x20000608

0800a4d0 <memcpy>:
 800a4d0:	440a      	add	r2, r1
 800a4d2:	4291      	cmp	r1, r2
 800a4d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4d8:	d100      	bne.n	800a4dc <memcpy+0xc>
 800a4da:	4770      	bx	lr
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4e6:	4291      	cmp	r1, r2
 800a4e8:	d1f9      	bne.n	800a4de <memcpy+0xe>
 800a4ea:	bd10      	pop	{r4, pc}

0800a4ec <__assert_func>:
 800a4ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4ee:	4614      	mov	r4, r2
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	4b09      	ldr	r3, [pc, #36]	; (800a518 <__assert_func+0x2c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	68d8      	ldr	r0, [r3, #12]
 800a4fa:	b14c      	cbz	r4, 800a510 <__assert_func+0x24>
 800a4fc:	4b07      	ldr	r3, [pc, #28]	; (800a51c <__assert_func+0x30>)
 800a4fe:	9100      	str	r1, [sp, #0]
 800a500:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a504:	4906      	ldr	r1, [pc, #24]	; (800a520 <__assert_func+0x34>)
 800a506:	462b      	mov	r3, r5
 800a508:	f000 f844 	bl	800a594 <fiprintf>
 800a50c:	f000 f854 	bl	800a5b8 <abort>
 800a510:	4b04      	ldr	r3, [pc, #16]	; (800a524 <__assert_func+0x38>)
 800a512:	461c      	mov	r4, r3
 800a514:	e7f3      	b.n	800a4fe <__assert_func+0x12>
 800a516:	bf00      	nop
 800a518:	200000f4 	.word	0x200000f4
 800a51c:	0800bd57 	.word	0x0800bd57
 800a520:	0800bd64 	.word	0x0800bd64
 800a524:	0800bd92 	.word	0x0800bd92

0800a528 <_calloc_r>:
 800a528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a52a:	fba1 2402 	umull	r2, r4, r1, r2
 800a52e:	b94c      	cbnz	r4, 800a544 <_calloc_r+0x1c>
 800a530:	4611      	mov	r1, r2
 800a532:	9201      	str	r2, [sp, #4]
 800a534:	f7ff f93e 	bl	80097b4 <_malloc_r>
 800a538:	9a01      	ldr	r2, [sp, #4]
 800a53a:	4605      	mov	r5, r0
 800a53c:	b930      	cbnz	r0, 800a54c <_calloc_r+0x24>
 800a53e:	4628      	mov	r0, r5
 800a540:	b003      	add	sp, #12
 800a542:	bd30      	pop	{r4, r5, pc}
 800a544:	220c      	movs	r2, #12
 800a546:	6002      	str	r2, [r0, #0]
 800a548:	2500      	movs	r5, #0
 800a54a:	e7f8      	b.n	800a53e <_calloc_r+0x16>
 800a54c:	4621      	mov	r1, r4
 800a54e:	f7fe f9c1 	bl	80088d4 <memset>
 800a552:	e7f4      	b.n	800a53e <_calloc_r+0x16>

0800a554 <__ascii_mbtowc>:
 800a554:	b082      	sub	sp, #8
 800a556:	b901      	cbnz	r1, 800a55a <__ascii_mbtowc+0x6>
 800a558:	a901      	add	r1, sp, #4
 800a55a:	b142      	cbz	r2, 800a56e <__ascii_mbtowc+0x1a>
 800a55c:	b14b      	cbz	r3, 800a572 <__ascii_mbtowc+0x1e>
 800a55e:	7813      	ldrb	r3, [r2, #0]
 800a560:	600b      	str	r3, [r1, #0]
 800a562:	7812      	ldrb	r2, [r2, #0]
 800a564:	1e10      	subs	r0, r2, #0
 800a566:	bf18      	it	ne
 800a568:	2001      	movne	r0, #1
 800a56a:	b002      	add	sp, #8
 800a56c:	4770      	bx	lr
 800a56e:	4610      	mov	r0, r2
 800a570:	e7fb      	b.n	800a56a <__ascii_mbtowc+0x16>
 800a572:	f06f 0001 	mvn.w	r0, #1
 800a576:	e7f8      	b.n	800a56a <__ascii_mbtowc+0x16>

0800a578 <__ascii_wctomb>:
 800a578:	b149      	cbz	r1, 800a58e <__ascii_wctomb+0x16>
 800a57a:	2aff      	cmp	r2, #255	; 0xff
 800a57c:	bf85      	ittet	hi
 800a57e:	238a      	movhi	r3, #138	; 0x8a
 800a580:	6003      	strhi	r3, [r0, #0]
 800a582:	700a      	strbls	r2, [r1, #0]
 800a584:	f04f 30ff 	movhi.w	r0, #4294967295
 800a588:	bf98      	it	ls
 800a58a:	2001      	movls	r0, #1
 800a58c:	4770      	bx	lr
 800a58e:	4608      	mov	r0, r1
 800a590:	4770      	bx	lr
	...

0800a594 <fiprintf>:
 800a594:	b40e      	push	{r1, r2, r3}
 800a596:	b503      	push	{r0, r1, lr}
 800a598:	4601      	mov	r1, r0
 800a59a:	ab03      	add	r3, sp, #12
 800a59c:	4805      	ldr	r0, [pc, #20]	; (800a5b4 <fiprintf+0x20>)
 800a59e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a2:	6800      	ldr	r0, [r0, #0]
 800a5a4:	9301      	str	r3, [sp, #4]
 800a5a6:	f7ff fd37 	bl	800a018 <_vfiprintf_r>
 800a5aa:	b002      	add	sp, #8
 800a5ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5b0:	b003      	add	sp, #12
 800a5b2:	4770      	bx	lr
 800a5b4:	200000f4 	.word	0x200000f4

0800a5b8 <abort>:
 800a5b8:	b508      	push	{r3, lr}
 800a5ba:	2006      	movs	r0, #6
 800a5bc:	f000 f82c 	bl	800a618 <raise>
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	f7f8 fa9f 	bl	8002b04 <_exit>

0800a5c6 <_raise_r>:
 800a5c6:	291f      	cmp	r1, #31
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	460d      	mov	r5, r1
 800a5ce:	d904      	bls.n	800a5da <_raise_r+0x14>
 800a5d0:	2316      	movs	r3, #22
 800a5d2:	6003      	str	r3, [r0, #0]
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d8:	bd38      	pop	{r3, r4, r5, pc}
 800a5da:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a5dc:	b112      	cbz	r2, 800a5e4 <_raise_r+0x1e>
 800a5de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5e2:	b94b      	cbnz	r3, 800a5f8 <_raise_r+0x32>
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 f831 	bl	800a64c <_getpid_r>
 800a5ea:	462a      	mov	r2, r5
 800a5ec:	4601      	mov	r1, r0
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5f4:	f000 b818 	b.w	800a628 <_kill_r>
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d00a      	beq.n	800a612 <_raise_r+0x4c>
 800a5fc:	1c59      	adds	r1, r3, #1
 800a5fe:	d103      	bne.n	800a608 <_raise_r+0x42>
 800a600:	2316      	movs	r3, #22
 800a602:	6003      	str	r3, [r0, #0]
 800a604:	2001      	movs	r0, #1
 800a606:	e7e7      	b.n	800a5d8 <_raise_r+0x12>
 800a608:	2400      	movs	r4, #0
 800a60a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a60e:	4628      	mov	r0, r5
 800a610:	4798      	blx	r3
 800a612:	2000      	movs	r0, #0
 800a614:	e7e0      	b.n	800a5d8 <_raise_r+0x12>
	...

0800a618 <raise>:
 800a618:	4b02      	ldr	r3, [pc, #8]	; (800a624 <raise+0xc>)
 800a61a:	4601      	mov	r1, r0
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	f7ff bfd2 	b.w	800a5c6 <_raise_r>
 800a622:	bf00      	nop
 800a624:	200000f4 	.word	0x200000f4

0800a628 <_kill_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4d07      	ldr	r5, [pc, #28]	; (800a648 <_kill_r+0x20>)
 800a62c:	2300      	movs	r3, #0
 800a62e:	4604      	mov	r4, r0
 800a630:	4608      	mov	r0, r1
 800a632:	4611      	mov	r1, r2
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	f7f8 fa55 	bl	8002ae4 <_kill>
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	d102      	bne.n	800a644 <_kill_r+0x1c>
 800a63e:	682b      	ldr	r3, [r5, #0]
 800a640:	b103      	cbz	r3, 800a644 <_kill_r+0x1c>
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	bd38      	pop	{r3, r4, r5, pc}
 800a646:	bf00      	nop
 800a648:	20000608 	.word	0x20000608

0800a64c <_getpid_r>:
 800a64c:	f7f8 ba42 	b.w	8002ad4 <_getpid>

0800a650 <atan2>:
 800a650:	f000 bb76 	b.w	800ad40 <__ieee754_atan2>

0800a654 <pow>:
 800a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a656:	ed2d 8b02 	vpush	{d8}
 800a65a:	eeb0 8a40 	vmov.f32	s16, s0
 800a65e:	eef0 8a60 	vmov.f32	s17, s1
 800a662:	ec55 4b11 	vmov	r4, r5, d1
 800a666:	f000 fc33 	bl	800aed0 <__ieee754_pow>
 800a66a:	4622      	mov	r2, r4
 800a66c:	462b      	mov	r3, r5
 800a66e:	4620      	mov	r0, r4
 800a670:	4629      	mov	r1, r5
 800a672:	ec57 6b10 	vmov	r6, r7, d0
 800a676:	f7f6 fa79 	bl	8000b6c <__aeabi_dcmpun>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d13b      	bne.n	800a6f6 <pow+0xa2>
 800a67e:	ec51 0b18 	vmov	r0, r1, d8
 800a682:	2200      	movs	r2, #0
 800a684:	2300      	movs	r3, #0
 800a686:	f7f6 fa3f 	bl	8000b08 <__aeabi_dcmpeq>
 800a68a:	b1b8      	cbz	r0, 800a6bc <pow+0x68>
 800a68c:	2200      	movs	r2, #0
 800a68e:	2300      	movs	r3, #0
 800a690:	4620      	mov	r0, r4
 800a692:	4629      	mov	r1, r5
 800a694:	f7f6 fa38 	bl	8000b08 <__aeabi_dcmpeq>
 800a698:	2800      	cmp	r0, #0
 800a69a:	d146      	bne.n	800a72a <pow+0xd6>
 800a69c:	ec45 4b10 	vmov	d0, r4, r5
 800a6a0:	f000 fa1f 	bl	800aae2 <finite>
 800a6a4:	b338      	cbz	r0, 800a6f6 <pow+0xa2>
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	f7f6 fa35 	bl	8000b1c <__aeabi_dcmplt>
 800a6b2:	b300      	cbz	r0, 800a6f6 <pow+0xa2>
 800a6b4:	f7fe f960 	bl	8008978 <__errno>
 800a6b8:	2322      	movs	r3, #34	; 0x22
 800a6ba:	e01b      	b.n	800a6f4 <pow+0xa0>
 800a6bc:	ec47 6b10 	vmov	d0, r6, r7
 800a6c0:	f000 fa0f 	bl	800aae2 <finite>
 800a6c4:	b9e0      	cbnz	r0, 800a700 <pow+0xac>
 800a6c6:	eeb0 0a48 	vmov.f32	s0, s16
 800a6ca:	eef0 0a68 	vmov.f32	s1, s17
 800a6ce:	f000 fa08 	bl	800aae2 <finite>
 800a6d2:	b1a8      	cbz	r0, 800a700 <pow+0xac>
 800a6d4:	ec45 4b10 	vmov	d0, r4, r5
 800a6d8:	f000 fa03 	bl	800aae2 <finite>
 800a6dc:	b180      	cbz	r0, 800a700 <pow+0xac>
 800a6de:	4632      	mov	r2, r6
 800a6e0:	463b      	mov	r3, r7
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	4639      	mov	r1, r7
 800a6e6:	f7f6 fa41 	bl	8000b6c <__aeabi_dcmpun>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d0e2      	beq.n	800a6b4 <pow+0x60>
 800a6ee:	f7fe f943 	bl	8008978 <__errno>
 800a6f2:	2321      	movs	r3, #33	; 0x21
 800a6f4:	6003      	str	r3, [r0, #0]
 800a6f6:	ecbd 8b02 	vpop	{d8}
 800a6fa:	ec47 6b10 	vmov	d0, r6, r7
 800a6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a700:	2200      	movs	r2, #0
 800a702:	2300      	movs	r3, #0
 800a704:	4630      	mov	r0, r6
 800a706:	4639      	mov	r1, r7
 800a708:	f7f6 f9fe 	bl	8000b08 <__aeabi_dcmpeq>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d0f2      	beq.n	800a6f6 <pow+0xa2>
 800a710:	eeb0 0a48 	vmov.f32	s0, s16
 800a714:	eef0 0a68 	vmov.f32	s1, s17
 800a718:	f000 f9e3 	bl	800aae2 <finite>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d0ea      	beq.n	800a6f6 <pow+0xa2>
 800a720:	ec45 4b10 	vmov	d0, r4, r5
 800a724:	f000 f9dd 	bl	800aae2 <finite>
 800a728:	e7c3      	b.n	800a6b2 <pow+0x5e>
 800a72a:	4f01      	ldr	r7, [pc, #4]	; (800a730 <pow+0xdc>)
 800a72c:	2600      	movs	r6, #0
 800a72e:	e7e2      	b.n	800a6f6 <pow+0xa2>
 800a730:	3ff00000 	.word	0x3ff00000

0800a734 <sqrt>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	ed2d 8b02 	vpush	{d8}
 800a73a:	ec55 4b10 	vmov	r4, r5, d0
 800a73e:	f000 f9db 	bl	800aaf8 <__ieee754_sqrt>
 800a742:	4622      	mov	r2, r4
 800a744:	462b      	mov	r3, r5
 800a746:	4620      	mov	r0, r4
 800a748:	4629      	mov	r1, r5
 800a74a:	eeb0 8a40 	vmov.f32	s16, s0
 800a74e:	eef0 8a60 	vmov.f32	s17, s1
 800a752:	f7f6 fa0b 	bl	8000b6c <__aeabi_dcmpun>
 800a756:	b990      	cbnz	r0, 800a77e <sqrt+0x4a>
 800a758:	2200      	movs	r2, #0
 800a75a:	2300      	movs	r3, #0
 800a75c:	4620      	mov	r0, r4
 800a75e:	4629      	mov	r1, r5
 800a760:	f7f6 f9dc 	bl	8000b1c <__aeabi_dcmplt>
 800a764:	b158      	cbz	r0, 800a77e <sqrt+0x4a>
 800a766:	f7fe f907 	bl	8008978 <__errno>
 800a76a:	2321      	movs	r3, #33	; 0x21
 800a76c:	6003      	str	r3, [r0, #0]
 800a76e:	2200      	movs	r2, #0
 800a770:	2300      	movs	r3, #0
 800a772:	4610      	mov	r0, r2
 800a774:	4619      	mov	r1, r3
 800a776:	f7f6 f889 	bl	800088c <__aeabi_ddiv>
 800a77a:	ec41 0b18 	vmov	d8, r0, r1
 800a77e:	eeb0 0a48 	vmov.f32	s0, s16
 800a782:	eef0 0a68 	vmov.f32	s1, s17
 800a786:	ecbd 8b02 	vpop	{d8}
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	0000      	movs	r0, r0
	...

0800a790 <atan>:
 800a790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	ec55 4b10 	vmov	r4, r5, d0
 800a798:	4bc3      	ldr	r3, [pc, #780]	; (800aaa8 <atan+0x318>)
 800a79a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a79e:	429e      	cmp	r6, r3
 800a7a0:	46ab      	mov	fp, r5
 800a7a2:	dd18      	ble.n	800a7d6 <atan+0x46>
 800a7a4:	4bc1      	ldr	r3, [pc, #772]	; (800aaac <atan+0x31c>)
 800a7a6:	429e      	cmp	r6, r3
 800a7a8:	dc01      	bgt.n	800a7ae <atan+0x1e>
 800a7aa:	d109      	bne.n	800a7c0 <atan+0x30>
 800a7ac:	b144      	cbz	r4, 800a7c0 <atan+0x30>
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	462b      	mov	r3, r5
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	f7f5 fd89 	bl	80002cc <__adddf3>
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460d      	mov	r5, r1
 800a7be:	e006      	b.n	800a7ce <atan+0x3e>
 800a7c0:	f1bb 0f00 	cmp.w	fp, #0
 800a7c4:	f300 8131 	bgt.w	800aa2a <atan+0x29a>
 800a7c8:	a59b      	add	r5, pc, #620	; (adr r5, 800aa38 <atan+0x2a8>)
 800a7ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a7ce:	ec45 4b10 	vmov	d0, r4, r5
 800a7d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d6:	4bb6      	ldr	r3, [pc, #728]	; (800aab0 <atan+0x320>)
 800a7d8:	429e      	cmp	r6, r3
 800a7da:	dc14      	bgt.n	800a806 <atan+0x76>
 800a7dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a7e0:	429e      	cmp	r6, r3
 800a7e2:	dc0d      	bgt.n	800a800 <atan+0x70>
 800a7e4:	a396      	add	r3, pc, #600	; (adr r3, 800aa40 <atan+0x2b0>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	ee10 0a10 	vmov	r0, s0
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	f7f5 fd6c 	bl	80002cc <__adddf3>
 800a7f4:	4baf      	ldr	r3, [pc, #700]	; (800aab4 <atan+0x324>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f7f6 f9ae 	bl	8000b58 <__aeabi_dcmpgt>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d1e6      	bne.n	800a7ce <atan+0x3e>
 800a800:	f04f 3aff 	mov.w	sl, #4294967295
 800a804:	e02b      	b.n	800a85e <atan+0xce>
 800a806:	f000 f963 	bl	800aad0 <fabs>
 800a80a:	4bab      	ldr	r3, [pc, #684]	; (800aab8 <atan+0x328>)
 800a80c:	429e      	cmp	r6, r3
 800a80e:	ec55 4b10 	vmov	r4, r5, d0
 800a812:	f300 80bf 	bgt.w	800a994 <atan+0x204>
 800a816:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a81a:	429e      	cmp	r6, r3
 800a81c:	f300 80a0 	bgt.w	800a960 <atan+0x1d0>
 800a820:	ee10 2a10 	vmov	r2, s0
 800a824:	ee10 0a10 	vmov	r0, s0
 800a828:	462b      	mov	r3, r5
 800a82a:	4629      	mov	r1, r5
 800a82c:	f7f5 fd4e 	bl	80002cc <__adddf3>
 800a830:	4ba0      	ldr	r3, [pc, #640]	; (800aab4 <atan+0x324>)
 800a832:	2200      	movs	r2, #0
 800a834:	f7f5 fd48 	bl	80002c8 <__aeabi_dsub>
 800a838:	2200      	movs	r2, #0
 800a83a:	4606      	mov	r6, r0
 800a83c:	460f      	mov	r7, r1
 800a83e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a842:	4620      	mov	r0, r4
 800a844:	4629      	mov	r1, r5
 800a846:	f7f5 fd41 	bl	80002cc <__adddf3>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	4630      	mov	r0, r6
 800a850:	4639      	mov	r1, r7
 800a852:	f7f6 f81b 	bl	800088c <__aeabi_ddiv>
 800a856:	f04f 0a00 	mov.w	sl, #0
 800a85a:	4604      	mov	r4, r0
 800a85c:	460d      	mov	r5, r1
 800a85e:	4622      	mov	r2, r4
 800a860:	462b      	mov	r3, r5
 800a862:	4620      	mov	r0, r4
 800a864:	4629      	mov	r1, r5
 800a866:	f7f5 fee7 	bl	8000638 <__aeabi_dmul>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4680      	mov	r8, r0
 800a870:	4689      	mov	r9, r1
 800a872:	f7f5 fee1 	bl	8000638 <__aeabi_dmul>
 800a876:	a374      	add	r3, pc, #464	; (adr r3, 800aa48 <atan+0x2b8>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	4606      	mov	r6, r0
 800a87e:	460f      	mov	r7, r1
 800a880:	f7f5 feda 	bl	8000638 <__aeabi_dmul>
 800a884:	a372      	add	r3, pc, #456	; (adr r3, 800aa50 <atan+0x2c0>)
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	f7f5 fd1f 	bl	80002cc <__adddf3>
 800a88e:	4632      	mov	r2, r6
 800a890:	463b      	mov	r3, r7
 800a892:	f7f5 fed1 	bl	8000638 <__aeabi_dmul>
 800a896:	a370      	add	r3, pc, #448	; (adr r3, 800aa58 <atan+0x2c8>)
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	f7f5 fd16 	bl	80002cc <__adddf3>
 800a8a0:	4632      	mov	r2, r6
 800a8a2:	463b      	mov	r3, r7
 800a8a4:	f7f5 fec8 	bl	8000638 <__aeabi_dmul>
 800a8a8:	a36d      	add	r3, pc, #436	; (adr r3, 800aa60 <atan+0x2d0>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 fd0d 	bl	80002cc <__adddf3>
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	463b      	mov	r3, r7
 800a8b6:	f7f5 febf 	bl	8000638 <__aeabi_dmul>
 800a8ba:	a36b      	add	r3, pc, #428	; (adr r3, 800aa68 <atan+0x2d8>)
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	f7f5 fd04 	bl	80002cc <__adddf3>
 800a8c4:	4632      	mov	r2, r6
 800a8c6:	463b      	mov	r3, r7
 800a8c8:	f7f5 feb6 	bl	8000638 <__aeabi_dmul>
 800a8cc:	a368      	add	r3, pc, #416	; (adr r3, 800aa70 <atan+0x2e0>)
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	f7f5 fcfb 	bl	80002cc <__adddf3>
 800a8d6:	4642      	mov	r2, r8
 800a8d8:	464b      	mov	r3, r9
 800a8da:	f7f5 fead 	bl	8000638 <__aeabi_dmul>
 800a8de:	a366      	add	r3, pc, #408	; (adr r3, 800aa78 <atan+0x2e8>)
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	4680      	mov	r8, r0
 800a8e6:	4689      	mov	r9, r1
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f5 fea4 	bl	8000638 <__aeabi_dmul>
 800a8f0:	a363      	add	r3, pc, #396	; (adr r3, 800aa80 <atan+0x2f0>)
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f7f5 fce7 	bl	80002c8 <__aeabi_dsub>
 800a8fa:	4632      	mov	r2, r6
 800a8fc:	463b      	mov	r3, r7
 800a8fe:	f7f5 fe9b 	bl	8000638 <__aeabi_dmul>
 800a902:	a361      	add	r3, pc, #388	; (adr r3, 800aa88 <atan+0x2f8>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	f7f5 fcde 	bl	80002c8 <__aeabi_dsub>
 800a90c:	4632      	mov	r2, r6
 800a90e:	463b      	mov	r3, r7
 800a910:	f7f5 fe92 	bl	8000638 <__aeabi_dmul>
 800a914:	a35e      	add	r3, pc, #376	; (adr r3, 800aa90 <atan+0x300>)
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	f7f5 fcd5 	bl	80002c8 <__aeabi_dsub>
 800a91e:	4632      	mov	r2, r6
 800a920:	463b      	mov	r3, r7
 800a922:	f7f5 fe89 	bl	8000638 <__aeabi_dmul>
 800a926:	a35c      	add	r3, pc, #368	; (adr r3, 800aa98 <atan+0x308>)
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f7f5 fccc 	bl	80002c8 <__aeabi_dsub>
 800a930:	4632      	mov	r2, r6
 800a932:	463b      	mov	r3, r7
 800a934:	f7f5 fe80 	bl	8000638 <__aeabi_dmul>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4640      	mov	r0, r8
 800a93e:	4649      	mov	r1, r9
 800a940:	f7f5 fcc4 	bl	80002cc <__adddf3>
 800a944:	4622      	mov	r2, r4
 800a946:	462b      	mov	r3, r5
 800a948:	f7f5 fe76 	bl	8000638 <__aeabi_dmul>
 800a94c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	d14b      	bne.n	800a9ee <atan+0x25e>
 800a956:	4620      	mov	r0, r4
 800a958:	4629      	mov	r1, r5
 800a95a:	f7f5 fcb5 	bl	80002c8 <__aeabi_dsub>
 800a95e:	e72c      	b.n	800a7ba <atan+0x2a>
 800a960:	ee10 0a10 	vmov	r0, s0
 800a964:	4b53      	ldr	r3, [pc, #332]	; (800aab4 <atan+0x324>)
 800a966:	2200      	movs	r2, #0
 800a968:	4629      	mov	r1, r5
 800a96a:	f7f5 fcad 	bl	80002c8 <__aeabi_dsub>
 800a96e:	4b51      	ldr	r3, [pc, #324]	; (800aab4 <atan+0x324>)
 800a970:	4606      	mov	r6, r0
 800a972:	460f      	mov	r7, r1
 800a974:	2200      	movs	r2, #0
 800a976:	4620      	mov	r0, r4
 800a978:	4629      	mov	r1, r5
 800a97a:	f7f5 fca7 	bl	80002cc <__adddf3>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	4630      	mov	r0, r6
 800a984:	4639      	mov	r1, r7
 800a986:	f7f5 ff81 	bl	800088c <__aeabi_ddiv>
 800a98a:	f04f 0a01 	mov.w	sl, #1
 800a98e:	4604      	mov	r4, r0
 800a990:	460d      	mov	r5, r1
 800a992:	e764      	b.n	800a85e <atan+0xce>
 800a994:	4b49      	ldr	r3, [pc, #292]	; (800aabc <atan+0x32c>)
 800a996:	429e      	cmp	r6, r3
 800a998:	da1d      	bge.n	800a9d6 <atan+0x246>
 800a99a:	ee10 0a10 	vmov	r0, s0
 800a99e:	4b48      	ldr	r3, [pc, #288]	; (800aac0 <atan+0x330>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	f7f5 fc90 	bl	80002c8 <__aeabi_dsub>
 800a9a8:	4b45      	ldr	r3, [pc, #276]	; (800aac0 <atan+0x330>)
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460f      	mov	r7, r1
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	4629      	mov	r1, r5
 800a9b4:	f7f5 fe40 	bl	8000638 <__aeabi_dmul>
 800a9b8:	4b3e      	ldr	r3, [pc, #248]	; (800aab4 <atan+0x324>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f7f5 fc86 	bl	80002cc <__adddf3>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	f7f5 ff60 	bl	800088c <__aeabi_ddiv>
 800a9cc:	f04f 0a02 	mov.w	sl, #2
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	460d      	mov	r5, r1
 800a9d4:	e743      	b.n	800a85e <atan+0xce>
 800a9d6:	462b      	mov	r3, r5
 800a9d8:	ee10 2a10 	vmov	r2, s0
 800a9dc:	4939      	ldr	r1, [pc, #228]	; (800aac4 <atan+0x334>)
 800a9de:	2000      	movs	r0, #0
 800a9e0:	f7f5 ff54 	bl	800088c <__aeabi_ddiv>
 800a9e4:	f04f 0a03 	mov.w	sl, #3
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	460d      	mov	r5, r1
 800a9ec:	e737      	b.n	800a85e <atan+0xce>
 800a9ee:	4b36      	ldr	r3, [pc, #216]	; (800aac8 <atan+0x338>)
 800a9f0:	4e36      	ldr	r6, [pc, #216]	; (800aacc <atan+0x33c>)
 800a9f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fa:	f7f5 fc65 	bl	80002c8 <__aeabi_dsub>
 800a9fe:	4622      	mov	r2, r4
 800aa00:	462b      	mov	r3, r5
 800aa02:	f7f5 fc61 	bl	80002c8 <__aeabi_dsub>
 800aa06:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800aa12:	f7f5 fc59 	bl	80002c8 <__aeabi_dsub>
 800aa16:	f1bb 0f00 	cmp.w	fp, #0
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	460d      	mov	r5, r1
 800aa1e:	f6bf aed6 	bge.w	800a7ce <atan+0x3e>
 800aa22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa26:	461d      	mov	r5, r3
 800aa28:	e6d1      	b.n	800a7ce <atan+0x3e>
 800aa2a:	a51d      	add	r5, pc, #116	; (adr r5, 800aaa0 <atan+0x310>)
 800aa2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aa30:	e6cd      	b.n	800a7ce <atan+0x3e>
 800aa32:	bf00      	nop
 800aa34:	f3af 8000 	nop.w
 800aa38:	54442d18 	.word	0x54442d18
 800aa3c:	bff921fb 	.word	0xbff921fb
 800aa40:	8800759c 	.word	0x8800759c
 800aa44:	7e37e43c 	.word	0x7e37e43c
 800aa48:	e322da11 	.word	0xe322da11
 800aa4c:	3f90ad3a 	.word	0x3f90ad3a
 800aa50:	24760deb 	.word	0x24760deb
 800aa54:	3fa97b4b 	.word	0x3fa97b4b
 800aa58:	a0d03d51 	.word	0xa0d03d51
 800aa5c:	3fb10d66 	.word	0x3fb10d66
 800aa60:	c54c206e 	.word	0xc54c206e
 800aa64:	3fb745cd 	.word	0x3fb745cd
 800aa68:	920083ff 	.word	0x920083ff
 800aa6c:	3fc24924 	.word	0x3fc24924
 800aa70:	5555550d 	.word	0x5555550d
 800aa74:	3fd55555 	.word	0x3fd55555
 800aa78:	2c6a6c2f 	.word	0x2c6a6c2f
 800aa7c:	bfa2b444 	.word	0xbfa2b444
 800aa80:	52defd9a 	.word	0x52defd9a
 800aa84:	3fadde2d 	.word	0x3fadde2d
 800aa88:	af749a6d 	.word	0xaf749a6d
 800aa8c:	3fb3b0f2 	.word	0x3fb3b0f2
 800aa90:	fe231671 	.word	0xfe231671
 800aa94:	3fbc71c6 	.word	0x3fbc71c6
 800aa98:	9998ebc4 	.word	0x9998ebc4
 800aa9c:	3fc99999 	.word	0x3fc99999
 800aaa0:	54442d18 	.word	0x54442d18
 800aaa4:	3ff921fb 	.word	0x3ff921fb
 800aaa8:	440fffff 	.word	0x440fffff
 800aaac:	7ff00000 	.word	0x7ff00000
 800aab0:	3fdbffff 	.word	0x3fdbffff
 800aab4:	3ff00000 	.word	0x3ff00000
 800aab8:	3ff2ffff 	.word	0x3ff2ffff
 800aabc:	40038000 	.word	0x40038000
 800aac0:	3ff80000 	.word	0x3ff80000
 800aac4:	bff00000 	.word	0xbff00000
 800aac8:	0800beb8 	.word	0x0800beb8
 800aacc:	0800be98 	.word	0x0800be98

0800aad0 <fabs>:
 800aad0:	ec51 0b10 	vmov	r0, r1, d0
 800aad4:	ee10 2a10 	vmov	r2, s0
 800aad8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aadc:	ec43 2b10 	vmov	d0, r2, r3
 800aae0:	4770      	bx	lr

0800aae2 <finite>:
 800aae2:	b082      	sub	sp, #8
 800aae4:	ed8d 0b00 	vstr	d0, [sp]
 800aae8:	9801      	ldr	r0, [sp, #4]
 800aaea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800aaee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800aaf2:	0fc0      	lsrs	r0, r0, #31
 800aaf4:	b002      	add	sp, #8
 800aaf6:	4770      	bx	lr

0800aaf8 <__ieee754_sqrt>:
 800aaf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	ec55 4b10 	vmov	r4, r5, d0
 800ab00:	4e67      	ldr	r6, [pc, #412]	; (800aca0 <__ieee754_sqrt+0x1a8>)
 800ab02:	43ae      	bics	r6, r5
 800ab04:	ee10 0a10 	vmov	r0, s0
 800ab08:	ee10 2a10 	vmov	r2, s0
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	462b      	mov	r3, r5
 800ab10:	d10d      	bne.n	800ab2e <__ieee754_sqrt+0x36>
 800ab12:	f7f5 fd91 	bl	8000638 <__aeabi_dmul>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	f7f5 fbd5 	bl	80002cc <__adddf3>
 800ab22:	4604      	mov	r4, r0
 800ab24:	460d      	mov	r5, r1
 800ab26:	ec45 4b10 	vmov	d0, r4, r5
 800ab2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2e:	2d00      	cmp	r5, #0
 800ab30:	dc0b      	bgt.n	800ab4a <__ieee754_sqrt+0x52>
 800ab32:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ab36:	4326      	orrs	r6, r4
 800ab38:	d0f5      	beq.n	800ab26 <__ieee754_sqrt+0x2e>
 800ab3a:	b135      	cbz	r5, 800ab4a <__ieee754_sqrt+0x52>
 800ab3c:	f7f5 fbc4 	bl	80002c8 <__aeabi_dsub>
 800ab40:	4602      	mov	r2, r0
 800ab42:	460b      	mov	r3, r1
 800ab44:	f7f5 fea2 	bl	800088c <__aeabi_ddiv>
 800ab48:	e7eb      	b.n	800ab22 <__ieee754_sqrt+0x2a>
 800ab4a:	1509      	asrs	r1, r1, #20
 800ab4c:	f000 808d 	beq.w	800ac6a <__ieee754_sqrt+0x172>
 800ab50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab54:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ab58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab5c:	07c9      	lsls	r1, r1, #31
 800ab5e:	bf5c      	itt	pl
 800ab60:	005b      	lslpl	r3, r3, #1
 800ab62:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ab66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab6a:	bf58      	it	pl
 800ab6c:	0052      	lslpl	r2, r2, #1
 800ab6e:	2500      	movs	r5, #0
 800ab70:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ab74:	1076      	asrs	r6, r6, #1
 800ab76:	0052      	lsls	r2, r2, #1
 800ab78:	f04f 0e16 	mov.w	lr, #22
 800ab7c:	46ac      	mov	ip, r5
 800ab7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab82:	eb0c 0001 	add.w	r0, ip, r1
 800ab86:	4298      	cmp	r0, r3
 800ab88:	bfde      	ittt	le
 800ab8a:	1a1b      	suble	r3, r3, r0
 800ab8c:	eb00 0c01 	addle.w	ip, r0, r1
 800ab90:	186d      	addle	r5, r5, r1
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	f1be 0e01 	subs.w	lr, lr, #1
 800ab98:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ab9c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800aba0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800aba4:	d1ed      	bne.n	800ab82 <__ieee754_sqrt+0x8a>
 800aba6:	4674      	mov	r4, lr
 800aba8:	2720      	movs	r7, #32
 800abaa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800abae:	4563      	cmp	r3, ip
 800abb0:	eb01 000e 	add.w	r0, r1, lr
 800abb4:	dc02      	bgt.n	800abbc <__ieee754_sqrt+0xc4>
 800abb6:	d113      	bne.n	800abe0 <__ieee754_sqrt+0xe8>
 800abb8:	4290      	cmp	r0, r2
 800abba:	d811      	bhi.n	800abe0 <__ieee754_sqrt+0xe8>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	eb00 0e01 	add.w	lr, r0, r1
 800abc2:	da57      	bge.n	800ac74 <__ieee754_sqrt+0x17c>
 800abc4:	f1be 0f00 	cmp.w	lr, #0
 800abc8:	db54      	blt.n	800ac74 <__ieee754_sqrt+0x17c>
 800abca:	f10c 0801 	add.w	r8, ip, #1
 800abce:	eba3 030c 	sub.w	r3, r3, ip
 800abd2:	4290      	cmp	r0, r2
 800abd4:	bf88      	it	hi
 800abd6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800abda:	1a12      	subs	r2, r2, r0
 800abdc:	440c      	add	r4, r1
 800abde:	46c4      	mov	ip, r8
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	3f01      	subs	r7, #1
 800abe4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800abe8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800abec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800abf0:	d1dd      	bne.n	800abae <__ieee754_sqrt+0xb6>
 800abf2:	4313      	orrs	r3, r2
 800abf4:	d01b      	beq.n	800ac2e <__ieee754_sqrt+0x136>
 800abf6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800aca4 <__ieee754_sqrt+0x1ac>
 800abfa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800aca8 <__ieee754_sqrt+0x1b0>
 800abfe:	e9da 0100 	ldrd	r0, r1, [sl]
 800ac02:	e9db 2300 	ldrd	r2, r3, [fp]
 800ac06:	f7f5 fb5f 	bl	80002c8 <__aeabi_dsub>
 800ac0a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac0e:	4602      	mov	r2, r0
 800ac10:	460b      	mov	r3, r1
 800ac12:	4640      	mov	r0, r8
 800ac14:	4649      	mov	r1, r9
 800ac16:	f7f5 ff8b 	bl	8000b30 <__aeabi_dcmple>
 800ac1a:	b140      	cbz	r0, 800ac2e <__ieee754_sqrt+0x136>
 800ac1c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ac20:	e9da 0100 	ldrd	r0, r1, [sl]
 800ac24:	e9db 2300 	ldrd	r2, r3, [fp]
 800ac28:	d126      	bne.n	800ac78 <__ieee754_sqrt+0x180>
 800ac2a:	3501      	adds	r5, #1
 800ac2c:	463c      	mov	r4, r7
 800ac2e:	106a      	asrs	r2, r5, #1
 800ac30:	0863      	lsrs	r3, r4, #1
 800ac32:	07e9      	lsls	r1, r5, #31
 800ac34:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ac38:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ac3c:	bf48      	it	mi
 800ac3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ac42:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ac46:	461c      	mov	r4, r3
 800ac48:	e76d      	b.n	800ab26 <__ieee754_sqrt+0x2e>
 800ac4a:	0ad3      	lsrs	r3, r2, #11
 800ac4c:	3815      	subs	r0, #21
 800ac4e:	0552      	lsls	r2, r2, #21
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d0fa      	beq.n	800ac4a <__ieee754_sqrt+0x152>
 800ac54:	02dc      	lsls	r4, r3, #11
 800ac56:	d50a      	bpl.n	800ac6e <__ieee754_sqrt+0x176>
 800ac58:	f1c1 0420 	rsb	r4, r1, #32
 800ac5c:	fa22 f404 	lsr.w	r4, r2, r4
 800ac60:	1e4d      	subs	r5, r1, #1
 800ac62:	408a      	lsls	r2, r1
 800ac64:	4323      	orrs	r3, r4
 800ac66:	1b41      	subs	r1, r0, r5
 800ac68:	e772      	b.n	800ab50 <__ieee754_sqrt+0x58>
 800ac6a:	4608      	mov	r0, r1
 800ac6c:	e7f0      	b.n	800ac50 <__ieee754_sqrt+0x158>
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	3101      	adds	r1, #1
 800ac72:	e7ef      	b.n	800ac54 <__ieee754_sqrt+0x15c>
 800ac74:	46e0      	mov	r8, ip
 800ac76:	e7aa      	b.n	800abce <__ieee754_sqrt+0xd6>
 800ac78:	f7f5 fb28 	bl	80002cc <__adddf3>
 800ac7c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4640      	mov	r0, r8
 800ac86:	4649      	mov	r1, r9
 800ac88:	f7f5 ff48 	bl	8000b1c <__aeabi_dcmplt>
 800ac8c:	b120      	cbz	r0, 800ac98 <__ieee754_sqrt+0x1a0>
 800ac8e:	1ca0      	adds	r0, r4, #2
 800ac90:	bf08      	it	eq
 800ac92:	3501      	addeq	r5, #1
 800ac94:	3402      	adds	r4, #2
 800ac96:	e7ca      	b.n	800ac2e <__ieee754_sqrt+0x136>
 800ac98:	3401      	adds	r4, #1
 800ac9a:	f024 0401 	bic.w	r4, r4, #1
 800ac9e:	e7c6      	b.n	800ac2e <__ieee754_sqrt+0x136>
 800aca0:	7ff00000 	.word	0x7ff00000
 800aca4:	20000268 	.word	0x20000268
 800aca8:	20000270 	.word	0x20000270

0800acac <round>:
 800acac:	ec53 2b10 	vmov	r2, r3, d0
 800acb0:	b570      	push	{r4, r5, r6, lr}
 800acb2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800acb6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800acba:	2813      	cmp	r0, #19
 800acbc:	ee10 5a10 	vmov	r5, s0
 800acc0:	4619      	mov	r1, r3
 800acc2:	dc18      	bgt.n	800acf6 <round+0x4a>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	da09      	bge.n	800acdc <round+0x30>
 800acc8:	3001      	adds	r0, #1
 800acca:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800acce:	d103      	bne.n	800acd8 <round+0x2c>
 800acd0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800acd4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800acd8:	2300      	movs	r3, #0
 800acda:	e02a      	b.n	800ad32 <round+0x86>
 800acdc:	4c16      	ldr	r4, [pc, #88]	; (800ad38 <round+0x8c>)
 800acde:	4104      	asrs	r4, r0
 800ace0:	ea03 0604 	and.w	r6, r3, r4
 800ace4:	4316      	orrs	r6, r2
 800ace6:	d011      	beq.n	800ad0c <round+0x60>
 800ace8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800acec:	4103      	asrs	r3, r0
 800acee:	440b      	add	r3, r1
 800acf0:	ea23 0104 	bic.w	r1, r3, r4
 800acf4:	e7f0      	b.n	800acd8 <round+0x2c>
 800acf6:	2833      	cmp	r0, #51	; 0x33
 800acf8:	dd0b      	ble.n	800ad12 <round+0x66>
 800acfa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800acfe:	d105      	bne.n	800ad0c <round+0x60>
 800ad00:	ee10 0a10 	vmov	r0, s0
 800ad04:	f7f5 fae2 	bl	80002cc <__adddf3>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	ec43 2b10 	vmov	d0, r2, r3
 800ad10:	bd70      	pop	{r4, r5, r6, pc}
 800ad12:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800ad16:	f04f 34ff 	mov.w	r4, #4294967295
 800ad1a:	40f4      	lsrs	r4, r6
 800ad1c:	4214      	tst	r4, r2
 800ad1e:	d0f5      	beq.n	800ad0c <round+0x60>
 800ad20:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800ad24:	2301      	movs	r3, #1
 800ad26:	4083      	lsls	r3, r0
 800ad28:	195b      	adds	r3, r3, r5
 800ad2a:	bf28      	it	cs
 800ad2c:	3101      	addcs	r1, #1
 800ad2e:	ea23 0304 	bic.w	r3, r3, r4
 800ad32:	461a      	mov	r2, r3
 800ad34:	460b      	mov	r3, r1
 800ad36:	e7e9      	b.n	800ad0c <round+0x60>
 800ad38:	000fffff 	.word	0x000fffff
 800ad3c:	00000000 	.word	0x00000000

0800ad40 <__ieee754_atan2>:
 800ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad44:	ec57 6b11 	vmov	r6, r7, d1
 800ad48:	4273      	negs	r3, r6
 800ad4a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800aec8 <__ieee754_atan2+0x188>
 800ad4e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ad52:	4333      	orrs	r3, r6
 800ad54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ad58:	4543      	cmp	r3, r8
 800ad5a:	ec51 0b10 	vmov	r0, r1, d0
 800ad5e:	ee11 5a10 	vmov	r5, s2
 800ad62:	d80a      	bhi.n	800ad7a <__ieee754_atan2+0x3a>
 800ad64:	4244      	negs	r4, r0
 800ad66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad6a:	4304      	orrs	r4, r0
 800ad6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ad70:	4544      	cmp	r4, r8
 800ad72:	ee10 9a10 	vmov	r9, s0
 800ad76:	468e      	mov	lr, r1
 800ad78:	d907      	bls.n	800ad8a <__ieee754_atan2+0x4a>
 800ad7a:	4632      	mov	r2, r6
 800ad7c:	463b      	mov	r3, r7
 800ad7e:	f7f5 faa5 	bl	80002cc <__adddf3>
 800ad82:	ec41 0b10 	vmov	d0, r0, r1
 800ad86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ad8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ad92:	4334      	orrs	r4, r6
 800ad94:	d103      	bne.n	800ad9e <__ieee754_atan2+0x5e>
 800ad96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad9a:	f7ff bcf9 	b.w	800a790 <atan>
 800ad9e:	17bc      	asrs	r4, r7, #30
 800ada0:	f004 0402 	and.w	r4, r4, #2
 800ada4:	ea53 0909 	orrs.w	r9, r3, r9
 800ada8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800adac:	d107      	bne.n	800adbe <__ieee754_atan2+0x7e>
 800adae:	2c02      	cmp	r4, #2
 800adb0:	d05f      	beq.n	800ae72 <__ieee754_atan2+0x132>
 800adb2:	2c03      	cmp	r4, #3
 800adb4:	d1e5      	bne.n	800ad82 <__ieee754_atan2+0x42>
 800adb6:	a140      	add	r1, pc, #256	; (adr r1, 800aeb8 <__ieee754_atan2+0x178>)
 800adb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adbc:	e7e1      	b.n	800ad82 <__ieee754_atan2+0x42>
 800adbe:	4315      	orrs	r5, r2
 800adc0:	d106      	bne.n	800add0 <__ieee754_atan2+0x90>
 800adc2:	f1be 0f00 	cmp.w	lr, #0
 800adc6:	da5f      	bge.n	800ae88 <__ieee754_atan2+0x148>
 800adc8:	a13d      	add	r1, pc, #244	; (adr r1, 800aec0 <__ieee754_atan2+0x180>)
 800adca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adce:	e7d8      	b.n	800ad82 <__ieee754_atan2+0x42>
 800add0:	4542      	cmp	r2, r8
 800add2:	d10f      	bne.n	800adf4 <__ieee754_atan2+0xb4>
 800add4:	4293      	cmp	r3, r2
 800add6:	f104 34ff 	add.w	r4, r4, #4294967295
 800adda:	d107      	bne.n	800adec <__ieee754_atan2+0xac>
 800addc:	2c02      	cmp	r4, #2
 800adde:	d84c      	bhi.n	800ae7a <__ieee754_atan2+0x13a>
 800ade0:	4b33      	ldr	r3, [pc, #204]	; (800aeb0 <__ieee754_atan2+0x170>)
 800ade2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ade6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800adea:	e7ca      	b.n	800ad82 <__ieee754_atan2+0x42>
 800adec:	2c02      	cmp	r4, #2
 800adee:	d848      	bhi.n	800ae82 <__ieee754_atan2+0x142>
 800adf0:	4b30      	ldr	r3, [pc, #192]	; (800aeb4 <__ieee754_atan2+0x174>)
 800adf2:	e7f6      	b.n	800ade2 <__ieee754_atan2+0xa2>
 800adf4:	4543      	cmp	r3, r8
 800adf6:	d0e4      	beq.n	800adc2 <__ieee754_atan2+0x82>
 800adf8:	1a9b      	subs	r3, r3, r2
 800adfa:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800adfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae02:	da1e      	bge.n	800ae42 <__ieee754_atan2+0x102>
 800ae04:	2f00      	cmp	r7, #0
 800ae06:	da01      	bge.n	800ae0c <__ieee754_atan2+0xcc>
 800ae08:	323c      	adds	r2, #60	; 0x3c
 800ae0a:	db1e      	blt.n	800ae4a <__ieee754_atan2+0x10a>
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	463b      	mov	r3, r7
 800ae10:	f7f5 fd3c 	bl	800088c <__aeabi_ddiv>
 800ae14:	ec41 0b10 	vmov	d0, r0, r1
 800ae18:	f7ff fe5a 	bl	800aad0 <fabs>
 800ae1c:	f7ff fcb8 	bl	800a790 <atan>
 800ae20:	ec51 0b10 	vmov	r0, r1, d0
 800ae24:	2c01      	cmp	r4, #1
 800ae26:	d013      	beq.n	800ae50 <__ieee754_atan2+0x110>
 800ae28:	2c02      	cmp	r4, #2
 800ae2a:	d015      	beq.n	800ae58 <__ieee754_atan2+0x118>
 800ae2c:	2c00      	cmp	r4, #0
 800ae2e:	d0a8      	beq.n	800ad82 <__ieee754_atan2+0x42>
 800ae30:	a317      	add	r3, pc, #92	; (adr r3, 800ae90 <__ieee754_atan2+0x150>)
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	f7f5 fa47 	bl	80002c8 <__aeabi_dsub>
 800ae3a:	a317      	add	r3, pc, #92	; (adr r3, 800ae98 <__ieee754_atan2+0x158>)
 800ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae40:	e014      	b.n	800ae6c <__ieee754_atan2+0x12c>
 800ae42:	a117      	add	r1, pc, #92	; (adr r1, 800aea0 <__ieee754_atan2+0x160>)
 800ae44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae48:	e7ec      	b.n	800ae24 <__ieee754_atan2+0xe4>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	e7e9      	b.n	800ae24 <__ieee754_atan2+0xe4>
 800ae50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae54:	4619      	mov	r1, r3
 800ae56:	e794      	b.n	800ad82 <__ieee754_atan2+0x42>
 800ae58:	a30d      	add	r3, pc, #52	; (adr r3, 800ae90 <__ieee754_atan2+0x150>)
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	f7f5 fa33 	bl	80002c8 <__aeabi_dsub>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	a10c      	add	r1, pc, #48	; (adr r1, 800ae98 <__ieee754_atan2+0x158>)
 800ae68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae6c:	f7f5 fa2c 	bl	80002c8 <__aeabi_dsub>
 800ae70:	e787      	b.n	800ad82 <__ieee754_atan2+0x42>
 800ae72:	a109      	add	r1, pc, #36	; (adr r1, 800ae98 <__ieee754_atan2+0x158>)
 800ae74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae78:	e783      	b.n	800ad82 <__ieee754_atan2+0x42>
 800ae7a:	a10b      	add	r1, pc, #44	; (adr r1, 800aea8 <__ieee754_atan2+0x168>)
 800ae7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae80:	e77f      	b.n	800ad82 <__ieee754_atan2+0x42>
 800ae82:	2000      	movs	r0, #0
 800ae84:	2100      	movs	r1, #0
 800ae86:	e77c      	b.n	800ad82 <__ieee754_atan2+0x42>
 800ae88:	a105      	add	r1, pc, #20	; (adr r1, 800aea0 <__ieee754_atan2+0x160>)
 800ae8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae8e:	e778      	b.n	800ad82 <__ieee754_atan2+0x42>
 800ae90:	33145c07 	.word	0x33145c07
 800ae94:	3ca1a626 	.word	0x3ca1a626
 800ae98:	54442d18 	.word	0x54442d18
 800ae9c:	400921fb 	.word	0x400921fb
 800aea0:	54442d18 	.word	0x54442d18
 800aea4:	3ff921fb 	.word	0x3ff921fb
 800aea8:	54442d18 	.word	0x54442d18
 800aeac:	3fe921fb 	.word	0x3fe921fb
 800aeb0:	0800bed8 	.word	0x0800bed8
 800aeb4:	0800bef0 	.word	0x0800bef0
 800aeb8:	54442d18 	.word	0x54442d18
 800aebc:	c00921fb 	.word	0xc00921fb
 800aec0:	54442d18 	.word	0x54442d18
 800aec4:	bff921fb 	.word	0xbff921fb
 800aec8:	7ff00000 	.word	0x7ff00000
 800aecc:	00000000 	.word	0x00000000

0800aed0 <__ieee754_pow>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	ed2d 8b06 	vpush	{d8-d10}
 800aed8:	b089      	sub	sp, #36	; 0x24
 800aeda:	ed8d 1b00 	vstr	d1, [sp]
 800aede:	e9dd 2900 	ldrd	r2, r9, [sp]
 800aee2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800aee6:	ea58 0102 	orrs.w	r1, r8, r2
 800aeea:	ec57 6b10 	vmov	r6, r7, d0
 800aeee:	d115      	bne.n	800af1c <__ieee754_pow+0x4c>
 800aef0:	19b3      	adds	r3, r6, r6
 800aef2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800aef6:	4152      	adcs	r2, r2
 800aef8:	4299      	cmp	r1, r3
 800aefa:	4b89      	ldr	r3, [pc, #548]	; (800b120 <__ieee754_pow+0x250>)
 800aefc:	4193      	sbcs	r3, r2
 800aefe:	f080 84d1 	bcs.w	800b8a4 <__ieee754_pow+0x9d4>
 800af02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af06:	4630      	mov	r0, r6
 800af08:	4639      	mov	r1, r7
 800af0a:	f7f5 f9df 	bl	80002cc <__adddf3>
 800af0e:	ec41 0b10 	vmov	d0, r0, r1
 800af12:	b009      	add	sp, #36	; 0x24
 800af14:	ecbd 8b06 	vpop	{d8-d10}
 800af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1c:	4b81      	ldr	r3, [pc, #516]	; (800b124 <__ieee754_pow+0x254>)
 800af1e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800af22:	429c      	cmp	r4, r3
 800af24:	ee10 aa10 	vmov	sl, s0
 800af28:	463d      	mov	r5, r7
 800af2a:	dc06      	bgt.n	800af3a <__ieee754_pow+0x6a>
 800af2c:	d101      	bne.n	800af32 <__ieee754_pow+0x62>
 800af2e:	2e00      	cmp	r6, #0
 800af30:	d1e7      	bne.n	800af02 <__ieee754_pow+0x32>
 800af32:	4598      	cmp	r8, r3
 800af34:	dc01      	bgt.n	800af3a <__ieee754_pow+0x6a>
 800af36:	d10f      	bne.n	800af58 <__ieee754_pow+0x88>
 800af38:	b172      	cbz	r2, 800af58 <__ieee754_pow+0x88>
 800af3a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800af3e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800af42:	ea55 050a 	orrs.w	r5, r5, sl
 800af46:	d1dc      	bne.n	800af02 <__ieee754_pow+0x32>
 800af48:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af4c:	18db      	adds	r3, r3, r3
 800af4e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800af52:	4152      	adcs	r2, r2
 800af54:	429d      	cmp	r5, r3
 800af56:	e7d0      	b.n	800aefa <__ieee754_pow+0x2a>
 800af58:	2d00      	cmp	r5, #0
 800af5a:	da3b      	bge.n	800afd4 <__ieee754_pow+0x104>
 800af5c:	4b72      	ldr	r3, [pc, #456]	; (800b128 <__ieee754_pow+0x258>)
 800af5e:	4598      	cmp	r8, r3
 800af60:	dc51      	bgt.n	800b006 <__ieee754_pow+0x136>
 800af62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800af66:	4598      	cmp	r8, r3
 800af68:	f340 84ab 	ble.w	800b8c2 <__ieee754_pow+0x9f2>
 800af6c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af74:	2b14      	cmp	r3, #20
 800af76:	dd0f      	ble.n	800af98 <__ieee754_pow+0xc8>
 800af78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800af7c:	fa22 f103 	lsr.w	r1, r2, r3
 800af80:	fa01 f303 	lsl.w	r3, r1, r3
 800af84:	4293      	cmp	r3, r2
 800af86:	f040 849c 	bne.w	800b8c2 <__ieee754_pow+0x9f2>
 800af8a:	f001 0101 	and.w	r1, r1, #1
 800af8e:	f1c1 0302 	rsb	r3, r1, #2
 800af92:	9304      	str	r3, [sp, #16]
 800af94:	b182      	cbz	r2, 800afb8 <__ieee754_pow+0xe8>
 800af96:	e05f      	b.n	800b058 <__ieee754_pow+0x188>
 800af98:	2a00      	cmp	r2, #0
 800af9a:	d15b      	bne.n	800b054 <__ieee754_pow+0x184>
 800af9c:	f1c3 0314 	rsb	r3, r3, #20
 800afa0:	fa48 f103 	asr.w	r1, r8, r3
 800afa4:	fa01 f303 	lsl.w	r3, r1, r3
 800afa8:	4543      	cmp	r3, r8
 800afaa:	f040 8487 	bne.w	800b8bc <__ieee754_pow+0x9ec>
 800afae:	f001 0101 	and.w	r1, r1, #1
 800afb2:	f1c1 0302 	rsb	r3, r1, #2
 800afb6:	9304      	str	r3, [sp, #16]
 800afb8:	4b5c      	ldr	r3, [pc, #368]	; (800b12c <__ieee754_pow+0x25c>)
 800afba:	4598      	cmp	r8, r3
 800afbc:	d132      	bne.n	800b024 <__ieee754_pow+0x154>
 800afbe:	f1b9 0f00 	cmp.w	r9, #0
 800afc2:	f280 8477 	bge.w	800b8b4 <__ieee754_pow+0x9e4>
 800afc6:	4959      	ldr	r1, [pc, #356]	; (800b12c <__ieee754_pow+0x25c>)
 800afc8:	4632      	mov	r2, r6
 800afca:	463b      	mov	r3, r7
 800afcc:	2000      	movs	r0, #0
 800afce:	f7f5 fc5d 	bl	800088c <__aeabi_ddiv>
 800afd2:	e79c      	b.n	800af0e <__ieee754_pow+0x3e>
 800afd4:	2300      	movs	r3, #0
 800afd6:	9304      	str	r3, [sp, #16]
 800afd8:	2a00      	cmp	r2, #0
 800afda:	d13d      	bne.n	800b058 <__ieee754_pow+0x188>
 800afdc:	4b51      	ldr	r3, [pc, #324]	; (800b124 <__ieee754_pow+0x254>)
 800afde:	4598      	cmp	r8, r3
 800afe0:	d1ea      	bne.n	800afb8 <__ieee754_pow+0xe8>
 800afe2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800afe6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800afea:	ea53 030a 	orrs.w	r3, r3, sl
 800afee:	f000 8459 	beq.w	800b8a4 <__ieee754_pow+0x9d4>
 800aff2:	4b4f      	ldr	r3, [pc, #316]	; (800b130 <__ieee754_pow+0x260>)
 800aff4:	429c      	cmp	r4, r3
 800aff6:	dd08      	ble.n	800b00a <__ieee754_pow+0x13a>
 800aff8:	f1b9 0f00 	cmp.w	r9, #0
 800affc:	f2c0 8456 	blt.w	800b8ac <__ieee754_pow+0x9dc>
 800b000:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b004:	e783      	b.n	800af0e <__ieee754_pow+0x3e>
 800b006:	2302      	movs	r3, #2
 800b008:	e7e5      	b.n	800afd6 <__ieee754_pow+0x106>
 800b00a:	f1b9 0f00 	cmp.w	r9, #0
 800b00e:	f04f 0000 	mov.w	r0, #0
 800b012:	f04f 0100 	mov.w	r1, #0
 800b016:	f6bf af7a 	bge.w	800af0e <__ieee754_pow+0x3e>
 800b01a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b01e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b022:	e774      	b.n	800af0e <__ieee754_pow+0x3e>
 800b024:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b028:	d106      	bne.n	800b038 <__ieee754_pow+0x168>
 800b02a:	4632      	mov	r2, r6
 800b02c:	463b      	mov	r3, r7
 800b02e:	4630      	mov	r0, r6
 800b030:	4639      	mov	r1, r7
 800b032:	f7f5 fb01 	bl	8000638 <__aeabi_dmul>
 800b036:	e76a      	b.n	800af0e <__ieee754_pow+0x3e>
 800b038:	4b3e      	ldr	r3, [pc, #248]	; (800b134 <__ieee754_pow+0x264>)
 800b03a:	4599      	cmp	r9, r3
 800b03c:	d10c      	bne.n	800b058 <__ieee754_pow+0x188>
 800b03e:	2d00      	cmp	r5, #0
 800b040:	db0a      	blt.n	800b058 <__ieee754_pow+0x188>
 800b042:	ec47 6b10 	vmov	d0, r6, r7
 800b046:	b009      	add	sp, #36	; 0x24
 800b048:	ecbd 8b06 	vpop	{d8-d10}
 800b04c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b050:	f7ff bd52 	b.w	800aaf8 <__ieee754_sqrt>
 800b054:	2300      	movs	r3, #0
 800b056:	9304      	str	r3, [sp, #16]
 800b058:	ec47 6b10 	vmov	d0, r6, r7
 800b05c:	f7ff fd38 	bl	800aad0 <fabs>
 800b060:	ec51 0b10 	vmov	r0, r1, d0
 800b064:	f1ba 0f00 	cmp.w	sl, #0
 800b068:	d129      	bne.n	800b0be <__ieee754_pow+0x1ee>
 800b06a:	b124      	cbz	r4, 800b076 <__ieee754_pow+0x1a6>
 800b06c:	4b2f      	ldr	r3, [pc, #188]	; (800b12c <__ieee754_pow+0x25c>)
 800b06e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b072:	429a      	cmp	r2, r3
 800b074:	d123      	bne.n	800b0be <__ieee754_pow+0x1ee>
 800b076:	f1b9 0f00 	cmp.w	r9, #0
 800b07a:	da05      	bge.n	800b088 <__ieee754_pow+0x1b8>
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	2000      	movs	r0, #0
 800b082:	492a      	ldr	r1, [pc, #168]	; (800b12c <__ieee754_pow+0x25c>)
 800b084:	f7f5 fc02 	bl	800088c <__aeabi_ddiv>
 800b088:	2d00      	cmp	r5, #0
 800b08a:	f6bf af40 	bge.w	800af0e <__ieee754_pow+0x3e>
 800b08e:	9b04      	ldr	r3, [sp, #16]
 800b090:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b094:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b098:	431c      	orrs	r4, r3
 800b09a:	d108      	bne.n	800b0ae <__ieee754_pow+0x1de>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	f7f5 f910 	bl	80002c8 <__aeabi_dsub>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	e78f      	b.n	800afce <__ieee754_pow+0xfe>
 800b0ae:	9b04      	ldr	r3, [sp, #16]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	f47f af2c 	bne.w	800af0e <__ieee754_pow+0x3e>
 800b0b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	e727      	b.n	800af0e <__ieee754_pow+0x3e>
 800b0be:	0feb      	lsrs	r3, r5, #31
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	9306      	str	r3, [sp, #24]
 800b0c4:	9a06      	ldr	r2, [sp, #24]
 800b0c6:	9b04      	ldr	r3, [sp, #16]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	d102      	bne.n	800b0d2 <__ieee754_pow+0x202>
 800b0cc:	4632      	mov	r2, r6
 800b0ce:	463b      	mov	r3, r7
 800b0d0:	e7e6      	b.n	800b0a0 <__ieee754_pow+0x1d0>
 800b0d2:	4b19      	ldr	r3, [pc, #100]	; (800b138 <__ieee754_pow+0x268>)
 800b0d4:	4598      	cmp	r8, r3
 800b0d6:	f340 80fb 	ble.w	800b2d0 <__ieee754_pow+0x400>
 800b0da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b0de:	4598      	cmp	r8, r3
 800b0e0:	4b13      	ldr	r3, [pc, #76]	; (800b130 <__ieee754_pow+0x260>)
 800b0e2:	dd0c      	ble.n	800b0fe <__ieee754_pow+0x22e>
 800b0e4:	429c      	cmp	r4, r3
 800b0e6:	dc0f      	bgt.n	800b108 <__ieee754_pow+0x238>
 800b0e8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ec:	da0f      	bge.n	800b10e <__ieee754_pow+0x23e>
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	b009      	add	sp, #36	; 0x24
 800b0f2:	ecbd 8b06 	vpop	{d8-d10}
 800b0f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fa:	f000 bcba 	b.w	800ba72 <__math_oflow>
 800b0fe:	429c      	cmp	r4, r3
 800b100:	dbf2      	blt.n	800b0e8 <__ieee754_pow+0x218>
 800b102:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <__ieee754_pow+0x25c>)
 800b104:	429c      	cmp	r4, r3
 800b106:	dd19      	ble.n	800b13c <__ieee754_pow+0x26c>
 800b108:	f1b9 0f00 	cmp.w	r9, #0
 800b10c:	dcef      	bgt.n	800b0ee <__ieee754_pow+0x21e>
 800b10e:	2000      	movs	r0, #0
 800b110:	b009      	add	sp, #36	; 0x24
 800b112:	ecbd 8b06 	vpop	{d8-d10}
 800b116:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11a:	f000 bca1 	b.w	800ba60 <__math_uflow>
 800b11e:	bf00      	nop
 800b120:	fff00000 	.word	0xfff00000
 800b124:	7ff00000 	.word	0x7ff00000
 800b128:	433fffff 	.word	0x433fffff
 800b12c:	3ff00000 	.word	0x3ff00000
 800b130:	3fefffff 	.word	0x3fefffff
 800b134:	3fe00000 	.word	0x3fe00000
 800b138:	41e00000 	.word	0x41e00000
 800b13c:	4b60      	ldr	r3, [pc, #384]	; (800b2c0 <__ieee754_pow+0x3f0>)
 800b13e:	2200      	movs	r2, #0
 800b140:	f7f5 f8c2 	bl	80002c8 <__aeabi_dsub>
 800b144:	a354      	add	r3, pc, #336	; (adr r3, 800b298 <__ieee754_pow+0x3c8>)
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	4604      	mov	r4, r0
 800b14c:	460d      	mov	r5, r1
 800b14e:	f7f5 fa73 	bl	8000638 <__aeabi_dmul>
 800b152:	a353      	add	r3, pc, #332	; (adr r3, 800b2a0 <__ieee754_pow+0x3d0>)
 800b154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b158:	4606      	mov	r6, r0
 800b15a:	460f      	mov	r7, r1
 800b15c:	4620      	mov	r0, r4
 800b15e:	4629      	mov	r1, r5
 800b160:	f7f5 fa6a 	bl	8000638 <__aeabi_dmul>
 800b164:	4b57      	ldr	r3, [pc, #348]	; (800b2c4 <__ieee754_pow+0x3f4>)
 800b166:	4682      	mov	sl, r0
 800b168:	468b      	mov	fp, r1
 800b16a:	2200      	movs	r2, #0
 800b16c:	4620      	mov	r0, r4
 800b16e:	4629      	mov	r1, r5
 800b170:	f7f5 fa62 	bl	8000638 <__aeabi_dmul>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	a14b      	add	r1, pc, #300	; (adr r1, 800b2a8 <__ieee754_pow+0x3d8>)
 800b17a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b17e:	f7f5 f8a3 	bl	80002c8 <__aeabi_dsub>
 800b182:	4622      	mov	r2, r4
 800b184:	462b      	mov	r3, r5
 800b186:	f7f5 fa57 	bl	8000638 <__aeabi_dmul>
 800b18a:	4602      	mov	r2, r0
 800b18c:	460b      	mov	r3, r1
 800b18e:	2000      	movs	r0, #0
 800b190:	494d      	ldr	r1, [pc, #308]	; (800b2c8 <__ieee754_pow+0x3f8>)
 800b192:	f7f5 f899 	bl	80002c8 <__aeabi_dsub>
 800b196:	4622      	mov	r2, r4
 800b198:	4680      	mov	r8, r0
 800b19a:	4689      	mov	r9, r1
 800b19c:	462b      	mov	r3, r5
 800b19e:	4620      	mov	r0, r4
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	f7f5 fa49 	bl	8000638 <__aeabi_dmul>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	f7f5 fa43 	bl	8000638 <__aeabi_dmul>
 800b1b2:	a33f      	add	r3, pc, #252	; (adr r3, 800b2b0 <__ieee754_pow+0x3e0>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	f7f5 fa3e 	bl	8000638 <__aeabi_dmul>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4650      	mov	r0, sl
 800b1c2:	4659      	mov	r1, fp
 800b1c4:	f7f5 f880 	bl	80002c8 <__aeabi_dsub>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	4680      	mov	r8, r0
 800b1ce:	4689      	mov	r9, r1
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	4639      	mov	r1, r7
 800b1d4:	f7f5 f87a 	bl	80002cc <__adddf3>
 800b1d8:	2000      	movs	r0, #0
 800b1da:	4632      	mov	r2, r6
 800b1dc:	463b      	mov	r3, r7
 800b1de:	4604      	mov	r4, r0
 800b1e0:	460d      	mov	r5, r1
 800b1e2:	f7f5 f871 	bl	80002c8 <__aeabi_dsub>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	f7f5 f86b 	bl	80002c8 <__aeabi_dsub>
 800b1f2:	9b04      	ldr	r3, [sp, #16]
 800b1f4:	9a06      	ldr	r2, [sp, #24]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	4682      	mov	sl, r0
 800b1fc:	468b      	mov	fp, r1
 800b1fe:	f040 81e7 	bne.w	800b5d0 <__ieee754_pow+0x700>
 800b202:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b2b8 <__ieee754_pow+0x3e8>
 800b206:	eeb0 8a47 	vmov.f32	s16, s14
 800b20a:	eef0 8a67 	vmov.f32	s17, s15
 800b20e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b212:	2600      	movs	r6, #0
 800b214:	4632      	mov	r2, r6
 800b216:	463b      	mov	r3, r7
 800b218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b21c:	f7f5 f854 	bl	80002c8 <__aeabi_dsub>
 800b220:	4622      	mov	r2, r4
 800b222:	462b      	mov	r3, r5
 800b224:	f7f5 fa08 	bl	8000638 <__aeabi_dmul>
 800b228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b22c:	4680      	mov	r8, r0
 800b22e:	4689      	mov	r9, r1
 800b230:	4650      	mov	r0, sl
 800b232:	4659      	mov	r1, fp
 800b234:	f7f5 fa00 	bl	8000638 <__aeabi_dmul>
 800b238:	4602      	mov	r2, r0
 800b23a:	460b      	mov	r3, r1
 800b23c:	4640      	mov	r0, r8
 800b23e:	4649      	mov	r1, r9
 800b240:	f7f5 f844 	bl	80002cc <__adddf3>
 800b244:	4632      	mov	r2, r6
 800b246:	463b      	mov	r3, r7
 800b248:	4680      	mov	r8, r0
 800b24a:	4689      	mov	r9, r1
 800b24c:	4620      	mov	r0, r4
 800b24e:	4629      	mov	r1, r5
 800b250:	f7f5 f9f2 	bl	8000638 <__aeabi_dmul>
 800b254:	460b      	mov	r3, r1
 800b256:	4604      	mov	r4, r0
 800b258:	460d      	mov	r5, r1
 800b25a:	4602      	mov	r2, r0
 800b25c:	4649      	mov	r1, r9
 800b25e:	4640      	mov	r0, r8
 800b260:	f7f5 f834 	bl	80002cc <__adddf3>
 800b264:	4b19      	ldr	r3, [pc, #100]	; (800b2cc <__ieee754_pow+0x3fc>)
 800b266:	4299      	cmp	r1, r3
 800b268:	ec45 4b19 	vmov	d9, r4, r5
 800b26c:	4606      	mov	r6, r0
 800b26e:	460f      	mov	r7, r1
 800b270:	468b      	mov	fp, r1
 800b272:	f340 82f0 	ble.w	800b856 <__ieee754_pow+0x986>
 800b276:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b27a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b27e:	4303      	orrs	r3, r0
 800b280:	f000 81e4 	beq.w	800b64c <__ieee754_pow+0x77c>
 800b284:	ec51 0b18 	vmov	r0, r1, d8
 800b288:	2200      	movs	r2, #0
 800b28a:	2300      	movs	r3, #0
 800b28c:	f7f5 fc46 	bl	8000b1c <__aeabi_dcmplt>
 800b290:	3800      	subs	r0, #0
 800b292:	bf18      	it	ne
 800b294:	2001      	movne	r0, #1
 800b296:	e72b      	b.n	800b0f0 <__ieee754_pow+0x220>
 800b298:	60000000 	.word	0x60000000
 800b29c:	3ff71547 	.word	0x3ff71547
 800b2a0:	f85ddf44 	.word	0xf85ddf44
 800b2a4:	3e54ae0b 	.word	0x3e54ae0b
 800b2a8:	55555555 	.word	0x55555555
 800b2ac:	3fd55555 	.word	0x3fd55555
 800b2b0:	652b82fe 	.word	0x652b82fe
 800b2b4:	3ff71547 	.word	0x3ff71547
 800b2b8:	00000000 	.word	0x00000000
 800b2bc:	bff00000 	.word	0xbff00000
 800b2c0:	3ff00000 	.word	0x3ff00000
 800b2c4:	3fd00000 	.word	0x3fd00000
 800b2c8:	3fe00000 	.word	0x3fe00000
 800b2cc:	408fffff 	.word	0x408fffff
 800b2d0:	4bd5      	ldr	r3, [pc, #852]	; (800b628 <__ieee754_pow+0x758>)
 800b2d2:	402b      	ands	r3, r5
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	b92b      	cbnz	r3, 800b2e4 <__ieee754_pow+0x414>
 800b2d8:	4bd4      	ldr	r3, [pc, #848]	; (800b62c <__ieee754_pow+0x75c>)
 800b2da:	f7f5 f9ad 	bl	8000638 <__aeabi_dmul>
 800b2de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	1523      	asrs	r3, r4, #20
 800b2e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b2ea:	4413      	add	r3, r2
 800b2ec:	9305      	str	r3, [sp, #20]
 800b2ee:	4bd0      	ldr	r3, [pc, #832]	; (800b630 <__ieee754_pow+0x760>)
 800b2f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b2f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b2f8:	429c      	cmp	r4, r3
 800b2fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b2fe:	dd08      	ble.n	800b312 <__ieee754_pow+0x442>
 800b300:	4bcc      	ldr	r3, [pc, #816]	; (800b634 <__ieee754_pow+0x764>)
 800b302:	429c      	cmp	r4, r3
 800b304:	f340 8162 	ble.w	800b5cc <__ieee754_pow+0x6fc>
 800b308:	9b05      	ldr	r3, [sp, #20]
 800b30a:	3301      	adds	r3, #1
 800b30c:	9305      	str	r3, [sp, #20]
 800b30e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b312:	2400      	movs	r4, #0
 800b314:	00e3      	lsls	r3, r4, #3
 800b316:	9307      	str	r3, [sp, #28]
 800b318:	4bc7      	ldr	r3, [pc, #796]	; (800b638 <__ieee754_pow+0x768>)
 800b31a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b31e:	ed93 7b00 	vldr	d7, [r3]
 800b322:	4629      	mov	r1, r5
 800b324:	ec53 2b17 	vmov	r2, r3, d7
 800b328:	eeb0 9a47 	vmov.f32	s18, s14
 800b32c:	eef0 9a67 	vmov.f32	s19, s15
 800b330:	4682      	mov	sl, r0
 800b332:	f7f4 ffc9 	bl	80002c8 <__aeabi_dsub>
 800b336:	4652      	mov	r2, sl
 800b338:	4606      	mov	r6, r0
 800b33a:	460f      	mov	r7, r1
 800b33c:	462b      	mov	r3, r5
 800b33e:	ec51 0b19 	vmov	r0, r1, d9
 800b342:	f7f4 ffc3 	bl	80002cc <__adddf3>
 800b346:	4602      	mov	r2, r0
 800b348:	460b      	mov	r3, r1
 800b34a:	2000      	movs	r0, #0
 800b34c:	49bb      	ldr	r1, [pc, #748]	; (800b63c <__ieee754_pow+0x76c>)
 800b34e:	f7f5 fa9d 	bl	800088c <__aeabi_ddiv>
 800b352:	ec41 0b1a 	vmov	d10, r0, r1
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4630      	mov	r0, r6
 800b35c:	4639      	mov	r1, r7
 800b35e:	f7f5 f96b 	bl	8000638 <__aeabi_dmul>
 800b362:	2300      	movs	r3, #0
 800b364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b368:	9302      	str	r3, [sp, #8]
 800b36a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b36e:	46ab      	mov	fp, r5
 800b370:	106d      	asrs	r5, r5, #1
 800b372:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b376:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b37a:	ec41 0b18 	vmov	d8, r0, r1
 800b37e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b382:	2200      	movs	r2, #0
 800b384:	4640      	mov	r0, r8
 800b386:	4649      	mov	r1, r9
 800b388:	4614      	mov	r4, r2
 800b38a:	461d      	mov	r5, r3
 800b38c:	f7f5 f954 	bl	8000638 <__aeabi_dmul>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	4630      	mov	r0, r6
 800b396:	4639      	mov	r1, r7
 800b398:	f7f4 ff96 	bl	80002c8 <__aeabi_dsub>
 800b39c:	ec53 2b19 	vmov	r2, r3, d9
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	460f      	mov	r7, r1
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	f7f4 ff8e 	bl	80002c8 <__aeabi_dsub>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	4650      	mov	r0, sl
 800b3b2:	4659      	mov	r1, fp
 800b3b4:	f7f4 ff88 	bl	80002c8 <__aeabi_dsub>
 800b3b8:	4642      	mov	r2, r8
 800b3ba:	464b      	mov	r3, r9
 800b3bc:	f7f5 f93c 	bl	8000638 <__aeabi_dmul>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	4639      	mov	r1, r7
 800b3c8:	f7f4 ff7e 	bl	80002c8 <__aeabi_dsub>
 800b3cc:	ec53 2b1a 	vmov	r2, r3, d10
 800b3d0:	f7f5 f932 	bl	8000638 <__aeabi_dmul>
 800b3d4:	ec53 2b18 	vmov	r2, r3, d8
 800b3d8:	ec41 0b19 	vmov	d9, r0, r1
 800b3dc:	ec51 0b18 	vmov	r0, r1, d8
 800b3e0:	f7f5 f92a 	bl	8000638 <__aeabi_dmul>
 800b3e4:	a37c      	add	r3, pc, #496	; (adr r3, 800b5d8 <__ieee754_pow+0x708>)
 800b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	460d      	mov	r5, r1
 800b3ee:	f7f5 f923 	bl	8000638 <__aeabi_dmul>
 800b3f2:	a37b      	add	r3, pc, #492	; (adr r3, 800b5e0 <__ieee754_pow+0x710>)
 800b3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f8:	f7f4 ff68 	bl	80002cc <__adddf3>
 800b3fc:	4622      	mov	r2, r4
 800b3fe:	462b      	mov	r3, r5
 800b400:	f7f5 f91a 	bl	8000638 <__aeabi_dmul>
 800b404:	a378      	add	r3, pc, #480	; (adr r3, 800b5e8 <__ieee754_pow+0x718>)
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	f7f4 ff5f 	bl	80002cc <__adddf3>
 800b40e:	4622      	mov	r2, r4
 800b410:	462b      	mov	r3, r5
 800b412:	f7f5 f911 	bl	8000638 <__aeabi_dmul>
 800b416:	a376      	add	r3, pc, #472	; (adr r3, 800b5f0 <__ieee754_pow+0x720>)
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	f7f4 ff56 	bl	80002cc <__adddf3>
 800b420:	4622      	mov	r2, r4
 800b422:	462b      	mov	r3, r5
 800b424:	f7f5 f908 	bl	8000638 <__aeabi_dmul>
 800b428:	a373      	add	r3, pc, #460	; (adr r3, 800b5f8 <__ieee754_pow+0x728>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f7f4 ff4d 	bl	80002cc <__adddf3>
 800b432:	4622      	mov	r2, r4
 800b434:	462b      	mov	r3, r5
 800b436:	f7f5 f8ff 	bl	8000638 <__aeabi_dmul>
 800b43a:	a371      	add	r3, pc, #452	; (adr r3, 800b600 <__ieee754_pow+0x730>)
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	f7f4 ff44 	bl	80002cc <__adddf3>
 800b444:	4622      	mov	r2, r4
 800b446:	4606      	mov	r6, r0
 800b448:	460f      	mov	r7, r1
 800b44a:	462b      	mov	r3, r5
 800b44c:	4620      	mov	r0, r4
 800b44e:	4629      	mov	r1, r5
 800b450:	f7f5 f8f2 	bl	8000638 <__aeabi_dmul>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	4630      	mov	r0, r6
 800b45a:	4639      	mov	r1, r7
 800b45c:	f7f5 f8ec 	bl	8000638 <__aeabi_dmul>
 800b460:	4642      	mov	r2, r8
 800b462:	4604      	mov	r4, r0
 800b464:	460d      	mov	r5, r1
 800b466:	464b      	mov	r3, r9
 800b468:	ec51 0b18 	vmov	r0, r1, d8
 800b46c:	f7f4 ff2e 	bl	80002cc <__adddf3>
 800b470:	ec53 2b19 	vmov	r2, r3, d9
 800b474:	f7f5 f8e0 	bl	8000638 <__aeabi_dmul>
 800b478:	4622      	mov	r2, r4
 800b47a:	462b      	mov	r3, r5
 800b47c:	f7f4 ff26 	bl	80002cc <__adddf3>
 800b480:	4642      	mov	r2, r8
 800b482:	4682      	mov	sl, r0
 800b484:	468b      	mov	fp, r1
 800b486:	464b      	mov	r3, r9
 800b488:	4640      	mov	r0, r8
 800b48a:	4649      	mov	r1, r9
 800b48c:	f7f5 f8d4 	bl	8000638 <__aeabi_dmul>
 800b490:	4b6b      	ldr	r3, [pc, #428]	; (800b640 <__ieee754_pow+0x770>)
 800b492:	2200      	movs	r2, #0
 800b494:	4606      	mov	r6, r0
 800b496:	460f      	mov	r7, r1
 800b498:	f7f4 ff18 	bl	80002cc <__adddf3>
 800b49c:	4652      	mov	r2, sl
 800b49e:	465b      	mov	r3, fp
 800b4a0:	f7f4 ff14 	bl	80002cc <__adddf3>
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	460d      	mov	r5, r1
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	f7f5 f8c1 	bl	8000638 <__aeabi_dmul>
 800b4b6:	4b62      	ldr	r3, [pc, #392]	; (800b640 <__ieee754_pow+0x770>)
 800b4b8:	4680      	mov	r8, r0
 800b4ba:	4689      	mov	r9, r1
 800b4bc:	2200      	movs	r2, #0
 800b4be:	4620      	mov	r0, r4
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	f7f4 ff01 	bl	80002c8 <__aeabi_dsub>
 800b4c6:	4632      	mov	r2, r6
 800b4c8:	463b      	mov	r3, r7
 800b4ca:	f7f4 fefd 	bl	80002c8 <__aeabi_dsub>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4650      	mov	r0, sl
 800b4d4:	4659      	mov	r1, fp
 800b4d6:	f7f4 fef7 	bl	80002c8 <__aeabi_dsub>
 800b4da:	ec53 2b18 	vmov	r2, r3, d8
 800b4de:	f7f5 f8ab 	bl	8000638 <__aeabi_dmul>
 800b4e2:	4622      	mov	r2, r4
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	460f      	mov	r7, r1
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	ec51 0b19 	vmov	r0, r1, d9
 800b4ee:	f7f5 f8a3 	bl	8000638 <__aeabi_dmul>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	f7f4 fee7 	bl	80002cc <__adddf3>
 800b4fe:	4606      	mov	r6, r0
 800b500:	460f      	mov	r7, r1
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	4640      	mov	r0, r8
 800b508:	4649      	mov	r1, r9
 800b50a:	f7f4 fedf 	bl	80002cc <__adddf3>
 800b50e:	a33e      	add	r3, pc, #248	; (adr r3, 800b608 <__ieee754_pow+0x738>)
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	2000      	movs	r0, #0
 800b516:	4604      	mov	r4, r0
 800b518:	460d      	mov	r5, r1
 800b51a:	f7f5 f88d 	bl	8000638 <__aeabi_dmul>
 800b51e:	4642      	mov	r2, r8
 800b520:	ec41 0b18 	vmov	d8, r0, r1
 800b524:	464b      	mov	r3, r9
 800b526:	4620      	mov	r0, r4
 800b528:	4629      	mov	r1, r5
 800b52a:	f7f4 fecd 	bl	80002c8 <__aeabi_dsub>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	4630      	mov	r0, r6
 800b534:	4639      	mov	r1, r7
 800b536:	f7f4 fec7 	bl	80002c8 <__aeabi_dsub>
 800b53a:	a335      	add	r3, pc, #212	; (adr r3, 800b610 <__ieee754_pow+0x740>)
 800b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b540:	f7f5 f87a 	bl	8000638 <__aeabi_dmul>
 800b544:	a334      	add	r3, pc, #208	; (adr r3, 800b618 <__ieee754_pow+0x748>)
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	4606      	mov	r6, r0
 800b54c:	460f      	mov	r7, r1
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f5 f871 	bl	8000638 <__aeabi_dmul>
 800b556:	4602      	mov	r2, r0
 800b558:	460b      	mov	r3, r1
 800b55a:	4630      	mov	r0, r6
 800b55c:	4639      	mov	r1, r7
 800b55e:	f7f4 feb5 	bl	80002cc <__adddf3>
 800b562:	9a07      	ldr	r2, [sp, #28]
 800b564:	4b37      	ldr	r3, [pc, #220]	; (800b644 <__ieee754_pow+0x774>)
 800b566:	4413      	add	r3, r2
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	f7f4 feae 	bl	80002cc <__adddf3>
 800b570:	4682      	mov	sl, r0
 800b572:	9805      	ldr	r0, [sp, #20]
 800b574:	468b      	mov	fp, r1
 800b576:	f7f4 fff5 	bl	8000564 <__aeabi_i2d>
 800b57a:	9a07      	ldr	r2, [sp, #28]
 800b57c:	4b32      	ldr	r3, [pc, #200]	; (800b648 <__ieee754_pow+0x778>)
 800b57e:	4413      	add	r3, r2
 800b580:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b584:	4606      	mov	r6, r0
 800b586:	460f      	mov	r7, r1
 800b588:	4652      	mov	r2, sl
 800b58a:	465b      	mov	r3, fp
 800b58c:	ec51 0b18 	vmov	r0, r1, d8
 800b590:	f7f4 fe9c 	bl	80002cc <__adddf3>
 800b594:	4642      	mov	r2, r8
 800b596:	464b      	mov	r3, r9
 800b598:	f7f4 fe98 	bl	80002cc <__adddf3>
 800b59c:	4632      	mov	r2, r6
 800b59e:	463b      	mov	r3, r7
 800b5a0:	f7f4 fe94 	bl	80002cc <__adddf3>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	4632      	mov	r2, r6
 800b5a8:	463b      	mov	r3, r7
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	460d      	mov	r5, r1
 800b5ae:	f7f4 fe8b 	bl	80002c8 <__aeabi_dsub>
 800b5b2:	4642      	mov	r2, r8
 800b5b4:	464b      	mov	r3, r9
 800b5b6:	f7f4 fe87 	bl	80002c8 <__aeabi_dsub>
 800b5ba:	ec53 2b18 	vmov	r2, r3, d8
 800b5be:	f7f4 fe83 	bl	80002c8 <__aeabi_dsub>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4650      	mov	r0, sl
 800b5c8:	4659      	mov	r1, fp
 800b5ca:	e610      	b.n	800b1ee <__ieee754_pow+0x31e>
 800b5cc:	2401      	movs	r4, #1
 800b5ce:	e6a1      	b.n	800b314 <__ieee754_pow+0x444>
 800b5d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b620 <__ieee754_pow+0x750>
 800b5d4:	e617      	b.n	800b206 <__ieee754_pow+0x336>
 800b5d6:	bf00      	nop
 800b5d8:	4a454eef 	.word	0x4a454eef
 800b5dc:	3fca7e28 	.word	0x3fca7e28
 800b5e0:	93c9db65 	.word	0x93c9db65
 800b5e4:	3fcd864a 	.word	0x3fcd864a
 800b5e8:	a91d4101 	.word	0xa91d4101
 800b5ec:	3fd17460 	.word	0x3fd17460
 800b5f0:	518f264d 	.word	0x518f264d
 800b5f4:	3fd55555 	.word	0x3fd55555
 800b5f8:	db6fabff 	.word	0xdb6fabff
 800b5fc:	3fdb6db6 	.word	0x3fdb6db6
 800b600:	33333303 	.word	0x33333303
 800b604:	3fe33333 	.word	0x3fe33333
 800b608:	e0000000 	.word	0xe0000000
 800b60c:	3feec709 	.word	0x3feec709
 800b610:	dc3a03fd 	.word	0xdc3a03fd
 800b614:	3feec709 	.word	0x3feec709
 800b618:	145b01f5 	.word	0x145b01f5
 800b61c:	be3e2fe0 	.word	0xbe3e2fe0
 800b620:	00000000 	.word	0x00000000
 800b624:	3ff00000 	.word	0x3ff00000
 800b628:	7ff00000 	.word	0x7ff00000
 800b62c:	43400000 	.word	0x43400000
 800b630:	0003988e 	.word	0x0003988e
 800b634:	000bb679 	.word	0x000bb679
 800b638:	0800bf08 	.word	0x0800bf08
 800b63c:	3ff00000 	.word	0x3ff00000
 800b640:	40080000 	.word	0x40080000
 800b644:	0800bf28 	.word	0x0800bf28
 800b648:	0800bf18 	.word	0x0800bf18
 800b64c:	a3b3      	add	r3, pc, #716	; (adr r3, 800b91c <__ieee754_pow+0xa4c>)
 800b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b652:	4640      	mov	r0, r8
 800b654:	4649      	mov	r1, r9
 800b656:	f7f4 fe39 	bl	80002cc <__adddf3>
 800b65a:	4622      	mov	r2, r4
 800b65c:	ec41 0b1a 	vmov	d10, r0, r1
 800b660:	462b      	mov	r3, r5
 800b662:	4630      	mov	r0, r6
 800b664:	4639      	mov	r1, r7
 800b666:	f7f4 fe2f 	bl	80002c8 <__aeabi_dsub>
 800b66a:	4602      	mov	r2, r0
 800b66c:	460b      	mov	r3, r1
 800b66e:	ec51 0b1a 	vmov	r0, r1, d10
 800b672:	f7f5 fa71 	bl	8000b58 <__aeabi_dcmpgt>
 800b676:	2800      	cmp	r0, #0
 800b678:	f47f ae04 	bne.w	800b284 <__ieee754_pow+0x3b4>
 800b67c:	4aa2      	ldr	r2, [pc, #648]	; (800b908 <__ieee754_pow+0xa38>)
 800b67e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b682:	4293      	cmp	r3, r2
 800b684:	f340 8107 	ble.w	800b896 <__ieee754_pow+0x9c6>
 800b688:	151b      	asrs	r3, r3, #20
 800b68a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b68e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b692:	fa4a fa03 	asr.w	sl, sl, r3
 800b696:	44da      	add	sl, fp
 800b698:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b69c:	489b      	ldr	r0, [pc, #620]	; (800b90c <__ieee754_pow+0xa3c>)
 800b69e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b6a2:	4108      	asrs	r0, r1
 800b6a4:	ea00 030a 	and.w	r3, r0, sl
 800b6a8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b6ac:	f1c1 0114 	rsb	r1, r1, #20
 800b6b0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b6b4:	fa4a fa01 	asr.w	sl, sl, r1
 800b6b8:	f1bb 0f00 	cmp.w	fp, #0
 800b6bc:	f04f 0200 	mov.w	r2, #0
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	bfb8      	it	lt
 800b6c6:	f1ca 0a00 	rsblt	sl, sl, #0
 800b6ca:	f7f4 fdfd 	bl	80002c8 <__aeabi_dsub>
 800b6ce:	ec41 0b19 	vmov	d9, r0, r1
 800b6d2:	4642      	mov	r2, r8
 800b6d4:	464b      	mov	r3, r9
 800b6d6:	ec51 0b19 	vmov	r0, r1, d9
 800b6da:	f7f4 fdf7 	bl	80002cc <__adddf3>
 800b6de:	a37a      	add	r3, pc, #488	; (adr r3, 800b8c8 <__ieee754_pow+0x9f8>)
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	460d      	mov	r5, r1
 800b6ea:	f7f4 ffa5 	bl	8000638 <__aeabi_dmul>
 800b6ee:	ec53 2b19 	vmov	r2, r3, d9
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460f      	mov	r7, r1
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	f7f4 fde5 	bl	80002c8 <__aeabi_dsub>
 800b6fe:	4602      	mov	r2, r0
 800b700:	460b      	mov	r3, r1
 800b702:	4640      	mov	r0, r8
 800b704:	4649      	mov	r1, r9
 800b706:	f7f4 fddf 	bl	80002c8 <__aeabi_dsub>
 800b70a:	a371      	add	r3, pc, #452	; (adr r3, 800b8d0 <__ieee754_pow+0xa00>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	f7f4 ff92 	bl	8000638 <__aeabi_dmul>
 800b714:	a370      	add	r3, pc, #448	; (adr r3, 800b8d8 <__ieee754_pow+0xa08>)
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	4680      	mov	r8, r0
 800b71c:	4689      	mov	r9, r1
 800b71e:	4620      	mov	r0, r4
 800b720:	4629      	mov	r1, r5
 800b722:	f7f4 ff89 	bl	8000638 <__aeabi_dmul>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	4640      	mov	r0, r8
 800b72c:	4649      	mov	r1, r9
 800b72e:	f7f4 fdcd 	bl	80002cc <__adddf3>
 800b732:	4604      	mov	r4, r0
 800b734:	460d      	mov	r5, r1
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	4630      	mov	r0, r6
 800b73c:	4639      	mov	r1, r7
 800b73e:	f7f4 fdc5 	bl	80002cc <__adddf3>
 800b742:	4632      	mov	r2, r6
 800b744:	463b      	mov	r3, r7
 800b746:	4680      	mov	r8, r0
 800b748:	4689      	mov	r9, r1
 800b74a:	f7f4 fdbd 	bl	80002c8 <__aeabi_dsub>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	4620      	mov	r0, r4
 800b754:	4629      	mov	r1, r5
 800b756:	f7f4 fdb7 	bl	80002c8 <__aeabi_dsub>
 800b75a:	4642      	mov	r2, r8
 800b75c:	4606      	mov	r6, r0
 800b75e:	460f      	mov	r7, r1
 800b760:	464b      	mov	r3, r9
 800b762:	4640      	mov	r0, r8
 800b764:	4649      	mov	r1, r9
 800b766:	f7f4 ff67 	bl	8000638 <__aeabi_dmul>
 800b76a:	a35d      	add	r3, pc, #372	; (adr r3, 800b8e0 <__ieee754_pow+0xa10>)
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	4604      	mov	r4, r0
 800b772:	460d      	mov	r5, r1
 800b774:	f7f4 ff60 	bl	8000638 <__aeabi_dmul>
 800b778:	a35b      	add	r3, pc, #364	; (adr r3, 800b8e8 <__ieee754_pow+0xa18>)
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	f7f4 fda3 	bl	80002c8 <__aeabi_dsub>
 800b782:	4622      	mov	r2, r4
 800b784:	462b      	mov	r3, r5
 800b786:	f7f4 ff57 	bl	8000638 <__aeabi_dmul>
 800b78a:	a359      	add	r3, pc, #356	; (adr r3, 800b8f0 <__ieee754_pow+0xa20>)
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	f7f4 fd9c 	bl	80002cc <__adddf3>
 800b794:	4622      	mov	r2, r4
 800b796:	462b      	mov	r3, r5
 800b798:	f7f4 ff4e 	bl	8000638 <__aeabi_dmul>
 800b79c:	a356      	add	r3, pc, #344	; (adr r3, 800b8f8 <__ieee754_pow+0xa28>)
 800b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a2:	f7f4 fd91 	bl	80002c8 <__aeabi_dsub>
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	462b      	mov	r3, r5
 800b7aa:	f7f4 ff45 	bl	8000638 <__aeabi_dmul>
 800b7ae:	a354      	add	r3, pc, #336	; (adr r3, 800b900 <__ieee754_pow+0xa30>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	f7f4 fd8a 	bl	80002cc <__adddf3>
 800b7b8:	4622      	mov	r2, r4
 800b7ba:	462b      	mov	r3, r5
 800b7bc:	f7f4 ff3c 	bl	8000638 <__aeabi_dmul>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	4649      	mov	r1, r9
 800b7c8:	f7f4 fd7e 	bl	80002c8 <__aeabi_dsub>
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	4640      	mov	r0, r8
 800b7d6:	4649      	mov	r1, r9
 800b7d8:	f7f4 ff2e 	bl	8000638 <__aeabi_dmul>
 800b7dc:	2200      	movs	r2, #0
 800b7de:	ec41 0b19 	vmov	d9, r0, r1
 800b7e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	f7f4 fd6d 	bl	80002c8 <__aeabi_dsub>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	ec51 0b19 	vmov	r0, r1, d9
 800b7f6:	f7f5 f849 	bl	800088c <__aeabi_ddiv>
 800b7fa:	4632      	mov	r2, r6
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	460d      	mov	r5, r1
 800b800:	463b      	mov	r3, r7
 800b802:	4640      	mov	r0, r8
 800b804:	4649      	mov	r1, r9
 800b806:	f7f4 ff17 	bl	8000638 <__aeabi_dmul>
 800b80a:	4632      	mov	r2, r6
 800b80c:	463b      	mov	r3, r7
 800b80e:	f7f4 fd5d 	bl	80002cc <__adddf3>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4620      	mov	r0, r4
 800b818:	4629      	mov	r1, r5
 800b81a:	f7f4 fd55 	bl	80002c8 <__aeabi_dsub>
 800b81e:	4642      	mov	r2, r8
 800b820:	464b      	mov	r3, r9
 800b822:	f7f4 fd51 	bl	80002c8 <__aeabi_dsub>
 800b826:	460b      	mov	r3, r1
 800b828:	4602      	mov	r2, r0
 800b82a:	4939      	ldr	r1, [pc, #228]	; (800b910 <__ieee754_pow+0xa40>)
 800b82c:	2000      	movs	r0, #0
 800b82e:	f7f4 fd4b 	bl	80002c8 <__aeabi_dsub>
 800b832:	ec41 0b10 	vmov	d0, r0, r1
 800b836:	ee10 3a90 	vmov	r3, s1
 800b83a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b83e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b842:	da2b      	bge.n	800b89c <__ieee754_pow+0x9cc>
 800b844:	4650      	mov	r0, sl
 800b846:	f000 f86f 	bl	800b928 <scalbn>
 800b84a:	ec51 0b10 	vmov	r0, r1, d0
 800b84e:	ec53 2b18 	vmov	r2, r3, d8
 800b852:	f7ff bbee 	b.w	800b032 <__ieee754_pow+0x162>
 800b856:	4b2f      	ldr	r3, [pc, #188]	; (800b914 <__ieee754_pow+0xa44>)
 800b858:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b85c:	429e      	cmp	r6, r3
 800b85e:	f77f af0d 	ble.w	800b67c <__ieee754_pow+0x7ac>
 800b862:	4b2d      	ldr	r3, [pc, #180]	; (800b918 <__ieee754_pow+0xa48>)
 800b864:	440b      	add	r3, r1
 800b866:	4303      	orrs	r3, r0
 800b868:	d009      	beq.n	800b87e <__ieee754_pow+0x9ae>
 800b86a:	ec51 0b18 	vmov	r0, r1, d8
 800b86e:	2200      	movs	r2, #0
 800b870:	2300      	movs	r3, #0
 800b872:	f7f5 f953 	bl	8000b1c <__aeabi_dcmplt>
 800b876:	3800      	subs	r0, #0
 800b878:	bf18      	it	ne
 800b87a:	2001      	movne	r0, #1
 800b87c:	e448      	b.n	800b110 <__ieee754_pow+0x240>
 800b87e:	4622      	mov	r2, r4
 800b880:	462b      	mov	r3, r5
 800b882:	f7f4 fd21 	bl	80002c8 <__aeabi_dsub>
 800b886:	4642      	mov	r2, r8
 800b888:	464b      	mov	r3, r9
 800b88a:	f7f5 f95b 	bl	8000b44 <__aeabi_dcmpge>
 800b88e:	2800      	cmp	r0, #0
 800b890:	f43f aef4 	beq.w	800b67c <__ieee754_pow+0x7ac>
 800b894:	e7e9      	b.n	800b86a <__ieee754_pow+0x99a>
 800b896:	f04f 0a00 	mov.w	sl, #0
 800b89a:	e71a      	b.n	800b6d2 <__ieee754_pow+0x802>
 800b89c:	ec51 0b10 	vmov	r0, r1, d0
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	e7d4      	b.n	800b84e <__ieee754_pow+0x97e>
 800b8a4:	491a      	ldr	r1, [pc, #104]	; (800b910 <__ieee754_pow+0xa40>)
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	f7ff bb31 	b.w	800af0e <__ieee754_pow+0x3e>
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	f7ff bb2d 	b.w	800af0e <__ieee754_pow+0x3e>
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	f7ff bb29 	b.w	800af0e <__ieee754_pow+0x3e>
 800b8bc:	9204      	str	r2, [sp, #16]
 800b8be:	f7ff bb7b 	b.w	800afb8 <__ieee754_pow+0xe8>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f7ff bb65 	b.w	800af92 <__ieee754_pow+0xc2>
 800b8c8:	00000000 	.word	0x00000000
 800b8cc:	3fe62e43 	.word	0x3fe62e43
 800b8d0:	fefa39ef 	.word	0xfefa39ef
 800b8d4:	3fe62e42 	.word	0x3fe62e42
 800b8d8:	0ca86c39 	.word	0x0ca86c39
 800b8dc:	be205c61 	.word	0xbe205c61
 800b8e0:	72bea4d0 	.word	0x72bea4d0
 800b8e4:	3e663769 	.word	0x3e663769
 800b8e8:	c5d26bf1 	.word	0xc5d26bf1
 800b8ec:	3ebbbd41 	.word	0x3ebbbd41
 800b8f0:	af25de2c 	.word	0xaf25de2c
 800b8f4:	3f11566a 	.word	0x3f11566a
 800b8f8:	16bebd93 	.word	0x16bebd93
 800b8fc:	3f66c16c 	.word	0x3f66c16c
 800b900:	5555553e 	.word	0x5555553e
 800b904:	3fc55555 	.word	0x3fc55555
 800b908:	3fe00000 	.word	0x3fe00000
 800b90c:	fff00000 	.word	0xfff00000
 800b910:	3ff00000 	.word	0x3ff00000
 800b914:	4090cbff 	.word	0x4090cbff
 800b918:	3f6f3400 	.word	0x3f6f3400
 800b91c:	652b82fe 	.word	0x652b82fe
 800b920:	3c971547 	.word	0x3c971547
 800b924:	00000000 	.word	0x00000000

0800b928 <scalbn>:
 800b928:	b570      	push	{r4, r5, r6, lr}
 800b92a:	ec55 4b10 	vmov	r4, r5, d0
 800b92e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b932:	4606      	mov	r6, r0
 800b934:	462b      	mov	r3, r5
 800b936:	b999      	cbnz	r1, 800b960 <scalbn+0x38>
 800b938:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b93c:	4323      	orrs	r3, r4
 800b93e:	d03f      	beq.n	800b9c0 <scalbn+0x98>
 800b940:	4b35      	ldr	r3, [pc, #212]	; (800ba18 <scalbn+0xf0>)
 800b942:	4629      	mov	r1, r5
 800b944:	ee10 0a10 	vmov	r0, s0
 800b948:	2200      	movs	r2, #0
 800b94a:	f7f4 fe75 	bl	8000638 <__aeabi_dmul>
 800b94e:	4b33      	ldr	r3, [pc, #204]	; (800ba1c <scalbn+0xf4>)
 800b950:	429e      	cmp	r6, r3
 800b952:	4604      	mov	r4, r0
 800b954:	460d      	mov	r5, r1
 800b956:	da10      	bge.n	800b97a <scalbn+0x52>
 800b958:	a327      	add	r3, pc, #156	; (adr r3, 800b9f8 <scalbn+0xd0>)
 800b95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95e:	e01f      	b.n	800b9a0 <scalbn+0x78>
 800b960:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b964:	4291      	cmp	r1, r2
 800b966:	d10c      	bne.n	800b982 <scalbn+0x5a>
 800b968:	ee10 2a10 	vmov	r2, s0
 800b96c:	4620      	mov	r0, r4
 800b96e:	4629      	mov	r1, r5
 800b970:	f7f4 fcac 	bl	80002cc <__adddf3>
 800b974:	4604      	mov	r4, r0
 800b976:	460d      	mov	r5, r1
 800b978:	e022      	b.n	800b9c0 <scalbn+0x98>
 800b97a:	460b      	mov	r3, r1
 800b97c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b980:	3936      	subs	r1, #54	; 0x36
 800b982:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b986:	4296      	cmp	r6, r2
 800b988:	dd0d      	ble.n	800b9a6 <scalbn+0x7e>
 800b98a:	2d00      	cmp	r5, #0
 800b98c:	a11c      	add	r1, pc, #112	; (adr r1, 800ba00 <scalbn+0xd8>)
 800b98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b992:	da02      	bge.n	800b99a <scalbn+0x72>
 800b994:	a11c      	add	r1, pc, #112	; (adr r1, 800ba08 <scalbn+0xe0>)
 800b996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b99a:	a319      	add	r3, pc, #100	; (adr r3, 800ba00 <scalbn+0xd8>)
 800b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a0:	f7f4 fe4a 	bl	8000638 <__aeabi_dmul>
 800b9a4:	e7e6      	b.n	800b974 <scalbn+0x4c>
 800b9a6:	1872      	adds	r2, r6, r1
 800b9a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b9ac:	428a      	cmp	r2, r1
 800b9ae:	dcec      	bgt.n	800b98a <scalbn+0x62>
 800b9b0:	2a00      	cmp	r2, #0
 800b9b2:	dd08      	ble.n	800b9c6 <scalbn+0x9e>
 800b9b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b9c0:	ec45 4b10 	vmov	d0, r4, r5
 800b9c4:	bd70      	pop	{r4, r5, r6, pc}
 800b9c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b9ca:	da08      	bge.n	800b9de <scalbn+0xb6>
 800b9cc:	2d00      	cmp	r5, #0
 800b9ce:	a10a      	add	r1, pc, #40	; (adr r1, 800b9f8 <scalbn+0xd0>)
 800b9d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d4:	dac0      	bge.n	800b958 <scalbn+0x30>
 800b9d6:	a10e      	add	r1, pc, #56	; (adr r1, 800ba10 <scalbn+0xe8>)
 800b9d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9dc:	e7bc      	b.n	800b958 <scalbn+0x30>
 800b9de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9e2:	3236      	adds	r2, #54	; 0x36
 800b9e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	4b0c      	ldr	r3, [pc, #48]	; (800ba20 <scalbn+0xf8>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	e7d5      	b.n	800b9a0 <scalbn+0x78>
 800b9f4:	f3af 8000 	nop.w
 800b9f8:	c2f8f359 	.word	0xc2f8f359
 800b9fc:	01a56e1f 	.word	0x01a56e1f
 800ba00:	8800759c 	.word	0x8800759c
 800ba04:	7e37e43c 	.word	0x7e37e43c
 800ba08:	8800759c 	.word	0x8800759c
 800ba0c:	fe37e43c 	.word	0xfe37e43c
 800ba10:	c2f8f359 	.word	0xc2f8f359
 800ba14:	81a56e1f 	.word	0x81a56e1f
 800ba18:	43500000 	.word	0x43500000
 800ba1c:	ffff3cb0 	.word	0xffff3cb0
 800ba20:	3c900000 	.word	0x3c900000

0800ba24 <with_errno>:
 800ba24:	b570      	push	{r4, r5, r6, lr}
 800ba26:	4604      	mov	r4, r0
 800ba28:	460d      	mov	r5, r1
 800ba2a:	4616      	mov	r6, r2
 800ba2c:	f7fc ffa4 	bl	8008978 <__errno>
 800ba30:	4629      	mov	r1, r5
 800ba32:	6006      	str	r6, [r0, #0]
 800ba34:	4620      	mov	r0, r4
 800ba36:	bd70      	pop	{r4, r5, r6, pc}

0800ba38 <xflow>:
 800ba38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba3a:	4614      	mov	r4, r2
 800ba3c:	461d      	mov	r5, r3
 800ba3e:	b108      	cbz	r0, 800ba44 <xflow+0xc>
 800ba40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba44:	e9cd 2300 	strd	r2, r3, [sp]
 800ba48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	4629      	mov	r1, r5
 800ba50:	f7f4 fdf2 	bl	8000638 <__aeabi_dmul>
 800ba54:	2222      	movs	r2, #34	; 0x22
 800ba56:	b003      	add	sp, #12
 800ba58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba5c:	f7ff bfe2 	b.w	800ba24 <with_errno>

0800ba60 <__math_uflow>:
 800ba60:	b508      	push	{r3, lr}
 800ba62:	2200      	movs	r2, #0
 800ba64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba68:	f7ff ffe6 	bl	800ba38 <xflow>
 800ba6c:	ec41 0b10 	vmov	d0, r0, r1
 800ba70:	bd08      	pop	{r3, pc}

0800ba72 <__math_oflow>:
 800ba72:	b508      	push	{r3, lr}
 800ba74:	2200      	movs	r2, #0
 800ba76:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ba7a:	f7ff ffdd 	bl	800ba38 <xflow>
 800ba7e:	ec41 0b10 	vmov	d0, r0, r1
 800ba82:	bd08      	pop	{r3, pc}

0800ba84 <_init>:
 800ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba86:	bf00      	nop
 800ba88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8a:	bc08      	pop	{r3}
 800ba8c:	469e      	mov	lr, r3
 800ba8e:	4770      	bx	lr

0800ba90 <_fini>:
 800ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba92:	bf00      	nop
 800ba94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba96:	bc08      	pop	{r3}
 800ba98:	469e      	mov	lr, r3
 800ba9a:	4770      	bx	lr
