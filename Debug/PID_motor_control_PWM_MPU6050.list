
PID_motor_control_PWM_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a734  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800a908  0800a908  0001a908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad88  0800ad88  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad88  0800ad88  0001ad88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad90  0800ad90  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad90  0800ad90  0001ad90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad94  0800ad94  0001ad94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800ad98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000278  0800b010  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800b010  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014324  00000000  00000000  000202eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df8  00000000  00000000  0003460f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00037408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec5  00000000  00000000  000386c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025705  00000000  00000000  0003958d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a3d  00000000  00000000  0005ec92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d93  00000000  00000000  000776cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000644c  00000000  00000000  0015a464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001608b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000278 	.word	0x20000278
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a8ec 	.word	0x0800a8ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000027c 	.word	0x2000027c
 800020c:	0800a8ec 	.word	0x0800a8ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	0000      	movs	r0, r0
	...

08000fc8 <CalculateAccAngle>:
//
#include "calculate_angle.h"

// correct angle reading function +-3 error
void CalculateAccAngle(Angle_t* angle, MPU6050_t* mpu)
{
 8000fc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
//	angle->acc_roll = atan2(mpu->y_acc_raw, sqrt(pow(mpu->x_acc_raw, 2) + pow(mpu->z_acc_raw, 2))) * 180 / M_PI;
//	angle->acc_pitch = atan2(-mpu->x_acc_raw, sqrt(pow(mpu->y_acc_raw, 2) + pow(mpu->z_acc_raw, 2))) * 180 / M_PI;

	angle->acc_roll = atan2(mpu->Accel_Y_RAW, sqrt(pow(mpu->Accel_X_RAW, 2) + pow(mpu->Accel_Z_RAW, 2))) * 180 / M_PI;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fac2 	bl	8000564 <__aeabi_i2d>
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	460d      	mov	r5, r1
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff faba 	bl	8000564 <__aeabi_i2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8001150 <CalculateAccAngle+0x188>
 8000ff8:	ec43 2b10 	vmov	d0, r2, r3
 8000ffc:	f008 faa6 	bl	800954c <pow>
 8001000:	ec59 8b10 	vmov	r8, r9, d0
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff faaa 	bl	8000564 <__aeabi_i2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8001150 <CalculateAccAngle+0x188>
 8001018:	ec43 2b10 	vmov	d0, r2, r3
 800101c:	f008 fa96 	bl	800954c <pow>
 8001020:	ec53 2b10 	vmov	r2, r3, d0
 8001024:	4640      	mov	r0, r8
 8001026:	4649      	mov	r1, r9
 8001028:	f7ff f950 	bl	80002cc <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	ec43 2b17 	vmov	d7, r2, r3
 8001034:	eeb0 0a47 	vmov.f32	s0, s14
 8001038:	eef0 0a67 	vmov.f32	s1, s15
 800103c:	f008 faf6 	bl	800962c <sqrt>
 8001040:	eeb0 7a40 	vmov.f32	s14, s0
 8001044:	eef0 7a60 	vmov.f32	s15, s1
 8001048:	eeb0 1a47 	vmov.f32	s2, s14
 800104c:	eef0 1a67 	vmov.f32	s3, s15
 8001050:	ec45 4b10 	vmov	d0, r4, r5
 8001054:	f008 fa78 	bl	8009548 <atan2>
 8001058:	ec51 0b10 	vmov	r0, r1, d0
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <CalculateAccAngle+0x198>)
 8001062:	f7ff fae9 	bl	8000638 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	a33a      	add	r3, pc, #232	; (adr r3, 8001158 <CalculateAccAngle+0x190>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fc0a 	bl	800088c <__aeabi_ddiv>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fdd2 	bl	8000c28 <__aeabi_d2f>
 8001084:	4602      	mov	r2, r0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
	angle->acc_pitch = atan2(-mpu->Accel_X_RAW, sqrt(pow(mpu->Accel_Y_RAW, 2) + pow(mpu->Accel_Z_RAW, 2))) * 180 / M_PI;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	425b      	negs	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa66 	bl	8000564 <__aeabi_i2d>
 8001098:	4604      	mov	r4, r0
 800109a:	460d      	mov	r5, r1
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa5e 	bl	8000564 <__aeabi_i2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001150 <CalculateAccAngle+0x188>
 80010b0:	ec43 2b10 	vmov	d0, r2, r3
 80010b4:	f008 fa4a 	bl	800954c <pow>
 80010b8:	ec59 8b10 	vmov	r8, r9, d0
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa4e 	bl	8000564 <__aeabi_i2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8001150 <CalculateAccAngle+0x188>
 80010d0:	ec43 2b10 	vmov	d0, r2, r3
 80010d4:	f008 fa3a 	bl	800954c <pow>
 80010d8:	ec53 2b10 	vmov	r2, r3, d0
 80010dc:	4640      	mov	r0, r8
 80010de:	4649      	mov	r1, r9
 80010e0:	f7ff f8f4 	bl	80002cc <__adddf3>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	ec43 2b17 	vmov	d7, r2, r3
 80010ec:	eeb0 0a47 	vmov.f32	s0, s14
 80010f0:	eef0 0a67 	vmov.f32	s1, s15
 80010f4:	f008 fa9a 	bl	800962c <sqrt>
 80010f8:	eeb0 7a40 	vmov.f32	s14, s0
 80010fc:	eef0 7a60 	vmov.f32	s15, s1
 8001100:	eeb0 1a47 	vmov.f32	s2, s14
 8001104:	eef0 1a67 	vmov.f32	s3, s15
 8001108:	ec45 4b10 	vmov	d0, r4, r5
 800110c:	f008 fa1c 	bl	8009548 <atan2>
 8001110:	ec51 0b10 	vmov	r0, r1, d0
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <CalculateAccAngle+0x198>)
 800111a:	f7ff fa8d 	bl	8000638 <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	a30c      	add	r3, pc, #48	; (adr r3, 8001158 <CalculateAccAngle+0x190>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fbae 	bl	800088c <__aeabi_ddiv>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fd76 	bl	8000c28 <__aeabi_d2f>
 800113c:	4602      	mov	r2, r0
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	605a      	str	r2, [r3, #4]

}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800114c:	f3af 8000 	nop.w
 8001150:	00000000 	.word	0x00000000
 8001154:	40000000 	.word	0x40000000
 8001158:	54442d18 	.word	0x54442d18
 800115c:	400921fb 	.word	0x400921fb
 8001160:	40668000 	.word	0x40668000

08001164 <map>:
//	angle->pitch = alpha*(mpu->x_gyro * dt + angle->pitch) + (1-alpha) * angle->acc_pitch;
//	angle->yaw   = angle->yaw + mpu->z_gyro * dt;
//}

int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	69b9      	ldr	r1, [r7, #24]
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	1a8a      	subs	r2, r1, r2
 800117e:	fb03 f202 	mul.w	r2, r3, r2
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1acb      	subs	r3, r1, r3
 8001188:	fb92 f2f3 	sdiv	r2, r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	4413      	add	r3, r2
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80011bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00b      	beq.n	80011dc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011c4:	e000      	b.n	80011c8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f9      	beq.n	80011c6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011d2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_write>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; ++ i) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e009      	b.n	8001210 <_write+0x26>
		ITM_SendChar(*ptr++);
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffc9 	bl	800119c <ITM_SendChar>
	for (int i = 0; i < len; ++ i) {
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbf1      	blt.n	80011fc <_write+0x12>
	}
	return len;
 8001218:	687b      	ldr	r3, [r7, #4]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	0000      	movs	r0, r0
 8001224:	0000      	movs	r0, r0
	...

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b0a5      	sub	sp, #148	; 0x94
 800122c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f001 fcf3 	bl	8002c18 <HAL_Init>
  Angle_t	angle;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 f8a1 	bl	8001378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f000 fa61 	bl	80016fc <MX_GPIO_Init>
  MX_DMA_Init();
 800123a:	f000 fa29 	bl	8001690 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800123e:	f000 f9fd 	bl	800163c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001242:	f000 f9a3 	bl	800158c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001246:	f000 f905 	bl	8001454 <MX_ADC1_Init>
  MX_I2C1_Init();
 800124a:	f000 f971 	bl	8001530 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  while (MPU6050_Init(&hi2c1) == 1);
 800124e:	bf00      	nop
 8001250:	4841      	ldr	r0, [pc, #260]	; (8001358 <main+0x130>)
 8001252:	f000 fad3 	bl	80017fc <MPU6050_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	d0f9      	beq.n	8001250 <main+0x28>
//  init_mpu6050();
//  calibrate_mpu6050(&mpu);

  PID(&t_PID, &input, &output, &setpoint, 2.3, 0.7, 0.18, _PID_P_ON_E, _PID_CD_DIRECT);
 800125c:	2300      	movs	r3, #0
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2301      	movs	r3, #1
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	ed9f 2b32 	vldr	d2, [pc, #200]	; 8001330 <main+0x108>
 8001268:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001338 <main+0x110>
 800126c:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8001340 <main+0x118>
 8001270:	4b3a      	ldr	r3, [pc, #232]	; (800135c <main+0x134>)
 8001272:	4a3b      	ldr	r2, [pc, #236]	; (8001360 <main+0x138>)
 8001274:	493b      	ldr	r1, [pc, #236]	; (8001364 <main+0x13c>)
 8001276:	483c      	ldr	r0, [pc, #240]	; (8001368 <main+0x140>)
 8001278:	f000 feb2 	bl	8001fe0 <PID>
  PID_SetMode(&t_PID, _PID_MODE_AUTOMATIC);
 800127c:	2101      	movs	r1, #1
 800127e:	483a      	ldr	r0, [pc, #232]	; (8001368 <main+0x140>)
 8001280:	f001 f824 	bl	80022cc <PID_SetMode>
  PID_SetSampleTime(&t_PID, 1);
 8001284:	2101      	movs	r1, #1
 8001286:	4838      	ldr	r0, [pc, #224]	; (8001368 <main+0x140>)
 8001288:	f001 f994 	bl	80025b4 <PID_SetSampleTime>
  PID_SetOutputLimits(&t_PID, -255, 255);
 800128c:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8001348 <main+0x120>
 8001290:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8001350 <main+0x128>
 8001294:	4834      	ldr	r0, [pc, #208]	; (8001368 <main+0x140>)
 8001296:	f001 f837 	bl	8002308 <PID_SetOutputLimits>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	  MPU6050_Read_All(&hi2c1, &mpu);
 800129a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129e:	4619      	mov	r1, r3
 80012a0:	482d      	ldr	r0, [pc, #180]	; (8001358 <main+0x130>)
 80012a2:	f000 fb09 	bl	80018b8 <MPU6050_Read_All>
	  CalculateAccAngle(&angle, &mpu);
 80012a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fe8a 	bl	8000fc8 <CalculateAccAngle>
//		  printf("angles Kalman: %f\t %f\n", mpu.KalmanAngleX, mpu.KalmanAngleY);
//  	  printf("		angles Accel: %f\t, %f\n", angle.acc_roll, angle.acc_pitch);
	  input = angle.acc_roll;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f966 	bl	8000588 <__aeabi_f2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4928      	ldr	r1, [pc, #160]	; (8001364 <main+0x13c>)
 80012c2:	e9c1 2300 	strd	r2, r3, [r1]
	  PID_Compute(&t_PID);
 80012c6:	4828      	ldr	r0, [pc, #160]	; (8001368 <main+0x140>)
 80012c8:	f000 fed6 	bl	8002078 <PID_Compute>
	  printf("PID output: %f\n", output);
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <main+0x138>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	4826      	ldr	r0, [pc, #152]	; (800136c <main+0x144>)
 80012d4:	f006 f936 	bl	8007544 <iprintf>
	  double pwm = map(output, -255, 255, 30, 70);
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <main+0x138>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fc59 	bl	8000b98 <__aeabi_d2iz>
 80012e6:	2346      	movs	r3, #70	; 0x46
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	231e      	movs	r3, #30
 80012ec:	22ff      	movs	r2, #255	; 0xff
 80012ee:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 80012f2:	f7ff ff37 	bl	8001164 <map>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f933 	bl	8000564 <__aeabi_i2d>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	  printf("PWM: %f\n", pwm);
 8001306:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800130a:	4819      	ldr	r0, [pc, #100]	; (8001370 <main+0x148>)
 800130c:	f006 f91a 	bl	8007544 <iprintf>
	  TIM2->CCR3 = pwm;
 8001310:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001314:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001318:	f7ff fc66 	bl	8000be8 <__aeabi_d2uiz>
 800131c:	4603      	mov	r3, r0
 800131e:	63e3      	str	r3, [r4, #60]	; 0x3c
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001320:	2108      	movs	r1, #8
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <main+0x14c>)
 8001324:	f004 fc9a 	bl	8005c5c <HAL_TIM_PWM_Start>
  {
 8001328:	e7b7      	b.n	800129a <main+0x72>
 800132a:	bf00      	nop
 800132c:	f3af 8000 	nop.w
 8001330:	70a3d70a 	.word	0x70a3d70a
 8001334:	3fc70a3d 	.word	0x3fc70a3d
 8001338:	66666666 	.word	0x66666666
 800133c:	3fe66666 	.word	0x3fe66666
 8001340:	66666666 	.word	0x66666666
 8001344:	40026666 	.word	0x40026666
 8001348:	00000000 	.word	0x00000000
 800134c:	406fe000 	.word	0x406fe000
 8001350:	00000000 	.word	0x00000000
 8001354:	c06fe000 	.word	0xc06fe000
 8001358:	2000033c 	.word	0x2000033c
 800135c:	20000480 	.word	0x20000480
 8001360:	20000490 	.word	0x20000490
 8001364:	20000488 	.word	0x20000488
 8001368:	20000498 	.word	0x20000498
 800136c:	0800a908 	.word	0x0800a908
 8001370:	0800a918 	.word	0x0800a918
 8001374:	20000390 	.word	0x20000390

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b094      	sub	sp, #80	; 0x50
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2234      	movs	r2, #52	; 0x34
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f006 fa22 	bl	80077d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <SystemClock_Config+0xd4>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a29      	ldr	r2, [pc, #164]	; (800144c <SystemClock_Config+0xd4>)
 80013a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <SystemClock_Config+0xd4>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <SystemClock_Config+0xd8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013c4:	4a22      	ldr	r2, [pc, #136]	; (8001450 <SystemClock_Config+0xd8>)
 80013c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <SystemClock_Config+0xd8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013dc:	2301      	movs	r3, #1
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e0:	2310      	movs	r3, #16
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	2302      	movs	r3, #2
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013ec:	2310      	movs	r3, #16
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013f6:	2304      	movs	r3, #4
 80013f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013fe:	2302      	movs	r3, #2
 8001400:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4618      	mov	r0, r3
 8001408:	f004 f93a 	bl	8005680 <HAL_RCC_OscConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001412:	f000 f9ed 	bl	80017f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001416:	230f      	movs	r3, #15
 8001418:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141a:	2302      	movs	r3, #2
 800141c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001426:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	2102      	movs	r1, #2
 8001432:	4618      	mov	r0, r3
 8001434:	f003 fdda 	bl	8004fec <HAL_RCC_ClockConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800143e:	f000 f9d7 	bl	80017f0 <Error_Handler>
  }
}
 8001442:	bf00      	nop
 8001444:	3750      	adds	r7, #80	; 0x50
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000

08001454 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <MX_ADC1_Init+0xd0>)
 8001468:	4a2f      	ldr	r2, [pc, #188]	; (8001528 <MX_ADC1_Init+0xd4>)
 800146a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800146c:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_ADC1_Init+0xd0>)
 800146e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001472:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <MX_ADC1_Init+0xd0>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <MX_ADC1_Init+0xd0>)
 800147c:	2201      	movs	r2, #1
 800147e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001480:	4b28      	ldr	r3, [pc, #160]	; (8001524 <MX_ADC1_Init+0xd0>)
 8001482:	2201      	movs	r2, #1
 8001484:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <MX_ADC1_Init+0xd0>)
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <MX_ADC1_Init+0xd0>)
 8001490:	2200      	movs	r2, #0
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001494:	4b23      	ldr	r3, [pc, #140]	; (8001524 <MX_ADC1_Init+0xd0>)
 8001496:	4a25      	ldr	r2, [pc, #148]	; (800152c <MX_ADC1_Init+0xd8>)
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <MX_ADC1_Init+0xd0>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <MX_ADC1_Init+0xd0>)
 80014a2:	2203      	movs	r2, #3
 80014a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <MX_ADC1_Init+0xd0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <MX_ADC1_Init+0xd0>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b4:	481b      	ldr	r0, [pc, #108]	; (8001524 <MX_ADC1_Init+0xd0>)
 80014b6:	f001 fc21 	bl	8002cfc <HAL_ADC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014c0:	f000 f996 	bl	80017f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014cc:	2307      	movs	r3, #7
 80014ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4813      	ldr	r0, [pc, #76]	; (8001524 <MX_ADC1_Init+0xd0>)
 80014d6:	f001 fd83 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014e0:	f000 f986 	bl	80017f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014e8:	2302      	movs	r3, #2
 80014ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	4619      	mov	r1, r3
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <MX_ADC1_Init+0xd0>)
 80014f2:	f001 fd75 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014fc:	f000 f978 	bl	80017f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001500:	2304      	movs	r3, #4
 8001502:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001504:	2303      	movs	r3, #3
 8001506:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_ADC1_Init+0xd0>)
 800150e:	f001 fd67 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001518:	f000 f96a 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000294 	.word	0x20000294
 8001528:	40012000 	.word	0x40012000
 800152c:	0f000001 	.word	0x0f000001

08001530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f002 fd19 	bl	8003fa4 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 f93a 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000033c 	.word	0x2000033c
 8001584:	40005400 	.word	0x40005400
 8001588:	00061a80 	.word	0x00061a80

0800158c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001592:	f107 0320 	add.w	r3, r7, #32
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <MX_TIM2_Init+0xac>)
 80015b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <MX_TIM2_Init+0xac>)
 80015b8:	2253      	movs	r2, #83	; 0x53
 80015ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <MX_TIM2_Init+0xac>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <MX_TIM2_Init+0xac>)
 80015c4:	2263      	movs	r2, #99	; 0x63
 80015c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <MX_TIM2_Init+0xac>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_TIM2_Init+0xac>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015d4:	4818      	ldr	r0, [pc, #96]	; (8001638 <MX_TIM2_Init+0xac>)
 80015d6:	f004 faf1 	bl	8005bbc <HAL_TIM_PWM_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80015e0:	f000 f906 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	4619      	mov	r1, r3
 80015f2:	4811      	ldr	r0, [pc, #68]	; (8001638 <MX_TIM2_Init+0xac>)
 80015f4:	f004 ff3e 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80015fe:	f000 f8f7 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001602:	2360      	movs	r3, #96	; 0x60
 8001604:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2208      	movs	r2, #8
 8001616:	4619      	mov	r1, r3
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM2_Init+0xac>)
 800161a:	f004 fbe7 	bl	8005dec <HAL_TIM_PWM_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001624:	f000 f8e4 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM2_Init+0xac>)
 800162a:	f001 f947 	bl	80028bc <HAL_TIM_MspPostInit>

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000390 	.word	0x20000390

0800163c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <MX_USART2_UART_Init+0x50>)
 8001644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001674:	f004 ff7a 	bl	800656c <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167e:	f000 f8b7 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000438 	.word	0x20000438
 800168c:	40004400 	.word	0x40004400

08001690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_DMA_Init+0x68>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <MX_DMA_Init+0x68>)
 80016a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_DMA_Init+0x68>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <MX_DMA_Init+0x68>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <MX_DMA_Init+0x68>)
 80016bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <MX_DMA_Init+0x68>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	200c      	movs	r0, #12
 80016d4:	f001 ff97 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016d8:	200c      	movs	r0, #12
 80016da:	f001 ffb0 	bl	800363e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2038      	movs	r0, #56	; 0x38
 80016e4:	f001 ff8f 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016e8:	2038      	movs	r0, #56	; 0x38
 80016ea:	f001 ffa8 	bl	800363e <HAL_NVIC_EnableIRQ>

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <MX_GPIO_Init+0xe8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a32      	ldr	r2, [pc, #200]	; (80017e4 <MX_GPIO_Init+0xe8>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <MX_GPIO_Init+0xe8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <MX_GPIO_Init+0xe8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a2b      	ldr	r2, [pc, #172]	; (80017e4 <MX_GPIO_Init+0xe8>)
 8001738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <MX_GPIO_Init+0xe8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <MX_GPIO_Init+0xe8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a24      	ldr	r2, [pc, #144]	; (80017e4 <MX_GPIO_Init+0xe8>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <MX_GPIO_Init+0xe8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_GPIO_Init+0xe8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <MX_GPIO_Init+0xe8>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_GPIO_Init+0xe8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2120      	movs	r1, #32
 8001786:	4818      	ldr	r0, [pc, #96]	; (80017e8 <MX_GPIO_Init+0xec>)
 8001788:	f002 fbf2 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800178c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001792:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4812      	ldr	r0, [pc, #72]	; (80017ec <MX_GPIO_Init+0xf0>)
 80017a4:	f002 fa50 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017a8:	2301      	movs	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ac:	2303      	movs	r3, #3
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	480c      	ldr	r0, [pc, #48]	; (80017ec <MX_GPIO_Init+0xf0>)
 80017bc:	f002 fa44 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017c0:	2320      	movs	r3, #32
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_GPIO_Init+0xec>)
 80017d8:	f002 fa36 	bl	8003c48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020800 	.word	0x40020800

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <Error_Handler+0x8>
	...

080017fc <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af04      	add	r7, sp, #16
 8001802:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, HAL_MAX_DELAY);
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2301      	movs	r3, #1
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	f107 030f 	add.w	r3, r7, #15
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2301      	movs	r3, #1
 8001816:	2275      	movs	r2, #117	; 0x75
 8001818:	21d0      	movs	r1, #208	; 0xd0
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f002 fe00 	bl	8004420 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b68      	cmp	r3, #104	; 0x68
 8001824:	d13d      	bne.n	80018a2 <MPU6050_Init+0xa6>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800182a:	2364      	movs	r3, #100	; 0x64
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	2301      	movs	r3, #1
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	f107 030e 	add.w	r3, r7, #14
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2301      	movs	r3, #1
 800183a:	226b      	movs	r2, #107	; 0x6b
 800183c:	21d0      	movs	r1, #208	; 0xd0
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f002 fcf4 	bl	800422c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001844:	2307      	movs	r3, #7
 8001846:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	2301      	movs	r3, #1
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	f107 030e 	add.w	r3, r7, #14
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2301      	movs	r3, #1
 8001858:	2219      	movs	r2, #25
 800185a:	21d0      	movs	r1, #208	; 0xd0
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f002 fce5 	bl	800422c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001862:	2300      	movs	r3, #0
 8001864:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	9302      	str	r3, [sp, #8]
 800186a:	2301      	movs	r3, #1
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	f107 030e 	add.w	r3, r7, #14
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2301      	movs	r3, #1
 8001876:	221c      	movs	r2, #28
 8001878:	21d0      	movs	r1, #208	; 0xd0
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f002 fcd6 	bl	800422c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001880:	2300      	movs	r3, #0
 8001882:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001884:	2364      	movs	r3, #100	; 0x64
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2301      	movs	r3, #1
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f107 030e 	add.w	r3, r7, #14
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	221b      	movs	r2, #27
 8001896:	21d0      	movs	r1, #208	; 0xd0
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f002 fcc7 	bl	800422c <HAL_I2C_Mem_Write>
        return 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	e003      	b.n	80018aa <MPU6050_Init+0xae>
    }
    else
    {
    	printf("Error in init\n");
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <MPU6050_Init+0xb8>)
 80018a4:	f005 feb4 	bl	8007610 <puts>
    }
    return 1;
 80018a8:	2301      	movs	r3, #1
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	0800a924 	.word	0x0800a924

080018b8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80018b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018bc:	b094      	sub	sp, #80	; 0x50
 80018be:	af04      	add	r7, sp, #16
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    if (HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout) == HAL_OK)
 80018c4:	2364      	movs	r3, #100	; 0x64
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	230e      	movs	r3, #14
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	223b      	movs	r2, #59	; 0x3b
 80018d6:	21d0      	movs	r1, #208	; 0xd0
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f002 fda1 	bl	8004420 <HAL_I2C_Mem_Read>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f040 80af 	bne.w	8001a44 <MPU6050_Read_All+0x18c>
    {
		DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80018e6:	7a3b      	ldrb	r3, [r7, #8]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	7a7b      	ldrb	r3, [r7, #9]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	801a      	strh	r2, [r3, #0]
		DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80018f8:	7abb      	ldrb	r3, [r7, #10]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	7afb      	ldrb	r3, [r7, #11]
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b21a      	sxth	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	805a      	strh	r2, [r3, #2]
		DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800190a:	7b3b      	ldrb	r3, [r7, #12]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	b21a      	sxth	r2, r3
 8001910:	7b7b      	ldrb	r3, [r7, #13]
 8001912:	b21b      	sxth	r3, r3
 8001914:	4313      	orrs	r3, r2
 8001916:	b21a      	sxth	r2, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	809a      	strh	r2, [r3, #4]
		temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800191c:	7bbb      	ldrb	r3, [r7, #14]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	b21b      	sxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	86fb      	strh	r3, [r7, #54]	; 0x36
		DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800192a:	7c3b      	ldrb	r3, [r7, #16]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	b21a      	sxth	r2, r3
 8001930:	7c7b      	ldrb	r3, [r7, #17]
 8001932:	b21b      	sxth	r3, r3
 8001934:	4313      	orrs	r3, r2
 8001936:	b21a      	sxth	r2, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	841a      	strh	r2, [r3, #32]
		DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800193c:	7cbb      	ldrb	r3, [r7, #18]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21a      	sxth	r2, r3
 8001942:	7cfb      	ldrb	r3, [r7, #19]
 8001944:	b21b      	sxth	r3, r3
 8001946:	4313      	orrs	r3, r2
 8001948:	b21a      	sxth	r2, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	845a      	strh	r2, [r3, #34]	; 0x22
		DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800194e:	7d3b      	ldrb	r3, [r7, #20]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b21a      	sxth	r2, r3
 8001954:	7d7b      	ldrb	r3, [r7, #21]
 8001956:	b21b      	sxth	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b21a      	sxth	r2, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	849a      	strh	r2, [r3, #36]	; 0x24

		DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fdfc 	bl	8000564 <__aeabi_i2d>
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	4bbf      	ldr	r3, [pc, #764]	; (8001c70 <MPU6050_Read_All+0x3b8>)
 8001972:	f7fe ff8b 	bl	800088c <__aeabi_ddiv>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	6839      	ldr	r1, [r7, #0]
 800197c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fdec 	bl	8000564 <__aeabi_i2d>
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4bb7      	ldr	r3, [pc, #732]	; (8001c70 <MPU6050_Read_All+0x3b8>)
 8001992:	f7fe ff7b 	bl	800088c <__aeabi_ddiv>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fddc 	bl	8000564 <__aeabi_i2d>
 80019ac:	a3aa      	add	r3, pc, #680	; (adr r3, 8001c58 <MPU6050_Read_All+0x3a0>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe ff6b 	bl	800088c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80019c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019cc:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8001c74 <MPU6050_Read_All+0x3bc>
 80019d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d4:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001c78 <MPU6050_Read_All+0x3c0>
 80019d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdbb 	bl	8000564 <__aeabi_i2d>
 80019ee:	a39c      	add	r3, pc, #624	; (adr r3, 8001c60 <MPU6050_Read_All+0x3a8>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe ff4a 	bl	800088c <__aeabi_ddiv>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	6839      	ldr	r1, [r7, #0]
 80019fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fdab 	bl	8000564 <__aeabi_i2d>
 8001a0e:	a394      	add	r3, pc, #592	; (adr r3, 8001c60 <MPU6050_Read_All+0x3a8>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe ff3a 	bl	800088c <__aeabi_ddiv>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	6839      	ldr	r1, [r7, #0]
 8001a1e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd9b 	bl	8000564 <__aeabi_i2d>
 8001a2e:	a38c      	add	r3, pc, #560	; (adr r3, 8001c60 <MPU6050_Read_All+0x3a8>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe ff2a 	bl	800088c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	6839      	ldr	r1, [r7, #0]
 8001a3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001a42:	e002      	b.n	8001a4a <MPU6050_Read_All+0x192>
    }
    else
    	printf("Error on I2C Memory Read\n");
 8001a44:	488d      	ldr	r0, [pc, #564]	; (8001c7c <MPU6050_Read_All+0x3c4>)
 8001a46:	f005 fde3 	bl	8007610 <puts>
    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001a4a:	f001 f94b 	bl	8002ce4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	4b8b      	ldr	r3, [pc, #556]	; (8001c80 <MPU6050_Read_All+0x3c8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd74 	bl	8000544 <__aeabi_ui2d>
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <MPU6050_Read_All+0x3cc>)
 8001a62:	f7fe ff13 	bl	800088c <__aeabi_ddiv>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001a6e:	f001 f939 	bl	8002ce4 <HAL_GetTick>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a82      	ldr	r2, [pc, #520]	; (8001c80 <MPU6050_Read_All+0x3c8>)
 8001a76:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a86:	fb03 f202 	mul.w	r2, r3, r2
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a90:	4619      	mov	r1, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd60 	bl	8000564 <__aeabi_i2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ec43 2b10 	vmov	d0, r2, r3
 8001aac:	f007 fdbe 	bl	800962c <sqrt>
 8001ab0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ac0:	f7ff f822 	bl	8000b08 <__aeabi_dcmpeq>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d11f      	bne.n	8001b0a <MPU6050_Read_All+0x252>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd47 	bl	8000564 <__aeabi_i2d>
 8001ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ada:	f7fe fed7 	bl	800088c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	ec43 2b17 	vmov	d7, r2, r3
 8001ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aea:	eef0 0a67 	vmov.f32	s1, s15
 8001aee:	f007 fdcb 	bl	8009688 <atan>
 8001af2:	ec51 0b10 	vmov	r0, r1, d0
 8001af6:	a35c      	add	r3, pc, #368	; (adr r3, 8001c68 <MPU6050_Read_All+0x3b0>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe fd9c 	bl	8000638 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001b08:	e005      	b.n	8001b16 <MPU6050_Read_All+0x25e>
    }
    else
    {
        roll = 0.0;
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1c:	425b      	negs	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd20 	bl	8000564 <__aeabi_i2d>
 8001b24:	4682      	mov	sl, r0
 8001b26:	468b      	mov	fp, r1
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fd18 	bl	8000564 <__aeabi_i2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	ec43 2b11 	vmov	d1, r2, r3
 8001b3c:	ec4b ab10 	vmov	d0, sl, fp
 8001b40:	f007 fd02 	bl	8009548 <atan2>
 8001b44:	ec51 0b10 	vmov	r0, r1, d0
 8001b48:	a347      	add	r3, pc, #284	; (adr r3, 8001c68 <MPU6050_Read_All+0x3b0>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f7fe fd73 	bl	8000638 <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <MPU6050_Read_All+0x3d0>)
 8001b60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b64:	f7fe ffda 	bl	8000b1c <__aeabi_dcmplt>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <MPU6050_Read_All+0x2cc>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <MPU6050_Read_All+0x3d4>)
 8001b7a:	f7fe ffed 	bl	8000b58 <__aeabi_dcmpgt>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d114      	bne.n	8001bae <MPU6050_Read_All+0x2f6>
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <MPU6050_Read_All+0x3d4>)
 8001b8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b8e:	f7fe ffe3 	bl	8000b58 <__aeabi_dcmpgt>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d015      	beq.n	8001bc4 <MPU6050_Read_All+0x30c>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <MPU6050_Read_All+0x3d0>)
 8001ba4:	f7fe ffba 	bl	8000b1c <__aeabi_dcmplt>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <MPU6050_Read_All+0x30c>
    {
        KalmanY.angle = pitch;
 8001bae:	4938      	ldr	r1, [pc, #224]	; (8001c90 <MPU6050_Read_All+0x3d8>)
 8001bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001bb8:	6839      	ldr	r1, [r7, #0]
 8001bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bbe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001bc2:	e014      	b.n	8001bee <MPU6050_Read_All+0x336>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001bca:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001bce:	eeb0 1a47 	vmov.f32	s2, s14
 8001bd2:	eef0 1a67 	vmov.f32	s3, s15
 8001bd6:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bda:	482d      	ldr	r0, [pc, #180]	; (8001c90 <MPU6050_Read_All+0x3d8>)
 8001bdc:	f000 f85c 	bl	8001c98 <Kalman_getAngle>
 8001be0:	eeb0 7a40 	vmov.f32	s14, s0
 8001be4:	eef0 7a60 	vmov.f32	s15, s1
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001bf4:	4690      	mov	r8, r2
 8001bf6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <MPU6050_Read_All+0x3d4>)
 8001c00:	4640      	mov	r0, r8
 8001c02:	4649      	mov	r1, r9
 8001c04:	f7fe ffa8 	bl	8000b58 <__aeabi_dcmpgt>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <MPU6050_Read_All+0x368>
        DataStruct->Gx = -DataStruct->Gx;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c14:	4614      	mov	r4, r2
 8001c16:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001c26:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001c2a:	eeb0 1a47 	vmov.f32	s2, s14
 8001c2e:	eef0 1a67 	vmov.f32	s3, s15
 8001c32:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001c36:	4817      	ldr	r0, [pc, #92]	; (8001c94 <MPU6050_Read_All+0x3dc>)
 8001c38:	f000 f82e 	bl	8001c98 <Kalman_getAngle>
 8001c3c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c40:	eef0 7a60 	vmov.f32	s15, s1
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001c4a:	bf00      	nop
 8001c4c:	3740      	adds	r7, #64	; 0x40
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c54:	f3af 8000 	nop.w
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40cc2900 	.word	0x40cc2900
 8001c60:	00000000 	.word	0x00000000
 8001c64:	40606000 	.word	0x40606000
 8001c68:	1a63c1f8 	.word	0x1a63c1f8
 8001c6c:	404ca5dc 	.word	0x404ca5dc
 8001c70:	40d00000 	.word	0x40d00000
 8001c74:	43aa0000 	.word	0x43aa0000
 8001c78:	42121eb8 	.word	0x42121eb8
 8001c7c:	0800a934 	.word	0x0800a934
 8001c80:	20000518 	.word	0x20000518
 8001c84:	408f4000 	.word	0x408f4000
 8001c88:	c0568000 	.word	0xc0568000
 8001c8c:	40568000 	.word	0x40568000
 8001c90:	20000048 	.word	0x20000048
 8001c94:	20000000 	.word	0x20000000

08001c98 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001c98:	b5b0      	push	{r4, r5, r7, lr}
 8001c9a:	b096      	sub	sp, #88	; 0x58
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	61f8      	str	r0, [r7, #28]
 8001ca0:	ed87 0b04 	vstr	d0, [r7, #16]
 8001ca4:	ed87 1b02 	vstr	d1, [r7, #8]
 8001ca8:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001cb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cb6:	f7fe fb07 	bl	80002c8 <__aeabi_dsub>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ccc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cd0:	f7fe fcb2 	bl	8000638 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4629      	mov	r1, r5
 8001cdc:	f7fe faf6 	bl	80002cc <__adddf3>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	69f9      	ldr	r1, [r7, #28]
 8001ce6:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cfa:	f7fe fc9d 	bl	8000638 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001d0c:	f7fe fadc 	bl	80002c8 <__aeabi_dsub>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001d1e:	f7fe fad3 	bl	80002c8 <__aeabi_dsub>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe facc 	bl	80002cc <__adddf3>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d40:	f7fe fc7a 	bl	8000638 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4620      	mov	r0, r4
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	f7fe fabe 	bl	80002cc <__adddf3>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	69f9      	ldr	r1, [r7, #28]
 8001d56:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d6a:	f7fe fc65 	bl	8000638 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4620      	mov	r0, r4
 8001d74:	4629      	mov	r1, r5
 8001d76:	f7fe faa7 	bl	80002c8 <__aeabi_dsub>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	69f9      	ldr	r1, [r7, #28]
 8001d80:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d94:	f7fe fc50 	bl	8000638 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	4629      	mov	r1, r5
 8001da0:	f7fe fa92 	bl	80002c8 <__aeabi_dsub>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	69f9      	ldr	r1, [r7, #28]
 8001daa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dbe:	f7fe fc3b 	bl	8000638 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	4629      	mov	r1, r5
 8001dca:	f7fe fa7f 	bl	80002cc <__adddf3>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	69f9      	ldr	r1, [r7, #28]
 8001dd4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001de4:	f7fe fa72 	bl	80002cc <__adddf3>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001df6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001dfa:	f7fe fd47 	bl	800088c <__aeabi_ddiv>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001e0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e10:	f7fe fd3c 	bl	800088c <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e26:	f7fe fa4f 	bl	80002c8 <__aeabi_dsub>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001e38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e40:	f7fe fbfa 	bl	8000638 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4620      	mov	r0, r4
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f7fe fa3e 	bl	80002cc <__adddf3>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	69f9      	ldr	r1, [r7, #28]
 8001e56:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001e60:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e68:	f7fe fbe6 	bl	8000638 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f7fe fa2a 	bl	80002cc <__adddf3>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	69f9      	ldr	r1, [r7, #28]
 8001e7e:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e88:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e92:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001e9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ea4:	f7fe fbc8 	bl	8000638 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4620      	mov	r0, r4
 8001eae:	4629      	mov	r1, r5
 8001eb0:	f7fe fa0a 	bl	80002c8 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	69f9      	ldr	r1, [r7, #28]
 8001eba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001ec4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ec8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ecc:	f7fe fbb4 	bl	8000638 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	f7fe f9f6 	bl	80002c8 <__aeabi_dsub>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	69f9      	ldr	r1, [r7, #28]
 8001ee2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001eec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ef0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ef4:	f7fe fba0 	bl	8000638 <__aeabi_dmul>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4620      	mov	r0, r4
 8001efe:	4629      	mov	r1, r5
 8001f00:	f7fe f9e2 	bl	80002c8 <__aeabi_dsub>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	69f9      	ldr	r1, [r7, #28]
 8001f0a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f1c:	f7fe fb8c 	bl	8000638 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4620      	mov	r0, r4
 8001f26:	4629      	mov	r1, r5
 8001f28:	f7fe f9ce 	bl	80002c8 <__aeabi_dsub>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	69f9      	ldr	r1, [r7, #28]
 8001f32:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f3c:	ec43 2b17 	vmov	d7, r2, r3
};
 8001f40:	eeb0 0a47 	vmov.f32	s0, s14
 8001f44:	eef0 0a67 	vmov.f32	s1, s15
 8001f48:	3758      	adds	r7, #88	; 0x58
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}

08001f4e <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	uPID->LastInput = *uPID->MyInput;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->LastError = *uPID->MySetpoint - *uPID->MyInput;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe f9a1 	bl	80002c8 <__aeabi_dsub>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	if (uPID->OutputSum > uPID->OutMax)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8001f9c:	f7fe fddc 	bl	8000b58 <__aeabi_dcmpgt>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <PID_Init+0x66>
	{
		uPID->OutputSum = uPID->OutMax;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8001fb2:	e011      	b.n	8001fd8 <PID_Init+0x8a>
	else if (uPID->OutputSum < uPID->OutMin)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8001fc0:	f7fe fdac 	bl	8000b1c <__aeabi_dcmplt>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d100      	bne.n	8001fcc <PID_Init+0x7e>
}
 8001fca:	e005      	b.n	8001fd8 <PID_Init+0x8a>
		uPID->OutputSum = uPID->OutMin;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6278      	str	r0, [r7, #36]	; 0x24
 8001fe8:	6239      	str	r1, [r7, #32]
 8001fea:	61fa      	str	r2, [r7, #28]
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	ed87 0b04 	vstr	d0, [r7, #16]
 8001ff2:	ed87 1b02 	vstr	d1, [r7, #8]
 8001ff6:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	64da      	str	r2, [r3, #76]	; 0x4c
	uPID->MyInput    = Input;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	6a3a      	ldr	r2, [r7, #32]
 8002004:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->MySetpoint = Setpoint;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	651a      	str	r2, [r3, #80]	; 0x50
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	2200      	movs	r2, #0
 8002010:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8002012:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002068 <PID+0x88>
 8002016:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002070 <PID+0x90>
 800201a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800201c:	f000 f974 	bl	8002308 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	2264      	movs	r2, #100	; 0x64
 8002024:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8002026:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800202a:	4619      	mov	r1, r3
 800202c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800202e:	f000 fa81 	bl	8002534 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002032:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002036:	4619      	mov	r1, r3
 8002038:	ed97 2b00 	vldr	d2, [r7]
 800203c:	ed97 1b02 	vldr	d1, [r7, #8]
 8002040:	ed97 0b04 	vldr	d0, [r7, #16]
 8002044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002046:	f000 f9cd 	bl	80023e4 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 800204a:	f000 fe4b 	bl	8002ce4 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	1ad2      	subs	r2, r2, r3
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	605a      	str	r2, [r3, #4]

}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	; 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	f3af 8000 	nop.w
 8002068:	00000000 	.word	0x00000000
 800206c:	406fe000 	.word	0x406fe000
	...

08002078 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	785b      	ldrb	r3, [r3, #1]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <PID_Compute+0x14>
	{
		return _FALSE;
 8002088:	2300      	movs	r3, #0
 800208a:	e114      	b.n	80022b6 <PID_Compute+0x23e>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 800208c:	f000 fe2a 	bl	8002ce4 <HAL_GetTick>
 8002090:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	6a3a      	ldr	r2, [r7, #32]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	f0c0 8106 	bcc.w	80022b4 <PID_Compute+0x23c>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c0:	f7fe f902 	bl	80002c8 <__aeabi_dsub>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
//		dInput  = (input - uPID->LastInput);
		dInput  = (error - uPID->LastError);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80020d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020d6:	f7fe f8f7 	bl	80002c8 <__aeabi_dsub>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (error < -5 || error > 5 || error == 0)
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	4b76      	ldr	r3, [pc, #472]	; (80022c0 <PID_Compute+0x248>)
 80020e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020ec:	f7fe fd16 	bl	8000b1c <__aeabi_dcmplt>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d114      	bne.n	8002120 <PID_Compute+0xa8>
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	4b72      	ldr	r3, [pc, #456]	; (80022c4 <PID_Compute+0x24c>)
 80020fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002100:	f7fe fd2a 	bl	8000b58 <__aeabi_dcmpgt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <PID_Compute+0xa8>
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002116:	f7fe fcf7 	bl	8000b08 <__aeabi_dcmpeq>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <PID_Compute+0xb8>
			uPID->OutputSum = 0;
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 800212e:	e01d      	b.n	800216c <PID_Compute+0xf4>
		else
			uPID->OutputSum += (uPID->Ki * error * 200);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800213c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002140:	f7fe fa7a 	bl	8000638 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <PID_Compute+0x250>)
 8002152:	f7fe fa71 	bl	8000638 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	f7fe f8b5 	bl	80002cc <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d114      	bne.n	800219e <PID_Compute+0x126>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002184:	f7fe fa58 	bl	8000638 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4620      	mov	r0, r4
 800218e:	4629      	mov	r1, r5
 8002190:	f7fe f89a 	bl	80002c8 <__aeabi_dsub>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		}

		if (uPID->OutputSum > uPID->OutMax)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80021aa:	f7fe fcd5 	bl	8000b58 <__aeabi_dcmpgt>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <PID_Compute+0x14a>
		{
			uPID->OutputSum = uPID->OutMax;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80021c0:	e010      	b.n	80021e4 <PID_Compute+0x16c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80021ce:	f7fe fca5 	bl	8000b1c <__aeabi_dcmplt>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <PID_Compute+0x16c>
		{
			uPID->OutputSum = uPID->OutMin;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00b      	beq.n	8002204 <PID_Compute+0x18c>
		{
			output = uPID->Kp * error;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021f6:	f7fe fa1f 	bl	8000638 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002202:	e005      	b.n	8002210 <PID_Compute+0x198>
		}
		else
		{
			output = 0;
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput / 200;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800221c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002220:	f7fe fa0a 	bl	8000638 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <PID_Compute+0x250>)
 8002232:	f7fe fb2b 	bl	800088c <__aeabi_ddiv>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4620      	mov	r0, r4
 800223c:	4629      	mov	r1, r5
 800223e:	f7fe f843 	bl	80002c8 <__aeabi_dsub>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800224a:	f7fe f83f 	bl	80002cc <__adddf3>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800225c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002260:	f7fe fc7a 	bl	8000b58 <__aeabi_dcmpgt>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <PID_Compute+0x1fe>
		{
			output = uPID->OutMax;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002270:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002274:	e00e      	b.n	8002294 <PID_Compute+0x21c>
		}
		else if (output < uPID->OutMin)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800227c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002280:	f7fe fc4c 	bl	8000b1c <__aeabi_dcmplt>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <PID_Compute+0x21c>
		{
			output = uPID->OutMin;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002290:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002298:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800229c:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022a6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		uPID->LastTime = now;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ae:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <PID_Compute+0x23e>

	}
	else
	{
		return _FALSE;
 80022b4:	2300      	movs	r3, #0
	}

}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3730      	adds	r7, #48	; 0x30
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bdb0      	pop	{r4, r5, r7, pc}
 80022be:	bf00      	nop
 80022c0:	c0140000 	.word	0xc0140000
 80022c4:	40140000 	.word	0x40140000
 80022c8:	40690000 	.word	0x40690000

080022cc <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <PID_SetMode+0x2e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	785b      	ldrb	r3, [r3, #1]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff fe2a 	bl	8001f4e <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	705a      	strb	r2, [r3, #1]

}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6178      	str	r0, [r7, #20]
 8002310:	ed87 0b02 	vstr	d0, [r7, #8]
 8002314:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800231c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002320:	f7fe fc10 	bl	8000b44 <__aeabi_dcmpge>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d158      	bne.n	80023dc <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800232a:	6979      	ldr	r1, [r7, #20]
 800232c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002330:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	uPID->OutMax = Max;
 8002334:	6979      	ldr	r1, [r7, #20]
 8002336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800233a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d04b      	beq.n	80023de <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002354:	f7fe fc00 	bl	8000b58 <__aeabi_dcmpgt>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002368:	e9c1 2300 	strd	r2, r3, [r1]
 800236c:	e012      	b.n	8002394 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800237c:	f7fe fbce 	bl	8000b1c <__aeabi_dcmplt>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002390:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80023a0:	f7fe fbda 	bl	8000b58 <__aeabi_dcmpgt>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80023b0:	6979      	ldr	r1, [r7, #20]
 80023b2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80023b6:	e012      	b.n	80023de <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023c4:	f7fe fbaa 	bl	8000b1c <__aeabi_dcmplt>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023d4:	6979      	ldr	r1, [r7, #20]
 80023d6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80023da:	e000      	b.n	80023de <PID_SetOutputLimits+0xd6>
		return;
 80023dc:	bf00      	nop
		}
		else { }

	}

}
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	61f8      	str	r0, [r7, #28]
 80023ec:	ed87 0b04 	vstr	d0, [r7, #16]
 80023f0:	ed87 1b02 	vstr	d1, [r7, #8]
 80023f4:	ed87 2b00 	vstr	d2, [r7]
 80023f8:	460b      	mov	r3, r1
 80023fa:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002408:	f7fe fb88 	bl	8000b1c <__aeabi_dcmplt>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 8089 	bne.w	8002526 <PID_SetTunings2+0x142>
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002420:	f7fe fb7c 	bl	8000b1c <__aeabi_dcmplt>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d17d      	bne.n	8002526 <PID_SetTunings2+0x142>
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002436:	f7fe fb71 	bl	8000b1c <__aeabi_dcmplt>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d172      	bne.n	8002526 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	7efa      	ldrb	r2, [r7, #27]
 8002444:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002446:	7efb      	ldrb	r3, [r7, #27]
 8002448:	2b01      	cmp	r3, #1
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002458:	69f9      	ldr	r1, [r7, #28]
 800245a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800245e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002462:	69f9      	ldr	r1, [r7, #28]
 8002464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002468:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800246c:	69f9      	ldr	r1, [r7, #28]
 800246e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002472:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe f862 	bl	8000544 <__aeabi_ui2d>
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <PID_SetTunings2+0x14c>)
 8002486:	f7fe fa01 	bl	800088c <__aeabi_ddiv>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8002492:	69f9      	ldr	r1, [r7, #28]
 8002494:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002498:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800249c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024a4:	f7fe f8c8 	bl	8000638 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	69f9      	ldr	r1, [r7, #28]
 80024ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80024b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024ba:	f7fe f9e7 	bl	800088c <__aeabi_ddiv>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	69f9      	ldr	r1, [r7, #28]
 80024c4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	78db      	ldrb	r3, [r3, #3]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d12b      	bne.n	8002528 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80024d6:	f04f 0000 	mov.w	r0, #0
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	f7fd fef3 	bl	80002c8 <__aeabi_dsub>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	69f9      	ldr	r1, [r7, #28]
 80024e8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80024f2:	f04f 0000 	mov.w	r0, #0
 80024f6:	f04f 0100 	mov.w	r1, #0
 80024fa:	f7fd fee5 	bl	80002c8 <__aeabi_dsub>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	69f9      	ldr	r1, [r7, #28]
 8002504:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800250e:	f04f 0000 	mov.w	r0, #0
 8002512:	f04f 0100 	mov.w	r1, #0
 8002516:	f7fd fed7 	bl	80002c8 <__aeabi_dsub>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	69f9      	ldr	r1, [r7, #28]
 8002520:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002524:	e000      	b.n	8002528 <PID_SetTunings2+0x144>
		return;
 8002526:	bf00      	nop

	}

}
 8002528:	3728      	adds	r7, #40	; 0x28
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	408f4000 	.word	0x408f4000

08002534 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	785b      	ldrb	r3, [r3, #1]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d02e      	beq.n	80025a6 <PID_SetControllerDirection+0x72>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	78db      	ldrb	r3, [r3, #3]
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	429a      	cmp	r2, r3
 8002550:	d029      	beq.n	80025a6 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002558:	f04f 0000 	mov.w	r0, #0
 800255c:	f04f 0100 	mov.w	r1, #0
 8002560:	f7fd feb2 	bl	80002c8 <__aeabi_dsub>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002574:	f04f 0000 	mov.w	r0, #0
 8002578:	f04f 0100 	mov.w	r1, #0
 800257c:	f7fd fea4 	bl	80002c8 <__aeabi_dsub>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002590:	f04f 0000 	mov.w	r0, #0
 8002594:	f04f 0100 	mov.w	r1, #0
 8002598:	f7fd fe96 	bl	80002c8 <__aeabi_dsub>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	70da      	strb	r2, [r3, #3]

}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	dd2e      	ble.n	8002622 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80025c4:	6838      	ldr	r0, [r7, #0]
 80025c6:	f7fd ffcd 	bl	8000564 <__aeabi_i2d>
 80025ca:	4604      	mov	r4, r0
 80025cc:	460d      	mov	r5, r1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ffb6 	bl	8000544 <__aeabi_ui2d>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4620      	mov	r0, r4
 80025de:	4629      	mov	r1, r5
 80025e0:	f7fe f954 	bl	800088c <__aeabi_ddiv>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80025f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025f6:	f7fe f81f 	bl	8000638 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800260a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800260e:	f7fe f93d 	bl	800088c <__aeabi_ddiv>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	609a      	str	r2, [r3, #8]

	}

}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800262c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_MspInit+0x4c>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <HAL_MspInit+0x4c>)
 800263c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002640:	6453      	str	r3, [r2, #68]	; 0x44
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <HAL_MspInit+0x4c>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_MspInit+0x4c>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_MspInit+0x4c>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_MspInit+0x4c>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800266a:	2007      	movs	r0, #7
 800266c:	f000 ffc0 	bl	80035f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40023800 	.word	0x40023800

0800267c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a33      	ldr	r2, [pc, #204]	; (8002768 <HAL_ADC_MspInit+0xec>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d15f      	bne.n	800275e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	4b32      	ldr	r3, [pc, #200]	; (800276c <HAL_ADC_MspInit+0xf0>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a31      	ldr	r2, [pc, #196]	; (800276c <HAL_ADC_MspInit+0xf0>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b2f      	ldr	r3, [pc, #188]	; (800276c <HAL_ADC_MspInit+0xf0>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_ADC_MspInit+0xf0>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a2a      	ldr	r2, [pc, #168]	; (800276c <HAL_ADC_MspInit+0xf0>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b28      	ldr	r3, [pc, #160]	; (800276c <HAL_ADC_MspInit+0xf0>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80026d6:	2313      	movs	r3, #19
 80026d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026da:	2303      	movs	r3, #3
 80026dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4821      	ldr	r0, [pc, #132]	; (8002770 <HAL_ADC_MspInit+0xf4>)
 80026ea:	f001 faad 	bl	8003c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 80026f0:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_ADC_MspInit+0xfc>)
 80026f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026f4:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026fa:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002700:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002706:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 8002708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800270c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 8002710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002714:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 8002718:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800271c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 8002720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002724:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002732:	4810      	ldr	r0, [pc, #64]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 8002734:	f000 ff9e 	bl	8003674 <HAL_DMA_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800273e:	f7ff f857 	bl	80017f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 8002746:	639a      	str	r2, [r3, #56]	; 0x38
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_ADC_MspInit+0xf8>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	2012      	movs	r0, #18
 8002754:	f000 ff57 	bl	8003606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002758:	2012      	movs	r0, #18
 800275a:	f000 ff70 	bl	800363e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800275e:	bf00      	nop
 8002760:	3728      	adds	r7, #40	; 0x28
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40012000 	.word	0x40012000
 800276c:	40023800 	.word	0x40023800
 8002770:	40020000 	.word	0x40020000
 8002774:	200002dc 	.word	0x200002dc
 8002778:	40026410 	.word	0x40026410

0800277c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_I2C_MspInit+0x84>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d12c      	bne.n	80027f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_I2C_MspInit+0x88>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_I2C_MspInit+0x88>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_I2C_MspInit+0x88>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c0:	2312      	movs	r3, #18
 80027c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027cc:	2304      	movs	r3, #4
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	4619      	mov	r1, r3
 80027d6:	480c      	ldr	r0, [pc, #48]	; (8002808 <HAL_I2C_MspInit+0x8c>)
 80027d8:	f001 fa36 	bl	8003c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_I2C_MspInit+0x88>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	4a07      	ldr	r2, [pc, #28]	; (8002804 <HAL_I2C_MspInit+0x88>)
 80027e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ea:	6413      	str	r3, [r2, #64]	; 0x40
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_I2C_MspInit+0x88>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3728      	adds	r7, #40	; 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40005400 	.word	0x40005400
 8002804:	40023800 	.word	0x40023800
 8002808:	40020400 	.word	0x40020400

0800280c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d143      	bne.n	80028a6 <HAL_TIM_PWM_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH3 Init */
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 800283a:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 800283c:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_TIM_PWM_MspInit+0xac>)
 800283e:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8002840:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002842:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002846:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002850:	2200      	movs	r2, #0
 8002852:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800285a:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800285c:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 800285e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002862:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800286a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002874:	2200      	movs	r2, #0
 8002876:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 800287a:	2200      	movs	r2, #0
 800287c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 800287e:	480d      	ldr	r0, [pc, #52]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002880:	f000 fef8 	bl	8003674 <HAL_DMA_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800288a:	f7fe ffb1 	bl	80017f0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002892:	621a      	str	r2, [r3, #32]
 8002894:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_TIM_PWM_MspInit+0xa8>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	200003d8 	.word	0x200003d8
 80028b8:	40026028 	.word	0x40026028

080028bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d11e      	bne.n	800291c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_TIM_MspPostInit+0x68>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <HAL_TIM_MspPostInit+0x68>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_TIM_MspPostInit+0x68>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800290c:	2301      	movs	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	4619      	mov	r1, r3
 8002916:	4804      	ldr	r0, [pc, #16]	; (8002928 <HAL_TIM_MspPostInit+0x6c>)
 8002918:	f001 f996 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	40020400 	.word	0x40020400

0800292c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a19      	ldr	r2, [pc, #100]	; (80029b0 <HAL_UART_MspInit+0x84>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d12b      	bne.n	80029a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_UART_MspInit+0x88>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_UART_MspInit+0x88>)
 8002958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_UART_MspInit+0x88>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_UART_MspInit+0x88>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_UART_MspInit+0x88>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_UART_MspInit+0x88>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002986:	230c      	movs	r3, #12
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002996:	2307      	movs	r3, #7
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <HAL_UART_MspInit+0x8c>)
 80029a2:	f001 f951 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029a6:	bf00      	nop
 80029a8:	3728      	adds	r7, #40	; 0x28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40004400 	.word	0x40004400
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020000 	.word	0x40020000

080029bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029c0:	e7fe      	b.n	80029c0 <NMI_Handler+0x4>

080029c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c6:	e7fe      	b.n	80029c6 <HardFault_Handler+0x4>

080029c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <MemManage_Handler+0x4>

080029ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d2:	e7fe      	b.n	80029d2 <BusFault_Handler+0x4>

080029d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d8:	e7fe      	b.n	80029d8 <UsageFault_Handler+0x4>

080029da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a08:	f000 f958 	bl	8002cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <DMA1_Stream1_IRQHandler+0x10>)
 8002a16:	f000 fedb 	bl	80037d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200003d8 	.word	0x200003d8

08002a24 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <ADC_IRQHandler+0x10>)
 8002a2a:	f000 f9aa 	bl	8002d82 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000294 	.word	0x20000294

08002a38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <DMA2_Stream0_IRQHandler+0x10>)
 8002a3e:	f000 fec7 	bl	80037d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200002dc 	.word	0x200002dc

08002a4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return 1;
 8002a50:	2301      	movs	r3, #1
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <_kill>:

int _kill(int pid, int sig)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a66:	f004 ff05 	bl	8007874 <__errno>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2216      	movs	r2, #22
 8002a6e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_exit>:

void _exit (int status)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ffe7 	bl	8002a5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a8e:	e7fe      	b.n	8002a8e <_exit+0x12>

08002a90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	e00a      	b.n	8002ab8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aa2:	f3af 8000 	nop.w
 8002aa6:	4601      	mov	r1, r0
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	60ba      	str	r2, [r7, #8]
 8002aae:	b2ca      	uxtb	r2, r1
 8002ab0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	dbf0      	blt.n	8002aa2 <_read+0x12>
  }

  return len;
 8002ac0:	687b      	ldr	r3, [r7, #4]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <_close>:
  }
  return len;
}

int _close(int file)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af2:	605a      	str	r2, [r3, #4]
  return 0;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_isatty>:

int _isatty(int file)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b0a:	2301      	movs	r3, #1
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b3c:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <_sbrk+0x5c>)
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <_sbrk+0x60>)
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <_sbrk+0x64>)
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <_sbrk+0x68>)
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d207      	bcs.n	8002b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b64:	f004 fe86 	bl	8007874 <__errno>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	e009      	b.n	8002b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <_sbrk+0x64>)
 8002b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20020000 	.word	0x20020000
 8002b94:	00000400 	.word	0x00000400
 8002b98:	2000051c 	.word	0x2000051c
 8002b9c:	20000670 	.word	0x20000670

08002ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <SystemInit+0x20>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <SystemInit+0x20>)
 8002bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bc8:	f7ff ffea 	bl	8002ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bcc:	480c      	ldr	r0, [pc, #48]	; (8002c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bce:	490d      	ldr	r1, [pc, #52]	; (8002c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bd0:	4a0d      	ldr	r2, [pc, #52]	; (8002c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd4:	e002      	b.n	8002bdc <LoopCopyDataInit>

08002bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bda:	3304      	adds	r3, #4

08002bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be0:	d3f9      	bcc.n	8002bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002be4:	4c0a      	ldr	r4, [pc, #40]	; (8002c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be8:	e001      	b.n	8002bee <LoopFillZerobss>

08002bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bec:	3204      	adds	r2, #4

08002bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf0:	d3fb      	bcc.n	8002bea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002bf2:	f004 fe45 	bl	8007880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf6:	f7fe fb17 	bl	8001228 <main>
  bx  lr    
 8002bfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c04:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002c08:	0800ad98 	.word	0x0800ad98
  ldr r2, =_sbss
 8002c0c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8002c10:	20000670 	.word	0x20000670

08002c14 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c14:	e7fe      	b.n	8002c14 <CAN1_RX0_IRQHandler>
	...

08002c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <HAL_Init+0x40>)
 8002c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <HAL_Init+0x40>)
 8002c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <HAL_Init+0x40>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <HAL_Init+0x40>)
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c40:	2003      	movs	r0, #3
 8002c42:	f000 fcd5 	bl	80035f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f000 f808 	bl	8002c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c4c:	f7ff fcee 	bl	800262c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023c00 	.word	0x40023c00

08002c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_InitTick+0x54>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_InitTick+0x58>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fced 	bl	800365a <HAL_SYSTICK_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00e      	b.n	8002ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b0f      	cmp	r3, #15
 8002c8e:	d80a      	bhi.n	8002ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c90:	2200      	movs	r2, #0
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	f000 fcb5 	bl	8003606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c9c:	4a06      	ldr	r2, [pc, #24]	; (8002cb8 <HAL_InitTick+0x5c>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e000      	b.n	8002ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000090 	.word	0x20000090
 8002cb4:	20000098 	.word	0x20000098
 8002cb8:	20000094 	.word	0x20000094

08002cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_IncTick+0x20>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_IncTick+0x24>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_IncTick+0x24>)
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000098 	.word	0x20000098
 8002ce0:	20000520 	.word	0x20000520

08002ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_GetTick+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000520 	.word	0x20000520

08002cfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e033      	b.n	8002d7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fcae 	bl	800267c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d42:	f023 0302 	bic.w	r3, r3, #2
 8002d46:	f043 0202 	orr.w	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa78 	bl	8003244 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
 8002d6a:	e001      	b.n	8002d70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d049      	beq.n	8002e4c <HAL_ADC_IRQHandler+0xca>
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d046      	beq.n	8002e4c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d105      	bne.n	8002dd6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d12b      	bne.n	8002e3c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d127      	bne.n	8002e3c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d119      	bne.n	8002e3c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0220 	bic.w	r2, r2, #32
 8002e16:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f8b0 	bl	8002fa2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f06f 0212 	mvn.w	r2, #18
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d057      	beq.n	8002f12 <HAL_ADC_IRQHandler+0x190>
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d054      	beq.n	8002f12 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d139      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d006      	beq.n	8002eaa <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d12b      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d124      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d119      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002edc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d105      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa9a 	bl	800343c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 020c 	mvn.w	r2, #12
 8002f10:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d017      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x1d6>
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d014      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d10d      	bne.n	8002f58 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f834 	bl	8002fb6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0201 	mvn.w	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f66:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x218>
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d012      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f043 0202 	orr.w	r2, r3, #2
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0220 	mvn.w	r2, #32
 8002f88:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f81d 	bl	8002fca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0220 	mvn.w	r2, #32
 8002f98:	601a      	str	r2, [r3, #0]
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x1c>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e113      	b.n	8003224 <HAL_ADC_ConfigChannel+0x244>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b09      	cmp	r3, #9
 800300a:	d925      	bls.n	8003058 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	3b1e      	subs	r3, #30
 8003022:	2207      	movs	r2, #7
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43da      	mvns	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	400a      	ands	r2, r1
 8003030:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68d9      	ldr	r1, [r3, #12]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	4618      	mov	r0, r3
 8003044:	4603      	mov	r3, r0
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4403      	add	r3, r0
 800304a:	3b1e      	subs	r3, #30
 800304c:	409a      	lsls	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	e022      	b.n	800309e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6919      	ldr	r1, [r3, #16]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	2207      	movs	r2, #7
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	400a      	ands	r2, r1
 800307a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6919      	ldr	r1, [r3, #16]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	4618      	mov	r0, r3
 800308e:	4603      	mov	r3, r0
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4403      	add	r3, r0
 8003094:	409a      	lsls	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d824      	bhi.n	80030f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	3b05      	subs	r3, #5
 80030b8:	221f      	movs	r2, #31
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	400a      	ands	r2, r1
 80030c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b05      	subs	r3, #5
 80030e2:	fa00 f203 	lsl.w	r2, r0, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34
 80030ee:	e04c      	b.n	800318a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b0c      	cmp	r3, #12
 80030f6:	d824      	bhi.n	8003142 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	3b23      	subs	r3, #35	; 0x23
 800310a:	221f      	movs	r2, #31
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43da      	mvns	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	400a      	ands	r2, r1
 8003118:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	4618      	mov	r0, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b23      	subs	r3, #35	; 0x23
 8003134:	fa00 f203 	lsl.w	r2, r0, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
 8003140:	e023      	b.n	800318a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	3b41      	subs	r3, #65	; 0x41
 8003154:	221f      	movs	r2, #31
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	400a      	ands	r2, r1
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	4618      	mov	r0, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	3b41      	subs	r3, #65	; 0x41
 800317e:	fa00 f203 	lsl.w	r2, r0, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <HAL_ADC_ConfigChannel+0x250>)
 800318c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a28      	ldr	r2, [pc, #160]	; (8003234 <HAL_ADC_ConfigChannel+0x254>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d10f      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1d8>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b12      	cmp	r3, #18
 800319e:	d10b      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <HAL_ADC_ConfigChannel+0x254>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d12b      	bne.n	800321a <HAL_ADC_ConfigChannel+0x23a>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <HAL_ADC_ConfigChannel+0x258>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <HAL_ADC_ConfigChannel+0x1f4>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b11      	cmp	r3, #17
 80031d2:	d122      	bne.n	800321a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a11      	ldr	r2, [pc, #68]	; (8003238 <HAL_ADC_ConfigChannel+0x258>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d111      	bne.n	800321a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_ADC_ConfigChannel+0x25c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_ADC_ConfigChannel+0x260>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	0c9a      	lsrs	r2, r3, #18
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800320c:	e002      	b.n	8003214 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3b01      	subs	r3, #1
 8003212:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f9      	bne.n	800320e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40012300 	.word	0x40012300
 8003234:	40012000 	.word	0x40012000
 8003238:	10000012 	.word	0x10000012
 800323c:	20000090 	.word	0x20000090
 8003240:	431bde83 	.word	0x431bde83

08003244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800324c:	4b79      	ldr	r3, [pc, #484]	; (8003434 <ADC_Init+0x1f0>)
 800324e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	021a      	lsls	r2, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800329c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6899      	ldr	r1, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	4a58      	ldr	r2, [pc, #352]	; (8003438 <ADC_Init+0x1f4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d022      	beq.n	8003322 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6899      	ldr	r1, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800330c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6899      	ldr	r1, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	e00f      	b.n	8003342 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003340:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0202 	bic.w	r2, r2, #2
 8003350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6899      	ldr	r1, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7e1b      	ldrb	r3, [r3, #24]
 800335c:	005a      	lsls	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01b      	beq.n	80033a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800338e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6859      	ldr	r1, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	3b01      	subs	r3, #1
 800339c:	035a      	lsls	r2, r3, #13
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	e007      	b.n	80033b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	051a      	lsls	r2, r3, #20
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6899      	ldr	r1, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033fa:	025a      	lsls	r2, r3, #9
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6899      	ldr	r1, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	029a      	lsls	r2, r3, #10
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40012300 	.word	0x40012300
 8003438:	0f000001 	.word	0x0f000001

0800343c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <__NVIC_SetPriorityGrouping>:
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800346c:	4013      	ands	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003482:	4a04      	ldr	r2, [pc, #16]	; (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	60d3      	str	r3, [r2, #12]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_GetPriorityGrouping>:
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <__NVIC_GetPriorityGrouping+0x18>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 0307 	and.w	r3, r3, #7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_EnableIRQ>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	db0b      	blt.n	80034de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4907      	ldr	r1, [pc, #28]	; (80034ec <__NVIC_EnableIRQ+0x38>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2001      	movs	r0, #1
 80034d6:	fa00 f202 	lsl.w	r2, r0, r2
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <__NVIC_SetPriority>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	db0a      	blt.n	800351a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	490c      	ldr	r1, [pc, #48]	; (800353c <__NVIC_SetPriority+0x4c>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	440b      	add	r3, r1
 8003514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003518:	e00a      	b.n	8003530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4908      	ldr	r1, [pc, #32]	; (8003540 <__NVIC_SetPriority+0x50>)
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3b04      	subs	r3, #4
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	440b      	add	r3, r1
 800352e:	761a      	strb	r2, [r3, #24]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <NVIC_EncodePriority>:
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f1c3 0307 	rsb	r3, r3, #7
 800355e:	2b04      	cmp	r3, #4
 8003560:	bf28      	it	cs
 8003562:	2304      	movcs	r3, #4
 8003564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3304      	adds	r3, #4
 800356a:	2b06      	cmp	r3, #6
 800356c:	d902      	bls.n	8003574 <NVIC_EncodePriority+0x30>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3b03      	subs	r3, #3
 8003572:	e000      	b.n	8003576 <NVIC_EncodePriority+0x32>
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	f04f 32ff 	mov.w	r2, #4294967295
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	401a      	ands	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	43d9      	mvns	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	4313      	orrs	r3, r2
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3724      	adds	r7, #36	; 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <SysTick_Config>:
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035bc:	d301      	bcc.n	80035c2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80035be:	2301      	movs	r3, #1
 80035c0:	e00f      	b.n	80035e2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <SysTick_Config+0x40>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ca:	210f      	movs	r1, #15
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	f7ff ff8e 	bl	80034f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <SysTick_Config+0x40>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <SysTick_Config+0x40>)
 80035dc:	2207      	movs	r2, #7
 80035de:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	e000e010 	.word	0xe000e010

080035f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff29 	bl	8003450 <__NVIC_SetPriorityGrouping>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003606:	b580      	push	{r7, lr}
 8003608:	b086      	sub	sp, #24
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003618:	f7ff ff3e 	bl	8003498 <__NVIC_GetPriorityGrouping>
 800361c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f7ff ff8e 	bl	8003544 <NVIC_EncodePriority>
 8003628:	4602      	mov	r2, r0
 800362a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff5d 	bl	80034f0 <__NVIC_SetPriority>
}
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff ff31 	bl	80034b4 <__NVIC_EnableIRQ>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ffa2 	bl	80035ac <SysTick_Config>
 8003668:	4603      	mov	r3, r0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff fb30 	bl	8002ce4 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e099      	b.n	80037c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b0:	e00f      	b.n	80036d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036b2:	f7ff fb17 	bl	8002ce4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b05      	cmp	r3, #5
 80036be:	d908      	bls.n	80036d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2203      	movs	r2, #3
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e078      	b.n	80037c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e8      	bne.n	80036b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4b38      	ldr	r3, [pc, #224]	; (80037cc <HAL_DMA_Init+0x158>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003716:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	2b04      	cmp	r3, #4
 800372a:	d107      	bne.n	800373c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	4313      	orrs	r3, r2
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 0307 	bic.w	r3, r3, #7
 8003752:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2b04      	cmp	r3, #4
 8003764:	d117      	bne.n	8003796 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00e      	beq.n	8003796 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f9e9 	bl	8003b50 <DMA_CheckFifoParam>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003792:	2301      	movs	r3, #1
 8003794:	e016      	b.n	80037c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f9a0 	bl	8003ae4 <DMA_CalcBaseAndBitshift>
 80037a4:	4603      	mov	r3, r0
 80037a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	223f      	movs	r2, #63	; 0x3f
 80037ae:	409a      	lsls	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	f010803f 	.word	0xf010803f

080037d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037dc:	4b8e      	ldr	r3, [pc, #568]	; (8003a18 <HAL_DMA_IRQHandler+0x248>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a8e      	ldr	r2, [pc, #568]	; (8003a1c <HAL_DMA_IRQHandler+0x24c>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0a9b      	lsrs	r3, r3, #10
 80037e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	2208      	movs	r2, #8
 80037fc:	409a      	lsls	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4013      	ands	r3, r2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01a      	beq.n	800383c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d013      	beq.n	800383c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0204 	bic.w	r2, r2, #4
 8003822:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003828:	2208      	movs	r2, #8
 800382a:	409a      	lsls	r2, r3
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f043 0201 	orr.w	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	2201      	movs	r2, #1
 8003842:	409a      	lsls	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d012      	beq.n	8003872 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385e:	2201      	movs	r2, #1
 8003860:	409a      	lsls	r2, r3
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	f043 0202 	orr.w	r2, r3, #2
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	2204      	movs	r2, #4
 8003878:	409a      	lsls	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4013      	ands	r3, r2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d012      	beq.n	80038a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00b      	beq.n	80038a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	2204      	movs	r2, #4
 8003896:	409a      	lsls	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	f043 0204 	orr.w	r2, r3, #4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	2210      	movs	r2, #16
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d043      	beq.n	8003940 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03c      	beq.n	8003940 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	2210      	movs	r2, #16
 80038cc:	409a      	lsls	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d018      	beq.n	8003912 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d108      	bne.n	8003900 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d024      	beq.n	8003940 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
 80038fe:	e01f      	b.n	8003940 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01b      	beq.n	8003940 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
 8003910:	e016      	b.n	8003940 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0208 	bic.w	r2, r2, #8
 800392e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	2220      	movs	r2, #32
 8003946:	409a      	lsls	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 808f 	beq.w	8003a70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8087 	beq.w	8003a70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	2220      	movs	r2, #32
 8003968:	409a      	lsls	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b05      	cmp	r3, #5
 8003978:	d136      	bne.n	80039e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0216 	bic.w	r2, r2, #22
 8003988:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003998:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <HAL_DMA_IRQHandler+0x1da>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0208 	bic.w	r2, r2, #8
 80039b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	223f      	movs	r2, #63	; 0x3f
 80039c0:	409a      	lsls	r2, r3
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d07e      	beq.n	8003adc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
        }
        return;
 80039e6:	e079      	b.n	8003adc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01d      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10d      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d031      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
 8003a14:	e02c      	b.n	8003a70 <HAL_DMA_IRQHandler+0x2a0>
 8003a16:	bf00      	nop
 8003a18:	20000090 	.word	0x20000090
 8003a1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d023      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
 8003a30:	e01e      	b.n	8003a70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10f      	bne.n	8003a60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0210 	bic.w	r2, r2, #16
 8003a4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d032      	beq.n	8003ade <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d022      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2205      	movs	r2, #5
 8003a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d307      	bcc.n	8003ab8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f2      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x2cc>
 8003ab6:	e000      	b.n	8003aba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ab8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
 8003ada:	e000      	b.n	8003ade <HAL_DMA_IRQHandler+0x30e>
        return;
 8003adc:	bf00      	nop
    }
  }
}
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	3b10      	subs	r3, #16
 8003af4:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <DMA_CalcBaseAndBitshift+0x64>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003afe:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <DMA_CalcBaseAndBitshift+0x68>)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d909      	bls.n	8003b26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	1d1a      	adds	r2, r3, #4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	659a      	str	r2, [r3, #88]	; 0x58
 8003b24:	e007      	b.n	8003b36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b2e:	f023 0303 	bic.w	r3, r3, #3
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	aaaaaaab 	.word	0xaaaaaaab
 8003b4c:	0800a968 	.word	0x0800a968

08003b50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d11f      	bne.n	8003baa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d856      	bhi.n	8003c1e <DMA_CheckFifoParam+0xce>
 8003b70:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <DMA_CheckFifoParam+0x28>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003b89 	.word	0x08003b89
 8003b7c:	08003b9b 	.word	0x08003b9b
 8003b80:	08003b89 	.word	0x08003b89
 8003b84:	08003c1f 	.word	0x08003c1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d046      	beq.n	8003c22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b98:	e043      	b.n	8003c22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ba2:	d140      	bne.n	8003c26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba8:	e03d      	b.n	8003c26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb2:	d121      	bne.n	8003bf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d837      	bhi.n	8003c2a <DMA_CheckFifoParam+0xda>
 8003bba:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <DMA_CheckFifoParam+0x70>)
 8003bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc0:	08003bd1 	.word	0x08003bd1
 8003bc4:	08003bd7 	.word	0x08003bd7
 8003bc8:	08003bd1 	.word	0x08003bd1
 8003bcc:	08003be9 	.word	0x08003be9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd4:	e030      	b.n	8003c38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d025      	beq.n	8003c2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be6:	e022      	b.n	8003c2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bf0:	d11f      	bne.n	8003c32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bf6:	e01c      	b.n	8003c32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d903      	bls.n	8003c06 <DMA_CheckFifoParam+0xb6>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d003      	beq.n	8003c0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c04:	e018      	b.n	8003c38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0a:	e015      	b.n	8003c38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00e      	beq.n	8003c36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1c:	e00b      	b.n	8003c36 <DMA_CheckFifoParam+0xe6>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e00a      	b.n	8003c38 <DMA_CheckFifoParam+0xe8>
      break;
 8003c22:	bf00      	nop
 8003c24:	e008      	b.n	8003c38 <DMA_CheckFifoParam+0xe8>
      break;
 8003c26:	bf00      	nop
 8003c28:	e006      	b.n	8003c38 <DMA_CheckFifoParam+0xe8>
      break;
 8003c2a:	bf00      	nop
 8003c2c:	e004      	b.n	8003c38 <DMA_CheckFifoParam+0xe8>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e002      	b.n	8003c38 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c32:	bf00      	nop
 8003c34:	e000      	b.n	8003c38 <DMA_CheckFifoParam+0xe8>
      break;
 8003c36:	bf00      	nop
    }
  } 
  
  return status; 
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop

08003c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b089      	sub	sp, #36	; 0x24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	e165      	b.n	8003f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c64:	2201      	movs	r2, #1
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	f040 8154 	bne.w	8003f2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d005      	beq.n	8003c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d130      	bne.n	8003cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 0201 	and.w	r2, r3, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d017      	beq.n	8003d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	2203      	movs	r2, #3
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d123      	bne.n	8003d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	08da      	lsrs	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3208      	adds	r2, #8
 8003d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	220f      	movs	r2, #15
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	08da      	lsrs	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3208      	adds	r2, #8
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0203 	and.w	r2, r3, #3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80ae 	beq.w	8003f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	4b5d      	ldr	r3, [pc, #372]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	4a5c      	ldr	r2, [pc, #368]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dde:	4b5a      	ldr	r3, [pc, #360]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dea:	4a58      	ldr	r2, [pc, #352]	; (8003f4c <HAL_GPIO_Init+0x304>)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	3302      	adds	r3, #2
 8003df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	220f      	movs	r2, #15
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a4f      	ldr	r2, [pc, #316]	; (8003f50 <HAL_GPIO_Init+0x308>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d025      	beq.n	8003e62 <HAL_GPIO_Init+0x21a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a4e      	ldr	r2, [pc, #312]	; (8003f54 <HAL_GPIO_Init+0x30c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01f      	beq.n	8003e5e <HAL_GPIO_Init+0x216>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4d      	ldr	r2, [pc, #308]	; (8003f58 <HAL_GPIO_Init+0x310>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d019      	beq.n	8003e5a <HAL_GPIO_Init+0x212>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4c      	ldr	r2, [pc, #304]	; (8003f5c <HAL_GPIO_Init+0x314>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_GPIO_Init+0x20e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a4b      	ldr	r2, [pc, #300]	; (8003f60 <HAL_GPIO_Init+0x318>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00d      	beq.n	8003e52 <HAL_GPIO_Init+0x20a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a4a      	ldr	r2, [pc, #296]	; (8003f64 <HAL_GPIO_Init+0x31c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <HAL_GPIO_Init+0x206>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a49      	ldr	r2, [pc, #292]	; (8003f68 <HAL_GPIO_Init+0x320>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d101      	bne.n	8003e4a <HAL_GPIO_Init+0x202>
 8003e46:	2306      	movs	r3, #6
 8003e48:	e00c      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e4a:	2307      	movs	r3, #7
 8003e4c:	e00a      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e4e:	2305      	movs	r3, #5
 8003e50:	e008      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e52:	2304      	movs	r3, #4
 8003e54:	e006      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e56:	2303      	movs	r3, #3
 8003e58:	e004      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e002      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e62:	2300      	movs	r3, #0
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	f002 0203 	and.w	r2, r2, #3
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	4093      	lsls	r3, r2
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e74:	4935      	ldr	r1, [pc, #212]	; (8003f4c <HAL_GPIO_Init+0x304>)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e82:	4b3a      	ldr	r3, [pc, #232]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ea6:	4a31      	ldr	r2, [pc, #196]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eac:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ed0:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ed6:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003efa:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f00:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f24:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	2b0f      	cmp	r3, #15
 8003f34:	f67f ae96 	bls.w	8003c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	3724      	adds	r7, #36	; 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40020000 	.word	0x40020000
 8003f54:	40020400 	.word	0x40020400
 8003f58:	40020800 	.word	0x40020800
 8003f5c:	40020c00 	.word	0x40020c00
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40021400 	.word	0x40021400
 8003f68:	40021800 	.word	0x40021800
 8003f6c:	40013c00 	.word	0x40013c00

08003f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f80:	787b      	ldrb	r3, [r7, #1]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f8c:	e003      	b.n	8003f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f8e:	887b      	ldrh	r3, [r7, #2]
 8003f90:	041a      	lsls	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	619a      	str	r2, [r3, #24]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e12b      	b.n	800420e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fe fbd6 	bl	800277c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	; 0x24
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0201 	bic.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ff6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004006:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004008:	f001 f8e2 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 800400c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4a81      	ldr	r2, [pc, #516]	; (8004218 <HAL_I2C_Init+0x274>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d807      	bhi.n	8004028 <HAL_I2C_Init+0x84>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a80      	ldr	r2, [pc, #512]	; (800421c <HAL_I2C_Init+0x278>)
 800401c:	4293      	cmp	r3, r2
 800401e:	bf94      	ite	ls
 8004020:	2301      	movls	r3, #1
 8004022:	2300      	movhi	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e006      	b.n	8004036 <HAL_I2C_Init+0x92>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a7d      	ldr	r2, [pc, #500]	; (8004220 <HAL_I2C_Init+0x27c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	bf94      	ite	ls
 8004030:	2301      	movls	r3, #1
 8004032:	2300      	movhi	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0e7      	b.n	800420e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a78      	ldr	r2, [pc, #480]	; (8004224 <HAL_I2C_Init+0x280>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	0c9b      	lsrs	r3, r3, #18
 8004048:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4a6a      	ldr	r2, [pc, #424]	; (8004218 <HAL_I2C_Init+0x274>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d802      	bhi.n	8004078 <HAL_I2C_Init+0xd4>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	3301      	adds	r3, #1
 8004076:	e009      	b.n	800408c <HAL_I2C_Init+0xe8>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	4a69      	ldr	r2, [pc, #420]	; (8004228 <HAL_I2C_Init+0x284>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	3301      	adds	r3, #1
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	430b      	orrs	r3, r1
 8004092:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800409e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	495c      	ldr	r1, [pc, #368]	; (8004218 <HAL_I2C_Init+0x274>)
 80040a8:	428b      	cmp	r3, r1
 80040aa:	d819      	bhi.n	80040e0 <HAL_I2C_Init+0x13c>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1e59      	subs	r1, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ba:	1c59      	adds	r1, r3, #1
 80040bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040c0:	400b      	ands	r3, r1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_I2C_Init+0x138>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1e59      	subs	r1, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040d4:	3301      	adds	r3, #1
 80040d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040da:	e051      	b.n	8004180 <HAL_I2C_Init+0x1dc>
 80040dc:	2304      	movs	r3, #4
 80040de:	e04f      	b.n	8004180 <HAL_I2C_Init+0x1dc>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d111      	bne.n	800410c <HAL_I2C_Init+0x168>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1e58      	subs	r0, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6859      	ldr	r1, [r3, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	440b      	add	r3, r1
 80040f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e012      	b.n	8004132 <HAL_I2C_Init+0x18e>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1e58      	subs	r0, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	0099      	lsls	r1, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004122:	3301      	adds	r3, #1
 8004124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_I2C_Init+0x196>
 8004136:	2301      	movs	r3, #1
 8004138:	e022      	b.n	8004180 <HAL_I2C_Init+0x1dc>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10e      	bne.n	8004160 <HAL_I2C_Init+0x1bc>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1e58      	subs	r0, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6859      	ldr	r1, [r3, #4]
 800414a:	460b      	mov	r3, r1
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	440b      	add	r3, r1
 8004150:	fbb0 f3f3 	udiv	r3, r0, r3
 8004154:	3301      	adds	r3, #1
 8004156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800415e:	e00f      	b.n	8004180 <HAL_I2C_Init+0x1dc>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1e58      	subs	r0, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	0099      	lsls	r1, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	fbb0 f3f3 	udiv	r3, r0, r3
 8004176:	3301      	adds	r3, #1
 8004178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	6809      	ldr	r1, [r1, #0]
 8004184:	4313      	orrs	r3, r2
 8004186:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6911      	ldr	r1, [r2, #16]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68d2      	ldr	r2, [r2, #12]
 80041ba:	4311      	orrs	r1, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	000186a0 	.word	0x000186a0
 800421c:	001e847f 	.word	0x001e847f
 8004220:	003d08ff 	.word	0x003d08ff
 8004224:	431bde83 	.word	0x431bde83
 8004228:	10624dd3 	.word	0x10624dd3

0800422c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	461a      	mov	r2, r3
 800423a:	4603      	mov	r3, r0
 800423c:	817b      	strh	r3, [r7, #10]
 800423e:	460b      	mov	r3, r1
 8004240:	813b      	strh	r3, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004246:	f7fe fd4d 	bl	8002ce4 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b20      	cmp	r3, #32
 8004256:	f040 80d9 	bne.w	800440c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2319      	movs	r3, #25
 8004260:	2201      	movs	r2, #1
 8004262:	496d      	ldr	r1, [pc, #436]	; (8004418 <HAL_I2C_Mem_Write+0x1ec>)
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fc8b 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
 8004272:	e0cc      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_I2C_Mem_Write+0x56>
 800427e:	2302      	movs	r3, #2
 8004280:	e0c5      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d007      	beq.n	80042a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2221      	movs	r2, #33	; 0x21
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2240      	movs	r2, #64	; 0x40
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a4d      	ldr	r2, [pc, #308]	; (800441c <HAL_I2C_Mem_Write+0x1f0>)
 80042e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ea:	88f8      	ldrh	r0, [r7, #6]
 80042ec:	893a      	ldrh	r2, [r7, #8]
 80042ee:	8979      	ldrh	r1, [r7, #10]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	4603      	mov	r3, r0
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fac2 	bl	8004884 <I2C_RequestMemoryWrite>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d052      	beq.n	80043ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e081      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fd50 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	2b04      	cmp	r3, #4
 8004320:	d107      	bne.n	8004332 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004330:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e06b      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b04      	cmp	r3, #4
 8004372:	d11b      	bne.n	80043ac <HAL_I2C_Mem_Write+0x180>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	d017      	beq.n	80043ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1aa      	bne.n	800430a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fd43 	bl	8004e44 <I2C_WaitOnBTFFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d107      	bne.n	80043dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e016      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	e000      	b.n	800440e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800440c:	2302      	movs	r3, #2
  }
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	00100002 	.word	0x00100002
 800441c:	ffff0000 	.word	0xffff0000

08004420 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08c      	sub	sp, #48	; 0x30
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	4608      	mov	r0, r1
 800442a:	4611      	mov	r1, r2
 800442c:	461a      	mov	r2, r3
 800442e:	4603      	mov	r3, r0
 8004430:	817b      	strh	r3, [r7, #10]
 8004432:	460b      	mov	r3, r1
 8004434:	813b      	strh	r3, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800443a:	f7fe fc53 	bl	8002ce4 <HAL_GetTick>
 800443e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b20      	cmp	r3, #32
 800444a:	f040 8214 	bne.w	8004876 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	2319      	movs	r3, #25
 8004454:	2201      	movs	r2, #1
 8004456:	497b      	ldr	r1, [pc, #492]	; (8004644 <HAL_I2C_Mem_Read+0x224>)
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fb91 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
 8004466:	e207      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_I2C_Mem_Read+0x56>
 8004472:	2302      	movs	r3, #2
 8004474:	e200      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d007      	beq.n	800449c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2222      	movs	r2, #34	; 0x22
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2240      	movs	r2, #64	; 0x40
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80044cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a5b      	ldr	r2, [pc, #364]	; (8004648 <HAL_I2C_Mem_Read+0x228>)
 80044dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044de:	88f8      	ldrh	r0, [r7, #6]
 80044e0:	893a      	ldrh	r2, [r7, #8]
 80044e2:	8979      	ldrh	r1, [r7, #10]
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	9301      	str	r3, [sp, #4]
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	4603      	mov	r3, r0
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fa5e 	bl	80049b0 <I2C_RequestMemoryRead>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e1bc      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d113      	bne.n	800452e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004506:	2300      	movs	r3, #0
 8004508:	623b      	str	r3, [r7, #32]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	623b      	str	r3, [r7, #32]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e190      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004532:	2b01      	cmp	r3, #1
 8004534:	d11b      	bne.n	800456e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e170      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004572:	2b02      	cmp	r3, #2
 8004574:	d11b      	bne.n	80045ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004584:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	e150      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045c4:	e144      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	f200 80f1 	bhi.w	80047b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d123      	bne.n	8004620 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fc79 	bl	8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e145      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800461e:	e117      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004624:	2b02      	cmp	r3, #2
 8004626:	d14e      	bne.n	80046c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	2200      	movs	r2, #0
 8004630:	4906      	ldr	r1, [pc, #24]	; (800464c <HAL_I2C_Mem_Read+0x22c>)
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 faa4 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e11a      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
 8004642:	bf00      	nop
 8004644:	00100002 	.word	0x00100002
 8004648:	ffff0000 	.word	0xffff0000
 800464c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800465e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046c4:	e0c4      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	2200      	movs	r2, #0
 80046ce:	496c      	ldr	r1, [pc, #432]	; (8004880 <HAL_I2C_Mem_Read+0x460>)
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fa55 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0cb      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	2200      	movs	r2, #0
 800472a:	4955      	ldr	r1, [pc, #340]	; (8004880 <HAL_I2C_Mem_Read+0x460>)
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fa27 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e09d      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047b0:	e04e      	b.n	8004850 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fb8c 	bl	8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e058      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b04      	cmp	r3, #4
 8004804:	d124      	bne.n	8004850 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480a:	2b03      	cmp	r3, #3
 800480c:	d107      	bne.n	800481e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	f47f aeb6 	bne.w	80045c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3728      	adds	r7, #40	; 0x28
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	00010004 	.word	0x00010004

08004884 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	4608      	mov	r0, r1
 800488e:	4611      	mov	r1, r2
 8004890:	461a      	mov	r2, r3
 8004892:	4603      	mov	r3, r0
 8004894:	817b      	strh	r3, [r7, #10]
 8004896:	460b      	mov	r3, r1
 8004898:	813b      	strh	r3, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f960 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00d      	beq.n	80048e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d4:	d103      	bne.n	80048de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e05f      	b.n	80049a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048e2:	897b      	ldrh	r3, [r7, #10]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	6a3a      	ldr	r2, [r7, #32]
 80048f6:	492d      	ldr	r1, [pc, #180]	; (80049ac <I2C_RequestMemoryWrite+0x128>)
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f9bb 	bl	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e04c      	b.n	80049a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800491e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004920:	6a39      	ldr	r1, [r7, #32]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fa46 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b04      	cmp	r3, #4
 8004934:	d107      	bne.n	8004946 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004944:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e02b      	b.n	80049a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d105      	bne.n	800495c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004950:	893b      	ldrh	r3, [r7, #8]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	611a      	str	r2, [r3, #16]
 800495a:	e021      	b.n	80049a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800495c:	893b      	ldrh	r3, [r7, #8]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	b29b      	uxth	r3, r3
 8004962:	b2da      	uxtb	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800496a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496c:	6a39      	ldr	r1, [r7, #32]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fa20 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b04      	cmp	r3, #4
 8004980:	d107      	bne.n	8004992 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004990:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e005      	b.n	80049a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004996:	893b      	ldrh	r3, [r7, #8]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	00010002 	.word	0x00010002

080049b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	817b      	strh	r3, [r7, #10]
 80049c2:	460b      	mov	r3, r1
 80049c4:	813b      	strh	r3, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f8c2 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a10:	d103      	bne.n	8004a1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e0aa      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a1e:	897b      	ldrh	r3, [r7, #10]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	6a3a      	ldr	r2, [r7, #32]
 8004a32:	4952      	ldr	r1, [pc, #328]	; (8004b7c <I2C_RequestMemoryRead+0x1cc>)
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f91d 	bl	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e097      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5c:	6a39      	ldr	r1, [r7, #32]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f9a8 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00d      	beq.n	8004a86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d107      	bne.n	8004a82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e076      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d105      	bne.n	8004a98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a8c:	893b      	ldrh	r3, [r7, #8]
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	611a      	str	r2, [r3, #16]
 8004a96:	e021      	b.n	8004adc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a98:	893b      	ldrh	r3, [r7, #8]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa8:	6a39      	ldr	r1, [r7, #32]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f982 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d107      	bne.n	8004ace <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004acc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e050      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ad2:	893b      	ldrh	r3, [r7, #8]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ade:	6a39      	ldr	r1, [r7, #32]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f967 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00d      	beq.n	8004b08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d107      	bne.n	8004b04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e035      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f82b 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3e:	d103      	bne.n	8004b48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e013      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b4c:	897b      	ldrh	r3, [r7, #10]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	6a3a      	ldr	r2, [r7, #32]
 8004b60:	4906      	ldr	r1, [pc, #24]	; (8004b7c <I2C_RequestMemoryRead+0x1cc>)
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f886 	bl	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	00010002 	.word	0x00010002

08004b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b90:	e048      	b.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d044      	beq.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9a:	f7fe f8a3 	bl	8002ce4 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d139      	bne.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	0c1b      	lsrs	r3, r3, #16
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d10d      	bne.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	43da      	mvns	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	e00c      	b.n	8004bf0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	43da      	mvns	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4013      	ands	r3, r2
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf0c      	ite	eq
 8004be8:	2301      	moveq	r3, #1
 8004bea:	2300      	movne	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d116      	bne.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e023      	b.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10d      	bne.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	43da      	mvns	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	e00c      	b.n	8004c64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	43da      	mvns	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4013      	ands	r3, r2
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d093      	beq.n	8004b92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c82:	e071      	b.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c92:	d123      	bne.n	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	f043 0204 	orr.w	r2, r3, #4
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e067      	b.n	8004dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d041      	beq.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce4:	f7fd fffe 	bl	8002ce4 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d302      	bcc.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d136      	bne.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d10c      	bne.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf14      	ite	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	2300      	moveq	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e00b      	b.n	8004d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	43da      	mvns	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d016      	beq.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e021      	b.n	8004dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d10c      	bne.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	43da      	mvns	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e00b      	b.n	8004da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	43da      	mvns	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4013      	ands	r3, r2
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bf14      	ite	ne
 8004d9e:	2301      	movne	r3, #1
 8004da0:	2300      	moveq	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f47f af6d 	bne.w	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dc0:	e034      	b.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f8e3 	bl	8004f8e <I2C_IsAcknowledgeFailed>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e034      	b.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d028      	beq.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dda:	f7fd ff83 	bl	8002ce4 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d11d      	bne.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d016      	beq.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	f043 0220 	orr.w	r2, r3, #32
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e007      	b.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b80      	cmp	r3, #128	; 0x80
 8004e38:	d1c3      	bne.n	8004dc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e50:	e034      	b.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f89b 	bl	8004f8e <I2C_IsAcknowledgeFailed>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e034      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d028      	beq.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6a:	f7fd ff3b 	bl	8002ce4 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11d      	bne.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d016      	beq.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e007      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d1c3      	bne.n	8004e52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee0:	e049      	b.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d119      	bne.n	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0210 	mvn.w	r2, #16
 8004ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e030      	b.n	8004f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f24:	f7fd fede 	bl	8002ce4 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d302      	bcc.n	8004f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d11d      	bne.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d016      	beq.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e007      	b.n	8004f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	d1ae      	bne.n	8004ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa4:	d11b      	bne.n	8004fde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f043 0204 	orr.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0cc      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005000:	4b68      	ldr	r3, [pc, #416]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d90c      	bls.n	8005028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b65      	ldr	r3, [pc, #404]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b63      	ldr	r3, [pc, #396]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0b8      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d020      	beq.n	8005076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005040:	4b59      	ldr	r3, [pc, #356]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a58      	ldr	r2, [pc, #352]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800504a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005058:	4b53      	ldr	r3, [pc, #332]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4a52      	ldr	r2, [pc, #328]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005064:	4b50      	ldr	r3, [pc, #320]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	494d      	ldr	r1, [pc, #308]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	4313      	orrs	r3, r2
 8005074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d044      	beq.n	800510c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508a:	4b47      	ldr	r3, [pc, #284]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d119      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e07f      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d003      	beq.n	80050aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050aa:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e06f      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ba:	4b3b      	ldr	r3, [pc, #236]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e067      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ca:	4b37      	ldr	r3, [pc, #220]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f023 0203 	bic.w	r2, r3, #3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4934      	ldr	r1, [pc, #208]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050dc:	f7fd fe02 	bl	8002ce4 <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e4:	f7fd fdfe 	bl	8002ce4 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e04f      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	4b2b      	ldr	r3, [pc, #172]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 020c 	and.w	r2, r3, #12
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	429a      	cmp	r2, r3
 800510a:	d1eb      	bne.n	80050e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800510c:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d20c      	bcs.n	8005134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005122:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d001      	beq.n	8005134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e032      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005140:	4b19      	ldr	r3, [pc, #100]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4916      	ldr	r1, [pc, #88]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	490e      	ldr	r1, [pc, #56]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005172:	f000 f855 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 8005176:	4602      	mov	r2, r0
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	490a      	ldr	r1, [pc, #40]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005184:	5ccb      	ldrb	r3, [r1, r3]
 8005186:	fa22 f303 	lsr.w	r3, r2, r3
 800518a:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800518c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fd fd62 	bl	8002c5c <HAL_InitTick>

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40023c00 	.word	0x40023c00
 80051a8:	40023800 	.word	0x40023800
 80051ac:	0800a950 	.word	0x0800a950
 80051b0:	20000090 	.word	0x20000090
 80051b4:	20000094 	.word	0x20000094

080051b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051bc:	4b03      	ldr	r3, [pc, #12]	; (80051cc <HAL_RCC_GetHCLKFreq+0x14>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000090 	.word	0x20000090

080051d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051d4:	f7ff fff0 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0a9b      	lsrs	r3, r3, #10
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4903      	ldr	r1, [pc, #12]	; (80051f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40023800 	.word	0x40023800
 80051f4:	0800a960 	.word	0x0800a960

080051f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051fc:	f7ff ffdc 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	0b5b      	lsrs	r3, r3, #13
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4903      	ldr	r1, [pc, #12]	; (800521c <HAL_RCC_GetPCLK2Freq+0x24>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40023800 	.word	0x40023800
 800521c:	0800a960 	.word	0x0800a960

08005220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005224:	b0ae      	sub	sp, #184	; 0xb8
 8005226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005246:	4bcb      	ldr	r3, [pc, #812]	; (8005574 <HAL_RCC_GetSysClockFreq+0x354>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b0c      	cmp	r3, #12
 8005250:	f200 8206 	bhi.w	8005660 <HAL_RCC_GetSysClockFreq+0x440>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005291 	.word	0x08005291
 8005260:	08005661 	.word	0x08005661
 8005264:	08005661 	.word	0x08005661
 8005268:	08005661 	.word	0x08005661
 800526c:	08005299 	.word	0x08005299
 8005270:	08005661 	.word	0x08005661
 8005274:	08005661 	.word	0x08005661
 8005278:	08005661 	.word	0x08005661
 800527c:	080052a1 	.word	0x080052a1
 8005280:	08005661 	.word	0x08005661
 8005284:	08005661 	.word	0x08005661
 8005288:	08005661 	.word	0x08005661
 800528c:	08005491 	.word	0x08005491
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4bb9      	ldr	r3, [pc, #740]	; (8005578 <HAL_RCC_GetSysClockFreq+0x358>)
 8005292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005296:	e1e7      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005298:	4bb8      	ldr	r3, [pc, #736]	; (800557c <HAL_RCC_GetSysClockFreq+0x35c>)
 800529a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800529e:	e1e3      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052a0:	4bb4      	ldr	r3, [pc, #720]	; (8005574 <HAL_RCC_GetSysClockFreq+0x354>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ac:	4bb1      	ldr	r3, [pc, #708]	; (8005574 <HAL_RCC_GetSysClockFreq+0x354>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d071      	beq.n	800539c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b8:	4bae      	ldr	r3, [pc, #696]	; (8005574 <HAL_RCC_GetSysClockFreq+0x354>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	099b      	lsrs	r3, r3, #6
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80052c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052d4:	2300      	movs	r3, #0
 80052d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052de:	4622      	mov	r2, r4
 80052e0:	462b      	mov	r3, r5
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	0159      	lsls	r1, r3, #5
 80052ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052f0:	0150      	lsls	r0, r2, #5
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4621      	mov	r1, r4
 80052f8:	1a51      	subs	r1, r2, r1
 80052fa:	6439      	str	r1, [r7, #64]	; 0x40
 80052fc:	4629      	mov	r1, r5
 80052fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005302:	647b      	str	r3, [r7, #68]	; 0x44
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005310:	4649      	mov	r1, r9
 8005312:	018b      	lsls	r3, r1, #6
 8005314:	4641      	mov	r1, r8
 8005316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800531a:	4641      	mov	r1, r8
 800531c:	018a      	lsls	r2, r1, #6
 800531e:	4641      	mov	r1, r8
 8005320:	1a51      	subs	r1, r2, r1
 8005322:	63b9      	str	r1, [r7, #56]	; 0x38
 8005324:	4649      	mov	r1, r9
 8005326:	eb63 0301 	sbc.w	r3, r3, r1
 800532a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005338:	4649      	mov	r1, r9
 800533a:	00cb      	lsls	r3, r1, #3
 800533c:	4641      	mov	r1, r8
 800533e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005342:	4641      	mov	r1, r8
 8005344:	00ca      	lsls	r2, r1, #3
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	4603      	mov	r3, r0
 800534c:	4622      	mov	r2, r4
 800534e:	189b      	adds	r3, r3, r2
 8005350:	633b      	str	r3, [r7, #48]	; 0x30
 8005352:	462b      	mov	r3, r5
 8005354:	460a      	mov	r2, r1
 8005356:	eb42 0303 	adc.w	r3, r2, r3
 800535a:	637b      	str	r3, [r7, #52]	; 0x34
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005368:	4629      	mov	r1, r5
 800536a:	024b      	lsls	r3, r1, #9
 800536c:	4621      	mov	r1, r4
 800536e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005372:	4621      	mov	r1, r4
 8005374:	024a      	lsls	r2, r1, #9
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800537e:	2200      	movs	r2, #0
 8005380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005384:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005388:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800538c:	f7fb fc9c 	bl	8000cc8 <__aeabi_uldivmod>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4613      	mov	r3, r2
 8005396:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800539a:	e067      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539c:	4b75      	ldr	r3, [pc, #468]	; (8005574 <HAL_RCC_GetSysClockFreq+0x354>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	099b      	lsrs	r3, r3, #6
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80053ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053b6:	2300      	movs	r3, #0
 80053b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80053be:	4622      	mov	r2, r4
 80053c0:	462b      	mov	r3, r5
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f04f 0100 	mov.w	r1, #0
 80053ca:	0159      	lsls	r1, r3, #5
 80053cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053d0:	0150      	lsls	r0, r2, #5
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4621      	mov	r1, r4
 80053d8:	1a51      	subs	r1, r2, r1
 80053da:	62b9      	str	r1, [r7, #40]	; 0x28
 80053dc:	4629      	mov	r1, r5
 80053de:	eb63 0301 	sbc.w	r3, r3, r1
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80053f0:	4649      	mov	r1, r9
 80053f2:	018b      	lsls	r3, r1, #6
 80053f4:	4641      	mov	r1, r8
 80053f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053fa:	4641      	mov	r1, r8
 80053fc:	018a      	lsls	r2, r1, #6
 80053fe:	4641      	mov	r1, r8
 8005400:	ebb2 0a01 	subs.w	sl, r2, r1
 8005404:	4649      	mov	r1, r9
 8005406:	eb63 0b01 	sbc.w	fp, r3, r1
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005416:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800541a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800541e:	4692      	mov	sl, r2
 8005420:	469b      	mov	fp, r3
 8005422:	4623      	mov	r3, r4
 8005424:	eb1a 0303 	adds.w	r3, sl, r3
 8005428:	623b      	str	r3, [r7, #32]
 800542a:	462b      	mov	r3, r5
 800542c:	eb4b 0303 	adc.w	r3, fp, r3
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800543e:	4629      	mov	r1, r5
 8005440:	028b      	lsls	r3, r1, #10
 8005442:	4621      	mov	r1, r4
 8005444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005448:	4621      	mov	r1, r4
 800544a:	028a      	lsls	r2, r1, #10
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005454:	2200      	movs	r2, #0
 8005456:	673b      	str	r3, [r7, #112]	; 0x70
 8005458:	677a      	str	r2, [r7, #116]	; 0x74
 800545a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800545e:	f7fb fc33 	bl	8000cc8 <__aeabi_uldivmod>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4613      	mov	r3, r2
 8005468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800546c:	4b41      	ldr	r3, [pc, #260]	; (8005574 <HAL_RCC_GetSysClockFreq+0x354>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	0c1b      	lsrs	r3, r3, #16
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	3301      	adds	r3, #1
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800547e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005486:	fbb2 f3f3 	udiv	r3, r2, r3
 800548a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800548e:	e0eb      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005490:	4b38      	ldr	r3, [pc, #224]	; (8005574 <HAL_RCC_GetSysClockFreq+0x354>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800549c:	4b35      	ldr	r3, [pc, #212]	; (8005574 <HAL_RCC_GetSysClockFreq+0x354>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d06b      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054a8:	4b32      	ldr	r3, [pc, #200]	; (8005574 <HAL_RCC_GetSysClockFreq+0x354>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	099b      	lsrs	r3, r3, #6
 80054ae:	2200      	movs	r2, #0
 80054b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ba:	663b      	str	r3, [r7, #96]	; 0x60
 80054bc:	2300      	movs	r3, #0
 80054be:	667b      	str	r3, [r7, #100]	; 0x64
 80054c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80054c4:	4622      	mov	r2, r4
 80054c6:	462b      	mov	r3, r5
 80054c8:	f04f 0000 	mov.w	r0, #0
 80054cc:	f04f 0100 	mov.w	r1, #0
 80054d0:	0159      	lsls	r1, r3, #5
 80054d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054d6:	0150      	lsls	r0, r2, #5
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4621      	mov	r1, r4
 80054de:	1a51      	subs	r1, r2, r1
 80054e0:	61b9      	str	r1, [r7, #24]
 80054e2:	4629      	mov	r1, r5
 80054e4:	eb63 0301 	sbc.w	r3, r3, r1
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80054f6:	4659      	mov	r1, fp
 80054f8:	018b      	lsls	r3, r1, #6
 80054fa:	4651      	mov	r1, sl
 80054fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005500:	4651      	mov	r1, sl
 8005502:	018a      	lsls	r2, r1, #6
 8005504:	4651      	mov	r1, sl
 8005506:	ebb2 0801 	subs.w	r8, r2, r1
 800550a:	4659      	mov	r1, fp
 800550c:	eb63 0901 	sbc.w	r9, r3, r1
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800551c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005520:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005524:	4690      	mov	r8, r2
 8005526:	4699      	mov	r9, r3
 8005528:	4623      	mov	r3, r4
 800552a:	eb18 0303 	adds.w	r3, r8, r3
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	462b      	mov	r3, r5
 8005532:	eb49 0303 	adc.w	r3, r9, r3
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005544:	4629      	mov	r1, r5
 8005546:	024b      	lsls	r3, r1, #9
 8005548:	4621      	mov	r1, r4
 800554a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800554e:	4621      	mov	r1, r4
 8005550:	024a      	lsls	r2, r1, #9
 8005552:	4610      	mov	r0, r2
 8005554:	4619      	mov	r1, r3
 8005556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800555a:	2200      	movs	r2, #0
 800555c:	65bb      	str	r3, [r7, #88]	; 0x58
 800555e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005560:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005564:	f7fb fbb0 	bl	8000cc8 <__aeabi_uldivmod>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4613      	mov	r3, r2
 800556e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005572:	e065      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x420>
 8005574:	40023800 	.word	0x40023800
 8005578:	00f42400 	.word	0x00f42400
 800557c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005580:	4b3d      	ldr	r3, [pc, #244]	; (8005678 <HAL_RCC_GetSysClockFreq+0x458>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	099b      	lsrs	r3, r3, #6
 8005586:	2200      	movs	r2, #0
 8005588:	4618      	mov	r0, r3
 800558a:	4611      	mov	r1, r2
 800558c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005590:	653b      	str	r3, [r7, #80]	; 0x50
 8005592:	2300      	movs	r3, #0
 8005594:	657b      	str	r3, [r7, #84]	; 0x54
 8005596:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800559a:	4642      	mov	r2, r8
 800559c:	464b      	mov	r3, r9
 800559e:	f04f 0000 	mov.w	r0, #0
 80055a2:	f04f 0100 	mov.w	r1, #0
 80055a6:	0159      	lsls	r1, r3, #5
 80055a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ac:	0150      	lsls	r0, r2, #5
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4641      	mov	r1, r8
 80055b4:	1a51      	subs	r1, r2, r1
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	4649      	mov	r1, r9
 80055ba:	eb63 0301 	sbc.w	r3, r3, r1
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80055cc:	4659      	mov	r1, fp
 80055ce:	018b      	lsls	r3, r1, #6
 80055d0:	4651      	mov	r1, sl
 80055d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055d6:	4651      	mov	r1, sl
 80055d8:	018a      	lsls	r2, r1, #6
 80055da:	4651      	mov	r1, sl
 80055dc:	1a54      	subs	r4, r2, r1
 80055de:	4659      	mov	r1, fp
 80055e0:	eb63 0501 	sbc.w	r5, r3, r1
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	00eb      	lsls	r3, r5, #3
 80055ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055f2:	00e2      	lsls	r2, r4, #3
 80055f4:	4614      	mov	r4, r2
 80055f6:	461d      	mov	r5, r3
 80055f8:	4643      	mov	r3, r8
 80055fa:	18e3      	adds	r3, r4, r3
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	464b      	mov	r3, r9
 8005600:	eb45 0303 	adc.w	r3, r5, r3
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005612:	4629      	mov	r1, r5
 8005614:	028b      	lsls	r3, r1, #10
 8005616:	4621      	mov	r1, r4
 8005618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800561c:	4621      	mov	r1, r4
 800561e:	028a      	lsls	r2, r1, #10
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005628:	2200      	movs	r2, #0
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
 800562c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800562e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005632:	f7fb fb49 	bl	8000cc8 <__aeabi_uldivmod>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4613      	mov	r3, r2
 800563c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <HAL_RCC_GetSysClockFreq+0x458>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	0f1b      	lsrs	r3, r3, #28
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800564e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800565e:	e003      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005662:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005666:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005668:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800566c:	4618      	mov	r0, r3
 800566e:	37b8      	adds	r7, #184	; 0xb8
 8005670:	46bd      	mov	sp, r7
 8005672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800
 800567c:	00f42400 	.word	0x00f42400

08005680 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e28d      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8083 	beq.w	80057a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056a0:	4b94      	ldr	r3, [pc, #592]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d019      	beq.n	80056e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056ac:	4b91      	ldr	r3, [pc, #580]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d106      	bne.n	80056c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056b8:	4b8e      	ldr	r3, [pc, #568]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056c4:	d00c      	beq.n	80056e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056c6:	4b8b      	ldr	r3, [pc, #556]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056ce:	2b0c      	cmp	r3, #12
 80056d0:	d112      	bne.n	80056f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056d2:	4b88      	ldr	r3, [pc, #544]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056de:	d10b      	bne.n	80056f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e0:	4b84      	ldr	r3, [pc, #528]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d05b      	beq.n	80057a4 <HAL_RCC_OscConfig+0x124>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d157      	bne.n	80057a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e25a      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005700:	d106      	bne.n	8005710 <HAL_RCC_OscConfig+0x90>
 8005702:	4b7c      	ldr	r3, [pc, #496]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a7b      	ldr	r2, [pc, #492]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e01d      	b.n	800574c <HAL_RCC_OscConfig+0xcc>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005718:	d10c      	bne.n	8005734 <HAL_RCC_OscConfig+0xb4>
 800571a:	4b76      	ldr	r3, [pc, #472]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a75      	ldr	r2, [pc, #468]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4b73      	ldr	r3, [pc, #460]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a72      	ldr	r2, [pc, #456]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e00b      	b.n	800574c <HAL_RCC_OscConfig+0xcc>
 8005734:	4b6f      	ldr	r3, [pc, #444]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a6e      	ldr	r2, [pc, #440]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 800573a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	4b6c      	ldr	r3, [pc, #432]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a6b      	ldr	r2, [pc, #428]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d013      	beq.n	800577c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fd fac6 	bl	8002ce4 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800575c:	f7fd fac2 	bl	8002ce4 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b64      	cmp	r3, #100	; 0x64
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e21f      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	4b61      	ldr	r3, [pc, #388]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HAL_RCC_OscConfig+0xdc>
 800577a:	e014      	b.n	80057a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fd fab2 	bl	8002ce4 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005784:	f7fd faae 	bl	8002ce4 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e20b      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005796:	4b57      	ldr	r3, [pc, #348]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x104>
 80057a2:	e000      	b.n	80057a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d06f      	beq.n	8005892 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057b2:	4b50      	ldr	r3, [pc, #320]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d017      	beq.n	80057ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057be:	4b4d      	ldr	r3, [pc, #308]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d105      	bne.n	80057d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057ca:	4b4a      	ldr	r3, [pc, #296]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d6:	4b47      	ldr	r3, [pc, #284]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057de:	2b0c      	cmp	r3, #12
 80057e0:	d11c      	bne.n	800581c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e2:	4b44      	ldr	r3, [pc, #272]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d116      	bne.n	800581c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ee:	4b41      	ldr	r3, [pc, #260]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_RCC_OscConfig+0x186>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d001      	beq.n	8005806 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e1d3      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005806:	4b3b      	ldr	r3, [pc, #236]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4937      	ldr	r1, [pc, #220]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005816:	4313      	orrs	r3, r2
 8005818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800581a:	e03a      	b.n	8005892 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d020      	beq.n	8005866 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005824:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <HAL_RCC_OscConfig+0x278>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582a:	f7fd fa5b 	bl	8002ce4 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005832:	f7fd fa57 	bl	8002ce4 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e1b4      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005844:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005850:	4b28      	ldr	r3, [pc, #160]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4925      	ldr	r1, [pc, #148]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005860:	4313      	orrs	r3, r2
 8005862:	600b      	str	r3, [r1, #0]
 8005864:	e015      	b.n	8005892 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <HAL_RCC_OscConfig+0x278>)
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fd fa3a 	bl	8002ce4 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005874:	f7fd fa36 	bl	8002ce4 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e193      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005886:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f0      	bne.n	8005874 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d036      	beq.n	800590c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d016      	beq.n	80058d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058a6:	4b15      	ldr	r3, [pc, #84]	; (80058fc <HAL_RCC_OscConfig+0x27c>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ac:	f7fd fa1a 	bl	8002ce4 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b4:	f7fd fa16 	bl	8002ce4 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e173      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80058c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCC_OscConfig+0x234>
 80058d2:	e01b      	b.n	800590c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d4:	4b09      	ldr	r3, [pc, #36]	; (80058fc <HAL_RCC_OscConfig+0x27c>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058da:	f7fd fa03 	bl	8002ce4 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e0:	e00e      	b.n	8005900 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e2:	f7fd f9ff 	bl	8002ce4 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d907      	bls.n	8005900 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e15c      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
 80058f4:	40023800 	.word	0x40023800
 80058f8:	42470000 	.word	0x42470000
 80058fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005900:	4b8a      	ldr	r3, [pc, #552]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1ea      	bne.n	80058e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8097 	beq.w	8005a48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591a:	2300      	movs	r3, #0
 800591c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800591e:	4b83      	ldr	r3, [pc, #524]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10f      	bne.n	800594a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	4b7f      	ldr	r3, [pc, #508]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	4a7e      	ldr	r2, [pc, #504]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005938:	6413      	str	r3, [r2, #64]	; 0x40
 800593a:	4b7c      	ldr	r3, [pc, #496]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594a:	4b79      	ldr	r3, [pc, #484]	; (8005b30 <HAL_RCC_OscConfig+0x4b0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d118      	bne.n	8005988 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005956:	4b76      	ldr	r3, [pc, #472]	; (8005b30 <HAL_RCC_OscConfig+0x4b0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a75      	ldr	r2, [pc, #468]	; (8005b30 <HAL_RCC_OscConfig+0x4b0>)
 800595c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005962:	f7fd f9bf 	bl	8002ce4 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596a:	f7fd f9bb 	bl	8002ce4 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e118      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	4b6c      	ldr	r3, [pc, #432]	; (8005b30 <HAL_RCC_OscConfig+0x4b0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d106      	bne.n	800599e <HAL_RCC_OscConfig+0x31e>
 8005990:	4b66      	ldr	r3, [pc, #408]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	4a65      	ldr	r2, [pc, #404]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	6713      	str	r3, [r2, #112]	; 0x70
 800599c:	e01c      	b.n	80059d8 <HAL_RCC_OscConfig+0x358>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	d10c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x340>
 80059a6:	4b61      	ldr	r3, [pc, #388]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	4a60      	ldr	r2, [pc, #384]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059ac:	f043 0304 	orr.w	r3, r3, #4
 80059b0:	6713      	str	r3, [r2, #112]	; 0x70
 80059b2:	4b5e      	ldr	r3, [pc, #376]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	4a5d      	ldr	r2, [pc, #372]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	6713      	str	r3, [r2, #112]	; 0x70
 80059be:	e00b      	b.n	80059d8 <HAL_RCC_OscConfig+0x358>
 80059c0:	4b5a      	ldr	r3, [pc, #360]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c4:	4a59      	ldr	r2, [pc, #356]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	6713      	str	r3, [r2, #112]	; 0x70
 80059cc:	4b57      	ldr	r3, [pc, #348]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d0:	4a56      	ldr	r2, [pc, #344]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059d2:	f023 0304 	bic.w	r3, r3, #4
 80059d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d015      	beq.n	8005a0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e0:	f7fd f980 	bl	8002ce4 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e6:	e00a      	b.n	80059fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059e8:	f7fd f97c 	bl	8002ce4 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e0d7      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fe:	4b4b      	ldr	r3, [pc, #300]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0ee      	beq.n	80059e8 <HAL_RCC_OscConfig+0x368>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0c:	f7fd f96a 	bl	8002ce4 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a12:	e00a      	b.n	8005a2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a14:	f7fd f966 	bl	8002ce4 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e0c1      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2a:	4b40      	ldr	r3, [pc, #256]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1ee      	bne.n	8005a14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d105      	bne.n	8005a48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a3c:	4b3b      	ldr	r3, [pc, #236]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	4a3a      	ldr	r2, [pc, #232]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80ad 	beq.w	8005bac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a52:	4b36      	ldr	r3, [pc, #216]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d060      	beq.n	8005b20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d145      	bne.n	8005af2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a66:	4b33      	ldr	r3, [pc, #204]	; (8005b34 <HAL_RCC_OscConfig+0x4b4>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6c:	f7fd f93a 	bl	8002ce4 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a74:	f7fd f936 	bl	8002ce4 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e093      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a86:	4b29      	ldr	r3, [pc, #164]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	041b      	lsls	r3, r3, #16
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	061b      	lsls	r3, r3, #24
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	071b      	lsls	r3, r3, #28
 8005abe:	491b      	ldr	r1, [pc, #108]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <HAL_RCC_OscConfig+0x4b4>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aca:	f7fd f90b 	bl	8002ce4 <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad2:	f7fd f907 	bl	8002ce4 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e064      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae4:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x452>
 8005af0:	e05c      	b.n	8005bac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <HAL_RCC_OscConfig+0x4b4>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fd f8f4 	bl	8002ce4 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b00:	f7fd f8f0 	bl	8002ce4 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e04d      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x480>
 8005b1e:	e045      	b.n	8005bac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e040      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	40007000 	.word	0x40007000
 8005b34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b38:	4b1f      	ldr	r3, [pc, #124]	; (8005bb8 <HAL_RCC_OscConfig+0x538>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d030      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d129      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d122      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d119      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	3b01      	subs	r3, #1
 8005b82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d10f      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d107      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d001      	beq.n	8005bac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40023800 	.word	0x40023800

08005bbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e041      	b.n	8005c52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fc fe12 	bl	800280c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f000 f9b8 	bl	8005f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <HAL_TIM_PWM_Start+0x24>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	bf14      	ite	ne
 8005c78:	2301      	movne	r3, #1
 8005c7a:	2300      	moveq	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	e022      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x6a>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d109      	bne.n	8005c9a <HAL_TIM_PWM_Start+0x3e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	e015      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x6a>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d109      	bne.n	8005cb4 <HAL_TIM_PWM_Start+0x58>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	e008      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x6a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e07c      	b.n	8005dc8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_PWM_Start+0x82>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cdc:	e013      	b.n	8005d06 <HAL_TIM_PWM_Start+0xaa>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Start+0x92>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cec:	e00b      	b.n	8005d06 <HAL_TIM_PWM_Start+0xaa>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d104      	bne.n	8005cfe <HAL_TIM_PWM_Start+0xa2>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cfc:	e003      	b.n	8005d06 <HAL_TIM_PWM_Start+0xaa>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fb8a 	bl	8006428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2d      	ldr	r2, [pc, #180]	; (8005dd0 <HAL_TIM_PWM_Start+0x174>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <HAL_TIM_PWM_Start+0xcc>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2c      	ldr	r2, [pc, #176]	; (8005dd4 <HAL_TIM_PWM_Start+0x178>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_PWM_Start+0xd0>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <HAL_TIM_PWM_Start+0xd2>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a22      	ldr	r2, [pc, #136]	; (8005dd0 <HAL_TIM_PWM_Start+0x174>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d022      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d54:	d01d      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <HAL_TIM_PWM_Start+0x17c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d018      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1d      	ldr	r2, [pc, #116]	; (8005ddc <HAL_TIM_PWM_Start+0x180>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <HAL_TIM_PWM_Start+0x184>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00e      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <HAL_TIM_PWM_Start+0x178>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <HAL_TIM_PWM_Start+0x188>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <HAL_TIM_PWM_Start+0x18c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d111      	bne.n	8005db6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b06      	cmp	r3, #6
 8005da2:	d010      	beq.n	8005dc6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db4:	e007      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0201 	orr.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40010400 	.word	0x40010400
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40001800 	.word	0x40001800

08005dec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e0ae      	b.n	8005f68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b0c      	cmp	r3, #12
 8005e16:	f200 809f 	bhi.w	8005f58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e1a:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005e55 	.word	0x08005e55
 8005e24:	08005f59 	.word	0x08005f59
 8005e28:	08005f59 	.word	0x08005f59
 8005e2c:	08005f59 	.word	0x08005f59
 8005e30:	08005e95 	.word	0x08005e95
 8005e34:	08005f59 	.word	0x08005f59
 8005e38:	08005f59 	.word	0x08005f59
 8005e3c:	08005f59 	.word	0x08005f59
 8005e40:	08005ed7 	.word	0x08005ed7
 8005e44:	08005f59 	.word	0x08005f59
 8005e48:	08005f59 	.word	0x08005f59
 8005e4c:	08005f59 	.word	0x08005f59
 8005e50:	08005f17 	.word	0x08005f17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 f934 	bl	80060c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0208 	orr.w	r2, r2, #8
 8005e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0204 	bic.w	r2, r2, #4
 8005e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6999      	ldr	r1, [r3, #24]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	619a      	str	r2, [r3, #24]
      break;
 8005e92:	e064      	b.n	8005f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 f984 	bl	80061a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6999      	ldr	r1, [r3, #24]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	021a      	lsls	r2, r3, #8
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	619a      	str	r2, [r3, #24]
      break;
 8005ed4:	e043      	b.n	8005f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 f9d9 	bl	8006294 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0208 	orr.w	r2, r2, #8
 8005ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0204 	bic.w	r2, r2, #4
 8005f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69d9      	ldr	r1, [r3, #28]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	61da      	str	r2, [r3, #28]
      break;
 8005f14:	e023      	b.n	8005f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fa2d 	bl	800637c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69da      	ldr	r2, [r3, #28]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69d9      	ldr	r1, [r3, #28]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	021a      	lsls	r2, r3, #8
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	61da      	str	r2, [r3, #28]
      break;
 8005f56:	e002      	b.n	8005f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a46      	ldr	r2, [pc, #280]	; (800609c <TIM_Base_SetConfig+0x12c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8e:	d00f      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a43      	ldr	r2, [pc, #268]	; (80060a0 <TIM_Base_SetConfig+0x130>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00b      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a42      	ldr	r2, [pc, #264]	; (80060a4 <TIM_Base_SetConfig+0x134>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d007      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a41      	ldr	r2, [pc, #260]	; (80060a8 <TIM_Base_SetConfig+0x138>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a40      	ldr	r2, [pc, #256]	; (80060ac <TIM_Base_SetConfig+0x13c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d108      	bne.n	8005fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a35      	ldr	r2, [pc, #212]	; (800609c <TIM_Base_SetConfig+0x12c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d02b      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd0:	d027      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a32      	ldr	r2, [pc, #200]	; (80060a0 <TIM_Base_SetConfig+0x130>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d023      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a31      	ldr	r2, [pc, #196]	; (80060a4 <TIM_Base_SetConfig+0x134>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01f      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a30      	ldr	r2, [pc, #192]	; (80060a8 <TIM_Base_SetConfig+0x138>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d01b      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a2f      	ldr	r2, [pc, #188]	; (80060ac <TIM_Base_SetConfig+0x13c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d017      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2e      	ldr	r2, [pc, #184]	; (80060b0 <TIM_Base_SetConfig+0x140>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d013      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2d      	ldr	r2, [pc, #180]	; (80060b4 <TIM_Base_SetConfig+0x144>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00f      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2c      	ldr	r2, [pc, #176]	; (80060b8 <TIM_Base_SetConfig+0x148>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00b      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2b      	ldr	r2, [pc, #172]	; (80060bc <TIM_Base_SetConfig+0x14c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d007      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2a      	ldr	r2, [pc, #168]	; (80060c0 <TIM_Base_SetConfig+0x150>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d003      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a29      	ldr	r2, [pc, #164]	; (80060c4 <TIM_Base_SetConfig+0x154>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d108      	bne.n	8006034 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a10      	ldr	r2, [pc, #64]	; (800609c <TIM_Base_SetConfig+0x12c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_Base_SetConfig+0xf8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a12      	ldr	r2, [pc, #72]	; (80060ac <TIM_Base_SetConfig+0x13c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d103      	bne.n	8006070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d105      	bne.n	800608e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	611a      	str	r2, [r3, #16]
  }
}
 800608e:	bf00      	nop
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40010000 	.word	0x40010000
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40010400 	.word	0x40010400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800
 80060bc:	40001800 	.word	0x40001800
 80060c0:	40001c00 	.word	0x40001c00
 80060c4:	40002000 	.word	0x40002000

080060c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	f023 0201 	bic.w	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0303 	bic.w	r3, r3, #3
 80060fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f023 0302 	bic.w	r3, r3, #2
 8006110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a20      	ldr	r2, [pc, #128]	; (80061a0 <TIM_OC1_SetConfig+0xd8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_OC1_SetConfig+0x64>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a1f      	ldr	r2, [pc, #124]	; (80061a4 <TIM_OC1_SetConfig+0xdc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d10c      	bne.n	8006146 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f023 0308 	bic.w	r3, r3, #8
 8006132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f023 0304 	bic.w	r3, r3, #4
 8006144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a15      	ldr	r2, [pc, #84]	; (80061a0 <TIM_OC1_SetConfig+0xd8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_OC1_SetConfig+0x8e>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a14      	ldr	r2, [pc, #80]	; (80061a4 <TIM_OC1_SetConfig+0xdc>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d111      	bne.n	800617a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800615c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	621a      	str	r2, [r3, #32]
}
 8006194:	bf00      	nop
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40010400 	.word	0x40010400

080061a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	f023 0210 	bic.w	r2, r3, #16
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0320 	bic.w	r3, r3, #32
 80061f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a22      	ldr	r2, [pc, #136]	; (800628c <TIM_OC2_SetConfig+0xe4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_OC2_SetConfig+0x68>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a21      	ldr	r2, [pc, #132]	; (8006290 <TIM_OC2_SetConfig+0xe8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d10d      	bne.n	800622c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a17      	ldr	r2, [pc, #92]	; (800628c <TIM_OC2_SetConfig+0xe4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <TIM_OC2_SetConfig+0x94>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a16      	ldr	r2, [pc, #88]	; (8006290 <TIM_OC2_SetConfig+0xe8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d113      	bne.n	8006264 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800624a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40010000 	.word	0x40010000
 8006290:	40010400 	.word	0x40010400

08006294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0303 	bic.w	r3, r3, #3
 80062ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a21      	ldr	r2, [pc, #132]	; (8006374 <TIM_OC3_SetConfig+0xe0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d003      	beq.n	80062fa <TIM_OC3_SetConfig+0x66>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a20      	ldr	r2, [pc, #128]	; (8006378 <TIM_OC3_SetConfig+0xe4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d10d      	bne.n	8006316 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a16      	ldr	r2, [pc, #88]	; (8006374 <TIM_OC3_SetConfig+0xe0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_OC3_SetConfig+0x92>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a15      	ldr	r2, [pc, #84]	; (8006378 <TIM_OC3_SetConfig+0xe4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d113      	bne.n	800634e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800632c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	621a      	str	r2, [r3, #32]
}
 8006368:	bf00      	nop
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	40010000 	.word	0x40010000
 8006378:	40010400 	.word	0x40010400

0800637c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	031b      	lsls	r3, r3, #12
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a12      	ldr	r2, [pc, #72]	; (8006420 <TIM_OC4_SetConfig+0xa4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_OC4_SetConfig+0x68>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a11      	ldr	r2, [pc, #68]	; (8006424 <TIM_OC4_SetConfig+0xa8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d109      	bne.n	80063f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	019b      	lsls	r3, r3, #6
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40010000 	.word	0x40010000
 8006424:	40010400 	.word	0x40010400

08006428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	2201      	movs	r2, #1
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1a      	ldr	r2, [r3, #32]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	43db      	mvns	r3, r3
 800644a:	401a      	ands	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1a      	ldr	r2, [r3, #32]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	fa01 f303 	lsl.w	r3, r1, r3
 8006460:	431a      	orrs	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
	...

08006474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006488:	2302      	movs	r3, #2
 800648a:	e05a      	b.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a21      	ldr	r2, [pc, #132]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d022      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d8:	d01d      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1d      	ldr	r2, [pc, #116]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a1a      	ldr	r2, [pc, #104]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a18      	ldr	r2, [pc, #96]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a17      	ldr	r2, [pc, #92]	; (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a15      	ldr	r2, [pc, #84]	; (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d10c      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4313      	orrs	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40010000 	.word	0x40010000
 8006554:	40000400 	.word	0x40000400
 8006558:	40000800 	.word	0x40000800
 800655c:	40000c00 	.word	0x40000c00
 8006560:	40010400 	.word	0x40010400
 8006564:	40014000 	.word	0x40014000
 8006568:	40001800 	.word	0x40001800

0800656c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e042      	b.n	8006604 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d106      	bne.n	8006598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fc f9ca 	bl	800292c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2224      	movs	r2, #36	; 0x24
 800659c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f82b 	bl	800660c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800660c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006610:	b0c0      	sub	sp, #256	; 0x100
 8006612:	af00      	add	r7, sp, #0
 8006614:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006628:	68d9      	ldr	r1, [r3, #12]
 800662a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	ea40 0301 	orr.w	r3, r0, r1
 8006634:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	431a      	orrs	r2, r3
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	431a      	orrs	r2, r3
 800664c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006664:	f021 010c 	bic.w	r1, r1, #12
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006672:	430b      	orrs	r3, r1
 8006674:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	6999      	ldr	r1, [r3, #24]
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	ea40 0301 	orr.w	r3, r0, r1
 8006692:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b8f      	ldr	r3, [pc, #572]	; (80068d8 <UART_SetConfig+0x2cc>)
 800669c:	429a      	cmp	r2, r3
 800669e:	d005      	beq.n	80066ac <UART_SetConfig+0xa0>
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	4b8d      	ldr	r3, [pc, #564]	; (80068dc <UART_SetConfig+0x2d0>)
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d104      	bne.n	80066b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066ac:	f7fe fda4 	bl	80051f8 <HAL_RCC_GetPCLK2Freq>
 80066b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066b4:	e003      	b.n	80066be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066b6:	f7fe fd8b 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 80066ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c8:	f040 810c 	bne.w	80068e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066de:	4622      	mov	r2, r4
 80066e0:	462b      	mov	r3, r5
 80066e2:	1891      	adds	r1, r2, r2
 80066e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80066e6:	415b      	adcs	r3, r3
 80066e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066ee:	4621      	mov	r1, r4
 80066f0:	eb12 0801 	adds.w	r8, r2, r1
 80066f4:	4629      	mov	r1, r5
 80066f6:	eb43 0901 	adc.w	r9, r3, r1
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800670a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800670e:	4690      	mov	r8, r2
 8006710:	4699      	mov	r9, r3
 8006712:	4623      	mov	r3, r4
 8006714:	eb18 0303 	adds.w	r3, r8, r3
 8006718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800671c:	462b      	mov	r3, r5
 800671e:	eb49 0303 	adc.w	r3, r9, r3
 8006722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006732:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006736:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800673a:	460b      	mov	r3, r1
 800673c:	18db      	adds	r3, r3, r3
 800673e:	653b      	str	r3, [r7, #80]	; 0x50
 8006740:	4613      	mov	r3, r2
 8006742:	eb42 0303 	adc.w	r3, r2, r3
 8006746:	657b      	str	r3, [r7, #84]	; 0x54
 8006748:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800674c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006750:	f7fa faba 	bl	8000cc8 <__aeabi_uldivmod>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4b61      	ldr	r3, [pc, #388]	; (80068e0 <UART_SetConfig+0x2d4>)
 800675a:	fba3 2302 	umull	r2, r3, r3, r2
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	011c      	lsls	r4, r3, #4
 8006762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006766:	2200      	movs	r2, #0
 8006768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800676c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006770:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	1891      	adds	r1, r2, r2
 800677a:	64b9      	str	r1, [r7, #72]	; 0x48
 800677c:	415b      	adcs	r3, r3
 800677e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006780:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006784:	4641      	mov	r1, r8
 8006786:	eb12 0a01 	adds.w	sl, r2, r1
 800678a:	4649      	mov	r1, r9
 800678c:	eb43 0b01 	adc.w	fp, r3, r1
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800679c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067a4:	4692      	mov	sl, r2
 80067a6:	469b      	mov	fp, r3
 80067a8:	4643      	mov	r3, r8
 80067aa:	eb1a 0303 	adds.w	r3, sl, r3
 80067ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067b2:	464b      	mov	r3, r9
 80067b4:	eb4b 0303 	adc.w	r3, fp, r3
 80067b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067d0:	460b      	mov	r3, r1
 80067d2:	18db      	adds	r3, r3, r3
 80067d4:	643b      	str	r3, [r7, #64]	; 0x40
 80067d6:	4613      	mov	r3, r2
 80067d8:	eb42 0303 	adc.w	r3, r2, r3
 80067dc:	647b      	str	r3, [r7, #68]	; 0x44
 80067de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067e6:	f7fa fa6f 	bl	8000cc8 <__aeabi_uldivmod>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	4b3b      	ldr	r3, [pc, #236]	; (80068e0 <UART_SetConfig+0x2d4>)
 80067f2:	fba3 2301 	umull	r2, r3, r3, r1
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	2264      	movs	r2, #100	; 0x64
 80067fa:	fb02 f303 	mul.w	r3, r2, r3
 80067fe:	1acb      	subs	r3, r1, r3
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006806:	4b36      	ldr	r3, [pc, #216]	; (80068e0 <UART_SetConfig+0x2d4>)
 8006808:	fba3 2302 	umull	r2, r3, r3, r2
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006814:	441c      	add	r4, r3
 8006816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800681a:	2200      	movs	r2, #0
 800681c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006820:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006824:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006828:	4642      	mov	r2, r8
 800682a:	464b      	mov	r3, r9
 800682c:	1891      	adds	r1, r2, r2
 800682e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006830:	415b      	adcs	r3, r3
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006834:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006838:	4641      	mov	r1, r8
 800683a:	1851      	adds	r1, r2, r1
 800683c:	6339      	str	r1, [r7, #48]	; 0x30
 800683e:	4649      	mov	r1, r9
 8006840:	414b      	adcs	r3, r1
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006850:	4659      	mov	r1, fp
 8006852:	00cb      	lsls	r3, r1, #3
 8006854:	4651      	mov	r1, sl
 8006856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800685a:	4651      	mov	r1, sl
 800685c:	00ca      	lsls	r2, r1, #3
 800685e:	4610      	mov	r0, r2
 8006860:	4619      	mov	r1, r3
 8006862:	4603      	mov	r3, r0
 8006864:	4642      	mov	r2, r8
 8006866:	189b      	adds	r3, r3, r2
 8006868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800686c:	464b      	mov	r3, r9
 800686e:	460a      	mov	r2, r1
 8006870:	eb42 0303 	adc.w	r3, r2, r3
 8006874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006884:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006888:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800688c:	460b      	mov	r3, r1
 800688e:	18db      	adds	r3, r3, r3
 8006890:	62bb      	str	r3, [r7, #40]	; 0x28
 8006892:	4613      	mov	r3, r2
 8006894:	eb42 0303 	adc.w	r3, r2, r3
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800689a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800689e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068a2:	f7fa fa11 	bl	8000cc8 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <UART_SetConfig+0x2d4>)
 80068ac:	fba3 1302 	umull	r1, r3, r3, r2
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	2164      	movs	r1, #100	; 0x64
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	3332      	adds	r3, #50	; 0x32
 80068be:	4a08      	ldr	r2, [pc, #32]	; (80068e0 <UART_SetConfig+0x2d4>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	f003 0207 	and.w	r2, r3, #7
 80068ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4422      	add	r2, r4
 80068d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068d4:	e106      	b.n	8006ae4 <UART_SetConfig+0x4d8>
 80068d6:	bf00      	nop
 80068d8:	40011000 	.word	0x40011000
 80068dc:	40011400 	.word	0x40011400
 80068e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068f6:	4642      	mov	r2, r8
 80068f8:	464b      	mov	r3, r9
 80068fa:	1891      	adds	r1, r2, r2
 80068fc:	6239      	str	r1, [r7, #32]
 80068fe:	415b      	adcs	r3, r3
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
 8006902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006906:	4641      	mov	r1, r8
 8006908:	1854      	adds	r4, r2, r1
 800690a:	4649      	mov	r1, r9
 800690c:	eb43 0501 	adc.w	r5, r3, r1
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	00eb      	lsls	r3, r5, #3
 800691a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800691e:	00e2      	lsls	r2, r4, #3
 8006920:	4614      	mov	r4, r2
 8006922:	461d      	mov	r5, r3
 8006924:	4643      	mov	r3, r8
 8006926:	18e3      	adds	r3, r4, r3
 8006928:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800692c:	464b      	mov	r3, r9
 800692e:	eb45 0303 	adc.w	r3, r5, r3
 8006932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006942:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006952:	4629      	mov	r1, r5
 8006954:	008b      	lsls	r3, r1, #2
 8006956:	4621      	mov	r1, r4
 8006958:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800695c:	4621      	mov	r1, r4
 800695e:	008a      	lsls	r2, r1, #2
 8006960:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006964:	f7fa f9b0 	bl	8000cc8 <__aeabi_uldivmod>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4b60      	ldr	r3, [pc, #384]	; (8006af0 <UART_SetConfig+0x4e4>)
 800696e:	fba3 2302 	umull	r2, r3, r3, r2
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	011c      	lsls	r4, r3, #4
 8006976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800697a:	2200      	movs	r2, #0
 800697c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006980:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006984:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006988:	4642      	mov	r2, r8
 800698a:	464b      	mov	r3, r9
 800698c:	1891      	adds	r1, r2, r2
 800698e:	61b9      	str	r1, [r7, #24]
 8006990:	415b      	adcs	r3, r3
 8006992:	61fb      	str	r3, [r7, #28]
 8006994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006998:	4641      	mov	r1, r8
 800699a:	1851      	adds	r1, r2, r1
 800699c:	6139      	str	r1, [r7, #16]
 800699e:	4649      	mov	r1, r9
 80069a0:	414b      	adcs	r3, r1
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069b0:	4659      	mov	r1, fp
 80069b2:	00cb      	lsls	r3, r1, #3
 80069b4:	4651      	mov	r1, sl
 80069b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ba:	4651      	mov	r1, sl
 80069bc:	00ca      	lsls	r2, r1, #3
 80069be:	4610      	mov	r0, r2
 80069c0:	4619      	mov	r1, r3
 80069c2:	4603      	mov	r3, r0
 80069c4:	4642      	mov	r2, r8
 80069c6:	189b      	adds	r3, r3, r2
 80069c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069cc:	464b      	mov	r3, r9
 80069ce:	460a      	mov	r2, r1
 80069d0:	eb42 0303 	adc.w	r3, r2, r3
 80069d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80069e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069f0:	4649      	mov	r1, r9
 80069f2:	008b      	lsls	r3, r1, #2
 80069f4:	4641      	mov	r1, r8
 80069f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069fa:	4641      	mov	r1, r8
 80069fc:	008a      	lsls	r2, r1, #2
 80069fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a02:	f7fa f961 	bl	8000cc8 <__aeabi_uldivmod>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4b38      	ldr	r3, [pc, #224]	; (8006af0 <UART_SetConfig+0x4e4>)
 8006a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	2264      	movs	r2, #100	; 0x64
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
 8006a1a:	1acb      	subs	r3, r1, r3
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	3332      	adds	r3, #50	; 0x32
 8006a20:	4a33      	ldr	r2, [pc, #204]	; (8006af0 <UART_SetConfig+0x4e4>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a2c:	441c      	add	r4, r3
 8006a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a32:	2200      	movs	r2, #0
 8006a34:	673b      	str	r3, [r7, #112]	; 0x70
 8006a36:	677a      	str	r2, [r7, #116]	; 0x74
 8006a38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	464b      	mov	r3, r9
 8006a40:	1891      	adds	r1, r2, r2
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	415b      	adcs	r3, r3
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	1851      	adds	r1, r2, r1
 8006a50:	6039      	str	r1, [r7, #0]
 8006a52:	4649      	mov	r1, r9
 8006a54:	414b      	adcs	r3, r1
 8006a56:	607b      	str	r3, [r7, #4]
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	f04f 0300 	mov.w	r3, #0
 8006a60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a64:	4659      	mov	r1, fp
 8006a66:	00cb      	lsls	r3, r1, #3
 8006a68:	4651      	mov	r1, sl
 8006a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a6e:	4651      	mov	r1, sl
 8006a70:	00ca      	lsls	r2, r1, #3
 8006a72:	4610      	mov	r0, r2
 8006a74:	4619      	mov	r1, r3
 8006a76:	4603      	mov	r3, r0
 8006a78:	4642      	mov	r2, r8
 8006a7a:	189b      	adds	r3, r3, r2
 8006a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a7e:	464b      	mov	r3, r9
 8006a80:	460a      	mov	r2, r1
 8006a82:	eb42 0303 	adc.w	r3, r2, r3
 8006a86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	663b      	str	r3, [r7, #96]	; 0x60
 8006a92:	667a      	str	r2, [r7, #100]	; 0x64
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	008b      	lsls	r3, r1, #2
 8006aa4:	4641      	mov	r1, r8
 8006aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aaa:	4641      	mov	r1, r8
 8006aac:	008a      	lsls	r2, r1, #2
 8006aae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ab2:	f7fa f909 	bl	8000cc8 <__aeabi_uldivmod>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <UART_SetConfig+0x4e4>)
 8006abc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	2164      	movs	r1, #100	; 0x64
 8006ac4:	fb01 f303 	mul.w	r3, r1, r3
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	3332      	adds	r3, #50	; 0x32
 8006ace:	4a08      	ldr	r2, [pc, #32]	; (8006af0 <UART_SetConfig+0x4e4>)
 8006ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	f003 020f 	and.w	r2, r3, #15
 8006ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4422      	add	r2, r4
 8006ae2:	609a      	str	r2, [r3, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006aea:	46bd      	mov	sp, r7
 8006aec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006af0:	51eb851f 	.word	0x51eb851f

08006af4 <__cvt>:
 8006af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006af8:	ec55 4b10 	vmov	r4, r5, d0
 8006afc:	2d00      	cmp	r5, #0
 8006afe:	460e      	mov	r6, r1
 8006b00:	4619      	mov	r1, r3
 8006b02:	462b      	mov	r3, r5
 8006b04:	bfbb      	ittet	lt
 8006b06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b0a:	461d      	movlt	r5, r3
 8006b0c:	2300      	movge	r3, #0
 8006b0e:	232d      	movlt	r3, #45	; 0x2d
 8006b10:	700b      	strb	r3, [r1, #0]
 8006b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b18:	4691      	mov	r9, r2
 8006b1a:	f023 0820 	bic.w	r8, r3, #32
 8006b1e:	bfbc      	itt	lt
 8006b20:	4622      	movlt	r2, r4
 8006b22:	4614      	movlt	r4, r2
 8006b24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b28:	d005      	beq.n	8006b36 <__cvt+0x42>
 8006b2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b2e:	d100      	bne.n	8006b32 <__cvt+0x3e>
 8006b30:	3601      	adds	r6, #1
 8006b32:	2102      	movs	r1, #2
 8006b34:	e000      	b.n	8006b38 <__cvt+0x44>
 8006b36:	2103      	movs	r1, #3
 8006b38:	ab03      	add	r3, sp, #12
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	ab02      	add	r3, sp, #8
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	ec45 4b10 	vmov	d0, r4, r5
 8006b44:	4653      	mov	r3, sl
 8006b46:	4632      	mov	r2, r6
 8006b48:	f000 ff4a 	bl	80079e0 <_dtoa_r>
 8006b4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b50:	4607      	mov	r7, r0
 8006b52:	d102      	bne.n	8006b5a <__cvt+0x66>
 8006b54:	f019 0f01 	tst.w	r9, #1
 8006b58:	d022      	beq.n	8006ba0 <__cvt+0xac>
 8006b5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b5e:	eb07 0906 	add.w	r9, r7, r6
 8006b62:	d110      	bne.n	8006b86 <__cvt+0x92>
 8006b64:	783b      	ldrb	r3, [r7, #0]
 8006b66:	2b30      	cmp	r3, #48	; 0x30
 8006b68:	d10a      	bne.n	8006b80 <__cvt+0x8c>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4620      	mov	r0, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	f7f9 ffc9 	bl	8000b08 <__aeabi_dcmpeq>
 8006b76:	b918      	cbnz	r0, 8006b80 <__cvt+0x8c>
 8006b78:	f1c6 0601 	rsb	r6, r6, #1
 8006b7c:	f8ca 6000 	str.w	r6, [sl]
 8006b80:	f8da 3000 	ldr.w	r3, [sl]
 8006b84:	4499      	add	r9, r3
 8006b86:	2200      	movs	r2, #0
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	f7f9 ffbb 	bl	8000b08 <__aeabi_dcmpeq>
 8006b92:	b108      	cbz	r0, 8006b98 <__cvt+0xa4>
 8006b94:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b98:	2230      	movs	r2, #48	; 0x30
 8006b9a:	9b03      	ldr	r3, [sp, #12]
 8006b9c:	454b      	cmp	r3, r9
 8006b9e:	d307      	bcc.n	8006bb0 <__cvt+0xbc>
 8006ba0:	9b03      	ldr	r3, [sp, #12]
 8006ba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ba4:	1bdb      	subs	r3, r3, r7
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	b004      	add	sp, #16
 8006bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb0:	1c59      	adds	r1, r3, #1
 8006bb2:	9103      	str	r1, [sp, #12]
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	e7f0      	b.n	8006b9a <__cvt+0xa6>

08006bb8 <__exponent>:
 8006bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	bfb8      	it	lt
 8006bc0:	4249      	neglt	r1, r1
 8006bc2:	f803 2b02 	strb.w	r2, [r3], #2
 8006bc6:	bfb4      	ite	lt
 8006bc8:	222d      	movlt	r2, #45	; 0x2d
 8006bca:	222b      	movge	r2, #43	; 0x2b
 8006bcc:	2909      	cmp	r1, #9
 8006bce:	7042      	strb	r2, [r0, #1]
 8006bd0:	dd2a      	ble.n	8006c28 <__exponent+0x70>
 8006bd2:	f10d 0207 	add.w	r2, sp, #7
 8006bd6:	4617      	mov	r7, r2
 8006bd8:	260a      	movs	r6, #10
 8006bda:	4694      	mov	ip, r2
 8006bdc:	fb91 f5f6 	sdiv	r5, r1, r6
 8006be0:	fb06 1415 	mls	r4, r6, r5, r1
 8006be4:	3430      	adds	r4, #48	; 0x30
 8006be6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006bea:	460c      	mov	r4, r1
 8006bec:	2c63      	cmp	r4, #99	; 0x63
 8006bee:	f102 32ff 	add.w	r2, r2, #4294967295
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	dcf1      	bgt.n	8006bda <__exponent+0x22>
 8006bf6:	3130      	adds	r1, #48	; 0x30
 8006bf8:	f1ac 0402 	sub.w	r4, ip, #2
 8006bfc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c00:	1c41      	adds	r1, r0, #1
 8006c02:	4622      	mov	r2, r4
 8006c04:	42ba      	cmp	r2, r7
 8006c06:	d30a      	bcc.n	8006c1e <__exponent+0x66>
 8006c08:	f10d 0209 	add.w	r2, sp, #9
 8006c0c:	eba2 020c 	sub.w	r2, r2, ip
 8006c10:	42bc      	cmp	r4, r7
 8006c12:	bf88      	it	hi
 8006c14:	2200      	movhi	r2, #0
 8006c16:	4413      	add	r3, r2
 8006c18:	1a18      	subs	r0, r3, r0
 8006c1a:	b003      	add	sp, #12
 8006c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c22:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006c26:	e7ed      	b.n	8006c04 <__exponent+0x4c>
 8006c28:	2330      	movs	r3, #48	; 0x30
 8006c2a:	3130      	adds	r1, #48	; 0x30
 8006c2c:	7083      	strb	r3, [r0, #2]
 8006c2e:	70c1      	strb	r1, [r0, #3]
 8006c30:	1d03      	adds	r3, r0, #4
 8006c32:	e7f1      	b.n	8006c18 <__exponent+0x60>

08006c34 <_printf_float>:
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	ed2d 8b02 	vpush	{d8}
 8006c3c:	b08d      	sub	sp, #52	; 0x34
 8006c3e:	460c      	mov	r4, r1
 8006c40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c44:	4616      	mov	r6, r2
 8006c46:	461f      	mov	r7, r3
 8006c48:	4605      	mov	r5, r0
 8006c4a:	f000 fdc9 	bl	80077e0 <_localeconv_r>
 8006c4e:	f8d0 a000 	ldr.w	sl, [r0]
 8006c52:	4650      	mov	r0, sl
 8006c54:	f7f9 fb2c 	bl	80002b0 <strlen>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	9305      	str	r3, [sp, #20]
 8006c60:	f8d8 3000 	ldr.w	r3, [r8]
 8006c64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c68:	3307      	adds	r3, #7
 8006c6a:	f023 0307 	bic.w	r3, r3, #7
 8006c6e:	f103 0208 	add.w	r2, r3, #8
 8006c72:	f8c8 2000 	str.w	r2, [r8]
 8006c76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c7e:	9307      	str	r3, [sp, #28]
 8006c80:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c84:	ee08 0a10 	vmov	s16, r0
 8006c88:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c90:	4b9e      	ldr	r3, [pc, #632]	; (8006f0c <_printf_float+0x2d8>)
 8006c92:	f04f 32ff 	mov.w	r2, #4294967295
 8006c96:	f7f9 ff69 	bl	8000b6c <__aeabi_dcmpun>
 8006c9a:	bb88      	cbnz	r0, 8006d00 <_printf_float+0xcc>
 8006c9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ca0:	4b9a      	ldr	r3, [pc, #616]	; (8006f0c <_printf_float+0x2d8>)
 8006ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca6:	f7f9 ff43 	bl	8000b30 <__aeabi_dcmple>
 8006caa:	bb48      	cbnz	r0, 8006d00 <_printf_float+0xcc>
 8006cac:	2200      	movs	r2, #0
 8006cae:	2300      	movs	r3, #0
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	f7f9 ff32 	bl	8000b1c <__aeabi_dcmplt>
 8006cb8:	b110      	cbz	r0, 8006cc0 <_printf_float+0x8c>
 8006cba:	232d      	movs	r3, #45	; 0x2d
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc0:	4a93      	ldr	r2, [pc, #588]	; (8006f10 <_printf_float+0x2dc>)
 8006cc2:	4b94      	ldr	r3, [pc, #592]	; (8006f14 <_printf_float+0x2e0>)
 8006cc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006cc8:	bf94      	ite	ls
 8006cca:	4690      	movls	r8, r2
 8006ccc:	4698      	movhi	r8, r3
 8006cce:	2303      	movs	r3, #3
 8006cd0:	6123      	str	r3, [r4, #16]
 8006cd2:	9b05      	ldr	r3, [sp, #20]
 8006cd4:	f023 0304 	bic.w	r3, r3, #4
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	f04f 0900 	mov.w	r9, #0
 8006cde:	9700      	str	r7, [sp, #0]
 8006ce0:	4633      	mov	r3, r6
 8006ce2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f000 f9da 	bl	80070a0 <_printf_common>
 8006cec:	3001      	adds	r0, #1
 8006cee:	f040 8090 	bne.w	8006e12 <_printf_float+0x1de>
 8006cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf6:	b00d      	add	sp, #52	; 0x34
 8006cf8:	ecbd 8b02 	vpop	{d8}
 8006cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d00:	4642      	mov	r2, r8
 8006d02:	464b      	mov	r3, r9
 8006d04:	4640      	mov	r0, r8
 8006d06:	4649      	mov	r1, r9
 8006d08:	f7f9 ff30 	bl	8000b6c <__aeabi_dcmpun>
 8006d0c:	b140      	cbz	r0, 8006d20 <_printf_float+0xec>
 8006d0e:	464b      	mov	r3, r9
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bfbc      	itt	lt
 8006d14:	232d      	movlt	r3, #45	; 0x2d
 8006d16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d1a:	4a7f      	ldr	r2, [pc, #508]	; (8006f18 <_printf_float+0x2e4>)
 8006d1c:	4b7f      	ldr	r3, [pc, #508]	; (8006f1c <_printf_float+0x2e8>)
 8006d1e:	e7d1      	b.n	8006cc4 <_printf_float+0x90>
 8006d20:	6863      	ldr	r3, [r4, #4]
 8006d22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d26:	9206      	str	r2, [sp, #24]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	d13f      	bne.n	8006dac <_printf_float+0x178>
 8006d2c:	2306      	movs	r3, #6
 8006d2e:	6063      	str	r3, [r4, #4]
 8006d30:	9b05      	ldr	r3, [sp, #20]
 8006d32:	6861      	ldr	r1, [r4, #4]
 8006d34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9303      	str	r3, [sp, #12]
 8006d3c:	ab0a      	add	r3, sp, #40	; 0x28
 8006d3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d42:	ab09      	add	r3, sp, #36	; 0x24
 8006d44:	ec49 8b10 	vmov	d0, r8, r9
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	6022      	str	r2, [r4, #0]
 8006d4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d50:	4628      	mov	r0, r5
 8006d52:	f7ff fecf 	bl	8006af4 <__cvt>
 8006d56:	9b06      	ldr	r3, [sp, #24]
 8006d58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d5a:	2b47      	cmp	r3, #71	; 0x47
 8006d5c:	4680      	mov	r8, r0
 8006d5e:	d108      	bne.n	8006d72 <_printf_float+0x13e>
 8006d60:	1cc8      	adds	r0, r1, #3
 8006d62:	db02      	blt.n	8006d6a <_printf_float+0x136>
 8006d64:	6863      	ldr	r3, [r4, #4]
 8006d66:	4299      	cmp	r1, r3
 8006d68:	dd41      	ble.n	8006dee <_printf_float+0x1ba>
 8006d6a:	f1ab 0302 	sub.w	r3, fp, #2
 8006d6e:	fa5f fb83 	uxtb.w	fp, r3
 8006d72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d76:	d820      	bhi.n	8006dba <_printf_float+0x186>
 8006d78:	3901      	subs	r1, #1
 8006d7a:	465a      	mov	r2, fp
 8006d7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d80:	9109      	str	r1, [sp, #36]	; 0x24
 8006d82:	f7ff ff19 	bl	8006bb8 <__exponent>
 8006d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d88:	1813      	adds	r3, r2, r0
 8006d8a:	2a01      	cmp	r2, #1
 8006d8c:	4681      	mov	r9, r0
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	dc02      	bgt.n	8006d98 <_printf_float+0x164>
 8006d92:	6822      	ldr	r2, [r4, #0]
 8006d94:	07d2      	lsls	r2, r2, #31
 8006d96:	d501      	bpl.n	8006d9c <_printf_float+0x168>
 8006d98:	3301      	adds	r3, #1
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d09c      	beq.n	8006cde <_printf_float+0xaa>
 8006da4:	232d      	movs	r3, #45	; 0x2d
 8006da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006daa:	e798      	b.n	8006cde <_printf_float+0xaa>
 8006dac:	9a06      	ldr	r2, [sp, #24]
 8006dae:	2a47      	cmp	r2, #71	; 0x47
 8006db0:	d1be      	bne.n	8006d30 <_printf_float+0xfc>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1bc      	bne.n	8006d30 <_printf_float+0xfc>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e7b9      	b.n	8006d2e <_printf_float+0xfa>
 8006dba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006dbe:	d118      	bne.n	8006df2 <_printf_float+0x1be>
 8006dc0:	2900      	cmp	r1, #0
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	dd0b      	ble.n	8006dde <_printf_float+0x1aa>
 8006dc6:	6121      	str	r1, [r4, #16]
 8006dc8:	b913      	cbnz	r3, 8006dd0 <_printf_float+0x19c>
 8006dca:	6822      	ldr	r2, [r4, #0]
 8006dcc:	07d0      	lsls	r0, r2, #31
 8006dce:	d502      	bpl.n	8006dd6 <_printf_float+0x1a2>
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	440b      	add	r3, r1
 8006dd4:	6123      	str	r3, [r4, #16]
 8006dd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006dd8:	f04f 0900 	mov.w	r9, #0
 8006ddc:	e7de      	b.n	8006d9c <_printf_float+0x168>
 8006dde:	b913      	cbnz	r3, 8006de6 <_printf_float+0x1b2>
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	07d2      	lsls	r2, r2, #31
 8006de4:	d501      	bpl.n	8006dea <_printf_float+0x1b6>
 8006de6:	3302      	adds	r3, #2
 8006de8:	e7f4      	b.n	8006dd4 <_printf_float+0x1a0>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e7f2      	b.n	8006dd4 <_printf_float+0x1a0>
 8006dee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df4:	4299      	cmp	r1, r3
 8006df6:	db05      	blt.n	8006e04 <_printf_float+0x1d0>
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	6121      	str	r1, [r4, #16]
 8006dfc:	07d8      	lsls	r0, r3, #31
 8006dfe:	d5ea      	bpl.n	8006dd6 <_printf_float+0x1a2>
 8006e00:	1c4b      	adds	r3, r1, #1
 8006e02:	e7e7      	b.n	8006dd4 <_printf_float+0x1a0>
 8006e04:	2900      	cmp	r1, #0
 8006e06:	bfd4      	ite	le
 8006e08:	f1c1 0202 	rsble	r2, r1, #2
 8006e0c:	2201      	movgt	r2, #1
 8006e0e:	4413      	add	r3, r2
 8006e10:	e7e0      	b.n	8006dd4 <_printf_float+0x1a0>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	055a      	lsls	r2, r3, #21
 8006e16:	d407      	bmi.n	8006e28 <_printf_float+0x1f4>
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	d12c      	bne.n	8006e80 <_printf_float+0x24c>
 8006e26:	e764      	b.n	8006cf2 <_printf_float+0xbe>
 8006e28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e2c:	f240 80e0 	bls.w	8006ff0 <_printf_float+0x3bc>
 8006e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e34:	2200      	movs	r2, #0
 8006e36:	2300      	movs	r3, #0
 8006e38:	f7f9 fe66 	bl	8000b08 <__aeabi_dcmpeq>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d034      	beq.n	8006eaa <_printf_float+0x276>
 8006e40:	4a37      	ldr	r2, [pc, #220]	; (8006f20 <_printf_float+0x2ec>)
 8006e42:	2301      	movs	r3, #1
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b8      	blx	r7
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	f43f af51 	beq.w	8006cf2 <_printf_float+0xbe>
 8006e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e54:	429a      	cmp	r2, r3
 8006e56:	db02      	blt.n	8006e5e <_printf_float+0x22a>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	07d8      	lsls	r0, r3, #31
 8006e5c:	d510      	bpl.n	8006e80 <_printf_float+0x24c>
 8006e5e:	ee18 3a10 	vmov	r3, s16
 8006e62:	4652      	mov	r2, sl
 8006e64:	4631      	mov	r1, r6
 8006e66:	4628      	mov	r0, r5
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	f43f af41 	beq.w	8006cf2 <_printf_float+0xbe>
 8006e70:	f04f 0800 	mov.w	r8, #0
 8006e74:	f104 091a 	add.w	r9, r4, #26
 8006e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	4543      	cmp	r3, r8
 8006e7e:	dc09      	bgt.n	8006e94 <_printf_float+0x260>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	079b      	lsls	r3, r3, #30
 8006e84:	f100 8107 	bmi.w	8007096 <_printf_float+0x462>
 8006e88:	68e0      	ldr	r0, [r4, #12]
 8006e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e8c:	4298      	cmp	r0, r3
 8006e8e:	bfb8      	it	lt
 8006e90:	4618      	movlt	r0, r3
 8006e92:	e730      	b.n	8006cf6 <_printf_float+0xc2>
 8006e94:	2301      	movs	r3, #1
 8006e96:	464a      	mov	r2, r9
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b8      	blx	r7
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	f43f af27 	beq.w	8006cf2 <_printf_float+0xbe>
 8006ea4:	f108 0801 	add.w	r8, r8, #1
 8006ea8:	e7e6      	b.n	8006e78 <_printf_float+0x244>
 8006eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dc39      	bgt.n	8006f24 <_printf_float+0x2f0>
 8006eb0:	4a1b      	ldr	r2, [pc, #108]	; (8006f20 <_printf_float+0x2ec>)
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	47b8      	blx	r7
 8006eba:	3001      	adds	r0, #1
 8006ebc:	f43f af19 	beq.w	8006cf2 <_printf_float+0xbe>
 8006ec0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	d102      	bne.n	8006ece <_printf_float+0x29a>
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	07d9      	lsls	r1, r3, #31
 8006ecc:	d5d8      	bpl.n	8006e80 <_printf_float+0x24c>
 8006ece:	ee18 3a10 	vmov	r3, s16
 8006ed2:	4652      	mov	r2, sl
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	47b8      	blx	r7
 8006eda:	3001      	adds	r0, #1
 8006edc:	f43f af09 	beq.w	8006cf2 <_printf_float+0xbe>
 8006ee0:	f04f 0900 	mov.w	r9, #0
 8006ee4:	f104 0a1a 	add.w	sl, r4, #26
 8006ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eea:	425b      	negs	r3, r3
 8006eec:	454b      	cmp	r3, r9
 8006eee:	dc01      	bgt.n	8006ef4 <_printf_float+0x2c0>
 8006ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef2:	e792      	b.n	8006e1a <_printf_float+0x1e6>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	4652      	mov	r2, sl
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	f43f aef7 	beq.w	8006cf2 <_printf_float+0xbe>
 8006f04:	f109 0901 	add.w	r9, r9, #1
 8006f08:	e7ee      	b.n	8006ee8 <_printf_float+0x2b4>
 8006f0a:	bf00      	nop
 8006f0c:	7fefffff 	.word	0x7fefffff
 8006f10:	0800a970 	.word	0x0800a970
 8006f14:	0800a974 	.word	0x0800a974
 8006f18:	0800a978 	.word	0x0800a978
 8006f1c:	0800a97c 	.word	0x0800a97c
 8006f20:	0800a980 	.word	0x0800a980
 8006f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	bfa8      	it	ge
 8006f2c:	461a      	movge	r2, r3
 8006f2e:	2a00      	cmp	r2, #0
 8006f30:	4691      	mov	r9, r2
 8006f32:	dc37      	bgt.n	8006fa4 <_printf_float+0x370>
 8006f34:	f04f 0b00 	mov.w	fp, #0
 8006f38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f3c:	f104 021a 	add.w	r2, r4, #26
 8006f40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f42:	9305      	str	r3, [sp, #20]
 8006f44:	eba3 0309 	sub.w	r3, r3, r9
 8006f48:	455b      	cmp	r3, fp
 8006f4a:	dc33      	bgt.n	8006fb4 <_printf_float+0x380>
 8006f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f50:	429a      	cmp	r2, r3
 8006f52:	db3b      	blt.n	8006fcc <_printf_float+0x398>
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	07da      	lsls	r2, r3, #31
 8006f58:	d438      	bmi.n	8006fcc <_printf_float+0x398>
 8006f5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006f5e:	eba2 0903 	sub.w	r9, r2, r3
 8006f62:	9b05      	ldr	r3, [sp, #20]
 8006f64:	1ad2      	subs	r2, r2, r3
 8006f66:	4591      	cmp	r9, r2
 8006f68:	bfa8      	it	ge
 8006f6a:	4691      	movge	r9, r2
 8006f6c:	f1b9 0f00 	cmp.w	r9, #0
 8006f70:	dc35      	bgt.n	8006fde <_printf_float+0x3aa>
 8006f72:	f04f 0800 	mov.w	r8, #0
 8006f76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f7a:	f104 0a1a 	add.w	sl, r4, #26
 8006f7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f82:	1a9b      	subs	r3, r3, r2
 8006f84:	eba3 0309 	sub.w	r3, r3, r9
 8006f88:	4543      	cmp	r3, r8
 8006f8a:	f77f af79 	ble.w	8006e80 <_printf_float+0x24c>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4652      	mov	r2, sl
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f43f aeaa 	beq.w	8006cf2 <_printf_float+0xbe>
 8006f9e:	f108 0801 	add.w	r8, r8, #1
 8006fa2:	e7ec      	b.n	8006f7e <_printf_float+0x34a>
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	4642      	mov	r2, r8
 8006faa:	4628      	mov	r0, r5
 8006fac:	47b8      	blx	r7
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d1c0      	bne.n	8006f34 <_printf_float+0x300>
 8006fb2:	e69e      	b.n	8006cf2 <_printf_float+0xbe>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	4628      	mov	r0, r5
 8006fba:	9205      	str	r2, [sp, #20]
 8006fbc:	47b8      	blx	r7
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	f43f ae97 	beq.w	8006cf2 <_printf_float+0xbe>
 8006fc4:	9a05      	ldr	r2, [sp, #20]
 8006fc6:	f10b 0b01 	add.w	fp, fp, #1
 8006fca:	e7b9      	b.n	8006f40 <_printf_float+0x30c>
 8006fcc:	ee18 3a10 	vmov	r3, s16
 8006fd0:	4652      	mov	r2, sl
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	47b8      	blx	r7
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d1be      	bne.n	8006f5a <_printf_float+0x326>
 8006fdc:	e689      	b.n	8006cf2 <_printf_float+0xbe>
 8006fde:	9a05      	ldr	r2, [sp, #20]
 8006fe0:	464b      	mov	r3, r9
 8006fe2:	4442      	add	r2, r8
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	d1c1      	bne.n	8006f72 <_printf_float+0x33e>
 8006fee:	e680      	b.n	8006cf2 <_printf_float+0xbe>
 8006ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ff2:	2a01      	cmp	r2, #1
 8006ff4:	dc01      	bgt.n	8006ffa <_printf_float+0x3c6>
 8006ff6:	07db      	lsls	r3, r3, #31
 8006ff8:	d53a      	bpl.n	8007070 <_printf_float+0x43c>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	f43f ae74 	beq.w	8006cf2 <_printf_float+0xbe>
 800700a:	ee18 3a10 	vmov	r3, s16
 800700e:	4652      	mov	r2, sl
 8007010:	4631      	mov	r1, r6
 8007012:	4628      	mov	r0, r5
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	f43f ae6b 	beq.w	8006cf2 <_printf_float+0xbe>
 800701c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007028:	f7f9 fd6e 	bl	8000b08 <__aeabi_dcmpeq>
 800702c:	b9d8      	cbnz	r0, 8007066 <_printf_float+0x432>
 800702e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007032:	f108 0201 	add.w	r2, r8, #1
 8007036:	4631      	mov	r1, r6
 8007038:	4628      	mov	r0, r5
 800703a:	47b8      	blx	r7
 800703c:	3001      	adds	r0, #1
 800703e:	d10e      	bne.n	800705e <_printf_float+0x42a>
 8007040:	e657      	b.n	8006cf2 <_printf_float+0xbe>
 8007042:	2301      	movs	r3, #1
 8007044:	4652      	mov	r2, sl
 8007046:	4631      	mov	r1, r6
 8007048:	4628      	mov	r0, r5
 800704a:	47b8      	blx	r7
 800704c:	3001      	adds	r0, #1
 800704e:	f43f ae50 	beq.w	8006cf2 <_printf_float+0xbe>
 8007052:	f108 0801 	add.w	r8, r8, #1
 8007056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007058:	3b01      	subs	r3, #1
 800705a:	4543      	cmp	r3, r8
 800705c:	dcf1      	bgt.n	8007042 <_printf_float+0x40e>
 800705e:	464b      	mov	r3, r9
 8007060:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007064:	e6da      	b.n	8006e1c <_printf_float+0x1e8>
 8007066:	f04f 0800 	mov.w	r8, #0
 800706a:	f104 0a1a 	add.w	sl, r4, #26
 800706e:	e7f2      	b.n	8007056 <_printf_float+0x422>
 8007070:	2301      	movs	r3, #1
 8007072:	4642      	mov	r2, r8
 8007074:	e7df      	b.n	8007036 <_printf_float+0x402>
 8007076:	2301      	movs	r3, #1
 8007078:	464a      	mov	r2, r9
 800707a:	4631      	mov	r1, r6
 800707c:	4628      	mov	r0, r5
 800707e:	47b8      	blx	r7
 8007080:	3001      	adds	r0, #1
 8007082:	f43f ae36 	beq.w	8006cf2 <_printf_float+0xbe>
 8007086:	f108 0801 	add.w	r8, r8, #1
 800708a:	68e3      	ldr	r3, [r4, #12]
 800708c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800708e:	1a5b      	subs	r3, r3, r1
 8007090:	4543      	cmp	r3, r8
 8007092:	dcf0      	bgt.n	8007076 <_printf_float+0x442>
 8007094:	e6f8      	b.n	8006e88 <_printf_float+0x254>
 8007096:	f04f 0800 	mov.w	r8, #0
 800709a:	f104 0919 	add.w	r9, r4, #25
 800709e:	e7f4      	b.n	800708a <_printf_float+0x456>

080070a0 <_printf_common>:
 80070a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a4:	4616      	mov	r6, r2
 80070a6:	4699      	mov	r9, r3
 80070a8:	688a      	ldr	r2, [r1, #8]
 80070aa:	690b      	ldr	r3, [r1, #16]
 80070ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070b0:	4293      	cmp	r3, r2
 80070b2:	bfb8      	it	lt
 80070b4:	4613      	movlt	r3, r2
 80070b6:	6033      	str	r3, [r6, #0]
 80070b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070bc:	4607      	mov	r7, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	b10a      	cbz	r2, 80070c6 <_printf_common+0x26>
 80070c2:	3301      	adds	r3, #1
 80070c4:	6033      	str	r3, [r6, #0]
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	0699      	lsls	r1, r3, #26
 80070ca:	bf42      	ittt	mi
 80070cc:	6833      	ldrmi	r3, [r6, #0]
 80070ce:	3302      	addmi	r3, #2
 80070d0:	6033      	strmi	r3, [r6, #0]
 80070d2:	6825      	ldr	r5, [r4, #0]
 80070d4:	f015 0506 	ands.w	r5, r5, #6
 80070d8:	d106      	bne.n	80070e8 <_printf_common+0x48>
 80070da:	f104 0a19 	add.w	sl, r4, #25
 80070de:	68e3      	ldr	r3, [r4, #12]
 80070e0:	6832      	ldr	r2, [r6, #0]
 80070e2:	1a9b      	subs	r3, r3, r2
 80070e4:	42ab      	cmp	r3, r5
 80070e6:	dc26      	bgt.n	8007136 <_printf_common+0x96>
 80070e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070ec:	1e13      	subs	r3, r2, #0
 80070ee:	6822      	ldr	r2, [r4, #0]
 80070f0:	bf18      	it	ne
 80070f2:	2301      	movne	r3, #1
 80070f4:	0692      	lsls	r2, r2, #26
 80070f6:	d42b      	bmi.n	8007150 <_printf_common+0xb0>
 80070f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070fc:	4649      	mov	r1, r9
 80070fe:	4638      	mov	r0, r7
 8007100:	47c0      	blx	r8
 8007102:	3001      	adds	r0, #1
 8007104:	d01e      	beq.n	8007144 <_printf_common+0xa4>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	6922      	ldr	r2, [r4, #16]
 800710a:	f003 0306 	and.w	r3, r3, #6
 800710e:	2b04      	cmp	r3, #4
 8007110:	bf02      	ittt	eq
 8007112:	68e5      	ldreq	r5, [r4, #12]
 8007114:	6833      	ldreq	r3, [r6, #0]
 8007116:	1aed      	subeq	r5, r5, r3
 8007118:	68a3      	ldr	r3, [r4, #8]
 800711a:	bf0c      	ite	eq
 800711c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007120:	2500      	movne	r5, #0
 8007122:	4293      	cmp	r3, r2
 8007124:	bfc4      	itt	gt
 8007126:	1a9b      	subgt	r3, r3, r2
 8007128:	18ed      	addgt	r5, r5, r3
 800712a:	2600      	movs	r6, #0
 800712c:	341a      	adds	r4, #26
 800712e:	42b5      	cmp	r5, r6
 8007130:	d11a      	bne.n	8007168 <_printf_common+0xc8>
 8007132:	2000      	movs	r0, #0
 8007134:	e008      	b.n	8007148 <_printf_common+0xa8>
 8007136:	2301      	movs	r3, #1
 8007138:	4652      	mov	r2, sl
 800713a:	4649      	mov	r1, r9
 800713c:	4638      	mov	r0, r7
 800713e:	47c0      	blx	r8
 8007140:	3001      	adds	r0, #1
 8007142:	d103      	bne.n	800714c <_printf_common+0xac>
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714c:	3501      	adds	r5, #1
 800714e:	e7c6      	b.n	80070de <_printf_common+0x3e>
 8007150:	18e1      	adds	r1, r4, r3
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	2030      	movs	r0, #48	; 0x30
 8007156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800715a:	4422      	add	r2, r4
 800715c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007164:	3302      	adds	r3, #2
 8007166:	e7c7      	b.n	80070f8 <_printf_common+0x58>
 8007168:	2301      	movs	r3, #1
 800716a:	4622      	mov	r2, r4
 800716c:	4649      	mov	r1, r9
 800716e:	4638      	mov	r0, r7
 8007170:	47c0      	blx	r8
 8007172:	3001      	adds	r0, #1
 8007174:	d0e6      	beq.n	8007144 <_printf_common+0xa4>
 8007176:	3601      	adds	r6, #1
 8007178:	e7d9      	b.n	800712e <_printf_common+0x8e>
	...

0800717c <_printf_i>:
 800717c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007180:	7e0f      	ldrb	r7, [r1, #24]
 8007182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007184:	2f78      	cmp	r7, #120	; 0x78
 8007186:	4691      	mov	r9, r2
 8007188:	4680      	mov	r8, r0
 800718a:	460c      	mov	r4, r1
 800718c:	469a      	mov	sl, r3
 800718e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007192:	d807      	bhi.n	80071a4 <_printf_i+0x28>
 8007194:	2f62      	cmp	r7, #98	; 0x62
 8007196:	d80a      	bhi.n	80071ae <_printf_i+0x32>
 8007198:	2f00      	cmp	r7, #0
 800719a:	f000 80d4 	beq.w	8007346 <_printf_i+0x1ca>
 800719e:	2f58      	cmp	r7, #88	; 0x58
 80071a0:	f000 80c0 	beq.w	8007324 <_printf_i+0x1a8>
 80071a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071ac:	e03a      	b.n	8007224 <_printf_i+0xa8>
 80071ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071b2:	2b15      	cmp	r3, #21
 80071b4:	d8f6      	bhi.n	80071a4 <_printf_i+0x28>
 80071b6:	a101      	add	r1, pc, #4	; (adr r1, 80071bc <_printf_i+0x40>)
 80071b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071bc:	08007215 	.word	0x08007215
 80071c0:	08007229 	.word	0x08007229
 80071c4:	080071a5 	.word	0x080071a5
 80071c8:	080071a5 	.word	0x080071a5
 80071cc:	080071a5 	.word	0x080071a5
 80071d0:	080071a5 	.word	0x080071a5
 80071d4:	08007229 	.word	0x08007229
 80071d8:	080071a5 	.word	0x080071a5
 80071dc:	080071a5 	.word	0x080071a5
 80071e0:	080071a5 	.word	0x080071a5
 80071e4:	080071a5 	.word	0x080071a5
 80071e8:	0800732d 	.word	0x0800732d
 80071ec:	08007255 	.word	0x08007255
 80071f0:	080072e7 	.word	0x080072e7
 80071f4:	080071a5 	.word	0x080071a5
 80071f8:	080071a5 	.word	0x080071a5
 80071fc:	0800734f 	.word	0x0800734f
 8007200:	080071a5 	.word	0x080071a5
 8007204:	08007255 	.word	0x08007255
 8007208:	080071a5 	.word	0x080071a5
 800720c:	080071a5 	.word	0x080071a5
 8007210:	080072ef 	.word	0x080072ef
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	1d1a      	adds	r2, r3, #4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	602a      	str	r2, [r5, #0]
 800721c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007224:	2301      	movs	r3, #1
 8007226:	e09f      	b.n	8007368 <_printf_i+0x1ec>
 8007228:	6820      	ldr	r0, [r4, #0]
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	0607      	lsls	r7, r0, #24
 800722e:	f103 0104 	add.w	r1, r3, #4
 8007232:	6029      	str	r1, [r5, #0]
 8007234:	d501      	bpl.n	800723a <_printf_i+0xbe>
 8007236:	681e      	ldr	r6, [r3, #0]
 8007238:	e003      	b.n	8007242 <_printf_i+0xc6>
 800723a:	0646      	lsls	r6, r0, #25
 800723c:	d5fb      	bpl.n	8007236 <_printf_i+0xba>
 800723e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007242:	2e00      	cmp	r6, #0
 8007244:	da03      	bge.n	800724e <_printf_i+0xd2>
 8007246:	232d      	movs	r3, #45	; 0x2d
 8007248:	4276      	negs	r6, r6
 800724a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800724e:	485a      	ldr	r0, [pc, #360]	; (80073b8 <_printf_i+0x23c>)
 8007250:	230a      	movs	r3, #10
 8007252:	e012      	b.n	800727a <_printf_i+0xfe>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	6820      	ldr	r0, [r4, #0]
 8007258:	1d19      	adds	r1, r3, #4
 800725a:	6029      	str	r1, [r5, #0]
 800725c:	0605      	lsls	r5, r0, #24
 800725e:	d501      	bpl.n	8007264 <_printf_i+0xe8>
 8007260:	681e      	ldr	r6, [r3, #0]
 8007262:	e002      	b.n	800726a <_printf_i+0xee>
 8007264:	0641      	lsls	r1, r0, #25
 8007266:	d5fb      	bpl.n	8007260 <_printf_i+0xe4>
 8007268:	881e      	ldrh	r6, [r3, #0]
 800726a:	4853      	ldr	r0, [pc, #332]	; (80073b8 <_printf_i+0x23c>)
 800726c:	2f6f      	cmp	r7, #111	; 0x6f
 800726e:	bf0c      	ite	eq
 8007270:	2308      	moveq	r3, #8
 8007272:	230a      	movne	r3, #10
 8007274:	2100      	movs	r1, #0
 8007276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800727a:	6865      	ldr	r5, [r4, #4]
 800727c:	60a5      	str	r5, [r4, #8]
 800727e:	2d00      	cmp	r5, #0
 8007280:	bfa2      	ittt	ge
 8007282:	6821      	ldrge	r1, [r4, #0]
 8007284:	f021 0104 	bicge.w	r1, r1, #4
 8007288:	6021      	strge	r1, [r4, #0]
 800728a:	b90e      	cbnz	r6, 8007290 <_printf_i+0x114>
 800728c:	2d00      	cmp	r5, #0
 800728e:	d04b      	beq.n	8007328 <_printf_i+0x1ac>
 8007290:	4615      	mov	r5, r2
 8007292:	fbb6 f1f3 	udiv	r1, r6, r3
 8007296:	fb03 6711 	mls	r7, r3, r1, r6
 800729a:	5dc7      	ldrb	r7, [r0, r7]
 800729c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072a0:	4637      	mov	r7, r6
 80072a2:	42bb      	cmp	r3, r7
 80072a4:	460e      	mov	r6, r1
 80072a6:	d9f4      	bls.n	8007292 <_printf_i+0x116>
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d10b      	bne.n	80072c4 <_printf_i+0x148>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	07de      	lsls	r6, r3, #31
 80072b0:	d508      	bpl.n	80072c4 <_printf_i+0x148>
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	6861      	ldr	r1, [r4, #4]
 80072b6:	4299      	cmp	r1, r3
 80072b8:	bfde      	ittt	le
 80072ba:	2330      	movle	r3, #48	; 0x30
 80072bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072c4:	1b52      	subs	r2, r2, r5
 80072c6:	6122      	str	r2, [r4, #16]
 80072c8:	f8cd a000 	str.w	sl, [sp]
 80072cc:	464b      	mov	r3, r9
 80072ce:	aa03      	add	r2, sp, #12
 80072d0:	4621      	mov	r1, r4
 80072d2:	4640      	mov	r0, r8
 80072d4:	f7ff fee4 	bl	80070a0 <_printf_common>
 80072d8:	3001      	adds	r0, #1
 80072da:	d14a      	bne.n	8007372 <_printf_i+0x1f6>
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	b004      	add	sp, #16
 80072e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	f043 0320 	orr.w	r3, r3, #32
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	4833      	ldr	r0, [pc, #204]	; (80073bc <_printf_i+0x240>)
 80072f0:	2778      	movs	r7, #120	; 0x78
 80072f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	6829      	ldr	r1, [r5, #0]
 80072fa:	061f      	lsls	r7, r3, #24
 80072fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007300:	d402      	bmi.n	8007308 <_printf_i+0x18c>
 8007302:	065f      	lsls	r7, r3, #25
 8007304:	bf48      	it	mi
 8007306:	b2b6      	uxthmi	r6, r6
 8007308:	07df      	lsls	r7, r3, #31
 800730a:	bf48      	it	mi
 800730c:	f043 0320 	orrmi.w	r3, r3, #32
 8007310:	6029      	str	r1, [r5, #0]
 8007312:	bf48      	it	mi
 8007314:	6023      	strmi	r3, [r4, #0]
 8007316:	b91e      	cbnz	r6, 8007320 <_printf_i+0x1a4>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	f023 0320 	bic.w	r3, r3, #32
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	2310      	movs	r3, #16
 8007322:	e7a7      	b.n	8007274 <_printf_i+0xf8>
 8007324:	4824      	ldr	r0, [pc, #144]	; (80073b8 <_printf_i+0x23c>)
 8007326:	e7e4      	b.n	80072f2 <_printf_i+0x176>
 8007328:	4615      	mov	r5, r2
 800732a:	e7bd      	b.n	80072a8 <_printf_i+0x12c>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	6826      	ldr	r6, [r4, #0]
 8007330:	6961      	ldr	r1, [r4, #20]
 8007332:	1d18      	adds	r0, r3, #4
 8007334:	6028      	str	r0, [r5, #0]
 8007336:	0635      	lsls	r5, r6, #24
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	d501      	bpl.n	8007340 <_printf_i+0x1c4>
 800733c:	6019      	str	r1, [r3, #0]
 800733e:	e002      	b.n	8007346 <_printf_i+0x1ca>
 8007340:	0670      	lsls	r0, r6, #25
 8007342:	d5fb      	bpl.n	800733c <_printf_i+0x1c0>
 8007344:	8019      	strh	r1, [r3, #0]
 8007346:	2300      	movs	r3, #0
 8007348:	6123      	str	r3, [r4, #16]
 800734a:	4615      	mov	r5, r2
 800734c:	e7bc      	b.n	80072c8 <_printf_i+0x14c>
 800734e:	682b      	ldr	r3, [r5, #0]
 8007350:	1d1a      	adds	r2, r3, #4
 8007352:	602a      	str	r2, [r5, #0]
 8007354:	681d      	ldr	r5, [r3, #0]
 8007356:	6862      	ldr	r2, [r4, #4]
 8007358:	2100      	movs	r1, #0
 800735a:	4628      	mov	r0, r5
 800735c:	f7f8 ff58 	bl	8000210 <memchr>
 8007360:	b108      	cbz	r0, 8007366 <_printf_i+0x1ea>
 8007362:	1b40      	subs	r0, r0, r5
 8007364:	6060      	str	r0, [r4, #4]
 8007366:	6863      	ldr	r3, [r4, #4]
 8007368:	6123      	str	r3, [r4, #16]
 800736a:	2300      	movs	r3, #0
 800736c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007370:	e7aa      	b.n	80072c8 <_printf_i+0x14c>
 8007372:	6923      	ldr	r3, [r4, #16]
 8007374:	462a      	mov	r2, r5
 8007376:	4649      	mov	r1, r9
 8007378:	4640      	mov	r0, r8
 800737a:	47d0      	blx	sl
 800737c:	3001      	adds	r0, #1
 800737e:	d0ad      	beq.n	80072dc <_printf_i+0x160>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	079b      	lsls	r3, r3, #30
 8007384:	d413      	bmi.n	80073ae <_printf_i+0x232>
 8007386:	68e0      	ldr	r0, [r4, #12]
 8007388:	9b03      	ldr	r3, [sp, #12]
 800738a:	4298      	cmp	r0, r3
 800738c:	bfb8      	it	lt
 800738e:	4618      	movlt	r0, r3
 8007390:	e7a6      	b.n	80072e0 <_printf_i+0x164>
 8007392:	2301      	movs	r3, #1
 8007394:	4632      	mov	r2, r6
 8007396:	4649      	mov	r1, r9
 8007398:	4640      	mov	r0, r8
 800739a:	47d0      	blx	sl
 800739c:	3001      	adds	r0, #1
 800739e:	d09d      	beq.n	80072dc <_printf_i+0x160>
 80073a0:	3501      	adds	r5, #1
 80073a2:	68e3      	ldr	r3, [r4, #12]
 80073a4:	9903      	ldr	r1, [sp, #12]
 80073a6:	1a5b      	subs	r3, r3, r1
 80073a8:	42ab      	cmp	r3, r5
 80073aa:	dcf2      	bgt.n	8007392 <_printf_i+0x216>
 80073ac:	e7eb      	b.n	8007386 <_printf_i+0x20a>
 80073ae:	2500      	movs	r5, #0
 80073b0:	f104 0619 	add.w	r6, r4, #25
 80073b4:	e7f5      	b.n	80073a2 <_printf_i+0x226>
 80073b6:	bf00      	nop
 80073b8:	0800a982 	.word	0x0800a982
 80073bc:	0800a993 	.word	0x0800a993

080073c0 <std>:
 80073c0:	2300      	movs	r3, #0
 80073c2:	b510      	push	{r4, lr}
 80073c4:	4604      	mov	r4, r0
 80073c6:	e9c0 3300 	strd	r3, r3, [r0]
 80073ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073ce:	6083      	str	r3, [r0, #8]
 80073d0:	8181      	strh	r1, [r0, #12]
 80073d2:	6643      	str	r3, [r0, #100]	; 0x64
 80073d4:	81c2      	strh	r2, [r0, #14]
 80073d6:	6183      	str	r3, [r0, #24]
 80073d8:	4619      	mov	r1, r3
 80073da:	2208      	movs	r2, #8
 80073dc:	305c      	adds	r0, #92	; 0x5c
 80073de:	f000 f9f7 	bl	80077d0 <memset>
 80073e2:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <std+0x58>)
 80073e4:	6263      	str	r3, [r4, #36]	; 0x24
 80073e6:	4b0d      	ldr	r3, [pc, #52]	; (800741c <std+0x5c>)
 80073e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80073ea:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <std+0x60>)
 80073ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073ee:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <std+0x64>)
 80073f0:	6323      	str	r3, [r4, #48]	; 0x30
 80073f2:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <std+0x68>)
 80073f4:	6224      	str	r4, [r4, #32]
 80073f6:	429c      	cmp	r4, r3
 80073f8:	d006      	beq.n	8007408 <std+0x48>
 80073fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80073fe:	4294      	cmp	r4, r2
 8007400:	d002      	beq.n	8007408 <std+0x48>
 8007402:	33d0      	adds	r3, #208	; 0xd0
 8007404:	429c      	cmp	r4, r3
 8007406:	d105      	bne.n	8007414 <std+0x54>
 8007408:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800740c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007410:	f000 ba5a 	b.w	80078c8 <__retarget_lock_init_recursive>
 8007414:	bd10      	pop	{r4, pc}
 8007416:	bf00      	nop
 8007418:	08007621 	.word	0x08007621
 800741c:	08007643 	.word	0x08007643
 8007420:	0800767b 	.word	0x0800767b
 8007424:	0800769f 	.word	0x0800769f
 8007428:	20000524 	.word	0x20000524

0800742c <stdio_exit_handler>:
 800742c:	4a02      	ldr	r2, [pc, #8]	; (8007438 <stdio_exit_handler+0xc>)
 800742e:	4903      	ldr	r1, [pc, #12]	; (800743c <stdio_exit_handler+0x10>)
 8007430:	4803      	ldr	r0, [pc, #12]	; (8007440 <stdio_exit_handler+0x14>)
 8007432:	f000 b869 	b.w	8007508 <_fwalk_sglue>
 8007436:	bf00      	nop
 8007438:	2000009c 	.word	0x2000009c
 800743c:	08009251 	.word	0x08009251
 8007440:	200000a8 	.word	0x200000a8

08007444 <cleanup_stdio>:
 8007444:	6841      	ldr	r1, [r0, #4]
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <cleanup_stdio+0x34>)
 8007448:	4299      	cmp	r1, r3
 800744a:	b510      	push	{r4, lr}
 800744c:	4604      	mov	r4, r0
 800744e:	d001      	beq.n	8007454 <cleanup_stdio+0x10>
 8007450:	f001 fefe 	bl	8009250 <_fflush_r>
 8007454:	68a1      	ldr	r1, [r4, #8]
 8007456:	4b09      	ldr	r3, [pc, #36]	; (800747c <cleanup_stdio+0x38>)
 8007458:	4299      	cmp	r1, r3
 800745a:	d002      	beq.n	8007462 <cleanup_stdio+0x1e>
 800745c:	4620      	mov	r0, r4
 800745e:	f001 fef7 	bl	8009250 <_fflush_r>
 8007462:	68e1      	ldr	r1, [r4, #12]
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <cleanup_stdio+0x3c>)
 8007466:	4299      	cmp	r1, r3
 8007468:	d004      	beq.n	8007474 <cleanup_stdio+0x30>
 800746a:	4620      	mov	r0, r4
 800746c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007470:	f001 beee 	b.w	8009250 <_fflush_r>
 8007474:	bd10      	pop	{r4, pc}
 8007476:	bf00      	nop
 8007478:	20000524 	.word	0x20000524
 800747c:	2000058c 	.word	0x2000058c
 8007480:	200005f4 	.word	0x200005f4

08007484 <global_stdio_init.part.0>:
 8007484:	b510      	push	{r4, lr}
 8007486:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <global_stdio_init.part.0+0x30>)
 8007488:	4c0b      	ldr	r4, [pc, #44]	; (80074b8 <global_stdio_init.part.0+0x34>)
 800748a:	4a0c      	ldr	r2, [pc, #48]	; (80074bc <global_stdio_init.part.0+0x38>)
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	4620      	mov	r0, r4
 8007490:	2200      	movs	r2, #0
 8007492:	2104      	movs	r1, #4
 8007494:	f7ff ff94 	bl	80073c0 <std>
 8007498:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800749c:	2201      	movs	r2, #1
 800749e:	2109      	movs	r1, #9
 80074a0:	f7ff ff8e 	bl	80073c0 <std>
 80074a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80074a8:	2202      	movs	r2, #2
 80074aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ae:	2112      	movs	r1, #18
 80074b0:	f7ff bf86 	b.w	80073c0 <std>
 80074b4:	2000065c 	.word	0x2000065c
 80074b8:	20000524 	.word	0x20000524
 80074bc:	0800742d 	.word	0x0800742d

080074c0 <__sfp_lock_acquire>:
 80074c0:	4801      	ldr	r0, [pc, #4]	; (80074c8 <__sfp_lock_acquire+0x8>)
 80074c2:	f000 ba02 	b.w	80078ca <__retarget_lock_acquire_recursive>
 80074c6:	bf00      	nop
 80074c8:	20000665 	.word	0x20000665

080074cc <__sfp_lock_release>:
 80074cc:	4801      	ldr	r0, [pc, #4]	; (80074d4 <__sfp_lock_release+0x8>)
 80074ce:	f000 b9fd 	b.w	80078cc <__retarget_lock_release_recursive>
 80074d2:	bf00      	nop
 80074d4:	20000665 	.word	0x20000665

080074d8 <__sinit>:
 80074d8:	b510      	push	{r4, lr}
 80074da:	4604      	mov	r4, r0
 80074dc:	f7ff fff0 	bl	80074c0 <__sfp_lock_acquire>
 80074e0:	6a23      	ldr	r3, [r4, #32]
 80074e2:	b11b      	cbz	r3, 80074ec <__sinit+0x14>
 80074e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074e8:	f7ff bff0 	b.w	80074cc <__sfp_lock_release>
 80074ec:	4b04      	ldr	r3, [pc, #16]	; (8007500 <__sinit+0x28>)
 80074ee:	6223      	str	r3, [r4, #32]
 80074f0:	4b04      	ldr	r3, [pc, #16]	; (8007504 <__sinit+0x2c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1f5      	bne.n	80074e4 <__sinit+0xc>
 80074f8:	f7ff ffc4 	bl	8007484 <global_stdio_init.part.0>
 80074fc:	e7f2      	b.n	80074e4 <__sinit+0xc>
 80074fe:	bf00      	nop
 8007500:	08007445 	.word	0x08007445
 8007504:	2000065c 	.word	0x2000065c

08007508 <_fwalk_sglue>:
 8007508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800750c:	4607      	mov	r7, r0
 800750e:	4688      	mov	r8, r1
 8007510:	4614      	mov	r4, r2
 8007512:	2600      	movs	r6, #0
 8007514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007518:	f1b9 0901 	subs.w	r9, r9, #1
 800751c:	d505      	bpl.n	800752a <_fwalk_sglue+0x22>
 800751e:	6824      	ldr	r4, [r4, #0]
 8007520:	2c00      	cmp	r4, #0
 8007522:	d1f7      	bne.n	8007514 <_fwalk_sglue+0xc>
 8007524:	4630      	mov	r0, r6
 8007526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d907      	bls.n	8007540 <_fwalk_sglue+0x38>
 8007530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007534:	3301      	adds	r3, #1
 8007536:	d003      	beq.n	8007540 <_fwalk_sglue+0x38>
 8007538:	4629      	mov	r1, r5
 800753a:	4638      	mov	r0, r7
 800753c:	47c0      	blx	r8
 800753e:	4306      	orrs	r6, r0
 8007540:	3568      	adds	r5, #104	; 0x68
 8007542:	e7e9      	b.n	8007518 <_fwalk_sglue+0x10>

08007544 <iprintf>:
 8007544:	b40f      	push	{r0, r1, r2, r3}
 8007546:	b507      	push	{r0, r1, r2, lr}
 8007548:	4906      	ldr	r1, [pc, #24]	; (8007564 <iprintf+0x20>)
 800754a:	ab04      	add	r3, sp, #16
 800754c:	6808      	ldr	r0, [r1, #0]
 800754e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007552:	6881      	ldr	r1, [r0, #8]
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	f001 fcdb 	bl	8008f10 <_vfiprintf_r>
 800755a:	b003      	add	sp, #12
 800755c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007560:	b004      	add	sp, #16
 8007562:	4770      	bx	lr
 8007564:	200000f4 	.word	0x200000f4

08007568 <_puts_r>:
 8007568:	6a03      	ldr	r3, [r0, #32]
 800756a:	b570      	push	{r4, r5, r6, lr}
 800756c:	6884      	ldr	r4, [r0, #8]
 800756e:	4605      	mov	r5, r0
 8007570:	460e      	mov	r6, r1
 8007572:	b90b      	cbnz	r3, 8007578 <_puts_r+0x10>
 8007574:	f7ff ffb0 	bl	80074d8 <__sinit>
 8007578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800757a:	07db      	lsls	r3, r3, #31
 800757c:	d405      	bmi.n	800758a <_puts_r+0x22>
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	0598      	lsls	r0, r3, #22
 8007582:	d402      	bmi.n	800758a <_puts_r+0x22>
 8007584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007586:	f000 f9a0 	bl	80078ca <__retarget_lock_acquire_recursive>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	0719      	lsls	r1, r3, #28
 800758e:	d513      	bpl.n	80075b8 <_puts_r+0x50>
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	b18b      	cbz	r3, 80075b8 <_puts_r+0x50>
 8007594:	3e01      	subs	r6, #1
 8007596:	68a3      	ldr	r3, [r4, #8]
 8007598:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800759c:	3b01      	subs	r3, #1
 800759e:	60a3      	str	r3, [r4, #8]
 80075a0:	b9e9      	cbnz	r1, 80075de <_puts_r+0x76>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	da2e      	bge.n	8007604 <_puts_r+0x9c>
 80075a6:	4622      	mov	r2, r4
 80075a8:	210a      	movs	r1, #10
 80075aa:	4628      	mov	r0, r5
 80075ac:	f000 f87b 	bl	80076a6 <__swbuf_r>
 80075b0:	3001      	adds	r0, #1
 80075b2:	d007      	beq.n	80075c4 <_puts_r+0x5c>
 80075b4:	250a      	movs	r5, #10
 80075b6:	e007      	b.n	80075c8 <_puts_r+0x60>
 80075b8:	4621      	mov	r1, r4
 80075ba:	4628      	mov	r0, r5
 80075bc:	f000 f8b0 	bl	8007720 <__swsetup_r>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d0e7      	beq.n	8007594 <_puts_r+0x2c>
 80075c4:	f04f 35ff 	mov.w	r5, #4294967295
 80075c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075ca:	07da      	lsls	r2, r3, #31
 80075cc:	d405      	bmi.n	80075da <_puts_r+0x72>
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	059b      	lsls	r3, r3, #22
 80075d2:	d402      	bmi.n	80075da <_puts_r+0x72>
 80075d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075d6:	f000 f979 	bl	80078cc <__retarget_lock_release_recursive>
 80075da:	4628      	mov	r0, r5
 80075dc:	bd70      	pop	{r4, r5, r6, pc}
 80075de:	2b00      	cmp	r3, #0
 80075e0:	da04      	bge.n	80075ec <_puts_r+0x84>
 80075e2:	69a2      	ldr	r2, [r4, #24]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	dc06      	bgt.n	80075f6 <_puts_r+0x8e>
 80075e8:	290a      	cmp	r1, #10
 80075ea:	d004      	beq.n	80075f6 <_puts_r+0x8e>
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	6022      	str	r2, [r4, #0]
 80075f2:	7019      	strb	r1, [r3, #0]
 80075f4:	e7cf      	b.n	8007596 <_puts_r+0x2e>
 80075f6:	4622      	mov	r2, r4
 80075f8:	4628      	mov	r0, r5
 80075fa:	f000 f854 	bl	80076a6 <__swbuf_r>
 80075fe:	3001      	adds	r0, #1
 8007600:	d1c9      	bne.n	8007596 <_puts_r+0x2e>
 8007602:	e7df      	b.n	80075c4 <_puts_r+0x5c>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	250a      	movs	r5, #10
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	6022      	str	r2, [r4, #0]
 800760c:	701d      	strb	r5, [r3, #0]
 800760e:	e7db      	b.n	80075c8 <_puts_r+0x60>

08007610 <puts>:
 8007610:	4b02      	ldr	r3, [pc, #8]	; (800761c <puts+0xc>)
 8007612:	4601      	mov	r1, r0
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	f7ff bfa7 	b.w	8007568 <_puts_r>
 800761a:	bf00      	nop
 800761c:	200000f4 	.word	0x200000f4

08007620 <__sread>:
 8007620:	b510      	push	{r4, lr}
 8007622:	460c      	mov	r4, r1
 8007624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007628:	f000 f900 	bl	800782c <_read_r>
 800762c:	2800      	cmp	r0, #0
 800762e:	bfab      	itete	ge
 8007630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007632:	89a3      	ldrhlt	r3, [r4, #12]
 8007634:	181b      	addge	r3, r3, r0
 8007636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800763a:	bfac      	ite	ge
 800763c:	6563      	strge	r3, [r4, #84]	; 0x54
 800763e:	81a3      	strhlt	r3, [r4, #12]
 8007640:	bd10      	pop	{r4, pc}

08007642 <__swrite>:
 8007642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007646:	461f      	mov	r7, r3
 8007648:	898b      	ldrh	r3, [r1, #12]
 800764a:	05db      	lsls	r3, r3, #23
 800764c:	4605      	mov	r5, r0
 800764e:	460c      	mov	r4, r1
 8007650:	4616      	mov	r6, r2
 8007652:	d505      	bpl.n	8007660 <__swrite+0x1e>
 8007654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007658:	2302      	movs	r3, #2
 800765a:	2200      	movs	r2, #0
 800765c:	f000 f8d4 	bl	8007808 <_lseek_r>
 8007660:	89a3      	ldrh	r3, [r4, #12]
 8007662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800766a:	81a3      	strh	r3, [r4, #12]
 800766c:	4632      	mov	r2, r6
 800766e:	463b      	mov	r3, r7
 8007670:	4628      	mov	r0, r5
 8007672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007676:	f000 b8eb 	b.w	8007850 <_write_r>

0800767a <__sseek>:
 800767a:	b510      	push	{r4, lr}
 800767c:	460c      	mov	r4, r1
 800767e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007682:	f000 f8c1 	bl	8007808 <_lseek_r>
 8007686:	1c43      	adds	r3, r0, #1
 8007688:	89a3      	ldrh	r3, [r4, #12]
 800768a:	bf15      	itete	ne
 800768c:	6560      	strne	r0, [r4, #84]	; 0x54
 800768e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007696:	81a3      	strheq	r3, [r4, #12]
 8007698:	bf18      	it	ne
 800769a:	81a3      	strhne	r3, [r4, #12]
 800769c:	bd10      	pop	{r4, pc}

0800769e <__sclose>:
 800769e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a2:	f000 b8a1 	b.w	80077e8 <_close_r>

080076a6 <__swbuf_r>:
 80076a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a8:	460e      	mov	r6, r1
 80076aa:	4614      	mov	r4, r2
 80076ac:	4605      	mov	r5, r0
 80076ae:	b118      	cbz	r0, 80076b8 <__swbuf_r+0x12>
 80076b0:	6a03      	ldr	r3, [r0, #32]
 80076b2:	b90b      	cbnz	r3, 80076b8 <__swbuf_r+0x12>
 80076b4:	f7ff ff10 	bl	80074d8 <__sinit>
 80076b8:	69a3      	ldr	r3, [r4, #24]
 80076ba:	60a3      	str	r3, [r4, #8]
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	071a      	lsls	r2, r3, #28
 80076c0:	d525      	bpl.n	800770e <__swbuf_r+0x68>
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	b31b      	cbz	r3, 800770e <__swbuf_r+0x68>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	6922      	ldr	r2, [r4, #16]
 80076ca:	1a98      	subs	r0, r3, r2
 80076cc:	6963      	ldr	r3, [r4, #20]
 80076ce:	b2f6      	uxtb	r6, r6
 80076d0:	4283      	cmp	r3, r0
 80076d2:	4637      	mov	r7, r6
 80076d4:	dc04      	bgt.n	80076e0 <__swbuf_r+0x3a>
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f001 fdb9 	bl	8009250 <_fflush_r>
 80076de:	b9e0      	cbnz	r0, 800771a <__swbuf_r+0x74>
 80076e0:	68a3      	ldr	r3, [r4, #8]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	60a3      	str	r3, [r4, #8]
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	6022      	str	r2, [r4, #0]
 80076ec:	701e      	strb	r6, [r3, #0]
 80076ee:	6962      	ldr	r2, [r4, #20]
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d004      	beq.n	8007700 <__swbuf_r+0x5a>
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	07db      	lsls	r3, r3, #31
 80076fa:	d506      	bpl.n	800770a <__swbuf_r+0x64>
 80076fc:	2e0a      	cmp	r6, #10
 80076fe:	d104      	bne.n	800770a <__swbuf_r+0x64>
 8007700:	4621      	mov	r1, r4
 8007702:	4628      	mov	r0, r5
 8007704:	f001 fda4 	bl	8009250 <_fflush_r>
 8007708:	b938      	cbnz	r0, 800771a <__swbuf_r+0x74>
 800770a:	4638      	mov	r0, r7
 800770c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800770e:	4621      	mov	r1, r4
 8007710:	4628      	mov	r0, r5
 8007712:	f000 f805 	bl	8007720 <__swsetup_r>
 8007716:	2800      	cmp	r0, #0
 8007718:	d0d5      	beq.n	80076c6 <__swbuf_r+0x20>
 800771a:	f04f 37ff 	mov.w	r7, #4294967295
 800771e:	e7f4      	b.n	800770a <__swbuf_r+0x64>

08007720 <__swsetup_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4b2a      	ldr	r3, [pc, #168]	; (80077cc <__swsetup_r+0xac>)
 8007724:	4605      	mov	r5, r0
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	460c      	mov	r4, r1
 800772a:	b118      	cbz	r0, 8007734 <__swsetup_r+0x14>
 800772c:	6a03      	ldr	r3, [r0, #32]
 800772e:	b90b      	cbnz	r3, 8007734 <__swsetup_r+0x14>
 8007730:	f7ff fed2 	bl	80074d8 <__sinit>
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800773a:	0718      	lsls	r0, r3, #28
 800773c:	d422      	bmi.n	8007784 <__swsetup_r+0x64>
 800773e:	06d9      	lsls	r1, r3, #27
 8007740:	d407      	bmi.n	8007752 <__swsetup_r+0x32>
 8007742:	2309      	movs	r3, #9
 8007744:	602b      	str	r3, [r5, #0]
 8007746:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800774a:	81a3      	strh	r3, [r4, #12]
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	e034      	b.n	80077bc <__swsetup_r+0x9c>
 8007752:	0758      	lsls	r0, r3, #29
 8007754:	d512      	bpl.n	800777c <__swsetup_r+0x5c>
 8007756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007758:	b141      	cbz	r1, 800776c <__swsetup_r+0x4c>
 800775a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800775e:	4299      	cmp	r1, r3
 8007760:	d002      	beq.n	8007768 <__swsetup_r+0x48>
 8007762:	4628      	mov	r0, r5
 8007764:	f000 ff2e 	bl	80085c4 <_free_r>
 8007768:	2300      	movs	r3, #0
 800776a:	6363      	str	r3, [r4, #52]	; 0x34
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007772:	81a3      	strh	r3, [r4, #12]
 8007774:	2300      	movs	r3, #0
 8007776:	6063      	str	r3, [r4, #4]
 8007778:	6923      	ldr	r3, [r4, #16]
 800777a:	6023      	str	r3, [r4, #0]
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	f043 0308 	orr.w	r3, r3, #8
 8007782:	81a3      	strh	r3, [r4, #12]
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	b94b      	cbnz	r3, 800779c <__swsetup_r+0x7c>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800778e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007792:	d003      	beq.n	800779c <__swsetup_r+0x7c>
 8007794:	4621      	mov	r1, r4
 8007796:	4628      	mov	r0, r5
 8007798:	f001 fda8 	bl	80092ec <__smakebuf_r>
 800779c:	89a0      	ldrh	r0, [r4, #12]
 800779e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077a2:	f010 0301 	ands.w	r3, r0, #1
 80077a6:	d00a      	beq.n	80077be <__swsetup_r+0x9e>
 80077a8:	2300      	movs	r3, #0
 80077aa:	60a3      	str	r3, [r4, #8]
 80077ac:	6963      	ldr	r3, [r4, #20]
 80077ae:	425b      	negs	r3, r3
 80077b0:	61a3      	str	r3, [r4, #24]
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	b943      	cbnz	r3, 80077c8 <__swsetup_r+0xa8>
 80077b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077ba:	d1c4      	bne.n	8007746 <__swsetup_r+0x26>
 80077bc:	bd38      	pop	{r3, r4, r5, pc}
 80077be:	0781      	lsls	r1, r0, #30
 80077c0:	bf58      	it	pl
 80077c2:	6963      	ldrpl	r3, [r4, #20]
 80077c4:	60a3      	str	r3, [r4, #8]
 80077c6:	e7f4      	b.n	80077b2 <__swsetup_r+0x92>
 80077c8:	2000      	movs	r0, #0
 80077ca:	e7f7      	b.n	80077bc <__swsetup_r+0x9c>
 80077cc:	200000f4 	.word	0x200000f4

080077d0 <memset>:
 80077d0:	4402      	add	r2, r0
 80077d2:	4603      	mov	r3, r0
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d100      	bne.n	80077da <memset+0xa>
 80077d8:	4770      	bx	lr
 80077da:	f803 1b01 	strb.w	r1, [r3], #1
 80077de:	e7f9      	b.n	80077d4 <memset+0x4>

080077e0 <_localeconv_r>:
 80077e0:	4800      	ldr	r0, [pc, #0]	; (80077e4 <_localeconv_r+0x4>)
 80077e2:	4770      	bx	lr
 80077e4:	200001e8 	.word	0x200001e8

080077e8 <_close_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4d06      	ldr	r5, [pc, #24]	; (8007804 <_close_r+0x1c>)
 80077ec:	2300      	movs	r3, #0
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	f7fb f969 	bl	8002aca <_close>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_close_r+0x1a>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_close_r+0x1a>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	20000660 	.word	0x20000660

08007808 <_lseek_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4d07      	ldr	r5, [pc, #28]	; (8007828 <_lseek_r+0x20>)
 800780c:	4604      	mov	r4, r0
 800780e:	4608      	mov	r0, r1
 8007810:	4611      	mov	r1, r2
 8007812:	2200      	movs	r2, #0
 8007814:	602a      	str	r2, [r5, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	f7fb f97e 	bl	8002b18 <_lseek>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_lseek_r+0x1e>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	b103      	cbz	r3, 8007826 <_lseek_r+0x1e>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	20000660 	.word	0x20000660

0800782c <_read_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d07      	ldr	r5, [pc, #28]	; (800784c <_read_r+0x20>)
 8007830:	4604      	mov	r4, r0
 8007832:	4608      	mov	r0, r1
 8007834:	4611      	mov	r1, r2
 8007836:	2200      	movs	r2, #0
 8007838:	602a      	str	r2, [r5, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f7fb f928 	bl	8002a90 <_read>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_read_r+0x1e>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_read_r+0x1e>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	20000660 	.word	0x20000660

08007850 <_write_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d07      	ldr	r5, [pc, #28]	; (8007870 <_write_r+0x20>)
 8007854:	4604      	mov	r4, r0
 8007856:	4608      	mov	r0, r1
 8007858:	4611      	mov	r1, r2
 800785a:	2200      	movs	r2, #0
 800785c:	602a      	str	r2, [r5, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	f7f9 fcc3 	bl	80011ea <_write>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_write_r+0x1e>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_write_r+0x1e>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	20000660 	.word	0x20000660

08007874 <__errno>:
 8007874:	4b01      	ldr	r3, [pc, #4]	; (800787c <__errno+0x8>)
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	200000f4 	.word	0x200000f4

08007880 <__libc_init_array>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	4d0d      	ldr	r5, [pc, #52]	; (80078b8 <__libc_init_array+0x38>)
 8007884:	4c0d      	ldr	r4, [pc, #52]	; (80078bc <__libc_init_array+0x3c>)
 8007886:	1b64      	subs	r4, r4, r5
 8007888:	10a4      	asrs	r4, r4, #2
 800788a:	2600      	movs	r6, #0
 800788c:	42a6      	cmp	r6, r4
 800788e:	d109      	bne.n	80078a4 <__libc_init_array+0x24>
 8007890:	4d0b      	ldr	r5, [pc, #44]	; (80078c0 <__libc_init_array+0x40>)
 8007892:	4c0c      	ldr	r4, [pc, #48]	; (80078c4 <__libc_init_array+0x44>)
 8007894:	f003 f82a 	bl	800a8ec <_init>
 8007898:	1b64      	subs	r4, r4, r5
 800789a:	10a4      	asrs	r4, r4, #2
 800789c:	2600      	movs	r6, #0
 800789e:	42a6      	cmp	r6, r4
 80078a0:	d105      	bne.n	80078ae <__libc_init_array+0x2e>
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a8:	4798      	blx	r3
 80078aa:	3601      	adds	r6, #1
 80078ac:	e7ee      	b.n	800788c <__libc_init_array+0xc>
 80078ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b2:	4798      	blx	r3
 80078b4:	3601      	adds	r6, #1
 80078b6:	e7f2      	b.n	800789e <__libc_init_array+0x1e>
 80078b8:	0800ad90 	.word	0x0800ad90
 80078bc:	0800ad90 	.word	0x0800ad90
 80078c0:	0800ad90 	.word	0x0800ad90
 80078c4:	0800ad94 	.word	0x0800ad94

080078c8 <__retarget_lock_init_recursive>:
 80078c8:	4770      	bx	lr

080078ca <__retarget_lock_acquire_recursive>:
 80078ca:	4770      	bx	lr

080078cc <__retarget_lock_release_recursive>:
 80078cc:	4770      	bx	lr

080078ce <quorem>:
 80078ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d2:	6903      	ldr	r3, [r0, #16]
 80078d4:	690c      	ldr	r4, [r1, #16]
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	4607      	mov	r7, r0
 80078da:	db7e      	blt.n	80079da <quorem+0x10c>
 80078dc:	3c01      	subs	r4, #1
 80078de:	f101 0814 	add.w	r8, r1, #20
 80078e2:	f100 0514 	add.w	r5, r0, #20
 80078e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078ea:	9301      	str	r3, [sp, #4]
 80078ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078f4:	3301      	adds	r3, #1
 80078f6:	429a      	cmp	r2, r3
 80078f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80078fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007900:	fbb2 f6f3 	udiv	r6, r2, r3
 8007904:	d331      	bcc.n	800796a <quorem+0x9c>
 8007906:	f04f 0e00 	mov.w	lr, #0
 800790a:	4640      	mov	r0, r8
 800790c:	46ac      	mov	ip, r5
 800790e:	46f2      	mov	sl, lr
 8007910:	f850 2b04 	ldr.w	r2, [r0], #4
 8007914:	b293      	uxth	r3, r2
 8007916:	fb06 e303 	mla	r3, r6, r3, lr
 800791a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800791e:	0c1a      	lsrs	r2, r3, #16
 8007920:	b29b      	uxth	r3, r3
 8007922:	ebaa 0303 	sub.w	r3, sl, r3
 8007926:	f8dc a000 	ldr.w	sl, [ip]
 800792a:	fa13 f38a 	uxtah	r3, r3, sl
 800792e:	fb06 220e 	mla	r2, r6, lr, r2
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	9b00      	ldr	r3, [sp, #0]
 8007936:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800793a:	b292      	uxth	r2, r2
 800793c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007940:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007944:	f8bd 3000 	ldrh.w	r3, [sp]
 8007948:	4581      	cmp	r9, r0
 800794a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800794e:	f84c 3b04 	str.w	r3, [ip], #4
 8007952:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007956:	d2db      	bcs.n	8007910 <quorem+0x42>
 8007958:	f855 300b 	ldr.w	r3, [r5, fp]
 800795c:	b92b      	cbnz	r3, 800796a <quorem+0x9c>
 800795e:	9b01      	ldr	r3, [sp, #4]
 8007960:	3b04      	subs	r3, #4
 8007962:	429d      	cmp	r5, r3
 8007964:	461a      	mov	r2, r3
 8007966:	d32c      	bcc.n	80079c2 <quorem+0xf4>
 8007968:	613c      	str	r4, [r7, #16]
 800796a:	4638      	mov	r0, r7
 800796c:	f001 f9a6 	bl	8008cbc <__mcmp>
 8007970:	2800      	cmp	r0, #0
 8007972:	db22      	blt.n	80079ba <quorem+0xec>
 8007974:	3601      	adds	r6, #1
 8007976:	4629      	mov	r1, r5
 8007978:	2000      	movs	r0, #0
 800797a:	f858 2b04 	ldr.w	r2, [r8], #4
 800797e:	f8d1 c000 	ldr.w	ip, [r1]
 8007982:	b293      	uxth	r3, r2
 8007984:	1ac3      	subs	r3, r0, r3
 8007986:	0c12      	lsrs	r2, r2, #16
 8007988:	fa13 f38c 	uxtah	r3, r3, ip
 800798c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007994:	b29b      	uxth	r3, r3
 8007996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800799a:	45c1      	cmp	r9, r8
 800799c:	f841 3b04 	str.w	r3, [r1], #4
 80079a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079a4:	d2e9      	bcs.n	800797a <quorem+0xac>
 80079a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ae:	b922      	cbnz	r2, 80079ba <quorem+0xec>
 80079b0:	3b04      	subs	r3, #4
 80079b2:	429d      	cmp	r5, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	d30a      	bcc.n	80079ce <quorem+0x100>
 80079b8:	613c      	str	r4, [r7, #16]
 80079ba:	4630      	mov	r0, r6
 80079bc:	b003      	add	sp, #12
 80079be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	3b04      	subs	r3, #4
 80079c6:	2a00      	cmp	r2, #0
 80079c8:	d1ce      	bne.n	8007968 <quorem+0x9a>
 80079ca:	3c01      	subs	r4, #1
 80079cc:	e7c9      	b.n	8007962 <quorem+0x94>
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	3b04      	subs	r3, #4
 80079d2:	2a00      	cmp	r2, #0
 80079d4:	d1f0      	bne.n	80079b8 <quorem+0xea>
 80079d6:	3c01      	subs	r4, #1
 80079d8:	e7eb      	b.n	80079b2 <quorem+0xe4>
 80079da:	2000      	movs	r0, #0
 80079dc:	e7ee      	b.n	80079bc <quorem+0xee>
	...

080079e0 <_dtoa_r>:
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	ed2d 8b04 	vpush	{d8-d9}
 80079e8:	69c5      	ldr	r5, [r0, #28]
 80079ea:	b093      	sub	sp, #76	; 0x4c
 80079ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80079f0:	ec57 6b10 	vmov	r6, r7, d0
 80079f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80079f8:	9107      	str	r1, [sp, #28]
 80079fa:	4604      	mov	r4, r0
 80079fc:	920a      	str	r2, [sp, #40]	; 0x28
 80079fe:	930d      	str	r3, [sp, #52]	; 0x34
 8007a00:	b975      	cbnz	r5, 8007a20 <_dtoa_r+0x40>
 8007a02:	2010      	movs	r0, #16
 8007a04:	f000 fe2a 	bl	800865c <malloc>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	61e0      	str	r0, [r4, #28]
 8007a0c:	b920      	cbnz	r0, 8007a18 <_dtoa_r+0x38>
 8007a0e:	4bae      	ldr	r3, [pc, #696]	; (8007cc8 <_dtoa_r+0x2e8>)
 8007a10:	21ef      	movs	r1, #239	; 0xef
 8007a12:	48ae      	ldr	r0, [pc, #696]	; (8007ccc <_dtoa_r+0x2ec>)
 8007a14:	f001 fce6 	bl	80093e4 <__assert_func>
 8007a18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a1c:	6005      	str	r5, [r0, #0]
 8007a1e:	60c5      	str	r5, [r0, #12]
 8007a20:	69e3      	ldr	r3, [r4, #28]
 8007a22:	6819      	ldr	r1, [r3, #0]
 8007a24:	b151      	cbz	r1, 8007a3c <_dtoa_r+0x5c>
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	604a      	str	r2, [r1, #4]
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4093      	lsls	r3, r2
 8007a2e:	608b      	str	r3, [r1, #8]
 8007a30:	4620      	mov	r0, r4
 8007a32:	f000 ff07 	bl	8008844 <_Bfree>
 8007a36:	69e3      	ldr	r3, [r4, #28]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	1e3b      	subs	r3, r7, #0
 8007a3e:	bfbb      	ittet	lt
 8007a40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a44:	9303      	strlt	r3, [sp, #12]
 8007a46:	2300      	movge	r3, #0
 8007a48:	2201      	movlt	r2, #1
 8007a4a:	bfac      	ite	ge
 8007a4c:	f8c8 3000 	strge.w	r3, [r8]
 8007a50:	f8c8 2000 	strlt.w	r2, [r8]
 8007a54:	4b9e      	ldr	r3, [pc, #632]	; (8007cd0 <_dtoa_r+0x2f0>)
 8007a56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a5a:	ea33 0308 	bics.w	r3, r3, r8
 8007a5e:	d11b      	bne.n	8007a98 <_dtoa_r+0xb8>
 8007a60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a62:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a6c:	4333      	orrs	r3, r6
 8007a6e:	f000 8593 	beq.w	8008598 <_dtoa_r+0xbb8>
 8007a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a74:	b963      	cbnz	r3, 8007a90 <_dtoa_r+0xb0>
 8007a76:	4b97      	ldr	r3, [pc, #604]	; (8007cd4 <_dtoa_r+0x2f4>)
 8007a78:	e027      	b.n	8007aca <_dtoa_r+0xea>
 8007a7a:	4b97      	ldr	r3, [pc, #604]	; (8007cd8 <_dtoa_r+0x2f8>)
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	9800      	ldr	r0, [sp, #0]
 8007a86:	b013      	add	sp, #76	; 0x4c
 8007a88:	ecbd 8b04 	vpop	{d8-d9}
 8007a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a90:	4b90      	ldr	r3, [pc, #576]	; (8007cd4 <_dtoa_r+0x2f4>)
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	3303      	adds	r3, #3
 8007a96:	e7f3      	b.n	8007a80 <_dtoa_r+0xa0>
 8007a98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	ec51 0b17 	vmov	r0, r1, d7
 8007aa2:	eeb0 8a47 	vmov.f32	s16, s14
 8007aa6:	eef0 8a67 	vmov.f32	s17, s15
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f7f9 f82c 	bl	8000b08 <__aeabi_dcmpeq>
 8007ab0:	4681      	mov	r9, r0
 8007ab2:	b160      	cbz	r0, 8007ace <_dtoa_r+0xee>
 8007ab4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 8568 	beq.w	8008592 <_dtoa_r+0xbb2>
 8007ac2:	4b86      	ldr	r3, [pc, #536]	; (8007cdc <_dtoa_r+0x2fc>)
 8007ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	e7da      	b.n	8007a84 <_dtoa_r+0xa4>
 8007ace:	aa10      	add	r2, sp, #64	; 0x40
 8007ad0:	a911      	add	r1, sp, #68	; 0x44
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ad8:	eef0 0a68 	vmov.f32	s1, s17
 8007adc:	f001 f994 	bl	8008e08 <__d2b>
 8007ae0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	2d00      	cmp	r5, #0
 8007ae8:	d07f      	beq.n	8007bea <_dtoa_r+0x20a>
 8007aea:	ee18 3a90 	vmov	r3, s17
 8007aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007af2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007af6:	ec51 0b18 	vmov	r0, r1, d8
 8007afa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007b06:	4619      	mov	r1, r3
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4b75      	ldr	r3, [pc, #468]	; (8007ce0 <_dtoa_r+0x300>)
 8007b0c:	f7f8 fbdc 	bl	80002c8 <__aeabi_dsub>
 8007b10:	a367      	add	r3, pc, #412	; (adr r3, 8007cb0 <_dtoa_r+0x2d0>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f7f8 fd8f 	bl	8000638 <__aeabi_dmul>
 8007b1a:	a367      	add	r3, pc, #412	; (adr r3, 8007cb8 <_dtoa_r+0x2d8>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f7f8 fbd4 	bl	80002cc <__adddf3>
 8007b24:	4606      	mov	r6, r0
 8007b26:	4628      	mov	r0, r5
 8007b28:	460f      	mov	r7, r1
 8007b2a:	f7f8 fd1b 	bl	8000564 <__aeabi_i2d>
 8007b2e:	a364      	add	r3, pc, #400	; (adr r3, 8007cc0 <_dtoa_r+0x2e0>)
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	f7f8 fd80 	bl	8000638 <__aeabi_dmul>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	4639      	mov	r1, r7
 8007b40:	f7f8 fbc4 	bl	80002cc <__adddf3>
 8007b44:	4606      	mov	r6, r0
 8007b46:	460f      	mov	r7, r1
 8007b48:	f7f9 f826 	bl	8000b98 <__aeabi_d2iz>
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4683      	mov	fp, r0
 8007b50:	2300      	movs	r3, #0
 8007b52:	4630      	mov	r0, r6
 8007b54:	4639      	mov	r1, r7
 8007b56:	f7f8 ffe1 	bl	8000b1c <__aeabi_dcmplt>
 8007b5a:	b148      	cbz	r0, 8007b70 <_dtoa_r+0x190>
 8007b5c:	4658      	mov	r0, fp
 8007b5e:	f7f8 fd01 	bl	8000564 <__aeabi_i2d>
 8007b62:	4632      	mov	r2, r6
 8007b64:	463b      	mov	r3, r7
 8007b66:	f7f8 ffcf 	bl	8000b08 <__aeabi_dcmpeq>
 8007b6a:	b908      	cbnz	r0, 8007b70 <_dtoa_r+0x190>
 8007b6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b70:	f1bb 0f16 	cmp.w	fp, #22
 8007b74:	d857      	bhi.n	8007c26 <_dtoa_r+0x246>
 8007b76:	4b5b      	ldr	r3, [pc, #364]	; (8007ce4 <_dtoa_r+0x304>)
 8007b78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	ec51 0b18 	vmov	r0, r1, d8
 8007b84:	f7f8 ffca 	bl	8000b1c <__aeabi_dcmplt>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d04e      	beq.n	8007c2a <_dtoa_r+0x24a>
 8007b8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b90:	2300      	movs	r3, #0
 8007b92:	930c      	str	r3, [sp, #48]	; 0x30
 8007b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b96:	1b5b      	subs	r3, r3, r5
 8007b98:	1e5a      	subs	r2, r3, #1
 8007b9a:	bf45      	ittet	mi
 8007b9c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007ba0:	9305      	strmi	r3, [sp, #20]
 8007ba2:	2300      	movpl	r3, #0
 8007ba4:	2300      	movmi	r3, #0
 8007ba6:	9206      	str	r2, [sp, #24]
 8007ba8:	bf54      	ite	pl
 8007baa:	9305      	strpl	r3, [sp, #20]
 8007bac:	9306      	strmi	r3, [sp, #24]
 8007bae:	f1bb 0f00 	cmp.w	fp, #0
 8007bb2:	db3c      	blt.n	8007c2e <_dtoa_r+0x24e>
 8007bb4:	9b06      	ldr	r3, [sp, #24]
 8007bb6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007bba:	445b      	add	r3, fp
 8007bbc:	9306      	str	r3, [sp, #24]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	9308      	str	r3, [sp, #32]
 8007bc2:	9b07      	ldr	r3, [sp, #28]
 8007bc4:	2b09      	cmp	r3, #9
 8007bc6:	d868      	bhi.n	8007c9a <_dtoa_r+0x2ba>
 8007bc8:	2b05      	cmp	r3, #5
 8007bca:	bfc4      	itt	gt
 8007bcc:	3b04      	subgt	r3, #4
 8007bce:	9307      	strgt	r3, [sp, #28]
 8007bd0:	9b07      	ldr	r3, [sp, #28]
 8007bd2:	f1a3 0302 	sub.w	r3, r3, #2
 8007bd6:	bfcc      	ite	gt
 8007bd8:	2500      	movgt	r5, #0
 8007bda:	2501      	movle	r5, #1
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	f200 8085 	bhi.w	8007cec <_dtoa_r+0x30c>
 8007be2:	e8df f003 	tbb	[pc, r3]
 8007be6:	3b2e      	.short	0x3b2e
 8007be8:	5839      	.short	0x5839
 8007bea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007bee:	441d      	add	r5, r3
 8007bf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	bfc1      	itttt	gt
 8007bf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007bfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007c04:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007c08:	bfd6      	itet	le
 8007c0a:	f1c3 0320 	rsble	r3, r3, #32
 8007c0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c12:	fa06 f003 	lslle.w	r0, r6, r3
 8007c16:	f7f8 fc95 	bl	8000544 <__aeabi_ui2d>
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007c20:	3d01      	subs	r5, #1
 8007c22:	920e      	str	r2, [sp, #56]	; 0x38
 8007c24:	e76f      	b.n	8007b06 <_dtoa_r+0x126>
 8007c26:	2301      	movs	r3, #1
 8007c28:	e7b3      	b.n	8007b92 <_dtoa_r+0x1b2>
 8007c2a:	900c      	str	r0, [sp, #48]	; 0x30
 8007c2c:	e7b2      	b.n	8007b94 <_dtoa_r+0x1b4>
 8007c2e:	9b05      	ldr	r3, [sp, #20]
 8007c30:	eba3 030b 	sub.w	r3, r3, fp
 8007c34:	9305      	str	r3, [sp, #20]
 8007c36:	f1cb 0300 	rsb	r3, fp, #0
 8007c3a:	9308      	str	r3, [sp, #32]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c40:	e7bf      	b.n	8007bc2 <_dtoa_r+0x1e2>
 8007c42:	2300      	movs	r3, #0
 8007c44:	9309      	str	r3, [sp, #36]	; 0x24
 8007c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	dc52      	bgt.n	8007cf2 <_dtoa_r+0x312>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	9301      	str	r3, [sp, #4]
 8007c50:	9304      	str	r3, [sp, #16]
 8007c52:	461a      	mov	r2, r3
 8007c54:	920a      	str	r2, [sp, #40]	; 0x28
 8007c56:	e00b      	b.n	8007c70 <_dtoa_r+0x290>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e7f3      	b.n	8007c44 <_dtoa_r+0x264>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c62:	445b      	add	r3, fp
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	3301      	adds	r3, #1
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	9304      	str	r3, [sp, #16]
 8007c6c:	bfb8      	it	lt
 8007c6e:	2301      	movlt	r3, #1
 8007c70:	69e0      	ldr	r0, [r4, #28]
 8007c72:	2100      	movs	r1, #0
 8007c74:	2204      	movs	r2, #4
 8007c76:	f102 0614 	add.w	r6, r2, #20
 8007c7a:	429e      	cmp	r6, r3
 8007c7c:	d93d      	bls.n	8007cfa <_dtoa_r+0x31a>
 8007c7e:	6041      	str	r1, [r0, #4]
 8007c80:	4620      	mov	r0, r4
 8007c82:	f000 fd9f 	bl	80087c4 <_Balloc>
 8007c86:	9000      	str	r0, [sp, #0]
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d139      	bne.n	8007d00 <_dtoa_r+0x320>
 8007c8c:	4b16      	ldr	r3, [pc, #88]	; (8007ce8 <_dtoa_r+0x308>)
 8007c8e:	4602      	mov	r2, r0
 8007c90:	f240 11af 	movw	r1, #431	; 0x1af
 8007c94:	e6bd      	b.n	8007a12 <_dtoa_r+0x32>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e7e1      	b.n	8007c5e <_dtoa_r+0x27e>
 8007c9a:	2501      	movs	r5, #1
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9307      	str	r3, [sp, #28]
 8007ca0:	9509      	str	r5, [sp, #36]	; 0x24
 8007ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	9304      	str	r3, [sp, #16]
 8007caa:	2200      	movs	r2, #0
 8007cac:	2312      	movs	r3, #18
 8007cae:	e7d1      	b.n	8007c54 <_dtoa_r+0x274>
 8007cb0:	636f4361 	.word	0x636f4361
 8007cb4:	3fd287a7 	.word	0x3fd287a7
 8007cb8:	8b60c8b3 	.word	0x8b60c8b3
 8007cbc:	3fc68a28 	.word	0x3fc68a28
 8007cc0:	509f79fb 	.word	0x509f79fb
 8007cc4:	3fd34413 	.word	0x3fd34413
 8007cc8:	0800a9b1 	.word	0x0800a9b1
 8007ccc:	0800a9c8 	.word	0x0800a9c8
 8007cd0:	7ff00000 	.word	0x7ff00000
 8007cd4:	0800a9ad 	.word	0x0800a9ad
 8007cd8:	0800a9a4 	.word	0x0800a9a4
 8007cdc:	0800a981 	.word	0x0800a981
 8007ce0:	3ff80000 	.word	0x3ff80000
 8007ce4:	0800aab8 	.word	0x0800aab8
 8007ce8:	0800aa20 	.word	0x0800aa20
 8007cec:	2301      	movs	r3, #1
 8007cee:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf0:	e7d7      	b.n	8007ca2 <_dtoa_r+0x2c2>
 8007cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	9304      	str	r3, [sp, #16]
 8007cf8:	e7ba      	b.n	8007c70 <_dtoa_r+0x290>
 8007cfa:	3101      	adds	r1, #1
 8007cfc:	0052      	lsls	r2, r2, #1
 8007cfe:	e7ba      	b.n	8007c76 <_dtoa_r+0x296>
 8007d00:	69e3      	ldr	r3, [r4, #28]
 8007d02:	9a00      	ldr	r2, [sp, #0]
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	9b04      	ldr	r3, [sp, #16]
 8007d08:	2b0e      	cmp	r3, #14
 8007d0a:	f200 80a8 	bhi.w	8007e5e <_dtoa_r+0x47e>
 8007d0e:	2d00      	cmp	r5, #0
 8007d10:	f000 80a5 	beq.w	8007e5e <_dtoa_r+0x47e>
 8007d14:	f1bb 0f00 	cmp.w	fp, #0
 8007d18:	dd38      	ble.n	8007d8c <_dtoa_r+0x3ac>
 8007d1a:	4bc0      	ldr	r3, [pc, #768]	; (800801c <_dtoa_r+0x63c>)
 8007d1c:	f00b 020f 	and.w	r2, fp, #15
 8007d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d28:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007d2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007d30:	d019      	beq.n	8007d66 <_dtoa_r+0x386>
 8007d32:	4bbb      	ldr	r3, [pc, #748]	; (8008020 <_dtoa_r+0x640>)
 8007d34:	ec51 0b18 	vmov	r0, r1, d8
 8007d38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d3c:	f7f8 fda6 	bl	800088c <__aeabi_ddiv>
 8007d40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d44:	f008 080f 	and.w	r8, r8, #15
 8007d48:	2503      	movs	r5, #3
 8007d4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008020 <_dtoa_r+0x640>
 8007d4e:	f1b8 0f00 	cmp.w	r8, #0
 8007d52:	d10a      	bne.n	8007d6a <_dtoa_r+0x38a>
 8007d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d58:	4632      	mov	r2, r6
 8007d5a:	463b      	mov	r3, r7
 8007d5c:	f7f8 fd96 	bl	800088c <__aeabi_ddiv>
 8007d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d64:	e02b      	b.n	8007dbe <_dtoa_r+0x3de>
 8007d66:	2502      	movs	r5, #2
 8007d68:	e7ef      	b.n	8007d4a <_dtoa_r+0x36a>
 8007d6a:	f018 0f01 	tst.w	r8, #1
 8007d6e:	d008      	beq.n	8007d82 <_dtoa_r+0x3a2>
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d78:	f7f8 fc5e 	bl	8000638 <__aeabi_dmul>
 8007d7c:	3501      	adds	r5, #1
 8007d7e:	4606      	mov	r6, r0
 8007d80:	460f      	mov	r7, r1
 8007d82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d86:	f109 0908 	add.w	r9, r9, #8
 8007d8a:	e7e0      	b.n	8007d4e <_dtoa_r+0x36e>
 8007d8c:	f000 809f 	beq.w	8007ece <_dtoa_r+0x4ee>
 8007d90:	f1cb 0600 	rsb	r6, fp, #0
 8007d94:	4ba1      	ldr	r3, [pc, #644]	; (800801c <_dtoa_r+0x63c>)
 8007d96:	4fa2      	ldr	r7, [pc, #648]	; (8008020 <_dtoa_r+0x640>)
 8007d98:	f006 020f 	and.w	r2, r6, #15
 8007d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	ec51 0b18 	vmov	r0, r1, d8
 8007da8:	f7f8 fc46 	bl	8000638 <__aeabi_dmul>
 8007dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db0:	1136      	asrs	r6, r6, #4
 8007db2:	2300      	movs	r3, #0
 8007db4:	2502      	movs	r5, #2
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	d17e      	bne.n	8007eb8 <_dtoa_r+0x4d8>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1d0      	bne.n	8007d60 <_dtoa_r+0x380>
 8007dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 8084 	beq.w	8007ed2 <_dtoa_r+0x4f2>
 8007dca:	4b96      	ldr	r3, [pc, #600]	; (8008024 <_dtoa_r+0x644>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4640      	mov	r0, r8
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	f7f8 fea3 	bl	8000b1c <__aeabi_dcmplt>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d07b      	beq.n	8007ed2 <_dtoa_r+0x4f2>
 8007dda:	9b04      	ldr	r3, [sp, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d078      	beq.n	8007ed2 <_dtoa_r+0x4f2>
 8007de0:	9b01      	ldr	r3, [sp, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	dd39      	ble.n	8007e5a <_dtoa_r+0x47a>
 8007de6:	4b90      	ldr	r3, [pc, #576]	; (8008028 <_dtoa_r+0x648>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	4640      	mov	r0, r8
 8007dec:	4649      	mov	r1, r9
 8007dee:	f7f8 fc23 	bl	8000638 <__aeabi_dmul>
 8007df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df6:	9e01      	ldr	r6, [sp, #4]
 8007df8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e02:	4628      	mov	r0, r5
 8007e04:	f7f8 fbae 	bl	8000564 <__aeabi_i2d>
 8007e08:	4642      	mov	r2, r8
 8007e0a:	464b      	mov	r3, r9
 8007e0c:	f7f8 fc14 	bl	8000638 <__aeabi_dmul>
 8007e10:	4b86      	ldr	r3, [pc, #536]	; (800802c <_dtoa_r+0x64c>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	f7f8 fa5a 	bl	80002cc <__adddf3>
 8007e18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e20:	9303      	str	r3, [sp, #12]
 8007e22:	2e00      	cmp	r6, #0
 8007e24:	d158      	bne.n	8007ed8 <_dtoa_r+0x4f8>
 8007e26:	4b82      	ldr	r3, [pc, #520]	; (8008030 <_dtoa_r+0x650>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	f7f8 fa4b 	bl	80002c8 <__aeabi_dsub>
 8007e32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e36:	4680      	mov	r8, r0
 8007e38:	4689      	mov	r9, r1
 8007e3a:	f7f8 fe8d 	bl	8000b58 <__aeabi_dcmpgt>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f040 8296 	bne.w	8008370 <_dtoa_r+0x990>
 8007e44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007e48:	4640      	mov	r0, r8
 8007e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e4e:	4649      	mov	r1, r9
 8007e50:	f7f8 fe64 	bl	8000b1c <__aeabi_dcmplt>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	f040 8289 	bne.w	800836c <_dtoa_r+0x98c>
 8007e5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f2c0 814e 	blt.w	8008102 <_dtoa_r+0x722>
 8007e66:	f1bb 0f0e 	cmp.w	fp, #14
 8007e6a:	f300 814a 	bgt.w	8008102 <_dtoa_r+0x722>
 8007e6e:	4b6b      	ldr	r3, [pc, #428]	; (800801c <_dtoa_r+0x63c>)
 8007e70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f280 80dc 	bge.w	8008038 <_dtoa_r+0x658>
 8007e80:	9b04      	ldr	r3, [sp, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f300 80d8 	bgt.w	8008038 <_dtoa_r+0x658>
 8007e88:	f040 826f 	bne.w	800836a <_dtoa_r+0x98a>
 8007e8c:	4b68      	ldr	r3, [pc, #416]	; (8008030 <_dtoa_r+0x650>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4640      	mov	r0, r8
 8007e92:	4649      	mov	r1, r9
 8007e94:	f7f8 fbd0 	bl	8000638 <__aeabi_dmul>
 8007e98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e9c:	f7f8 fe52 	bl	8000b44 <__aeabi_dcmpge>
 8007ea0:	9e04      	ldr	r6, [sp, #16]
 8007ea2:	4637      	mov	r7, r6
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	f040 8245 	bne.w	8008334 <_dtoa_r+0x954>
 8007eaa:	9d00      	ldr	r5, [sp, #0]
 8007eac:	2331      	movs	r3, #49	; 0x31
 8007eae:	f805 3b01 	strb.w	r3, [r5], #1
 8007eb2:	f10b 0b01 	add.w	fp, fp, #1
 8007eb6:	e241      	b.n	800833c <_dtoa_r+0x95c>
 8007eb8:	07f2      	lsls	r2, r6, #31
 8007eba:	d505      	bpl.n	8007ec8 <_dtoa_r+0x4e8>
 8007ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec0:	f7f8 fbba 	bl	8000638 <__aeabi_dmul>
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	1076      	asrs	r6, r6, #1
 8007eca:	3708      	adds	r7, #8
 8007ecc:	e773      	b.n	8007db6 <_dtoa_r+0x3d6>
 8007ece:	2502      	movs	r5, #2
 8007ed0:	e775      	b.n	8007dbe <_dtoa_r+0x3de>
 8007ed2:	9e04      	ldr	r6, [sp, #16]
 8007ed4:	465f      	mov	r7, fp
 8007ed6:	e792      	b.n	8007dfe <_dtoa_r+0x41e>
 8007ed8:	9900      	ldr	r1, [sp, #0]
 8007eda:	4b50      	ldr	r3, [pc, #320]	; (800801c <_dtoa_r+0x63c>)
 8007edc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ee0:	4431      	add	r1, r6
 8007ee2:	9102      	str	r1, [sp, #8]
 8007ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ee6:	eeb0 9a47 	vmov.f32	s18, s14
 8007eea:	eef0 9a67 	vmov.f32	s19, s15
 8007eee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ef2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ef6:	2900      	cmp	r1, #0
 8007ef8:	d044      	beq.n	8007f84 <_dtoa_r+0x5a4>
 8007efa:	494e      	ldr	r1, [pc, #312]	; (8008034 <_dtoa_r+0x654>)
 8007efc:	2000      	movs	r0, #0
 8007efe:	f7f8 fcc5 	bl	800088c <__aeabi_ddiv>
 8007f02:	ec53 2b19 	vmov	r2, r3, d9
 8007f06:	f7f8 f9df 	bl	80002c8 <__aeabi_dsub>
 8007f0a:	9d00      	ldr	r5, [sp, #0]
 8007f0c:	ec41 0b19 	vmov	d9, r0, r1
 8007f10:	4649      	mov	r1, r9
 8007f12:	4640      	mov	r0, r8
 8007f14:	f7f8 fe40 	bl	8000b98 <__aeabi_d2iz>
 8007f18:	4606      	mov	r6, r0
 8007f1a:	f7f8 fb23 	bl	8000564 <__aeabi_i2d>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4640      	mov	r0, r8
 8007f24:	4649      	mov	r1, r9
 8007f26:	f7f8 f9cf 	bl	80002c8 <__aeabi_dsub>
 8007f2a:	3630      	adds	r6, #48	; 0x30
 8007f2c:	f805 6b01 	strb.w	r6, [r5], #1
 8007f30:	ec53 2b19 	vmov	r2, r3, d9
 8007f34:	4680      	mov	r8, r0
 8007f36:	4689      	mov	r9, r1
 8007f38:	f7f8 fdf0 	bl	8000b1c <__aeabi_dcmplt>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d164      	bne.n	800800a <_dtoa_r+0x62a>
 8007f40:	4642      	mov	r2, r8
 8007f42:	464b      	mov	r3, r9
 8007f44:	4937      	ldr	r1, [pc, #220]	; (8008024 <_dtoa_r+0x644>)
 8007f46:	2000      	movs	r0, #0
 8007f48:	f7f8 f9be 	bl	80002c8 <__aeabi_dsub>
 8007f4c:	ec53 2b19 	vmov	r2, r3, d9
 8007f50:	f7f8 fde4 	bl	8000b1c <__aeabi_dcmplt>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	f040 80b6 	bne.w	80080c6 <_dtoa_r+0x6e6>
 8007f5a:	9b02      	ldr	r3, [sp, #8]
 8007f5c:	429d      	cmp	r5, r3
 8007f5e:	f43f af7c 	beq.w	8007e5a <_dtoa_r+0x47a>
 8007f62:	4b31      	ldr	r3, [pc, #196]	; (8008028 <_dtoa_r+0x648>)
 8007f64:	ec51 0b19 	vmov	r0, r1, d9
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f7f8 fb65 	bl	8000638 <__aeabi_dmul>
 8007f6e:	4b2e      	ldr	r3, [pc, #184]	; (8008028 <_dtoa_r+0x648>)
 8007f70:	ec41 0b19 	vmov	d9, r0, r1
 8007f74:	2200      	movs	r2, #0
 8007f76:	4640      	mov	r0, r8
 8007f78:	4649      	mov	r1, r9
 8007f7a:	f7f8 fb5d 	bl	8000638 <__aeabi_dmul>
 8007f7e:	4680      	mov	r8, r0
 8007f80:	4689      	mov	r9, r1
 8007f82:	e7c5      	b.n	8007f10 <_dtoa_r+0x530>
 8007f84:	ec51 0b17 	vmov	r0, r1, d7
 8007f88:	f7f8 fb56 	bl	8000638 <__aeabi_dmul>
 8007f8c:	9b02      	ldr	r3, [sp, #8]
 8007f8e:	9d00      	ldr	r5, [sp, #0]
 8007f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f92:	ec41 0b19 	vmov	d9, r0, r1
 8007f96:	4649      	mov	r1, r9
 8007f98:	4640      	mov	r0, r8
 8007f9a:	f7f8 fdfd 	bl	8000b98 <__aeabi_d2iz>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	f7f8 fae0 	bl	8000564 <__aeabi_i2d>
 8007fa4:	3630      	adds	r6, #48	; 0x30
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4640      	mov	r0, r8
 8007fac:	4649      	mov	r1, r9
 8007fae:	f7f8 f98b 	bl	80002c8 <__aeabi_dsub>
 8007fb2:	f805 6b01 	strb.w	r6, [r5], #1
 8007fb6:	9b02      	ldr	r3, [sp, #8]
 8007fb8:	429d      	cmp	r5, r3
 8007fba:	4680      	mov	r8, r0
 8007fbc:	4689      	mov	r9, r1
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	d124      	bne.n	800800e <_dtoa_r+0x62e>
 8007fc4:	4b1b      	ldr	r3, [pc, #108]	; (8008034 <_dtoa_r+0x654>)
 8007fc6:	ec51 0b19 	vmov	r0, r1, d9
 8007fca:	f7f8 f97f 	bl	80002cc <__adddf3>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	f7f8 fdbf 	bl	8000b58 <__aeabi_dcmpgt>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d173      	bne.n	80080c6 <_dtoa_r+0x6e6>
 8007fde:	ec53 2b19 	vmov	r2, r3, d9
 8007fe2:	4914      	ldr	r1, [pc, #80]	; (8008034 <_dtoa_r+0x654>)
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	f7f8 f96f 	bl	80002c8 <__aeabi_dsub>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	4640      	mov	r0, r8
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	f7f8 fd93 	bl	8000b1c <__aeabi_dcmplt>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f43f af2f 	beq.w	8007e5a <_dtoa_r+0x47a>
 8007ffc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ffe:	1e6b      	subs	r3, r5, #1
 8008000:	930f      	str	r3, [sp, #60]	; 0x3c
 8008002:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008006:	2b30      	cmp	r3, #48	; 0x30
 8008008:	d0f8      	beq.n	8007ffc <_dtoa_r+0x61c>
 800800a:	46bb      	mov	fp, r7
 800800c:	e04a      	b.n	80080a4 <_dtoa_r+0x6c4>
 800800e:	4b06      	ldr	r3, [pc, #24]	; (8008028 <_dtoa_r+0x648>)
 8008010:	f7f8 fb12 	bl	8000638 <__aeabi_dmul>
 8008014:	4680      	mov	r8, r0
 8008016:	4689      	mov	r9, r1
 8008018:	e7bd      	b.n	8007f96 <_dtoa_r+0x5b6>
 800801a:	bf00      	nop
 800801c:	0800aab8 	.word	0x0800aab8
 8008020:	0800aa90 	.word	0x0800aa90
 8008024:	3ff00000 	.word	0x3ff00000
 8008028:	40240000 	.word	0x40240000
 800802c:	401c0000 	.word	0x401c0000
 8008030:	40140000 	.word	0x40140000
 8008034:	3fe00000 	.word	0x3fe00000
 8008038:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800803c:	9d00      	ldr	r5, [sp, #0]
 800803e:	4642      	mov	r2, r8
 8008040:	464b      	mov	r3, r9
 8008042:	4630      	mov	r0, r6
 8008044:	4639      	mov	r1, r7
 8008046:	f7f8 fc21 	bl	800088c <__aeabi_ddiv>
 800804a:	f7f8 fda5 	bl	8000b98 <__aeabi_d2iz>
 800804e:	9001      	str	r0, [sp, #4]
 8008050:	f7f8 fa88 	bl	8000564 <__aeabi_i2d>
 8008054:	4642      	mov	r2, r8
 8008056:	464b      	mov	r3, r9
 8008058:	f7f8 faee 	bl	8000638 <__aeabi_dmul>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4630      	mov	r0, r6
 8008062:	4639      	mov	r1, r7
 8008064:	f7f8 f930 	bl	80002c8 <__aeabi_dsub>
 8008068:	9e01      	ldr	r6, [sp, #4]
 800806a:	9f04      	ldr	r7, [sp, #16]
 800806c:	3630      	adds	r6, #48	; 0x30
 800806e:	f805 6b01 	strb.w	r6, [r5], #1
 8008072:	9e00      	ldr	r6, [sp, #0]
 8008074:	1bae      	subs	r6, r5, r6
 8008076:	42b7      	cmp	r7, r6
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	d134      	bne.n	80080e8 <_dtoa_r+0x708>
 800807e:	f7f8 f925 	bl	80002cc <__adddf3>
 8008082:	4642      	mov	r2, r8
 8008084:	464b      	mov	r3, r9
 8008086:	4606      	mov	r6, r0
 8008088:	460f      	mov	r7, r1
 800808a:	f7f8 fd65 	bl	8000b58 <__aeabi_dcmpgt>
 800808e:	b9c8      	cbnz	r0, 80080c4 <_dtoa_r+0x6e4>
 8008090:	4642      	mov	r2, r8
 8008092:	464b      	mov	r3, r9
 8008094:	4630      	mov	r0, r6
 8008096:	4639      	mov	r1, r7
 8008098:	f7f8 fd36 	bl	8000b08 <__aeabi_dcmpeq>
 800809c:	b110      	cbz	r0, 80080a4 <_dtoa_r+0x6c4>
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	07db      	lsls	r3, r3, #31
 80080a2:	d40f      	bmi.n	80080c4 <_dtoa_r+0x6e4>
 80080a4:	4651      	mov	r1, sl
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 fbcc 	bl	8008844 <_Bfree>
 80080ac:	2300      	movs	r3, #0
 80080ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080b0:	702b      	strb	r3, [r5, #0]
 80080b2:	f10b 0301 	add.w	r3, fp, #1
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f43f ace2 	beq.w	8007a84 <_dtoa_r+0xa4>
 80080c0:	601d      	str	r5, [r3, #0]
 80080c2:	e4df      	b.n	8007a84 <_dtoa_r+0xa4>
 80080c4:	465f      	mov	r7, fp
 80080c6:	462b      	mov	r3, r5
 80080c8:	461d      	mov	r5, r3
 80080ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080ce:	2a39      	cmp	r2, #57	; 0x39
 80080d0:	d106      	bne.n	80080e0 <_dtoa_r+0x700>
 80080d2:	9a00      	ldr	r2, [sp, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d1f7      	bne.n	80080c8 <_dtoa_r+0x6e8>
 80080d8:	9900      	ldr	r1, [sp, #0]
 80080da:	2230      	movs	r2, #48	; 0x30
 80080dc:	3701      	adds	r7, #1
 80080de:	700a      	strb	r2, [r1, #0]
 80080e0:	781a      	ldrb	r2, [r3, #0]
 80080e2:	3201      	adds	r2, #1
 80080e4:	701a      	strb	r2, [r3, #0]
 80080e6:	e790      	b.n	800800a <_dtoa_r+0x62a>
 80080e8:	4ba3      	ldr	r3, [pc, #652]	; (8008378 <_dtoa_r+0x998>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	f7f8 faa4 	bl	8000638 <__aeabi_dmul>
 80080f0:	2200      	movs	r2, #0
 80080f2:	2300      	movs	r3, #0
 80080f4:	4606      	mov	r6, r0
 80080f6:	460f      	mov	r7, r1
 80080f8:	f7f8 fd06 	bl	8000b08 <__aeabi_dcmpeq>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d09e      	beq.n	800803e <_dtoa_r+0x65e>
 8008100:	e7d0      	b.n	80080a4 <_dtoa_r+0x6c4>
 8008102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008104:	2a00      	cmp	r2, #0
 8008106:	f000 80ca 	beq.w	800829e <_dtoa_r+0x8be>
 800810a:	9a07      	ldr	r2, [sp, #28]
 800810c:	2a01      	cmp	r2, #1
 800810e:	f300 80ad 	bgt.w	800826c <_dtoa_r+0x88c>
 8008112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008114:	2a00      	cmp	r2, #0
 8008116:	f000 80a5 	beq.w	8008264 <_dtoa_r+0x884>
 800811a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800811e:	9e08      	ldr	r6, [sp, #32]
 8008120:	9d05      	ldr	r5, [sp, #20]
 8008122:	9a05      	ldr	r2, [sp, #20]
 8008124:	441a      	add	r2, r3
 8008126:	9205      	str	r2, [sp, #20]
 8008128:	9a06      	ldr	r2, [sp, #24]
 800812a:	2101      	movs	r1, #1
 800812c:	441a      	add	r2, r3
 800812e:	4620      	mov	r0, r4
 8008130:	9206      	str	r2, [sp, #24]
 8008132:	f000 fc3d 	bl	80089b0 <__i2b>
 8008136:	4607      	mov	r7, r0
 8008138:	b165      	cbz	r5, 8008154 <_dtoa_r+0x774>
 800813a:	9b06      	ldr	r3, [sp, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	dd09      	ble.n	8008154 <_dtoa_r+0x774>
 8008140:	42ab      	cmp	r3, r5
 8008142:	9a05      	ldr	r2, [sp, #20]
 8008144:	bfa8      	it	ge
 8008146:	462b      	movge	r3, r5
 8008148:	1ad2      	subs	r2, r2, r3
 800814a:	9205      	str	r2, [sp, #20]
 800814c:	9a06      	ldr	r2, [sp, #24]
 800814e:	1aed      	subs	r5, r5, r3
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	9306      	str	r3, [sp, #24]
 8008154:	9b08      	ldr	r3, [sp, #32]
 8008156:	b1f3      	cbz	r3, 8008196 <_dtoa_r+0x7b6>
 8008158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 80a3 	beq.w	80082a6 <_dtoa_r+0x8c6>
 8008160:	2e00      	cmp	r6, #0
 8008162:	dd10      	ble.n	8008186 <_dtoa_r+0x7a6>
 8008164:	4639      	mov	r1, r7
 8008166:	4632      	mov	r2, r6
 8008168:	4620      	mov	r0, r4
 800816a:	f000 fce1 	bl	8008b30 <__pow5mult>
 800816e:	4652      	mov	r2, sl
 8008170:	4601      	mov	r1, r0
 8008172:	4607      	mov	r7, r0
 8008174:	4620      	mov	r0, r4
 8008176:	f000 fc31 	bl	80089dc <__multiply>
 800817a:	4651      	mov	r1, sl
 800817c:	4680      	mov	r8, r0
 800817e:	4620      	mov	r0, r4
 8008180:	f000 fb60 	bl	8008844 <_Bfree>
 8008184:	46c2      	mov	sl, r8
 8008186:	9b08      	ldr	r3, [sp, #32]
 8008188:	1b9a      	subs	r2, r3, r6
 800818a:	d004      	beq.n	8008196 <_dtoa_r+0x7b6>
 800818c:	4651      	mov	r1, sl
 800818e:	4620      	mov	r0, r4
 8008190:	f000 fcce 	bl	8008b30 <__pow5mult>
 8008194:	4682      	mov	sl, r0
 8008196:	2101      	movs	r1, #1
 8008198:	4620      	mov	r0, r4
 800819a:	f000 fc09 	bl	80089b0 <__i2b>
 800819e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	4606      	mov	r6, r0
 80081a4:	f340 8081 	ble.w	80082aa <_dtoa_r+0x8ca>
 80081a8:	461a      	mov	r2, r3
 80081aa:	4601      	mov	r1, r0
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fcbf 	bl	8008b30 <__pow5mult>
 80081b2:	9b07      	ldr	r3, [sp, #28]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	4606      	mov	r6, r0
 80081b8:	dd7a      	ble.n	80082b0 <_dtoa_r+0x8d0>
 80081ba:	f04f 0800 	mov.w	r8, #0
 80081be:	6933      	ldr	r3, [r6, #16]
 80081c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081c4:	6918      	ldr	r0, [r3, #16]
 80081c6:	f000 fba5 	bl	8008914 <__hi0bits>
 80081ca:	f1c0 0020 	rsb	r0, r0, #32
 80081ce:	9b06      	ldr	r3, [sp, #24]
 80081d0:	4418      	add	r0, r3
 80081d2:	f010 001f 	ands.w	r0, r0, #31
 80081d6:	f000 8094 	beq.w	8008302 <_dtoa_r+0x922>
 80081da:	f1c0 0320 	rsb	r3, r0, #32
 80081de:	2b04      	cmp	r3, #4
 80081e0:	f340 8085 	ble.w	80082ee <_dtoa_r+0x90e>
 80081e4:	9b05      	ldr	r3, [sp, #20]
 80081e6:	f1c0 001c 	rsb	r0, r0, #28
 80081ea:	4403      	add	r3, r0
 80081ec:	9305      	str	r3, [sp, #20]
 80081ee:	9b06      	ldr	r3, [sp, #24]
 80081f0:	4403      	add	r3, r0
 80081f2:	4405      	add	r5, r0
 80081f4:	9306      	str	r3, [sp, #24]
 80081f6:	9b05      	ldr	r3, [sp, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	dd05      	ble.n	8008208 <_dtoa_r+0x828>
 80081fc:	4651      	mov	r1, sl
 80081fe:	461a      	mov	r2, r3
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fcef 	bl	8008be4 <__lshift>
 8008206:	4682      	mov	sl, r0
 8008208:	9b06      	ldr	r3, [sp, #24]
 800820a:	2b00      	cmp	r3, #0
 800820c:	dd05      	ble.n	800821a <_dtoa_r+0x83a>
 800820e:	4631      	mov	r1, r6
 8008210:	461a      	mov	r2, r3
 8008212:	4620      	mov	r0, r4
 8008214:	f000 fce6 	bl	8008be4 <__lshift>
 8008218:	4606      	mov	r6, r0
 800821a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800821c:	2b00      	cmp	r3, #0
 800821e:	d072      	beq.n	8008306 <_dtoa_r+0x926>
 8008220:	4631      	mov	r1, r6
 8008222:	4650      	mov	r0, sl
 8008224:	f000 fd4a 	bl	8008cbc <__mcmp>
 8008228:	2800      	cmp	r0, #0
 800822a:	da6c      	bge.n	8008306 <_dtoa_r+0x926>
 800822c:	2300      	movs	r3, #0
 800822e:	4651      	mov	r1, sl
 8008230:	220a      	movs	r2, #10
 8008232:	4620      	mov	r0, r4
 8008234:	f000 fb28 	bl	8008888 <__multadd>
 8008238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800823a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800823e:	4682      	mov	sl, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 81b0 	beq.w	80085a6 <_dtoa_r+0xbc6>
 8008246:	2300      	movs	r3, #0
 8008248:	4639      	mov	r1, r7
 800824a:	220a      	movs	r2, #10
 800824c:	4620      	mov	r0, r4
 800824e:	f000 fb1b 	bl	8008888 <__multadd>
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	4607      	mov	r7, r0
 8008258:	f300 8096 	bgt.w	8008388 <_dtoa_r+0x9a8>
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	2b02      	cmp	r3, #2
 8008260:	dc59      	bgt.n	8008316 <_dtoa_r+0x936>
 8008262:	e091      	b.n	8008388 <_dtoa_r+0x9a8>
 8008264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008266:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800826a:	e758      	b.n	800811e <_dtoa_r+0x73e>
 800826c:	9b04      	ldr	r3, [sp, #16]
 800826e:	1e5e      	subs	r6, r3, #1
 8008270:	9b08      	ldr	r3, [sp, #32]
 8008272:	42b3      	cmp	r3, r6
 8008274:	bfbf      	itttt	lt
 8008276:	9b08      	ldrlt	r3, [sp, #32]
 8008278:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800827a:	9608      	strlt	r6, [sp, #32]
 800827c:	1af3      	sublt	r3, r6, r3
 800827e:	bfb4      	ite	lt
 8008280:	18d2      	addlt	r2, r2, r3
 8008282:	1b9e      	subge	r6, r3, r6
 8008284:	9b04      	ldr	r3, [sp, #16]
 8008286:	bfbc      	itt	lt
 8008288:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800828a:	2600      	movlt	r6, #0
 800828c:	2b00      	cmp	r3, #0
 800828e:	bfb7      	itett	lt
 8008290:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008294:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008298:	1a9d      	sublt	r5, r3, r2
 800829a:	2300      	movlt	r3, #0
 800829c:	e741      	b.n	8008122 <_dtoa_r+0x742>
 800829e:	9e08      	ldr	r6, [sp, #32]
 80082a0:	9d05      	ldr	r5, [sp, #20]
 80082a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80082a4:	e748      	b.n	8008138 <_dtoa_r+0x758>
 80082a6:	9a08      	ldr	r2, [sp, #32]
 80082a8:	e770      	b.n	800818c <_dtoa_r+0x7ac>
 80082aa:	9b07      	ldr	r3, [sp, #28]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	dc19      	bgt.n	80082e4 <_dtoa_r+0x904>
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	b9bb      	cbnz	r3, 80082e4 <_dtoa_r+0x904>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082ba:	b99b      	cbnz	r3, 80082e4 <_dtoa_r+0x904>
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082c2:	0d1b      	lsrs	r3, r3, #20
 80082c4:	051b      	lsls	r3, r3, #20
 80082c6:	b183      	cbz	r3, 80082ea <_dtoa_r+0x90a>
 80082c8:	9b05      	ldr	r3, [sp, #20]
 80082ca:	3301      	adds	r3, #1
 80082cc:	9305      	str	r3, [sp, #20]
 80082ce:	9b06      	ldr	r3, [sp, #24]
 80082d0:	3301      	adds	r3, #1
 80082d2:	9306      	str	r3, [sp, #24]
 80082d4:	f04f 0801 	mov.w	r8, #1
 80082d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f47f af6f 	bne.w	80081be <_dtoa_r+0x7de>
 80082e0:	2001      	movs	r0, #1
 80082e2:	e774      	b.n	80081ce <_dtoa_r+0x7ee>
 80082e4:	f04f 0800 	mov.w	r8, #0
 80082e8:	e7f6      	b.n	80082d8 <_dtoa_r+0x8f8>
 80082ea:	4698      	mov	r8, r3
 80082ec:	e7f4      	b.n	80082d8 <_dtoa_r+0x8f8>
 80082ee:	d082      	beq.n	80081f6 <_dtoa_r+0x816>
 80082f0:	9a05      	ldr	r2, [sp, #20]
 80082f2:	331c      	adds	r3, #28
 80082f4:	441a      	add	r2, r3
 80082f6:	9205      	str	r2, [sp, #20]
 80082f8:	9a06      	ldr	r2, [sp, #24]
 80082fa:	441a      	add	r2, r3
 80082fc:	441d      	add	r5, r3
 80082fe:	9206      	str	r2, [sp, #24]
 8008300:	e779      	b.n	80081f6 <_dtoa_r+0x816>
 8008302:	4603      	mov	r3, r0
 8008304:	e7f4      	b.n	80082f0 <_dtoa_r+0x910>
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	dc37      	bgt.n	800837c <_dtoa_r+0x99c>
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	2b02      	cmp	r3, #2
 8008310:	dd34      	ble.n	800837c <_dtoa_r+0x99c>
 8008312:	9b04      	ldr	r3, [sp, #16]
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	9b01      	ldr	r3, [sp, #4]
 8008318:	b963      	cbnz	r3, 8008334 <_dtoa_r+0x954>
 800831a:	4631      	mov	r1, r6
 800831c:	2205      	movs	r2, #5
 800831e:	4620      	mov	r0, r4
 8008320:	f000 fab2 	bl	8008888 <__multadd>
 8008324:	4601      	mov	r1, r0
 8008326:	4606      	mov	r6, r0
 8008328:	4650      	mov	r0, sl
 800832a:	f000 fcc7 	bl	8008cbc <__mcmp>
 800832e:	2800      	cmp	r0, #0
 8008330:	f73f adbb 	bgt.w	8007eaa <_dtoa_r+0x4ca>
 8008334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008336:	9d00      	ldr	r5, [sp, #0]
 8008338:	ea6f 0b03 	mvn.w	fp, r3
 800833c:	f04f 0800 	mov.w	r8, #0
 8008340:	4631      	mov	r1, r6
 8008342:	4620      	mov	r0, r4
 8008344:	f000 fa7e 	bl	8008844 <_Bfree>
 8008348:	2f00      	cmp	r7, #0
 800834a:	f43f aeab 	beq.w	80080a4 <_dtoa_r+0x6c4>
 800834e:	f1b8 0f00 	cmp.w	r8, #0
 8008352:	d005      	beq.n	8008360 <_dtoa_r+0x980>
 8008354:	45b8      	cmp	r8, r7
 8008356:	d003      	beq.n	8008360 <_dtoa_r+0x980>
 8008358:	4641      	mov	r1, r8
 800835a:	4620      	mov	r0, r4
 800835c:	f000 fa72 	bl	8008844 <_Bfree>
 8008360:	4639      	mov	r1, r7
 8008362:	4620      	mov	r0, r4
 8008364:	f000 fa6e 	bl	8008844 <_Bfree>
 8008368:	e69c      	b.n	80080a4 <_dtoa_r+0x6c4>
 800836a:	2600      	movs	r6, #0
 800836c:	4637      	mov	r7, r6
 800836e:	e7e1      	b.n	8008334 <_dtoa_r+0x954>
 8008370:	46bb      	mov	fp, r7
 8008372:	4637      	mov	r7, r6
 8008374:	e599      	b.n	8007eaa <_dtoa_r+0x4ca>
 8008376:	bf00      	nop
 8008378:	40240000 	.word	0x40240000
 800837c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 80c8 	beq.w	8008514 <_dtoa_r+0xb34>
 8008384:	9b04      	ldr	r3, [sp, #16]
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	2d00      	cmp	r5, #0
 800838a:	dd05      	ble.n	8008398 <_dtoa_r+0x9b8>
 800838c:	4639      	mov	r1, r7
 800838e:	462a      	mov	r2, r5
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fc27 	bl	8008be4 <__lshift>
 8008396:	4607      	mov	r7, r0
 8008398:	f1b8 0f00 	cmp.w	r8, #0
 800839c:	d05b      	beq.n	8008456 <_dtoa_r+0xa76>
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fa0f 	bl	80087c4 <_Balloc>
 80083a6:	4605      	mov	r5, r0
 80083a8:	b928      	cbnz	r0, 80083b6 <_dtoa_r+0x9d6>
 80083aa:	4b83      	ldr	r3, [pc, #524]	; (80085b8 <_dtoa_r+0xbd8>)
 80083ac:	4602      	mov	r2, r0
 80083ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80083b2:	f7ff bb2e 	b.w	8007a12 <_dtoa_r+0x32>
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	3202      	adds	r2, #2
 80083ba:	0092      	lsls	r2, r2, #2
 80083bc:	f107 010c 	add.w	r1, r7, #12
 80083c0:	300c      	adds	r0, #12
 80083c2:	f001 f801 	bl	80093c8 <memcpy>
 80083c6:	2201      	movs	r2, #1
 80083c8:	4629      	mov	r1, r5
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 fc0a 	bl	8008be4 <__lshift>
 80083d0:	9b00      	ldr	r3, [sp, #0]
 80083d2:	3301      	adds	r3, #1
 80083d4:	9304      	str	r3, [sp, #16]
 80083d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083da:	4413      	add	r3, r2
 80083dc:	9308      	str	r3, [sp, #32]
 80083de:	9b02      	ldr	r3, [sp, #8]
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	46b8      	mov	r8, r7
 80083e6:	9306      	str	r3, [sp, #24]
 80083e8:	4607      	mov	r7, r0
 80083ea:	9b04      	ldr	r3, [sp, #16]
 80083ec:	4631      	mov	r1, r6
 80083ee:	3b01      	subs	r3, #1
 80083f0:	4650      	mov	r0, sl
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	f7ff fa6b 	bl	80078ce <quorem>
 80083f8:	4641      	mov	r1, r8
 80083fa:	9002      	str	r0, [sp, #8]
 80083fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008400:	4650      	mov	r0, sl
 8008402:	f000 fc5b 	bl	8008cbc <__mcmp>
 8008406:	463a      	mov	r2, r7
 8008408:	9005      	str	r0, [sp, #20]
 800840a:	4631      	mov	r1, r6
 800840c:	4620      	mov	r0, r4
 800840e:	f000 fc71 	bl	8008cf4 <__mdiff>
 8008412:	68c2      	ldr	r2, [r0, #12]
 8008414:	4605      	mov	r5, r0
 8008416:	bb02      	cbnz	r2, 800845a <_dtoa_r+0xa7a>
 8008418:	4601      	mov	r1, r0
 800841a:	4650      	mov	r0, sl
 800841c:	f000 fc4e 	bl	8008cbc <__mcmp>
 8008420:	4602      	mov	r2, r0
 8008422:	4629      	mov	r1, r5
 8008424:	4620      	mov	r0, r4
 8008426:	9209      	str	r2, [sp, #36]	; 0x24
 8008428:	f000 fa0c 	bl	8008844 <_Bfree>
 800842c:	9b07      	ldr	r3, [sp, #28]
 800842e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008430:	9d04      	ldr	r5, [sp, #16]
 8008432:	ea43 0102 	orr.w	r1, r3, r2
 8008436:	9b06      	ldr	r3, [sp, #24]
 8008438:	4319      	orrs	r1, r3
 800843a:	d110      	bne.n	800845e <_dtoa_r+0xa7e>
 800843c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008440:	d029      	beq.n	8008496 <_dtoa_r+0xab6>
 8008442:	9b05      	ldr	r3, [sp, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	dd02      	ble.n	800844e <_dtoa_r+0xa6e>
 8008448:	9b02      	ldr	r3, [sp, #8]
 800844a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800844e:	9b01      	ldr	r3, [sp, #4]
 8008450:	f883 9000 	strb.w	r9, [r3]
 8008454:	e774      	b.n	8008340 <_dtoa_r+0x960>
 8008456:	4638      	mov	r0, r7
 8008458:	e7ba      	b.n	80083d0 <_dtoa_r+0x9f0>
 800845a:	2201      	movs	r2, #1
 800845c:	e7e1      	b.n	8008422 <_dtoa_r+0xa42>
 800845e:	9b05      	ldr	r3, [sp, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	db04      	blt.n	800846e <_dtoa_r+0xa8e>
 8008464:	9907      	ldr	r1, [sp, #28]
 8008466:	430b      	orrs	r3, r1
 8008468:	9906      	ldr	r1, [sp, #24]
 800846a:	430b      	orrs	r3, r1
 800846c:	d120      	bne.n	80084b0 <_dtoa_r+0xad0>
 800846e:	2a00      	cmp	r2, #0
 8008470:	dded      	ble.n	800844e <_dtoa_r+0xa6e>
 8008472:	4651      	mov	r1, sl
 8008474:	2201      	movs	r2, #1
 8008476:	4620      	mov	r0, r4
 8008478:	f000 fbb4 	bl	8008be4 <__lshift>
 800847c:	4631      	mov	r1, r6
 800847e:	4682      	mov	sl, r0
 8008480:	f000 fc1c 	bl	8008cbc <__mcmp>
 8008484:	2800      	cmp	r0, #0
 8008486:	dc03      	bgt.n	8008490 <_dtoa_r+0xab0>
 8008488:	d1e1      	bne.n	800844e <_dtoa_r+0xa6e>
 800848a:	f019 0f01 	tst.w	r9, #1
 800848e:	d0de      	beq.n	800844e <_dtoa_r+0xa6e>
 8008490:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008494:	d1d8      	bne.n	8008448 <_dtoa_r+0xa68>
 8008496:	9a01      	ldr	r2, [sp, #4]
 8008498:	2339      	movs	r3, #57	; 0x39
 800849a:	7013      	strb	r3, [r2, #0]
 800849c:	462b      	mov	r3, r5
 800849e:	461d      	mov	r5, r3
 80084a0:	3b01      	subs	r3, #1
 80084a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084a6:	2a39      	cmp	r2, #57	; 0x39
 80084a8:	d06c      	beq.n	8008584 <_dtoa_r+0xba4>
 80084aa:	3201      	adds	r2, #1
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e747      	b.n	8008340 <_dtoa_r+0x960>
 80084b0:	2a00      	cmp	r2, #0
 80084b2:	dd07      	ble.n	80084c4 <_dtoa_r+0xae4>
 80084b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084b8:	d0ed      	beq.n	8008496 <_dtoa_r+0xab6>
 80084ba:	9a01      	ldr	r2, [sp, #4]
 80084bc:	f109 0301 	add.w	r3, r9, #1
 80084c0:	7013      	strb	r3, [r2, #0]
 80084c2:	e73d      	b.n	8008340 <_dtoa_r+0x960>
 80084c4:	9b04      	ldr	r3, [sp, #16]
 80084c6:	9a08      	ldr	r2, [sp, #32]
 80084c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d043      	beq.n	8008558 <_dtoa_r+0xb78>
 80084d0:	4651      	mov	r1, sl
 80084d2:	2300      	movs	r3, #0
 80084d4:	220a      	movs	r2, #10
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 f9d6 	bl	8008888 <__multadd>
 80084dc:	45b8      	cmp	r8, r7
 80084de:	4682      	mov	sl, r0
 80084e0:	f04f 0300 	mov.w	r3, #0
 80084e4:	f04f 020a 	mov.w	r2, #10
 80084e8:	4641      	mov	r1, r8
 80084ea:	4620      	mov	r0, r4
 80084ec:	d107      	bne.n	80084fe <_dtoa_r+0xb1e>
 80084ee:	f000 f9cb 	bl	8008888 <__multadd>
 80084f2:	4680      	mov	r8, r0
 80084f4:	4607      	mov	r7, r0
 80084f6:	9b04      	ldr	r3, [sp, #16]
 80084f8:	3301      	adds	r3, #1
 80084fa:	9304      	str	r3, [sp, #16]
 80084fc:	e775      	b.n	80083ea <_dtoa_r+0xa0a>
 80084fe:	f000 f9c3 	bl	8008888 <__multadd>
 8008502:	4639      	mov	r1, r7
 8008504:	4680      	mov	r8, r0
 8008506:	2300      	movs	r3, #0
 8008508:	220a      	movs	r2, #10
 800850a:	4620      	mov	r0, r4
 800850c:	f000 f9bc 	bl	8008888 <__multadd>
 8008510:	4607      	mov	r7, r0
 8008512:	e7f0      	b.n	80084f6 <_dtoa_r+0xb16>
 8008514:	9b04      	ldr	r3, [sp, #16]
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	9d00      	ldr	r5, [sp, #0]
 800851a:	4631      	mov	r1, r6
 800851c:	4650      	mov	r0, sl
 800851e:	f7ff f9d6 	bl	80078ce <quorem>
 8008522:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008526:	9b00      	ldr	r3, [sp, #0]
 8008528:	f805 9b01 	strb.w	r9, [r5], #1
 800852c:	1aea      	subs	r2, r5, r3
 800852e:	9b01      	ldr	r3, [sp, #4]
 8008530:	4293      	cmp	r3, r2
 8008532:	dd07      	ble.n	8008544 <_dtoa_r+0xb64>
 8008534:	4651      	mov	r1, sl
 8008536:	2300      	movs	r3, #0
 8008538:	220a      	movs	r2, #10
 800853a:	4620      	mov	r0, r4
 800853c:	f000 f9a4 	bl	8008888 <__multadd>
 8008540:	4682      	mov	sl, r0
 8008542:	e7ea      	b.n	800851a <_dtoa_r+0xb3a>
 8008544:	9b01      	ldr	r3, [sp, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	bfc8      	it	gt
 800854a:	461d      	movgt	r5, r3
 800854c:	9b00      	ldr	r3, [sp, #0]
 800854e:	bfd8      	it	le
 8008550:	2501      	movle	r5, #1
 8008552:	441d      	add	r5, r3
 8008554:	f04f 0800 	mov.w	r8, #0
 8008558:	4651      	mov	r1, sl
 800855a:	2201      	movs	r2, #1
 800855c:	4620      	mov	r0, r4
 800855e:	f000 fb41 	bl	8008be4 <__lshift>
 8008562:	4631      	mov	r1, r6
 8008564:	4682      	mov	sl, r0
 8008566:	f000 fba9 	bl	8008cbc <__mcmp>
 800856a:	2800      	cmp	r0, #0
 800856c:	dc96      	bgt.n	800849c <_dtoa_r+0xabc>
 800856e:	d102      	bne.n	8008576 <_dtoa_r+0xb96>
 8008570:	f019 0f01 	tst.w	r9, #1
 8008574:	d192      	bne.n	800849c <_dtoa_r+0xabc>
 8008576:	462b      	mov	r3, r5
 8008578:	461d      	mov	r5, r3
 800857a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800857e:	2a30      	cmp	r2, #48	; 0x30
 8008580:	d0fa      	beq.n	8008578 <_dtoa_r+0xb98>
 8008582:	e6dd      	b.n	8008340 <_dtoa_r+0x960>
 8008584:	9a00      	ldr	r2, [sp, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d189      	bne.n	800849e <_dtoa_r+0xabe>
 800858a:	f10b 0b01 	add.w	fp, fp, #1
 800858e:	2331      	movs	r3, #49	; 0x31
 8008590:	e796      	b.n	80084c0 <_dtoa_r+0xae0>
 8008592:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <_dtoa_r+0xbdc>)
 8008594:	f7ff ba99 	b.w	8007aca <_dtoa_r+0xea>
 8008598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800859a:	2b00      	cmp	r3, #0
 800859c:	f47f aa6d 	bne.w	8007a7a <_dtoa_r+0x9a>
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <_dtoa_r+0xbe0>)
 80085a2:	f7ff ba92 	b.w	8007aca <_dtoa_r+0xea>
 80085a6:	9b01      	ldr	r3, [sp, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dcb5      	bgt.n	8008518 <_dtoa_r+0xb38>
 80085ac:	9b07      	ldr	r3, [sp, #28]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	f73f aeb1 	bgt.w	8008316 <_dtoa_r+0x936>
 80085b4:	e7b0      	b.n	8008518 <_dtoa_r+0xb38>
 80085b6:	bf00      	nop
 80085b8:	0800aa20 	.word	0x0800aa20
 80085bc:	0800a980 	.word	0x0800a980
 80085c0:	0800a9a4 	.word	0x0800a9a4

080085c4 <_free_r>:
 80085c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085c6:	2900      	cmp	r1, #0
 80085c8:	d044      	beq.n	8008654 <_free_r+0x90>
 80085ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ce:	9001      	str	r0, [sp, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f1a1 0404 	sub.w	r4, r1, #4
 80085d6:	bfb8      	it	lt
 80085d8:	18e4      	addlt	r4, r4, r3
 80085da:	f000 f8e7 	bl	80087ac <__malloc_lock>
 80085de:	4a1e      	ldr	r2, [pc, #120]	; (8008658 <_free_r+0x94>)
 80085e0:	9801      	ldr	r0, [sp, #4]
 80085e2:	6813      	ldr	r3, [r2, #0]
 80085e4:	b933      	cbnz	r3, 80085f4 <_free_r+0x30>
 80085e6:	6063      	str	r3, [r4, #4]
 80085e8:	6014      	str	r4, [r2, #0]
 80085ea:	b003      	add	sp, #12
 80085ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085f0:	f000 b8e2 	b.w	80087b8 <__malloc_unlock>
 80085f4:	42a3      	cmp	r3, r4
 80085f6:	d908      	bls.n	800860a <_free_r+0x46>
 80085f8:	6825      	ldr	r5, [r4, #0]
 80085fa:	1961      	adds	r1, r4, r5
 80085fc:	428b      	cmp	r3, r1
 80085fe:	bf01      	itttt	eq
 8008600:	6819      	ldreq	r1, [r3, #0]
 8008602:	685b      	ldreq	r3, [r3, #4]
 8008604:	1949      	addeq	r1, r1, r5
 8008606:	6021      	streq	r1, [r4, #0]
 8008608:	e7ed      	b.n	80085e6 <_free_r+0x22>
 800860a:	461a      	mov	r2, r3
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	b10b      	cbz	r3, 8008614 <_free_r+0x50>
 8008610:	42a3      	cmp	r3, r4
 8008612:	d9fa      	bls.n	800860a <_free_r+0x46>
 8008614:	6811      	ldr	r1, [r2, #0]
 8008616:	1855      	adds	r5, r2, r1
 8008618:	42a5      	cmp	r5, r4
 800861a:	d10b      	bne.n	8008634 <_free_r+0x70>
 800861c:	6824      	ldr	r4, [r4, #0]
 800861e:	4421      	add	r1, r4
 8008620:	1854      	adds	r4, r2, r1
 8008622:	42a3      	cmp	r3, r4
 8008624:	6011      	str	r1, [r2, #0]
 8008626:	d1e0      	bne.n	80085ea <_free_r+0x26>
 8008628:	681c      	ldr	r4, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	6053      	str	r3, [r2, #4]
 800862e:	440c      	add	r4, r1
 8008630:	6014      	str	r4, [r2, #0]
 8008632:	e7da      	b.n	80085ea <_free_r+0x26>
 8008634:	d902      	bls.n	800863c <_free_r+0x78>
 8008636:	230c      	movs	r3, #12
 8008638:	6003      	str	r3, [r0, #0]
 800863a:	e7d6      	b.n	80085ea <_free_r+0x26>
 800863c:	6825      	ldr	r5, [r4, #0]
 800863e:	1961      	adds	r1, r4, r5
 8008640:	428b      	cmp	r3, r1
 8008642:	bf04      	itt	eq
 8008644:	6819      	ldreq	r1, [r3, #0]
 8008646:	685b      	ldreq	r3, [r3, #4]
 8008648:	6063      	str	r3, [r4, #4]
 800864a:	bf04      	itt	eq
 800864c:	1949      	addeq	r1, r1, r5
 800864e:	6021      	streq	r1, [r4, #0]
 8008650:	6054      	str	r4, [r2, #4]
 8008652:	e7ca      	b.n	80085ea <_free_r+0x26>
 8008654:	b003      	add	sp, #12
 8008656:	bd30      	pop	{r4, r5, pc}
 8008658:	20000668 	.word	0x20000668

0800865c <malloc>:
 800865c:	4b02      	ldr	r3, [pc, #8]	; (8008668 <malloc+0xc>)
 800865e:	4601      	mov	r1, r0
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f000 b823 	b.w	80086ac <_malloc_r>
 8008666:	bf00      	nop
 8008668:	200000f4 	.word	0x200000f4

0800866c <sbrk_aligned>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	4e0e      	ldr	r6, [pc, #56]	; (80086a8 <sbrk_aligned+0x3c>)
 8008670:	460c      	mov	r4, r1
 8008672:	6831      	ldr	r1, [r6, #0]
 8008674:	4605      	mov	r5, r0
 8008676:	b911      	cbnz	r1, 800867e <sbrk_aligned+0x12>
 8008678:	f000 fe96 	bl	80093a8 <_sbrk_r>
 800867c:	6030      	str	r0, [r6, #0]
 800867e:	4621      	mov	r1, r4
 8008680:	4628      	mov	r0, r5
 8008682:	f000 fe91 	bl	80093a8 <_sbrk_r>
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	d00a      	beq.n	80086a0 <sbrk_aligned+0x34>
 800868a:	1cc4      	adds	r4, r0, #3
 800868c:	f024 0403 	bic.w	r4, r4, #3
 8008690:	42a0      	cmp	r0, r4
 8008692:	d007      	beq.n	80086a4 <sbrk_aligned+0x38>
 8008694:	1a21      	subs	r1, r4, r0
 8008696:	4628      	mov	r0, r5
 8008698:	f000 fe86 	bl	80093a8 <_sbrk_r>
 800869c:	3001      	adds	r0, #1
 800869e:	d101      	bne.n	80086a4 <sbrk_aligned+0x38>
 80086a0:	f04f 34ff 	mov.w	r4, #4294967295
 80086a4:	4620      	mov	r0, r4
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	2000066c 	.word	0x2000066c

080086ac <_malloc_r>:
 80086ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	1ccd      	adds	r5, r1, #3
 80086b2:	f025 0503 	bic.w	r5, r5, #3
 80086b6:	3508      	adds	r5, #8
 80086b8:	2d0c      	cmp	r5, #12
 80086ba:	bf38      	it	cc
 80086bc:	250c      	movcc	r5, #12
 80086be:	2d00      	cmp	r5, #0
 80086c0:	4607      	mov	r7, r0
 80086c2:	db01      	blt.n	80086c8 <_malloc_r+0x1c>
 80086c4:	42a9      	cmp	r1, r5
 80086c6:	d905      	bls.n	80086d4 <_malloc_r+0x28>
 80086c8:	230c      	movs	r3, #12
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	2600      	movs	r6, #0
 80086ce:	4630      	mov	r0, r6
 80086d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087a8 <_malloc_r+0xfc>
 80086d8:	f000 f868 	bl	80087ac <__malloc_lock>
 80086dc:	f8d8 3000 	ldr.w	r3, [r8]
 80086e0:	461c      	mov	r4, r3
 80086e2:	bb5c      	cbnz	r4, 800873c <_malloc_r+0x90>
 80086e4:	4629      	mov	r1, r5
 80086e6:	4638      	mov	r0, r7
 80086e8:	f7ff ffc0 	bl	800866c <sbrk_aligned>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	4604      	mov	r4, r0
 80086f0:	d155      	bne.n	800879e <_malloc_r+0xf2>
 80086f2:	f8d8 4000 	ldr.w	r4, [r8]
 80086f6:	4626      	mov	r6, r4
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	d145      	bne.n	8008788 <_malloc_r+0xdc>
 80086fc:	2c00      	cmp	r4, #0
 80086fe:	d048      	beq.n	8008792 <_malloc_r+0xe6>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	4631      	mov	r1, r6
 8008704:	4638      	mov	r0, r7
 8008706:	eb04 0903 	add.w	r9, r4, r3
 800870a:	f000 fe4d 	bl	80093a8 <_sbrk_r>
 800870e:	4581      	cmp	r9, r0
 8008710:	d13f      	bne.n	8008792 <_malloc_r+0xe6>
 8008712:	6821      	ldr	r1, [r4, #0]
 8008714:	1a6d      	subs	r5, r5, r1
 8008716:	4629      	mov	r1, r5
 8008718:	4638      	mov	r0, r7
 800871a:	f7ff ffa7 	bl	800866c <sbrk_aligned>
 800871e:	3001      	adds	r0, #1
 8008720:	d037      	beq.n	8008792 <_malloc_r+0xe6>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	442b      	add	r3, r5
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	f8d8 3000 	ldr.w	r3, [r8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d038      	beq.n	80087a2 <_malloc_r+0xf6>
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	42a2      	cmp	r2, r4
 8008734:	d12b      	bne.n	800878e <_malloc_r+0xe2>
 8008736:	2200      	movs	r2, #0
 8008738:	605a      	str	r2, [r3, #4]
 800873a:	e00f      	b.n	800875c <_malloc_r+0xb0>
 800873c:	6822      	ldr	r2, [r4, #0]
 800873e:	1b52      	subs	r2, r2, r5
 8008740:	d41f      	bmi.n	8008782 <_malloc_r+0xd6>
 8008742:	2a0b      	cmp	r2, #11
 8008744:	d917      	bls.n	8008776 <_malloc_r+0xca>
 8008746:	1961      	adds	r1, r4, r5
 8008748:	42a3      	cmp	r3, r4
 800874a:	6025      	str	r5, [r4, #0]
 800874c:	bf18      	it	ne
 800874e:	6059      	strne	r1, [r3, #4]
 8008750:	6863      	ldr	r3, [r4, #4]
 8008752:	bf08      	it	eq
 8008754:	f8c8 1000 	streq.w	r1, [r8]
 8008758:	5162      	str	r2, [r4, r5]
 800875a:	604b      	str	r3, [r1, #4]
 800875c:	4638      	mov	r0, r7
 800875e:	f104 060b 	add.w	r6, r4, #11
 8008762:	f000 f829 	bl	80087b8 <__malloc_unlock>
 8008766:	f026 0607 	bic.w	r6, r6, #7
 800876a:	1d23      	adds	r3, r4, #4
 800876c:	1af2      	subs	r2, r6, r3
 800876e:	d0ae      	beq.n	80086ce <_malloc_r+0x22>
 8008770:	1b9b      	subs	r3, r3, r6
 8008772:	50a3      	str	r3, [r4, r2]
 8008774:	e7ab      	b.n	80086ce <_malloc_r+0x22>
 8008776:	42a3      	cmp	r3, r4
 8008778:	6862      	ldr	r2, [r4, #4]
 800877a:	d1dd      	bne.n	8008738 <_malloc_r+0x8c>
 800877c:	f8c8 2000 	str.w	r2, [r8]
 8008780:	e7ec      	b.n	800875c <_malloc_r+0xb0>
 8008782:	4623      	mov	r3, r4
 8008784:	6864      	ldr	r4, [r4, #4]
 8008786:	e7ac      	b.n	80086e2 <_malloc_r+0x36>
 8008788:	4634      	mov	r4, r6
 800878a:	6876      	ldr	r6, [r6, #4]
 800878c:	e7b4      	b.n	80086f8 <_malloc_r+0x4c>
 800878e:	4613      	mov	r3, r2
 8008790:	e7cc      	b.n	800872c <_malloc_r+0x80>
 8008792:	230c      	movs	r3, #12
 8008794:	603b      	str	r3, [r7, #0]
 8008796:	4638      	mov	r0, r7
 8008798:	f000 f80e 	bl	80087b8 <__malloc_unlock>
 800879c:	e797      	b.n	80086ce <_malloc_r+0x22>
 800879e:	6025      	str	r5, [r4, #0]
 80087a0:	e7dc      	b.n	800875c <_malloc_r+0xb0>
 80087a2:	605b      	str	r3, [r3, #4]
 80087a4:	deff      	udf	#255	; 0xff
 80087a6:	bf00      	nop
 80087a8:	20000668 	.word	0x20000668

080087ac <__malloc_lock>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__malloc_lock+0x8>)
 80087ae:	f7ff b88c 	b.w	80078ca <__retarget_lock_acquire_recursive>
 80087b2:	bf00      	nop
 80087b4:	20000664 	.word	0x20000664

080087b8 <__malloc_unlock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__malloc_unlock+0x8>)
 80087ba:	f7ff b887 	b.w	80078cc <__retarget_lock_release_recursive>
 80087be:	bf00      	nop
 80087c0:	20000664 	.word	0x20000664

080087c4 <_Balloc>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	69c6      	ldr	r6, [r0, #28]
 80087c8:	4604      	mov	r4, r0
 80087ca:	460d      	mov	r5, r1
 80087cc:	b976      	cbnz	r6, 80087ec <_Balloc+0x28>
 80087ce:	2010      	movs	r0, #16
 80087d0:	f7ff ff44 	bl	800865c <malloc>
 80087d4:	4602      	mov	r2, r0
 80087d6:	61e0      	str	r0, [r4, #28]
 80087d8:	b920      	cbnz	r0, 80087e4 <_Balloc+0x20>
 80087da:	4b18      	ldr	r3, [pc, #96]	; (800883c <_Balloc+0x78>)
 80087dc:	4818      	ldr	r0, [pc, #96]	; (8008840 <_Balloc+0x7c>)
 80087de:	216b      	movs	r1, #107	; 0x6b
 80087e0:	f000 fe00 	bl	80093e4 <__assert_func>
 80087e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087e8:	6006      	str	r6, [r0, #0]
 80087ea:	60c6      	str	r6, [r0, #12]
 80087ec:	69e6      	ldr	r6, [r4, #28]
 80087ee:	68f3      	ldr	r3, [r6, #12]
 80087f0:	b183      	cbz	r3, 8008814 <_Balloc+0x50>
 80087f2:	69e3      	ldr	r3, [r4, #28]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087fa:	b9b8      	cbnz	r0, 800882c <_Balloc+0x68>
 80087fc:	2101      	movs	r1, #1
 80087fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008802:	1d72      	adds	r2, r6, #5
 8008804:	0092      	lsls	r2, r2, #2
 8008806:	4620      	mov	r0, r4
 8008808:	f000 fe0a 	bl	8009420 <_calloc_r>
 800880c:	b160      	cbz	r0, 8008828 <_Balloc+0x64>
 800880e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008812:	e00e      	b.n	8008832 <_Balloc+0x6e>
 8008814:	2221      	movs	r2, #33	; 0x21
 8008816:	2104      	movs	r1, #4
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fe01 	bl	8009420 <_calloc_r>
 800881e:	69e3      	ldr	r3, [r4, #28]
 8008820:	60f0      	str	r0, [r6, #12]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e4      	bne.n	80087f2 <_Balloc+0x2e>
 8008828:	2000      	movs	r0, #0
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	6802      	ldr	r2, [r0, #0]
 800882e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008832:	2300      	movs	r3, #0
 8008834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008838:	e7f7      	b.n	800882a <_Balloc+0x66>
 800883a:	bf00      	nop
 800883c:	0800a9b1 	.word	0x0800a9b1
 8008840:	0800aa31 	.word	0x0800aa31

08008844 <_Bfree>:
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	69c6      	ldr	r6, [r0, #28]
 8008848:	4605      	mov	r5, r0
 800884a:	460c      	mov	r4, r1
 800884c:	b976      	cbnz	r6, 800886c <_Bfree+0x28>
 800884e:	2010      	movs	r0, #16
 8008850:	f7ff ff04 	bl	800865c <malloc>
 8008854:	4602      	mov	r2, r0
 8008856:	61e8      	str	r0, [r5, #28]
 8008858:	b920      	cbnz	r0, 8008864 <_Bfree+0x20>
 800885a:	4b09      	ldr	r3, [pc, #36]	; (8008880 <_Bfree+0x3c>)
 800885c:	4809      	ldr	r0, [pc, #36]	; (8008884 <_Bfree+0x40>)
 800885e:	218f      	movs	r1, #143	; 0x8f
 8008860:	f000 fdc0 	bl	80093e4 <__assert_func>
 8008864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008868:	6006      	str	r6, [r0, #0]
 800886a:	60c6      	str	r6, [r0, #12]
 800886c:	b13c      	cbz	r4, 800887e <_Bfree+0x3a>
 800886e:	69eb      	ldr	r3, [r5, #28]
 8008870:	6862      	ldr	r2, [r4, #4]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008878:	6021      	str	r1, [r4, #0]
 800887a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800887e:	bd70      	pop	{r4, r5, r6, pc}
 8008880:	0800a9b1 	.word	0x0800a9b1
 8008884:	0800aa31 	.word	0x0800aa31

08008888 <__multadd>:
 8008888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888c:	690d      	ldr	r5, [r1, #16]
 800888e:	4607      	mov	r7, r0
 8008890:	460c      	mov	r4, r1
 8008892:	461e      	mov	r6, r3
 8008894:	f101 0c14 	add.w	ip, r1, #20
 8008898:	2000      	movs	r0, #0
 800889a:	f8dc 3000 	ldr.w	r3, [ip]
 800889e:	b299      	uxth	r1, r3
 80088a0:	fb02 6101 	mla	r1, r2, r1, r6
 80088a4:	0c1e      	lsrs	r6, r3, #16
 80088a6:	0c0b      	lsrs	r3, r1, #16
 80088a8:	fb02 3306 	mla	r3, r2, r6, r3
 80088ac:	b289      	uxth	r1, r1
 80088ae:	3001      	adds	r0, #1
 80088b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088b4:	4285      	cmp	r5, r0
 80088b6:	f84c 1b04 	str.w	r1, [ip], #4
 80088ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088be:	dcec      	bgt.n	800889a <__multadd+0x12>
 80088c0:	b30e      	cbz	r6, 8008906 <__multadd+0x7e>
 80088c2:	68a3      	ldr	r3, [r4, #8]
 80088c4:	42ab      	cmp	r3, r5
 80088c6:	dc19      	bgt.n	80088fc <__multadd+0x74>
 80088c8:	6861      	ldr	r1, [r4, #4]
 80088ca:	4638      	mov	r0, r7
 80088cc:	3101      	adds	r1, #1
 80088ce:	f7ff ff79 	bl	80087c4 <_Balloc>
 80088d2:	4680      	mov	r8, r0
 80088d4:	b928      	cbnz	r0, 80088e2 <__multadd+0x5a>
 80088d6:	4602      	mov	r2, r0
 80088d8:	4b0c      	ldr	r3, [pc, #48]	; (800890c <__multadd+0x84>)
 80088da:	480d      	ldr	r0, [pc, #52]	; (8008910 <__multadd+0x88>)
 80088dc:	21ba      	movs	r1, #186	; 0xba
 80088de:	f000 fd81 	bl	80093e4 <__assert_func>
 80088e2:	6922      	ldr	r2, [r4, #16]
 80088e4:	3202      	adds	r2, #2
 80088e6:	f104 010c 	add.w	r1, r4, #12
 80088ea:	0092      	lsls	r2, r2, #2
 80088ec:	300c      	adds	r0, #12
 80088ee:	f000 fd6b 	bl	80093c8 <memcpy>
 80088f2:	4621      	mov	r1, r4
 80088f4:	4638      	mov	r0, r7
 80088f6:	f7ff ffa5 	bl	8008844 <_Bfree>
 80088fa:	4644      	mov	r4, r8
 80088fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008900:	3501      	adds	r5, #1
 8008902:	615e      	str	r6, [r3, #20]
 8008904:	6125      	str	r5, [r4, #16]
 8008906:	4620      	mov	r0, r4
 8008908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800890c:	0800aa20 	.word	0x0800aa20
 8008910:	0800aa31 	.word	0x0800aa31

08008914 <__hi0bits>:
 8008914:	0c03      	lsrs	r3, r0, #16
 8008916:	041b      	lsls	r3, r3, #16
 8008918:	b9d3      	cbnz	r3, 8008950 <__hi0bits+0x3c>
 800891a:	0400      	lsls	r0, r0, #16
 800891c:	2310      	movs	r3, #16
 800891e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008922:	bf04      	itt	eq
 8008924:	0200      	lsleq	r0, r0, #8
 8008926:	3308      	addeq	r3, #8
 8008928:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800892c:	bf04      	itt	eq
 800892e:	0100      	lsleq	r0, r0, #4
 8008930:	3304      	addeq	r3, #4
 8008932:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008936:	bf04      	itt	eq
 8008938:	0080      	lsleq	r0, r0, #2
 800893a:	3302      	addeq	r3, #2
 800893c:	2800      	cmp	r0, #0
 800893e:	db05      	blt.n	800894c <__hi0bits+0x38>
 8008940:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008944:	f103 0301 	add.w	r3, r3, #1
 8008948:	bf08      	it	eq
 800894a:	2320      	moveq	r3, #32
 800894c:	4618      	mov	r0, r3
 800894e:	4770      	bx	lr
 8008950:	2300      	movs	r3, #0
 8008952:	e7e4      	b.n	800891e <__hi0bits+0xa>

08008954 <__lo0bits>:
 8008954:	6803      	ldr	r3, [r0, #0]
 8008956:	f013 0207 	ands.w	r2, r3, #7
 800895a:	d00c      	beq.n	8008976 <__lo0bits+0x22>
 800895c:	07d9      	lsls	r1, r3, #31
 800895e:	d422      	bmi.n	80089a6 <__lo0bits+0x52>
 8008960:	079a      	lsls	r2, r3, #30
 8008962:	bf49      	itett	mi
 8008964:	085b      	lsrmi	r3, r3, #1
 8008966:	089b      	lsrpl	r3, r3, #2
 8008968:	6003      	strmi	r3, [r0, #0]
 800896a:	2201      	movmi	r2, #1
 800896c:	bf5c      	itt	pl
 800896e:	6003      	strpl	r3, [r0, #0]
 8008970:	2202      	movpl	r2, #2
 8008972:	4610      	mov	r0, r2
 8008974:	4770      	bx	lr
 8008976:	b299      	uxth	r1, r3
 8008978:	b909      	cbnz	r1, 800897e <__lo0bits+0x2a>
 800897a:	0c1b      	lsrs	r3, r3, #16
 800897c:	2210      	movs	r2, #16
 800897e:	b2d9      	uxtb	r1, r3
 8008980:	b909      	cbnz	r1, 8008986 <__lo0bits+0x32>
 8008982:	3208      	adds	r2, #8
 8008984:	0a1b      	lsrs	r3, r3, #8
 8008986:	0719      	lsls	r1, r3, #28
 8008988:	bf04      	itt	eq
 800898a:	091b      	lsreq	r3, r3, #4
 800898c:	3204      	addeq	r2, #4
 800898e:	0799      	lsls	r1, r3, #30
 8008990:	bf04      	itt	eq
 8008992:	089b      	lsreq	r3, r3, #2
 8008994:	3202      	addeq	r2, #2
 8008996:	07d9      	lsls	r1, r3, #31
 8008998:	d403      	bmi.n	80089a2 <__lo0bits+0x4e>
 800899a:	085b      	lsrs	r3, r3, #1
 800899c:	f102 0201 	add.w	r2, r2, #1
 80089a0:	d003      	beq.n	80089aa <__lo0bits+0x56>
 80089a2:	6003      	str	r3, [r0, #0]
 80089a4:	e7e5      	b.n	8008972 <__lo0bits+0x1e>
 80089a6:	2200      	movs	r2, #0
 80089a8:	e7e3      	b.n	8008972 <__lo0bits+0x1e>
 80089aa:	2220      	movs	r2, #32
 80089ac:	e7e1      	b.n	8008972 <__lo0bits+0x1e>
	...

080089b0 <__i2b>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	460c      	mov	r4, r1
 80089b4:	2101      	movs	r1, #1
 80089b6:	f7ff ff05 	bl	80087c4 <_Balloc>
 80089ba:	4602      	mov	r2, r0
 80089bc:	b928      	cbnz	r0, 80089ca <__i2b+0x1a>
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <__i2b+0x24>)
 80089c0:	4805      	ldr	r0, [pc, #20]	; (80089d8 <__i2b+0x28>)
 80089c2:	f240 1145 	movw	r1, #325	; 0x145
 80089c6:	f000 fd0d 	bl	80093e4 <__assert_func>
 80089ca:	2301      	movs	r3, #1
 80089cc:	6144      	str	r4, [r0, #20]
 80089ce:	6103      	str	r3, [r0, #16]
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	bf00      	nop
 80089d4:	0800aa20 	.word	0x0800aa20
 80089d8:	0800aa31 	.word	0x0800aa31

080089dc <__multiply>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	4691      	mov	r9, r2
 80089e2:	690a      	ldr	r2, [r1, #16]
 80089e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	bfb8      	it	lt
 80089ec:	460b      	movlt	r3, r1
 80089ee:	460c      	mov	r4, r1
 80089f0:	bfbc      	itt	lt
 80089f2:	464c      	movlt	r4, r9
 80089f4:	4699      	movlt	r9, r3
 80089f6:	6927      	ldr	r7, [r4, #16]
 80089f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089fc:	68a3      	ldr	r3, [r4, #8]
 80089fe:	6861      	ldr	r1, [r4, #4]
 8008a00:	eb07 060a 	add.w	r6, r7, sl
 8008a04:	42b3      	cmp	r3, r6
 8008a06:	b085      	sub	sp, #20
 8008a08:	bfb8      	it	lt
 8008a0a:	3101      	addlt	r1, #1
 8008a0c:	f7ff feda 	bl	80087c4 <_Balloc>
 8008a10:	b930      	cbnz	r0, 8008a20 <__multiply+0x44>
 8008a12:	4602      	mov	r2, r0
 8008a14:	4b44      	ldr	r3, [pc, #272]	; (8008b28 <__multiply+0x14c>)
 8008a16:	4845      	ldr	r0, [pc, #276]	; (8008b2c <__multiply+0x150>)
 8008a18:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008a1c:	f000 fce2 	bl	80093e4 <__assert_func>
 8008a20:	f100 0514 	add.w	r5, r0, #20
 8008a24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a28:	462b      	mov	r3, r5
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4543      	cmp	r3, r8
 8008a2e:	d321      	bcc.n	8008a74 <__multiply+0x98>
 8008a30:	f104 0314 	add.w	r3, r4, #20
 8008a34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a38:	f109 0314 	add.w	r3, r9, #20
 8008a3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a40:	9202      	str	r2, [sp, #8]
 8008a42:	1b3a      	subs	r2, r7, r4
 8008a44:	3a15      	subs	r2, #21
 8008a46:	f022 0203 	bic.w	r2, r2, #3
 8008a4a:	3204      	adds	r2, #4
 8008a4c:	f104 0115 	add.w	r1, r4, #21
 8008a50:	428f      	cmp	r7, r1
 8008a52:	bf38      	it	cc
 8008a54:	2204      	movcc	r2, #4
 8008a56:	9201      	str	r2, [sp, #4]
 8008a58:	9a02      	ldr	r2, [sp, #8]
 8008a5a:	9303      	str	r3, [sp, #12]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d80c      	bhi.n	8008a7a <__multiply+0x9e>
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	dd03      	ble.n	8008a6c <__multiply+0x90>
 8008a64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d05b      	beq.n	8008b24 <__multiply+0x148>
 8008a6c:	6106      	str	r6, [r0, #16]
 8008a6e:	b005      	add	sp, #20
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	f843 2b04 	str.w	r2, [r3], #4
 8008a78:	e7d8      	b.n	8008a2c <__multiply+0x50>
 8008a7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a7e:	f1ba 0f00 	cmp.w	sl, #0
 8008a82:	d024      	beq.n	8008ace <__multiply+0xf2>
 8008a84:	f104 0e14 	add.w	lr, r4, #20
 8008a88:	46a9      	mov	r9, r5
 8008a8a:	f04f 0c00 	mov.w	ip, #0
 8008a8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a92:	f8d9 1000 	ldr.w	r1, [r9]
 8008a96:	fa1f fb82 	uxth.w	fp, r2
 8008a9a:	b289      	uxth	r1, r1
 8008a9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008aa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8008aa8:	4461      	add	r1, ip
 8008aaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008aae:	fb0a c20b 	mla	r2, sl, fp, ip
 8008ab2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ab6:	b289      	uxth	r1, r1
 8008ab8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008abc:	4577      	cmp	r7, lr
 8008abe:	f849 1b04 	str.w	r1, [r9], #4
 8008ac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ac6:	d8e2      	bhi.n	8008a8e <__multiply+0xb2>
 8008ac8:	9a01      	ldr	r2, [sp, #4]
 8008aca:	f845 c002 	str.w	ip, [r5, r2]
 8008ace:	9a03      	ldr	r2, [sp, #12]
 8008ad0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	f1b9 0f00 	cmp.w	r9, #0
 8008ada:	d021      	beq.n	8008b20 <__multiply+0x144>
 8008adc:	6829      	ldr	r1, [r5, #0]
 8008ade:	f104 0c14 	add.w	ip, r4, #20
 8008ae2:	46ae      	mov	lr, r5
 8008ae4:	f04f 0a00 	mov.w	sl, #0
 8008ae8:	f8bc b000 	ldrh.w	fp, [ip]
 8008aec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008af0:	fb09 220b 	mla	r2, r9, fp, r2
 8008af4:	4452      	add	r2, sl
 8008af6:	b289      	uxth	r1, r1
 8008af8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008afc:	f84e 1b04 	str.w	r1, [lr], #4
 8008b00:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008b04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b08:	f8be 1000 	ldrh.w	r1, [lr]
 8008b0c:	fb09 110a 	mla	r1, r9, sl, r1
 8008b10:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008b14:	4567      	cmp	r7, ip
 8008b16:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b1a:	d8e5      	bhi.n	8008ae8 <__multiply+0x10c>
 8008b1c:	9a01      	ldr	r2, [sp, #4]
 8008b1e:	50a9      	str	r1, [r5, r2]
 8008b20:	3504      	adds	r5, #4
 8008b22:	e799      	b.n	8008a58 <__multiply+0x7c>
 8008b24:	3e01      	subs	r6, #1
 8008b26:	e79b      	b.n	8008a60 <__multiply+0x84>
 8008b28:	0800aa20 	.word	0x0800aa20
 8008b2c:	0800aa31 	.word	0x0800aa31

08008b30 <__pow5mult>:
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	4615      	mov	r5, r2
 8008b36:	f012 0203 	ands.w	r2, r2, #3
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	d007      	beq.n	8008b50 <__pow5mult+0x20>
 8008b40:	4c25      	ldr	r4, [pc, #148]	; (8008bd8 <__pow5mult+0xa8>)
 8008b42:	3a01      	subs	r2, #1
 8008b44:	2300      	movs	r3, #0
 8008b46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b4a:	f7ff fe9d 	bl	8008888 <__multadd>
 8008b4e:	4607      	mov	r7, r0
 8008b50:	10ad      	asrs	r5, r5, #2
 8008b52:	d03d      	beq.n	8008bd0 <__pow5mult+0xa0>
 8008b54:	69f4      	ldr	r4, [r6, #28]
 8008b56:	b97c      	cbnz	r4, 8008b78 <__pow5mult+0x48>
 8008b58:	2010      	movs	r0, #16
 8008b5a:	f7ff fd7f 	bl	800865c <malloc>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	61f0      	str	r0, [r6, #28]
 8008b62:	b928      	cbnz	r0, 8008b70 <__pow5mult+0x40>
 8008b64:	4b1d      	ldr	r3, [pc, #116]	; (8008bdc <__pow5mult+0xac>)
 8008b66:	481e      	ldr	r0, [pc, #120]	; (8008be0 <__pow5mult+0xb0>)
 8008b68:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008b6c:	f000 fc3a 	bl	80093e4 <__assert_func>
 8008b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b74:	6004      	str	r4, [r0, #0]
 8008b76:	60c4      	str	r4, [r0, #12]
 8008b78:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b80:	b94c      	cbnz	r4, 8008b96 <__pow5mult+0x66>
 8008b82:	f240 2171 	movw	r1, #625	; 0x271
 8008b86:	4630      	mov	r0, r6
 8008b88:	f7ff ff12 	bl	80089b0 <__i2b>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b92:	4604      	mov	r4, r0
 8008b94:	6003      	str	r3, [r0, #0]
 8008b96:	f04f 0900 	mov.w	r9, #0
 8008b9a:	07eb      	lsls	r3, r5, #31
 8008b9c:	d50a      	bpl.n	8008bb4 <__pow5mult+0x84>
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7ff ff1a 	bl	80089dc <__multiply>
 8008ba8:	4639      	mov	r1, r7
 8008baa:	4680      	mov	r8, r0
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff fe49 	bl	8008844 <_Bfree>
 8008bb2:	4647      	mov	r7, r8
 8008bb4:	106d      	asrs	r5, r5, #1
 8008bb6:	d00b      	beq.n	8008bd0 <__pow5mult+0xa0>
 8008bb8:	6820      	ldr	r0, [r4, #0]
 8008bba:	b938      	cbnz	r0, 8008bcc <__pow5mult+0x9c>
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f7ff ff0b 	bl	80089dc <__multiply>
 8008bc6:	6020      	str	r0, [r4, #0]
 8008bc8:	f8c0 9000 	str.w	r9, [r0]
 8008bcc:	4604      	mov	r4, r0
 8008bce:	e7e4      	b.n	8008b9a <__pow5mult+0x6a>
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd6:	bf00      	nop
 8008bd8:	0800ab80 	.word	0x0800ab80
 8008bdc:	0800a9b1 	.word	0x0800a9b1
 8008be0:	0800aa31 	.word	0x0800aa31

08008be4 <__lshift>:
 8008be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	460c      	mov	r4, r1
 8008bea:	6849      	ldr	r1, [r1, #4]
 8008bec:	6923      	ldr	r3, [r4, #16]
 8008bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	4691      	mov	r9, r2
 8008bf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bfc:	f108 0601 	add.w	r6, r8, #1
 8008c00:	42b3      	cmp	r3, r6
 8008c02:	db0b      	blt.n	8008c1c <__lshift+0x38>
 8008c04:	4638      	mov	r0, r7
 8008c06:	f7ff fddd 	bl	80087c4 <_Balloc>
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	b948      	cbnz	r0, 8008c22 <__lshift+0x3e>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b28      	ldr	r3, [pc, #160]	; (8008cb4 <__lshift+0xd0>)
 8008c12:	4829      	ldr	r0, [pc, #164]	; (8008cb8 <__lshift+0xd4>)
 8008c14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008c18:	f000 fbe4 	bl	80093e4 <__assert_func>
 8008c1c:	3101      	adds	r1, #1
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	e7ee      	b.n	8008c00 <__lshift+0x1c>
 8008c22:	2300      	movs	r3, #0
 8008c24:	f100 0114 	add.w	r1, r0, #20
 8008c28:	f100 0210 	add.w	r2, r0, #16
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	4553      	cmp	r3, sl
 8008c30:	db33      	blt.n	8008c9a <__lshift+0xb6>
 8008c32:	6920      	ldr	r0, [r4, #16]
 8008c34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c38:	f104 0314 	add.w	r3, r4, #20
 8008c3c:	f019 091f 	ands.w	r9, r9, #31
 8008c40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c48:	d02b      	beq.n	8008ca2 <__lshift+0xbe>
 8008c4a:	f1c9 0e20 	rsb	lr, r9, #32
 8008c4e:	468a      	mov	sl, r1
 8008c50:	2200      	movs	r2, #0
 8008c52:	6818      	ldr	r0, [r3, #0]
 8008c54:	fa00 f009 	lsl.w	r0, r0, r9
 8008c58:	4310      	orrs	r0, r2
 8008c5a:	f84a 0b04 	str.w	r0, [sl], #4
 8008c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c62:	459c      	cmp	ip, r3
 8008c64:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c68:	d8f3      	bhi.n	8008c52 <__lshift+0x6e>
 8008c6a:	ebac 0304 	sub.w	r3, ip, r4
 8008c6e:	3b15      	subs	r3, #21
 8008c70:	f023 0303 	bic.w	r3, r3, #3
 8008c74:	3304      	adds	r3, #4
 8008c76:	f104 0015 	add.w	r0, r4, #21
 8008c7a:	4584      	cmp	ip, r0
 8008c7c:	bf38      	it	cc
 8008c7e:	2304      	movcc	r3, #4
 8008c80:	50ca      	str	r2, [r1, r3]
 8008c82:	b10a      	cbz	r2, 8008c88 <__lshift+0xa4>
 8008c84:	f108 0602 	add.w	r6, r8, #2
 8008c88:	3e01      	subs	r6, #1
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	612e      	str	r6, [r5, #16]
 8008c8e:	4621      	mov	r1, r4
 8008c90:	f7ff fdd8 	bl	8008844 <_Bfree>
 8008c94:	4628      	mov	r0, r5
 8008c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	e7c5      	b.n	8008c2e <__lshift+0x4a>
 8008ca2:	3904      	subs	r1, #4
 8008ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ca8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cac:	459c      	cmp	ip, r3
 8008cae:	d8f9      	bhi.n	8008ca4 <__lshift+0xc0>
 8008cb0:	e7ea      	b.n	8008c88 <__lshift+0xa4>
 8008cb2:	bf00      	nop
 8008cb4:	0800aa20 	.word	0x0800aa20
 8008cb8:	0800aa31 	.word	0x0800aa31

08008cbc <__mcmp>:
 8008cbc:	b530      	push	{r4, r5, lr}
 8008cbe:	6902      	ldr	r2, [r0, #16]
 8008cc0:	690c      	ldr	r4, [r1, #16]
 8008cc2:	1b12      	subs	r2, r2, r4
 8008cc4:	d10e      	bne.n	8008ce4 <__mcmp+0x28>
 8008cc6:	f100 0314 	add.w	r3, r0, #20
 8008cca:	3114      	adds	r1, #20
 8008ccc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008cdc:	42a5      	cmp	r5, r4
 8008cde:	d003      	beq.n	8008ce8 <__mcmp+0x2c>
 8008ce0:	d305      	bcc.n	8008cee <__mcmp+0x32>
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	bd30      	pop	{r4, r5, pc}
 8008ce8:	4283      	cmp	r3, r0
 8008cea:	d3f3      	bcc.n	8008cd4 <__mcmp+0x18>
 8008cec:	e7fa      	b.n	8008ce4 <__mcmp+0x28>
 8008cee:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf2:	e7f7      	b.n	8008ce4 <__mcmp+0x28>

08008cf4 <__mdiff>:
 8008cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4690      	mov	r8, r2
 8008d02:	f7ff ffdb 	bl	8008cbc <__mcmp>
 8008d06:	1e05      	subs	r5, r0, #0
 8008d08:	d110      	bne.n	8008d2c <__mdiff+0x38>
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f7ff fd59 	bl	80087c4 <_Balloc>
 8008d12:	b930      	cbnz	r0, 8008d22 <__mdiff+0x2e>
 8008d14:	4b3a      	ldr	r3, [pc, #232]	; (8008e00 <__mdiff+0x10c>)
 8008d16:	4602      	mov	r2, r0
 8008d18:	f240 2137 	movw	r1, #567	; 0x237
 8008d1c:	4839      	ldr	r0, [pc, #228]	; (8008e04 <__mdiff+0x110>)
 8008d1e:	f000 fb61 	bl	80093e4 <__assert_func>
 8008d22:	2301      	movs	r3, #1
 8008d24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2c:	bfa4      	itt	ge
 8008d2e:	4643      	movge	r3, r8
 8008d30:	46a0      	movge	r8, r4
 8008d32:	4630      	mov	r0, r6
 8008d34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d38:	bfa6      	itte	ge
 8008d3a:	461c      	movge	r4, r3
 8008d3c:	2500      	movge	r5, #0
 8008d3e:	2501      	movlt	r5, #1
 8008d40:	f7ff fd40 	bl	80087c4 <_Balloc>
 8008d44:	b920      	cbnz	r0, 8008d50 <__mdiff+0x5c>
 8008d46:	4b2e      	ldr	r3, [pc, #184]	; (8008e00 <__mdiff+0x10c>)
 8008d48:	4602      	mov	r2, r0
 8008d4a:	f240 2145 	movw	r1, #581	; 0x245
 8008d4e:	e7e5      	b.n	8008d1c <__mdiff+0x28>
 8008d50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d54:	6926      	ldr	r6, [r4, #16]
 8008d56:	60c5      	str	r5, [r0, #12]
 8008d58:	f104 0914 	add.w	r9, r4, #20
 8008d5c:	f108 0514 	add.w	r5, r8, #20
 8008d60:	f100 0e14 	add.w	lr, r0, #20
 8008d64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d6c:	f108 0210 	add.w	r2, r8, #16
 8008d70:	46f2      	mov	sl, lr
 8008d72:	2100      	movs	r1, #0
 8008d74:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d7c:	fa11 f88b 	uxtah	r8, r1, fp
 8008d80:	b299      	uxth	r1, r3
 8008d82:	0c1b      	lsrs	r3, r3, #16
 8008d84:	eba8 0801 	sub.w	r8, r8, r1
 8008d88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d90:	fa1f f888 	uxth.w	r8, r8
 8008d94:	1419      	asrs	r1, r3, #16
 8008d96:	454e      	cmp	r6, r9
 8008d98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d9c:	f84a 3b04 	str.w	r3, [sl], #4
 8008da0:	d8e8      	bhi.n	8008d74 <__mdiff+0x80>
 8008da2:	1b33      	subs	r3, r6, r4
 8008da4:	3b15      	subs	r3, #21
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	3304      	adds	r3, #4
 8008dac:	3415      	adds	r4, #21
 8008dae:	42a6      	cmp	r6, r4
 8008db0:	bf38      	it	cc
 8008db2:	2304      	movcc	r3, #4
 8008db4:	441d      	add	r5, r3
 8008db6:	4473      	add	r3, lr
 8008db8:	469e      	mov	lr, r3
 8008dba:	462e      	mov	r6, r5
 8008dbc:	4566      	cmp	r6, ip
 8008dbe:	d30e      	bcc.n	8008dde <__mdiff+0xea>
 8008dc0:	f10c 0203 	add.w	r2, ip, #3
 8008dc4:	1b52      	subs	r2, r2, r5
 8008dc6:	f022 0203 	bic.w	r2, r2, #3
 8008dca:	3d03      	subs	r5, #3
 8008dcc:	45ac      	cmp	ip, r5
 8008dce:	bf38      	it	cc
 8008dd0:	2200      	movcc	r2, #0
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008dd8:	b17a      	cbz	r2, 8008dfa <__mdiff+0x106>
 8008dda:	6107      	str	r7, [r0, #16]
 8008ddc:	e7a4      	b.n	8008d28 <__mdiff+0x34>
 8008dde:	f856 8b04 	ldr.w	r8, [r6], #4
 8008de2:	fa11 f288 	uxtah	r2, r1, r8
 8008de6:	1414      	asrs	r4, r2, #16
 8008de8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008dec:	b292      	uxth	r2, r2
 8008dee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008df2:	f84e 2b04 	str.w	r2, [lr], #4
 8008df6:	1421      	asrs	r1, r4, #16
 8008df8:	e7e0      	b.n	8008dbc <__mdiff+0xc8>
 8008dfa:	3f01      	subs	r7, #1
 8008dfc:	e7ea      	b.n	8008dd4 <__mdiff+0xe0>
 8008dfe:	bf00      	nop
 8008e00:	0800aa20 	.word	0x0800aa20
 8008e04:	0800aa31 	.word	0x0800aa31

08008e08 <__d2b>:
 8008e08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e0c:	460f      	mov	r7, r1
 8008e0e:	2101      	movs	r1, #1
 8008e10:	ec59 8b10 	vmov	r8, r9, d0
 8008e14:	4616      	mov	r6, r2
 8008e16:	f7ff fcd5 	bl	80087c4 <_Balloc>
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	b930      	cbnz	r0, 8008e2c <__d2b+0x24>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	4b24      	ldr	r3, [pc, #144]	; (8008eb4 <__d2b+0xac>)
 8008e22:	4825      	ldr	r0, [pc, #148]	; (8008eb8 <__d2b+0xb0>)
 8008e24:	f240 310f 	movw	r1, #783	; 0x30f
 8008e28:	f000 fadc 	bl	80093e4 <__assert_func>
 8008e2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e34:	bb2d      	cbnz	r5, 8008e82 <__d2b+0x7a>
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	f1b8 0300 	subs.w	r3, r8, #0
 8008e3c:	d026      	beq.n	8008e8c <__d2b+0x84>
 8008e3e:	4668      	mov	r0, sp
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	f7ff fd87 	bl	8008954 <__lo0bits>
 8008e46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e4a:	b1e8      	cbz	r0, 8008e88 <__d2b+0x80>
 8008e4c:	f1c0 0320 	rsb	r3, r0, #32
 8008e50:	fa02 f303 	lsl.w	r3, r2, r3
 8008e54:	430b      	orrs	r3, r1
 8008e56:	40c2      	lsrs	r2, r0
 8008e58:	6163      	str	r3, [r4, #20]
 8008e5a:	9201      	str	r2, [sp, #4]
 8008e5c:	9b01      	ldr	r3, [sp, #4]
 8008e5e:	61a3      	str	r3, [r4, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	bf14      	ite	ne
 8008e64:	2202      	movne	r2, #2
 8008e66:	2201      	moveq	r2, #1
 8008e68:	6122      	str	r2, [r4, #16]
 8008e6a:	b1bd      	cbz	r5, 8008e9c <__d2b+0x94>
 8008e6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e70:	4405      	add	r5, r0
 8008e72:	603d      	str	r5, [r7, #0]
 8008e74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e78:	6030      	str	r0, [r6, #0]
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	b003      	add	sp, #12
 8008e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e86:	e7d6      	b.n	8008e36 <__d2b+0x2e>
 8008e88:	6161      	str	r1, [r4, #20]
 8008e8a:	e7e7      	b.n	8008e5c <__d2b+0x54>
 8008e8c:	a801      	add	r0, sp, #4
 8008e8e:	f7ff fd61 	bl	8008954 <__lo0bits>
 8008e92:	9b01      	ldr	r3, [sp, #4]
 8008e94:	6163      	str	r3, [r4, #20]
 8008e96:	3020      	adds	r0, #32
 8008e98:	2201      	movs	r2, #1
 8008e9a:	e7e5      	b.n	8008e68 <__d2b+0x60>
 8008e9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ea0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ea4:	6038      	str	r0, [r7, #0]
 8008ea6:	6918      	ldr	r0, [r3, #16]
 8008ea8:	f7ff fd34 	bl	8008914 <__hi0bits>
 8008eac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008eb0:	e7e2      	b.n	8008e78 <__d2b+0x70>
 8008eb2:	bf00      	nop
 8008eb4:	0800aa20 	.word	0x0800aa20
 8008eb8:	0800aa31 	.word	0x0800aa31

08008ebc <__sfputc_r>:
 8008ebc:	6893      	ldr	r3, [r2, #8]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	b410      	push	{r4}
 8008ec4:	6093      	str	r3, [r2, #8]
 8008ec6:	da08      	bge.n	8008eda <__sfputc_r+0x1e>
 8008ec8:	6994      	ldr	r4, [r2, #24]
 8008eca:	42a3      	cmp	r3, r4
 8008ecc:	db01      	blt.n	8008ed2 <__sfputc_r+0x16>
 8008ece:	290a      	cmp	r1, #10
 8008ed0:	d103      	bne.n	8008eda <__sfputc_r+0x1e>
 8008ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed6:	f7fe bbe6 	b.w	80076a6 <__swbuf_r>
 8008eda:	6813      	ldr	r3, [r2, #0]
 8008edc:	1c58      	adds	r0, r3, #1
 8008ede:	6010      	str	r0, [r2, #0]
 8008ee0:	7019      	strb	r1, [r3, #0]
 8008ee2:	4608      	mov	r0, r1
 8008ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <__sfputs_r>:
 8008eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eec:	4606      	mov	r6, r0
 8008eee:	460f      	mov	r7, r1
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	18d5      	adds	r5, r2, r3
 8008ef4:	42ac      	cmp	r4, r5
 8008ef6:	d101      	bne.n	8008efc <__sfputs_r+0x12>
 8008ef8:	2000      	movs	r0, #0
 8008efa:	e007      	b.n	8008f0c <__sfputs_r+0x22>
 8008efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f00:	463a      	mov	r2, r7
 8008f02:	4630      	mov	r0, r6
 8008f04:	f7ff ffda 	bl	8008ebc <__sfputc_r>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d1f3      	bne.n	8008ef4 <__sfputs_r+0xa>
 8008f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f10 <_vfiprintf_r>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	460d      	mov	r5, r1
 8008f16:	b09d      	sub	sp, #116	; 0x74
 8008f18:	4614      	mov	r4, r2
 8008f1a:	4698      	mov	r8, r3
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	b118      	cbz	r0, 8008f28 <_vfiprintf_r+0x18>
 8008f20:	6a03      	ldr	r3, [r0, #32]
 8008f22:	b90b      	cbnz	r3, 8008f28 <_vfiprintf_r+0x18>
 8008f24:	f7fe fad8 	bl	80074d8 <__sinit>
 8008f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f2a:	07d9      	lsls	r1, r3, #31
 8008f2c:	d405      	bmi.n	8008f3a <_vfiprintf_r+0x2a>
 8008f2e:	89ab      	ldrh	r3, [r5, #12]
 8008f30:	059a      	lsls	r2, r3, #22
 8008f32:	d402      	bmi.n	8008f3a <_vfiprintf_r+0x2a>
 8008f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f36:	f7fe fcc8 	bl	80078ca <__retarget_lock_acquire_recursive>
 8008f3a:	89ab      	ldrh	r3, [r5, #12]
 8008f3c:	071b      	lsls	r3, r3, #28
 8008f3e:	d501      	bpl.n	8008f44 <_vfiprintf_r+0x34>
 8008f40:	692b      	ldr	r3, [r5, #16]
 8008f42:	b99b      	cbnz	r3, 8008f6c <_vfiprintf_r+0x5c>
 8008f44:	4629      	mov	r1, r5
 8008f46:	4630      	mov	r0, r6
 8008f48:	f7fe fbea 	bl	8007720 <__swsetup_r>
 8008f4c:	b170      	cbz	r0, 8008f6c <_vfiprintf_r+0x5c>
 8008f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f50:	07dc      	lsls	r4, r3, #31
 8008f52:	d504      	bpl.n	8008f5e <_vfiprintf_r+0x4e>
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295
 8008f58:	b01d      	add	sp, #116	; 0x74
 8008f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5e:	89ab      	ldrh	r3, [r5, #12]
 8008f60:	0598      	lsls	r0, r3, #22
 8008f62:	d4f7      	bmi.n	8008f54 <_vfiprintf_r+0x44>
 8008f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f66:	f7fe fcb1 	bl	80078cc <__retarget_lock_release_recursive>
 8008f6a:	e7f3      	b.n	8008f54 <_vfiprintf_r+0x44>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f70:	2320      	movs	r3, #32
 8008f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f7a:	2330      	movs	r3, #48	; 0x30
 8008f7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009130 <_vfiprintf_r+0x220>
 8008f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f84:	f04f 0901 	mov.w	r9, #1
 8008f88:	4623      	mov	r3, r4
 8008f8a:	469a      	mov	sl, r3
 8008f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f90:	b10a      	cbz	r2, 8008f96 <_vfiprintf_r+0x86>
 8008f92:	2a25      	cmp	r2, #37	; 0x25
 8008f94:	d1f9      	bne.n	8008f8a <_vfiprintf_r+0x7a>
 8008f96:	ebba 0b04 	subs.w	fp, sl, r4
 8008f9a:	d00b      	beq.n	8008fb4 <_vfiprintf_r+0xa4>
 8008f9c:	465b      	mov	r3, fp
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7ff ffa1 	bl	8008eea <__sfputs_r>
 8008fa8:	3001      	adds	r0, #1
 8008faa:	f000 80a9 	beq.w	8009100 <_vfiprintf_r+0x1f0>
 8008fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fb0:	445a      	add	r2, fp
 8008fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 80a1 	beq.w	8009100 <_vfiprintf_r+0x1f0>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fc8:	f10a 0a01 	add.w	sl, sl, #1
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	9307      	str	r3, [sp, #28]
 8008fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fd6:	4654      	mov	r4, sl
 8008fd8:	2205      	movs	r2, #5
 8008fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fde:	4854      	ldr	r0, [pc, #336]	; (8009130 <_vfiprintf_r+0x220>)
 8008fe0:	f7f7 f916 	bl	8000210 <memchr>
 8008fe4:	9a04      	ldr	r2, [sp, #16]
 8008fe6:	b9d8      	cbnz	r0, 8009020 <_vfiprintf_r+0x110>
 8008fe8:	06d1      	lsls	r1, r2, #27
 8008fea:	bf44      	itt	mi
 8008fec:	2320      	movmi	r3, #32
 8008fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ff2:	0713      	lsls	r3, r2, #28
 8008ff4:	bf44      	itt	mi
 8008ff6:	232b      	movmi	r3, #43	; 0x2b
 8008ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8009000:	2b2a      	cmp	r3, #42	; 0x2a
 8009002:	d015      	beq.n	8009030 <_vfiprintf_r+0x120>
 8009004:	9a07      	ldr	r2, [sp, #28]
 8009006:	4654      	mov	r4, sl
 8009008:	2000      	movs	r0, #0
 800900a:	f04f 0c0a 	mov.w	ip, #10
 800900e:	4621      	mov	r1, r4
 8009010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009014:	3b30      	subs	r3, #48	; 0x30
 8009016:	2b09      	cmp	r3, #9
 8009018:	d94d      	bls.n	80090b6 <_vfiprintf_r+0x1a6>
 800901a:	b1b0      	cbz	r0, 800904a <_vfiprintf_r+0x13a>
 800901c:	9207      	str	r2, [sp, #28]
 800901e:	e014      	b.n	800904a <_vfiprintf_r+0x13a>
 8009020:	eba0 0308 	sub.w	r3, r0, r8
 8009024:	fa09 f303 	lsl.w	r3, r9, r3
 8009028:	4313      	orrs	r3, r2
 800902a:	9304      	str	r3, [sp, #16]
 800902c:	46a2      	mov	sl, r4
 800902e:	e7d2      	b.n	8008fd6 <_vfiprintf_r+0xc6>
 8009030:	9b03      	ldr	r3, [sp, #12]
 8009032:	1d19      	adds	r1, r3, #4
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	9103      	str	r1, [sp, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	bfbb      	ittet	lt
 800903c:	425b      	neglt	r3, r3
 800903e:	f042 0202 	orrlt.w	r2, r2, #2
 8009042:	9307      	strge	r3, [sp, #28]
 8009044:	9307      	strlt	r3, [sp, #28]
 8009046:	bfb8      	it	lt
 8009048:	9204      	strlt	r2, [sp, #16]
 800904a:	7823      	ldrb	r3, [r4, #0]
 800904c:	2b2e      	cmp	r3, #46	; 0x2e
 800904e:	d10c      	bne.n	800906a <_vfiprintf_r+0x15a>
 8009050:	7863      	ldrb	r3, [r4, #1]
 8009052:	2b2a      	cmp	r3, #42	; 0x2a
 8009054:	d134      	bne.n	80090c0 <_vfiprintf_r+0x1b0>
 8009056:	9b03      	ldr	r3, [sp, #12]
 8009058:	1d1a      	adds	r2, r3, #4
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	9203      	str	r2, [sp, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfb8      	it	lt
 8009062:	f04f 33ff 	movlt.w	r3, #4294967295
 8009066:	3402      	adds	r4, #2
 8009068:	9305      	str	r3, [sp, #20]
 800906a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009140 <_vfiprintf_r+0x230>
 800906e:	7821      	ldrb	r1, [r4, #0]
 8009070:	2203      	movs	r2, #3
 8009072:	4650      	mov	r0, sl
 8009074:	f7f7 f8cc 	bl	8000210 <memchr>
 8009078:	b138      	cbz	r0, 800908a <_vfiprintf_r+0x17a>
 800907a:	9b04      	ldr	r3, [sp, #16]
 800907c:	eba0 000a 	sub.w	r0, r0, sl
 8009080:	2240      	movs	r2, #64	; 0x40
 8009082:	4082      	lsls	r2, r0
 8009084:	4313      	orrs	r3, r2
 8009086:	3401      	adds	r4, #1
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800908e:	4829      	ldr	r0, [pc, #164]	; (8009134 <_vfiprintf_r+0x224>)
 8009090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009094:	2206      	movs	r2, #6
 8009096:	f7f7 f8bb 	bl	8000210 <memchr>
 800909a:	2800      	cmp	r0, #0
 800909c:	d03f      	beq.n	800911e <_vfiprintf_r+0x20e>
 800909e:	4b26      	ldr	r3, [pc, #152]	; (8009138 <_vfiprintf_r+0x228>)
 80090a0:	bb1b      	cbnz	r3, 80090ea <_vfiprintf_r+0x1da>
 80090a2:	9b03      	ldr	r3, [sp, #12]
 80090a4:	3307      	adds	r3, #7
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	3308      	adds	r3, #8
 80090ac:	9303      	str	r3, [sp, #12]
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	443b      	add	r3, r7
 80090b2:	9309      	str	r3, [sp, #36]	; 0x24
 80090b4:	e768      	b.n	8008f88 <_vfiprintf_r+0x78>
 80090b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ba:	460c      	mov	r4, r1
 80090bc:	2001      	movs	r0, #1
 80090be:	e7a6      	b.n	800900e <_vfiprintf_r+0xfe>
 80090c0:	2300      	movs	r3, #0
 80090c2:	3401      	adds	r4, #1
 80090c4:	9305      	str	r3, [sp, #20]
 80090c6:	4619      	mov	r1, r3
 80090c8:	f04f 0c0a 	mov.w	ip, #10
 80090cc:	4620      	mov	r0, r4
 80090ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090d2:	3a30      	subs	r2, #48	; 0x30
 80090d4:	2a09      	cmp	r2, #9
 80090d6:	d903      	bls.n	80090e0 <_vfiprintf_r+0x1d0>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d0c6      	beq.n	800906a <_vfiprintf_r+0x15a>
 80090dc:	9105      	str	r1, [sp, #20]
 80090de:	e7c4      	b.n	800906a <_vfiprintf_r+0x15a>
 80090e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090e4:	4604      	mov	r4, r0
 80090e6:	2301      	movs	r3, #1
 80090e8:	e7f0      	b.n	80090cc <_vfiprintf_r+0x1bc>
 80090ea:	ab03      	add	r3, sp, #12
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	462a      	mov	r2, r5
 80090f0:	4b12      	ldr	r3, [pc, #72]	; (800913c <_vfiprintf_r+0x22c>)
 80090f2:	a904      	add	r1, sp, #16
 80090f4:	4630      	mov	r0, r6
 80090f6:	f7fd fd9d 	bl	8006c34 <_printf_float>
 80090fa:	4607      	mov	r7, r0
 80090fc:	1c78      	adds	r0, r7, #1
 80090fe:	d1d6      	bne.n	80090ae <_vfiprintf_r+0x19e>
 8009100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009102:	07d9      	lsls	r1, r3, #31
 8009104:	d405      	bmi.n	8009112 <_vfiprintf_r+0x202>
 8009106:	89ab      	ldrh	r3, [r5, #12]
 8009108:	059a      	lsls	r2, r3, #22
 800910a:	d402      	bmi.n	8009112 <_vfiprintf_r+0x202>
 800910c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800910e:	f7fe fbdd 	bl	80078cc <__retarget_lock_release_recursive>
 8009112:	89ab      	ldrh	r3, [r5, #12]
 8009114:	065b      	lsls	r3, r3, #25
 8009116:	f53f af1d 	bmi.w	8008f54 <_vfiprintf_r+0x44>
 800911a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800911c:	e71c      	b.n	8008f58 <_vfiprintf_r+0x48>
 800911e:	ab03      	add	r3, sp, #12
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	462a      	mov	r2, r5
 8009124:	4b05      	ldr	r3, [pc, #20]	; (800913c <_vfiprintf_r+0x22c>)
 8009126:	a904      	add	r1, sp, #16
 8009128:	4630      	mov	r0, r6
 800912a:	f7fe f827 	bl	800717c <_printf_i>
 800912e:	e7e4      	b.n	80090fa <_vfiprintf_r+0x1ea>
 8009130:	0800ab8c 	.word	0x0800ab8c
 8009134:	0800ab96 	.word	0x0800ab96
 8009138:	08006c35 	.word	0x08006c35
 800913c:	08008eeb 	.word	0x08008eeb
 8009140:	0800ab92 	.word	0x0800ab92

08009144 <__sflush_r>:
 8009144:	898a      	ldrh	r2, [r1, #12]
 8009146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914a:	4605      	mov	r5, r0
 800914c:	0710      	lsls	r0, r2, #28
 800914e:	460c      	mov	r4, r1
 8009150:	d458      	bmi.n	8009204 <__sflush_r+0xc0>
 8009152:	684b      	ldr	r3, [r1, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	dc05      	bgt.n	8009164 <__sflush_r+0x20>
 8009158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	dc02      	bgt.n	8009164 <__sflush_r+0x20>
 800915e:	2000      	movs	r0, #0
 8009160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009166:	2e00      	cmp	r6, #0
 8009168:	d0f9      	beq.n	800915e <__sflush_r+0x1a>
 800916a:	2300      	movs	r3, #0
 800916c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009170:	682f      	ldr	r7, [r5, #0]
 8009172:	6a21      	ldr	r1, [r4, #32]
 8009174:	602b      	str	r3, [r5, #0]
 8009176:	d032      	beq.n	80091de <__sflush_r+0x9a>
 8009178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	075a      	lsls	r2, r3, #29
 800917e:	d505      	bpl.n	800918c <__sflush_r+0x48>
 8009180:	6863      	ldr	r3, [r4, #4]
 8009182:	1ac0      	subs	r0, r0, r3
 8009184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009186:	b10b      	cbz	r3, 800918c <__sflush_r+0x48>
 8009188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800918a:	1ac0      	subs	r0, r0, r3
 800918c:	2300      	movs	r3, #0
 800918e:	4602      	mov	r2, r0
 8009190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009192:	6a21      	ldr	r1, [r4, #32]
 8009194:	4628      	mov	r0, r5
 8009196:	47b0      	blx	r6
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	d106      	bne.n	80091ac <__sflush_r+0x68>
 800919e:	6829      	ldr	r1, [r5, #0]
 80091a0:	291d      	cmp	r1, #29
 80091a2:	d82b      	bhi.n	80091fc <__sflush_r+0xb8>
 80091a4:	4a29      	ldr	r2, [pc, #164]	; (800924c <__sflush_r+0x108>)
 80091a6:	410a      	asrs	r2, r1
 80091a8:	07d6      	lsls	r6, r2, #31
 80091aa:	d427      	bmi.n	80091fc <__sflush_r+0xb8>
 80091ac:	2200      	movs	r2, #0
 80091ae:	6062      	str	r2, [r4, #4]
 80091b0:	04d9      	lsls	r1, r3, #19
 80091b2:	6922      	ldr	r2, [r4, #16]
 80091b4:	6022      	str	r2, [r4, #0]
 80091b6:	d504      	bpl.n	80091c2 <__sflush_r+0x7e>
 80091b8:	1c42      	adds	r2, r0, #1
 80091ba:	d101      	bne.n	80091c0 <__sflush_r+0x7c>
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	b903      	cbnz	r3, 80091c2 <__sflush_r+0x7e>
 80091c0:	6560      	str	r0, [r4, #84]	; 0x54
 80091c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c4:	602f      	str	r7, [r5, #0]
 80091c6:	2900      	cmp	r1, #0
 80091c8:	d0c9      	beq.n	800915e <__sflush_r+0x1a>
 80091ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091ce:	4299      	cmp	r1, r3
 80091d0:	d002      	beq.n	80091d8 <__sflush_r+0x94>
 80091d2:	4628      	mov	r0, r5
 80091d4:	f7ff f9f6 	bl	80085c4 <_free_r>
 80091d8:	2000      	movs	r0, #0
 80091da:	6360      	str	r0, [r4, #52]	; 0x34
 80091dc:	e7c0      	b.n	8009160 <__sflush_r+0x1c>
 80091de:	2301      	movs	r3, #1
 80091e0:	4628      	mov	r0, r5
 80091e2:	47b0      	blx	r6
 80091e4:	1c41      	adds	r1, r0, #1
 80091e6:	d1c8      	bne.n	800917a <__sflush_r+0x36>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0c5      	beq.n	800917a <__sflush_r+0x36>
 80091ee:	2b1d      	cmp	r3, #29
 80091f0:	d001      	beq.n	80091f6 <__sflush_r+0xb2>
 80091f2:	2b16      	cmp	r3, #22
 80091f4:	d101      	bne.n	80091fa <__sflush_r+0xb6>
 80091f6:	602f      	str	r7, [r5, #0]
 80091f8:	e7b1      	b.n	800915e <__sflush_r+0x1a>
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009200:	81a3      	strh	r3, [r4, #12]
 8009202:	e7ad      	b.n	8009160 <__sflush_r+0x1c>
 8009204:	690f      	ldr	r7, [r1, #16]
 8009206:	2f00      	cmp	r7, #0
 8009208:	d0a9      	beq.n	800915e <__sflush_r+0x1a>
 800920a:	0793      	lsls	r3, r2, #30
 800920c:	680e      	ldr	r6, [r1, #0]
 800920e:	bf08      	it	eq
 8009210:	694b      	ldreq	r3, [r1, #20]
 8009212:	600f      	str	r7, [r1, #0]
 8009214:	bf18      	it	ne
 8009216:	2300      	movne	r3, #0
 8009218:	eba6 0807 	sub.w	r8, r6, r7
 800921c:	608b      	str	r3, [r1, #8]
 800921e:	f1b8 0f00 	cmp.w	r8, #0
 8009222:	dd9c      	ble.n	800915e <__sflush_r+0x1a>
 8009224:	6a21      	ldr	r1, [r4, #32]
 8009226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009228:	4643      	mov	r3, r8
 800922a:	463a      	mov	r2, r7
 800922c:	4628      	mov	r0, r5
 800922e:	47b0      	blx	r6
 8009230:	2800      	cmp	r0, #0
 8009232:	dc06      	bgt.n	8009242 <__sflush_r+0xfe>
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	e78e      	b.n	8009160 <__sflush_r+0x1c>
 8009242:	4407      	add	r7, r0
 8009244:	eba8 0800 	sub.w	r8, r8, r0
 8009248:	e7e9      	b.n	800921e <__sflush_r+0xda>
 800924a:	bf00      	nop
 800924c:	dfbffffe 	.word	0xdfbffffe

08009250 <_fflush_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	690b      	ldr	r3, [r1, #16]
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	b913      	cbnz	r3, 8009260 <_fflush_r+0x10>
 800925a:	2500      	movs	r5, #0
 800925c:	4628      	mov	r0, r5
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	b118      	cbz	r0, 800926a <_fflush_r+0x1a>
 8009262:	6a03      	ldr	r3, [r0, #32]
 8009264:	b90b      	cbnz	r3, 800926a <_fflush_r+0x1a>
 8009266:	f7fe f937 	bl	80074d8 <__sinit>
 800926a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0f3      	beq.n	800925a <_fflush_r+0xa>
 8009272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009274:	07d0      	lsls	r0, r2, #31
 8009276:	d404      	bmi.n	8009282 <_fflush_r+0x32>
 8009278:	0599      	lsls	r1, r3, #22
 800927a:	d402      	bmi.n	8009282 <_fflush_r+0x32>
 800927c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800927e:	f7fe fb24 	bl	80078ca <__retarget_lock_acquire_recursive>
 8009282:	4628      	mov	r0, r5
 8009284:	4621      	mov	r1, r4
 8009286:	f7ff ff5d 	bl	8009144 <__sflush_r>
 800928a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800928c:	07da      	lsls	r2, r3, #31
 800928e:	4605      	mov	r5, r0
 8009290:	d4e4      	bmi.n	800925c <_fflush_r+0xc>
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	059b      	lsls	r3, r3, #22
 8009296:	d4e1      	bmi.n	800925c <_fflush_r+0xc>
 8009298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800929a:	f7fe fb17 	bl	80078cc <__retarget_lock_release_recursive>
 800929e:	e7dd      	b.n	800925c <_fflush_r+0xc>

080092a0 <__swhatbuf_r>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	460c      	mov	r4, r1
 80092a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a8:	2900      	cmp	r1, #0
 80092aa:	b096      	sub	sp, #88	; 0x58
 80092ac:	4615      	mov	r5, r2
 80092ae:	461e      	mov	r6, r3
 80092b0:	da0d      	bge.n	80092ce <__swhatbuf_r+0x2e>
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092b8:	f04f 0100 	mov.w	r1, #0
 80092bc:	bf0c      	ite	eq
 80092be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092c2:	2340      	movne	r3, #64	; 0x40
 80092c4:	2000      	movs	r0, #0
 80092c6:	6031      	str	r1, [r6, #0]
 80092c8:	602b      	str	r3, [r5, #0]
 80092ca:	b016      	add	sp, #88	; 0x58
 80092cc:	bd70      	pop	{r4, r5, r6, pc}
 80092ce:	466a      	mov	r2, sp
 80092d0:	f000 f848 	bl	8009364 <_fstat_r>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	dbec      	blt.n	80092b2 <__swhatbuf_r+0x12>
 80092d8:	9901      	ldr	r1, [sp, #4]
 80092da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80092de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80092e2:	4259      	negs	r1, r3
 80092e4:	4159      	adcs	r1, r3
 80092e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ea:	e7eb      	b.n	80092c4 <__swhatbuf_r+0x24>

080092ec <__smakebuf_r>:
 80092ec:	898b      	ldrh	r3, [r1, #12]
 80092ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092f0:	079d      	lsls	r5, r3, #30
 80092f2:	4606      	mov	r6, r0
 80092f4:	460c      	mov	r4, r1
 80092f6:	d507      	bpl.n	8009308 <__smakebuf_r+0x1c>
 80092f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	6123      	str	r3, [r4, #16]
 8009300:	2301      	movs	r3, #1
 8009302:	6163      	str	r3, [r4, #20]
 8009304:	b002      	add	sp, #8
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	ab01      	add	r3, sp, #4
 800930a:	466a      	mov	r2, sp
 800930c:	f7ff ffc8 	bl	80092a0 <__swhatbuf_r>
 8009310:	9900      	ldr	r1, [sp, #0]
 8009312:	4605      	mov	r5, r0
 8009314:	4630      	mov	r0, r6
 8009316:	f7ff f9c9 	bl	80086ac <_malloc_r>
 800931a:	b948      	cbnz	r0, 8009330 <__smakebuf_r+0x44>
 800931c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009320:	059a      	lsls	r2, r3, #22
 8009322:	d4ef      	bmi.n	8009304 <__smakebuf_r+0x18>
 8009324:	f023 0303 	bic.w	r3, r3, #3
 8009328:	f043 0302 	orr.w	r3, r3, #2
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	e7e3      	b.n	80092f8 <__smakebuf_r+0xc>
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	6020      	str	r0, [r4, #0]
 8009334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009338:	81a3      	strh	r3, [r4, #12]
 800933a:	9b00      	ldr	r3, [sp, #0]
 800933c:	6163      	str	r3, [r4, #20]
 800933e:	9b01      	ldr	r3, [sp, #4]
 8009340:	6120      	str	r0, [r4, #16]
 8009342:	b15b      	cbz	r3, 800935c <__smakebuf_r+0x70>
 8009344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009348:	4630      	mov	r0, r6
 800934a:	f000 f81d 	bl	8009388 <_isatty_r>
 800934e:	b128      	cbz	r0, 800935c <__smakebuf_r+0x70>
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	f023 0303 	bic.w	r3, r3, #3
 8009356:	f043 0301 	orr.w	r3, r3, #1
 800935a:	81a3      	strh	r3, [r4, #12]
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	431d      	orrs	r5, r3
 8009360:	81a5      	strh	r5, [r4, #12]
 8009362:	e7cf      	b.n	8009304 <__smakebuf_r+0x18>

08009364 <_fstat_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d07      	ldr	r5, [pc, #28]	; (8009384 <_fstat_r+0x20>)
 8009368:	2300      	movs	r3, #0
 800936a:	4604      	mov	r4, r0
 800936c:	4608      	mov	r0, r1
 800936e:	4611      	mov	r1, r2
 8009370:	602b      	str	r3, [r5, #0]
 8009372:	f7f9 fbb6 	bl	8002ae2 <_fstat>
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	d102      	bne.n	8009380 <_fstat_r+0x1c>
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	b103      	cbz	r3, 8009380 <_fstat_r+0x1c>
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	bd38      	pop	{r3, r4, r5, pc}
 8009382:	bf00      	nop
 8009384:	20000660 	.word	0x20000660

08009388 <_isatty_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d06      	ldr	r5, [pc, #24]	; (80093a4 <_isatty_r+0x1c>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f9 fbb5 	bl	8002b02 <_isatty>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_isatty_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_isatty_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	20000660 	.word	0x20000660

080093a8 <_sbrk_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4d06      	ldr	r5, [pc, #24]	; (80093c4 <_sbrk_r+0x1c>)
 80093ac:	2300      	movs	r3, #0
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	f7f9 fbbe 	bl	8002b34 <_sbrk>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_sbrk_r+0x1a>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_sbrk_r+0x1a>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	20000660 	.word	0x20000660

080093c8 <memcpy>:
 80093c8:	440a      	add	r2, r1
 80093ca:	4291      	cmp	r1, r2
 80093cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80093d0:	d100      	bne.n	80093d4 <memcpy+0xc>
 80093d2:	4770      	bx	lr
 80093d4:	b510      	push	{r4, lr}
 80093d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093de:	4291      	cmp	r1, r2
 80093e0:	d1f9      	bne.n	80093d6 <memcpy+0xe>
 80093e2:	bd10      	pop	{r4, pc}

080093e4 <__assert_func>:
 80093e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093e6:	4614      	mov	r4, r2
 80093e8:	461a      	mov	r2, r3
 80093ea:	4b09      	ldr	r3, [pc, #36]	; (8009410 <__assert_func+0x2c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4605      	mov	r5, r0
 80093f0:	68d8      	ldr	r0, [r3, #12]
 80093f2:	b14c      	cbz	r4, 8009408 <__assert_func+0x24>
 80093f4:	4b07      	ldr	r3, [pc, #28]	; (8009414 <__assert_func+0x30>)
 80093f6:	9100      	str	r1, [sp, #0]
 80093f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093fc:	4906      	ldr	r1, [pc, #24]	; (8009418 <__assert_func+0x34>)
 80093fe:	462b      	mov	r3, r5
 8009400:	f000 f844 	bl	800948c <fiprintf>
 8009404:	f000 f854 	bl	80094b0 <abort>
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <__assert_func+0x38>)
 800940a:	461c      	mov	r4, r3
 800940c:	e7f3      	b.n	80093f6 <__assert_func+0x12>
 800940e:	bf00      	nop
 8009410:	200000f4 	.word	0x200000f4
 8009414:	0800aba7 	.word	0x0800aba7
 8009418:	0800abb4 	.word	0x0800abb4
 800941c:	0800abe2 	.word	0x0800abe2

08009420 <_calloc_r>:
 8009420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009422:	fba1 2402 	umull	r2, r4, r1, r2
 8009426:	b94c      	cbnz	r4, 800943c <_calloc_r+0x1c>
 8009428:	4611      	mov	r1, r2
 800942a:	9201      	str	r2, [sp, #4]
 800942c:	f7ff f93e 	bl	80086ac <_malloc_r>
 8009430:	9a01      	ldr	r2, [sp, #4]
 8009432:	4605      	mov	r5, r0
 8009434:	b930      	cbnz	r0, 8009444 <_calloc_r+0x24>
 8009436:	4628      	mov	r0, r5
 8009438:	b003      	add	sp, #12
 800943a:	bd30      	pop	{r4, r5, pc}
 800943c:	220c      	movs	r2, #12
 800943e:	6002      	str	r2, [r0, #0]
 8009440:	2500      	movs	r5, #0
 8009442:	e7f8      	b.n	8009436 <_calloc_r+0x16>
 8009444:	4621      	mov	r1, r4
 8009446:	f7fe f9c3 	bl	80077d0 <memset>
 800944a:	e7f4      	b.n	8009436 <_calloc_r+0x16>

0800944c <__ascii_mbtowc>:
 800944c:	b082      	sub	sp, #8
 800944e:	b901      	cbnz	r1, 8009452 <__ascii_mbtowc+0x6>
 8009450:	a901      	add	r1, sp, #4
 8009452:	b142      	cbz	r2, 8009466 <__ascii_mbtowc+0x1a>
 8009454:	b14b      	cbz	r3, 800946a <__ascii_mbtowc+0x1e>
 8009456:	7813      	ldrb	r3, [r2, #0]
 8009458:	600b      	str	r3, [r1, #0]
 800945a:	7812      	ldrb	r2, [r2, #0]
 800945c:	1e10      	subs	r0, r2, #0
 800945e:	bf18      	it	ne
 8009460:	2001      	movne	r0, #1
 8009462:	b002      	add	sp, #8
 8009464:	4770      	bx	lr
 8009466:	4610      	mov	r0, r2
 8009468:	e7fb      	b.n	8009462 <__ascii_mbtowc+0x16>
 800946a:	f06f 0001 	mvn.w	r0, #1
 800946e:	e7f8      	b.n	8009462 <__ascii_mbtowc+0x16>

08009470 <__ascii_wctomb>:
 8009470:	b149      	cbz	r1, 8009486 <__ascii_wctomb+0x16>
 8009472:	2aff      	cmp	r2, #255	; 0xff
 8009474:	bf85      	ittet	hi
 8009476:	238a      	movhi	r3, #138	; 0x8a
 8009478:	6003      	strhi	r3, [r0, #0]
 800947a:	700a      	strbls	r2, [r1, #0]
 800947c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009480:	bf98      	it	ls
 8009482:	2001      	movls	r0, #1
 8009484:	4770      	bx	lr
 8009486:	4608      	mov	r0, r1
 8009488:	4770      	bx	lr
	...

0800948c <fiprintf>:
 800948c:	b40e      	push	{r1, r2, r3}
 800948e:	b503      	push	{r0, r1, lr}
 8009490:	4601      	mov	r1, r0
 8009492:	ab03      	add	r3, sp, #12
 8009494:	4805      	ldr	r0, [pc, #20]	; (80094ac <fiprintf+0x20>)
 8009496:	f853 2b04 	ldr.w	r2, [r3], #4
 800949a:	6800      	ldr	r0, [r0, #0]
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	f7ff fd37 	bl	8008f10 <_vfiprintf_r>
 80094a2:	b002      	add	sp, #8
 80094a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094a8:	b003      	add	sp, #12
 80094aa:	4770      	bx	lr
 80094ac:	200000f4 	.word	0x200000f4

080094b0 <abort>:
 80094b0:	b508      	push	{r3, lr}
 80094b2:	2006      	movs	r0, #6
 80094b4:	f000 f82c 	bl	8009510 <raise>
 80094b8:	2001      	movs	r0, #1
 80094ba:	f7f9 fadf 	bl	8002a7c <_exit>

080094be <_raise_r>:
 80094be:	291f      	cmp	r1, #31
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4604      	mov	r4, r0
 80094c4:	460d      	mov	r5, r1
 80094c6:	d904      	bls.n	80094d2 <_raise_r+0x14>
 80094c8:	2316      	movs	r3, #22
 80094ca:	6003      	str	r3, [r0, #0]
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295
 80094d0:	bd38      	pop	{r3, r4, r5, pc}
 80094d2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80094d4:	b112      	cbz	r2, 80094dc <_raise_r+0x1e>
 80094d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094da:	b94b      	cbnz	r3, 80094f0 <_raise_r+0x32>
 80094dc:	4620      	mov	r0, r4
 80094de:	f000 f831 	bl	8009544 <_getpid_r>
 80094e2:	462a      	mov	r2, r5
 80094e4:	4601      	mov	r1, r0
 80094e6:	4620      	mov	r0, r4
 80094e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ec:	f000 b818 	b.w	8009520 <_kill_r>
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d00a      	beq.n	800950a <_raise_r+0x4c>
 80094f4:	1c59      	adds	r1, r3, #1
 80094f6:	d103      	bne.n	8009500 <_raise_r+0x42>
 80094f8:	2316      	movs	r3, #22
 80094fa:	6003      	str	r3, [r0, #0]
 80094fc:	2001      	movs	r0, #1
 80094fe:	e7e7      	b.n	80094d0 <_raise_r+0x12>
 8009500:	2400      	movs	r4, #0
 8009502:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009506:	4628      	mov	r0, r5
 8009508:	4798      	blx	r3
 800950a:	2000      	movs	r0, #0
 800950c:	e7e0      	b.n	80094d0 <_raise_r+0x12>
	...

08009510 <raise>:
 8009510:	4b02      	ldr	r3, [pc, #8]	; (800951c <raise+0xc>)
 8009512:	4601      	mov	r1, r0
 8009514:	6818      	ldr	r0, [r3, #0]
 8009516:	f7ff bfd2 	b.w	80094be <_raise_r>
 800951a:	bf00      	nop
 800951c:	200000f4 	.word	0x200000f4

08009520 <_kill_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d07      	ldr	r5, [pc, #28]	; (8009540 <_kill_r+0x20>)
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	4611      	mov	r1, r2
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	f7f9 fa95 	bl	8002a5c <_kill>
 8009532:	1c43      	adds	r3, r0, #1
 8009534:	d102      	bne.n	800953c <_kill_r+0x1c>
 8009536:	682b      	ldr	r3, [r5, #0]
 8009538:	b103      	cbz	r3, 800953c <_kill_r+0x1c>
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	bd38      	pop	{r3, r4, r5, pc}
 800953e:	bf00      	nop
 8009540:	20000660 	.word	0x20000660

08009544 <_getpid_r>:
 8009544:	f7f9 ba82 	b.w	8002a4c <_getpid>

08009548 <atan2>:
 8009548:	f000 bb2e 	b.w	8009ba8 <__ieee754_atan2>

0800954c <pow>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	ed2d 8b02 	vpush	{d8}
 8009552:	eeb0 8a40 	vmov.f32	s16, s0
 8009556:	eef0 8a60 	vmov.f32	s17, s1
 800955a:	ec55 4b11 	vmov	r4, r5, d1
 800955e:	f000 fbeb 	bl	8009d38 <__ieee754_pow>
 8009562:	4622      	mov	r2, r4
 8009564:	462b      	mov	r3, r5
 8009566:	4620      	mov	r0, r4
 8009568:	4629      	mov	r1, r5
 800956a:	ec57 6b10 	vmov	r6, r7, d0
 800956e:	f7f7 fafd 	bl	8000b6c <__aeabi_dcmpun>
 8009572:	2800      	cmp	r0, #0
 8009574:	d13b      	bne.n	80095ee <pow+0xa2>
 8009576:	ec51 0b18 	vmov	r0, r1, d8
 800957a:	2200      	movs	r2, #0
 800957c:	2300      	movs	r3, #0
 800957e:	f7f7 fac3 	bl	8000b08 <__aeabi_dcmpeq>
 8009582:	b1b8      	cbz	r0, 80095b4 <pow+0x68>
 8009584:	2200      	movs	r2, #0
 8009586:	2300      	movs	r3, #0
 8009588:	4620      	mov	r0, r4
 800958a:	4629      	mov	r1, r5
 800958c:	f7f7 fabc 	bl	8000b08 <__aeabi_dcmpeq>
 8009590:	2800      	cmp	r0, #0
 8009592:	d146      	bne.n	8009622 <pow+0xd6>
 8009594:	ec45 4b10 	vmov	d0, r4, r5
 8009598:	f000 fa1f 	bl	80099da <finite>
 800959c:	b338      	cbz	r0, 80095ee <pow+0xa2>
 800959e:	2200      	movs	r2, #0
 80095a0:	2300      	movs	r3, #0
 80095a2:	4620      	mov	r0, r4
 80095a4:	4629      	mov	r1, r5
 80095a6:	f7f7 fab9 	bl	8000b1c <__aeabi_dcmplt>
 80095aa:	b300      	cbz	r0, 80095ee <pow+0xa2>
 80095ac:	f7fe f962 	bl	8007874 <__errno>
 80095b0:	2322      	movs	r3, #34	; 0x22
 80095b2:	e01b      	b.n	80095ec <pow+0xa0>
 80095b4:	ec47 6b10 	vmov	d0, r6, r7
 80095b8:	f000 fa0f 	bl	80099da <finite>
 80095bc:	b9e0      	cbnz	r0, 80095f8 <pow+0xac>
 80095be:	eeb0 0a48 	vmov.f32	s0, s16
 80095c2:	eef0 0a68 	vmov.f32	s1, s17
 80095c6:	f000 fa08 	bl	80099da <finite>
 80095ca:	b1a8      	cbz	r0, 80095f8 <pow+0xac>
 80095cc:	ec45 4b10 	vmov	d0, r4, r5
 80095d0:	f000 fa03 	bl	80099da <finite>
 80095d4:	b180      	cbz	r0, 80095f8 <pow+0xac>
 80095d6:	4632      	mov	r2, r6
 80095d8:	463b      	mov	r3, r7
 80095da:	4630      	mov	r0, r6
 80095dc:	4639      	mov	r1, r7
 80095de:	f7f7 fac5 	bl	8000b6c <__aeabi_dcmpun>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d0e2      	beq.n	80095ac <pow+0x60>
 80095e6:	f7fe f945 	bl	8007874 <__errno>
 80095ea:	2321      	movs	r3, #33	; 0x21
 80095ec:	6003      	str	r3, [r0, #0]
 80095ee:	ecbd 8b02 	vpop	{d8}
 80095f2:	ec47 6b10 	vmov	d0, r6, r7
 80095f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f8:	2200      	movs	r2, #0
 80095fa:	2300      	movs	r3, #0
 80095fc:	4630      	mov	r0, r6
 80095fe:	4639      	mov	r1, r7
 8009600:	f7f7 fa82 	bl	8000b08 <__aeabi_dcmpeq>
 8009604:	2800      	cmp	r0, #0
 8009606:	d0f2      	beq.n	80095ee <pow+0xa2>
 8009608:	eeb0 0a48 	vmov.f32	s0, s16
 800960c:	eef0 0a68 	vmov.f32	s1, s17
 8009610:	f000 f9e3 	bl	80099da <finite>
 8009614:	2800      	cmp	r0, #0
 8009616:	d0ea      	beq.n	80095ee <pow+0xa2>
 8009618:	ec45 4b10 	vmov	d0, r4, r5
 800961c:	f000 f9dd 	bl	80099da <finite>
 8009620:	e7c3      	b.n	80095aa <pow+0x5e>
 8009622:	4f01      	ldr	r7, [pc, #4]	; (8009628 <pow+0xdc>)
 8009624:	2600      	movs	r6, #0
 8009626:	e7e2      	b.n	80095ee <pow+0xa2>
 8009628:	3ff00000 	.word	0x3ff00000

0800962c <sqrt>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	ed2d 8b02 	vpush	{d8}
 8009632:	ec55 4b10 	vmov	r4, r5, d0
 8009636:	f000 f9db 	bl	80099f0 <__ieee754_sqrt>
 800963a:	4622      	mov	r2, r4
 800963c:	462b      	mov	r3, r5
 800963e:	4620      	mov	r0, r4
 8009640:	4629      	mov	r1, r5
 8009642:	eeb0 8a40 	vmov.f32	s16, s0
 8009646:	eef0 8a60 	vmov.f32	s17, s1
 800964a:	f7f7 fa8f 	bl	8000b6c <__aeabi_dcmpun>
 800964e:	b990      	cbnz	r0, 8009676 <sqrt+0x4a>
 8009650:	2200      	movs	r2, #0
 8009652:	2300      	movs	r3, #0
 8009654:	4620      	mov	r0, r4
 8009656:	4629      	mov	r1, r5
 8009658:	f7f7 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800965c:	b158      	cbz	r0, 8009676 <sqrt+0x4a>
 800965e:	f7fe f909 	bl	8007874 <__errno>
 8009662:	2321      	movs	r3, #33	; 0x21
 8009664:	6003      	str	r3, [r0, #0]
 8009666:	2200      	movs	r2, #0
 8009668:	2300      	movs	r3, #0
 800966a:	4610      	mov	r0, r2
 800966c:	4619      	mov	r1, r3
 800966e:	f7f7 f90d 	bl	800088c <__aeabi_ddiv>
 8009672:	ec41 0b18 	vmov	d8, r0, r1
 8009676:	eeb0 0a48 	vmov.f32	s0, s16
 800967a:	eef0 0a68 	vmov.f32	s1, s17
 800967e:	ecbd 8b02 	vpop	{d8}
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	0000      	movs	r0, r0
	...

08009688 <atan>:
 8009688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	ec55 4b10 	vmov	r4, r5, d0
 8009690:	4bc3      	ldr	r3, [pc, #780]	; (80099a0 <atan+0x318>)
 8009692:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009696:	429e      	cmp	r6, r3
 8009698:	46ab      	mov	fp, r5
 800969a:	dd18      	ble.n	80096ce <atan+0x46>
 800969c:	4bc1      	ldr	r3, [pc, #772]	; (80099a4 <atan+0x31c>)
 800969e:	429e      	cmp	r6, r3
 80096a0:	dc01      	bgt.n	80096a6 <atan+0x1e>
 80096a2:	d109      	bne.n	80096b8 <atan+0x30>
 80096a4:	b144      	cbz	r4, 80096b8 <atan+0x30>
 80096a6:	4622      	mov	r2, r4
 80096a8:	462b      	mov	r3, r5
 80096aa:	4620      	mov	r0, r4
 80096ac:	4629      	mov	r1, r5
 80096ae:	f7f6 fe0d 	bl	80002cc <__adddf3>
 80096b2:	4604      	mov	r4, r0
 80096b4:	460d      	mov	r5, r1
 80096b6:	e006      	b.n	80096c6 <atan+0x3e>
 80096b8:	f1bb 0f00 	cmp.w	fp, #0
 80096bc:	f300 8131 	bgt.w	8009922 <atan+0x29a>
 80096c0:	a59b      	add	r5, pc, #620	; (adr r5, 8009930 <atan+0x2a8>)
 80096c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096c6:	ec45 4b10 	vmov	d0, r4, r5
 80096ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ce:	4bb6      	ldr	r3, [pc, #728]	; (80099a8 <atan+0x320>)
 80096d0:	429e      	cmp	r6, r3
 80096d2:	dc14      	bgt.n	80096fe <atan+0x76>
 80096d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80096d8:	429e      	cmp	r6, r3
 80096da:	dc0d      	bgt.n	80096f8 <atan+0x70>
 80096dc:	a396      	add	r3, pc, #600	; (adr r3, 8009938 <atan+0x2b0>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	ee10 0a10 	vmov	r0, s0
 80096e6:	4629      	mov	r1, r5
 80096e8:	f7f6 fdf0 	bl	80002cc <__adddf3>
 80096ec:	4baf      	ldr	r3, [pc, #700]	; (80099ac <atan+0x324>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	f7f7 fa32 	bl	8000b58 <__aeabi_dcmpgt>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d1e6      	bne.n	80096c6 <atan+0x3e>
 80096f8:	f04f 3aff 	mov.w	sl, #4294967295
 80096fc:	e02b      	b.n	8009756 <atan+0xce>
 80096fe:	f000 f963 	bl	80099c8 <fabs>
 8009702:	4bab      	ldr	r3, [pc, #684]	; (80099b0 <atan+0x328>)
 8009704:	429e      	cmp	r6, r3
 8009706:	ec55 4b10 	vmov	r4, r5, d0
 800970a:	f300 80bf 	bgt.w	800988c <atan+0x204>
 800970e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009712:	429e      	cmp	r6, r3
 8009714:	f300 80a0 	bgt.w	8009858 <atan+0x1d0>
 8009718:	ee10 2a10 	vmov	r2, s0
 800971c:	ee10 0a10 	vmov	r0, s0
 8009720:	462b      	mov	r3, r5
 8009722:	4629      	mov	r1, r5
 8009724:	f7f6 fdd2 	bl	80002cc <__adddf3>
 8009728:	4ba0      	ldr	r3, [pc, #640]	; (80099ac <atan+0x324>)
 800972a:	2200      	movs	r2, #0
 800972c:	f7f6 fdcc 	bl	80002c8 <__aeabi_dsub>
 8009730:	2200      	movs	r2, #0
 8009732:	4606      	mov	r6, r0
 8009734:	460f      	mov	r7, r1
 8009736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800973a:	4620      	mov	r0, r4
 800973c:	4629      	mov	r1, r5
 800973e:	f7f6 fdc5 	bl	80002cc <__adddf3>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4630      	mov	r0, r6
 8009748:	4639      	mov	r1, r7
 800974a:	f7f7 f89f 	bl	800088c <__aeabi_ddiv>
 800974e:	f04f 0a00 	mov.w	sl, #0
 8009752:	4604      	mov	r4, r0
 8009754:	460d      	mov	r5, r1
 8009756:	4622      	mov	r2, r4
 8009758:	462b      	mov	r3, r5
 800975a:	4620      	mov	r0, r4
 800975c:	4629      	mov	r1, r5
 800975e:	f7f6 ff6b 	bl	8000638 <__aeabi_dmul>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4680      	mov	r8, r0
 8009768:	4689      	mov	r9, r1
 800976a:	f7f6 ff65 	bl	8000638 <__aeabi_dmul>
 800976e:	a374      	add	r3, pc, #464	; (adr r3, 8009940 <atan+0x2b8>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	4606      	mov	r6, r0
 8009776:	460f      	mov	r7, r1
 8009778:	f7f6 ff5e 	bl	8000638 <__aeabi_dmul>
 800977c:	a372      	add	r3, pc, #456	; (adr r3, 8009948 <atan+0x2c0>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f7f6 fda3 	bl	80002cc <__adddf3>
 8009786:	4632      	mov	r2, r6
 8009788:	463b      	mov	r3, r7
 800978a:	f7f6 ff55 	bl	8000638 <__aeabi_dmul>
 800978e:	a370      	add	r3, pc, #448	; (adr r3, 8009950 <atan+0x2c8>)
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f7f6 fd9a 	bl	80002cc <__adddf3>
 8009798:	4632      	mov	r2, r6
 800979a:	463b      	mov	r3, r7
 800979c:	f7f6 ff4c 	bl	8000638 <__aeabi_dmul>
 80097a0:	a36d      	add	r3, pc, #436	; (adr r3, 8009958 <atan+0x2d0>)
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	f7f6 fd91 	bl	80002cc <__adddf3>
 80097aa:	4632      	mov	r2, r6
 80097ac:	463b      	mov	r3, r7
 80097ae:	f7f6 ff43 	bl	8000638 <__aeabi_dmul>
 80097b2:	a36b      	add	r3, pc, #428	; (adr r3, 8009960 <atan+0x2d8>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	f7f6 fd88 	bl	80002cc <__adddf3>
 80097bc:	4632      	mov	r2, r6
 80097be:	463b      	mov	r3, r7
 80097c0:	f7f6 ff3a 	bl	8000638 <__aeabi_dmul>
 80097c4:	a368      	add	r3, pc, #416	; (adr r3, 8009968 <atan+0x2e0>)
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	f7f6 fd7f 	bl	80002cc <__adddf3>
 80097ce:	4642      	mov	r2, r8
 80097d0:	464b      	mov	r3, r9
 80097d2:	f7f6 ff31 	bl	8000638 <__aeabi_dmul>
 80097d6:	a366      	add	r3, pc, #408	; (adr r3, 8009970 <atan+0x2e8>)
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	4680      	mov	r8, r0
 80097de:	4689      	mov	r9, r1
 80097e0:	4630      	mov	r0, r6
 80097e2:	4639      	mov	r1, r7
 80097e4:	f7f6 ff28 	bl	8000638 <__aeabi_dmul>
 80097e8:	a363      	add	r3, pc, #396	; (adr r3, 8009978 <atan+0x2f0>)
 80097ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ee:	f7f6 fd6b 	bl	80002c8 <__aeabi_dsub>
 80097f2:	4632      	mov	r2, r6
 80097f4:	463b      	mov	r3, r7
 80097f6:	f7f6 ff1f 	bl	8000638 <__aeabi_dmul>
 80097fa:	a361      	add	r3, pc, #388	; (adr r3, 8009980 <atan+0x2f8>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	f7f6 fd62 	bl	80002c8 <__aeabi_dsub>
 8009804:	4632      	mov	r2, r6
 8009806:	463b      	mov	r3, r7
 8009808:	f7f6 ff16 	bl	8000638 <__aeabi_dmul>
 800980c:	a35e      	add	r3, pc, #376	; (adr r3, 8009988 <atan+0x300>)
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f7f6 fd59 	bl	80002c8 <__aeabi_dsub>
 8009816:	4632      	mov	r2, r6
 8009818:	463b      	mov	r3, r7
 800981a:	f7f6 ff0d 	bl	8000638 <__aeabi_dmul>
 800981e:	a35c      	add	r3, pc, #368	; (adr r3, 8009990 <atan+0x308>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	f7f6 fd50 	bl	80002c8 <__aeabi_dsub>
 8009828:	4632      	mov	r2, r6
 800982a:	463b      	mov	r3, r7
 800982c:	f7f6 ff04 	bl	8000638 <__aeabi_dmul>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4640      	mov	r0, r8
 8009836:	4649      	mov	r1, r9
 8009838:	f7f6 fd48 	bl	80002cc <__adddf3>
 800983c:	4622      	mov	r2, r4
 800983e:	462b      	mov	r3, r5
 8009840:	f7f6 fefa 	bl	8000638 <__aeabi_dmul>
 8009844:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	d14b      	bne.n	80098e6 <atan+0x25e>
 800984e:	4620      	mov	r0, r4
 8009850:	4629      	mov	r1, r5
 8009852:	f7f6 fd39 	bl	80002c8 <__aeabi_dsub>
 8009856:	e72c      	b.n	80096b2 <atan+0x2a>
 8009858:	ee10 0a10 	vmov	r0, s0
 800985c:	4b53      	ldr	r3, [pc, #332]	; (80099ac <atan+0x324>)
 800985e:	2200      	movs	r2, #0
 8009860:	4629      	mov	r1, r5
 8009862:	f7f6 fd31 	bl	80002c8 <__aeabi_dsub>
 8009866:	4b51      	ldr	r3, [pc, #324]	; (80099ac <atan+0x324>)
 8009868:	4606      	mov	r6, r0
 800986a:	460f      	mov	r7, r1
 800986c:	2200      	movs	r2, #0
 800986e:	4620      	mov	r0, r4
 8009870:	4629      	mov	r1, r5
 8009872:	f7f6 fd2b 	bl	80002cc <__adddf3>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4630      	mov	r0, r6
 800987c:	4639      	mov	r1, r7
 800987e:	f7f7 f805 	bl	800088c <__aeabi_ddiv>
 8009882:	f04f 0a01 	mov.w	sl, #1
 8009886:	4604      	mov	r4, r0
 8009888:	460d      	mov	r5, r1
 800988a:	e764      	b.n	8009756 <atan+0xce>
 800988c:	4b49      	ldr	r3, [pc, #292]	; (80099b4 <atan+0x32c>)
 800988e:	429e      	cmp	r6, r3
 8009890:	da1d      	bge.n	80098ce <atan+0x246>
 8009892:	ee10 0a10 	vmov	r0, s0
 8009896:	4b48      	ldr	r3, [pc, #288]	; (80099b8 <atan+0x330>)
 8009898:	2200      	movs	r2, #0
 800989a:	4629      	mov	r1, r5
 800989c:	f7f6 fd14 	bl	80002c8 <__aeabi_dsub>
 80098a0:	4b45      	ldr	r3, [pc, #276]	; (80099b8 <atan+0x330>)
 80098a2:	4606      	mov	r6, r0
 80098a4:	460f      	mov	r7, r1
 80098a6:	2200      	movs	r2, #0
 80098a8:	4620      	mov	r0, r4
 80098aa:	4629      	mov	r1, r5
 80098ac:	f7f6 fec4 	bl	8000638 <__aeabi_dmul>
 80098b0:	4b3e      	ldr	r3, [pc, #248]	; (80099ac <atan+0x324>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	f7f6 fd0a 	bl	80002cc <__adddf3>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	4630      	mov	r0, r6
 80098be:	4639      	mov	r1, r7
 80098c0:	f7f6 ffe4 	bl	800088c <__aeabi_ddiv>
 80098c4:	f04f 0a02 	mov.w	sl, #2
 80098c8:	4604      	mov	r4, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	e743      	b.n	8009756 <atan+0xce>
 80098ce:	462b      	mov	r3, r5
 80098d0:	ee10 2a10 	vmov	r2, s0
 80098d4:	4939      	ldr	r1, [pc, #228]	; (80099bc <atan+0x334>)
 80098d6:	2000      	movs	r0, #0
 80098d8:	f7f6 ffd8 	bl	800088c <__aeabi_ddiv>
 80098dc:	f04f 0a03 	mov.w	sl, #3
 80098e0:	4604      	mov	r4, r0
 80098e2:	460d      	mov	r5, r1
 80098e4:	e737      	b.n	8009756 <atan+0xce>
 80098e6:	4b36      	ldr	r3, [pc, #216]	; (80099c0 <atan+0x338>)
 80098e8:	4e36      	ldr	r6, [pc, #216]	; (80099c4 <atan+0x33c>)
 80098ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	f7f6 fce9 	bl	80002c8 <__aeabi_dsub>
 80098f6:	4622      	mov	r2, r4
 80098f8:	462b      	mov	r3, r5
 80098fa:	f7f6 fce5 	bl	80002c8 <__aeabi_dsub>
 80098fe:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	e9d6 0100 	ldrd	r0, r1, [r6]
 800990a:	f7f6 fcdd 	bl	80002c8 <__aeabi_dsub>
 800990e:	f1bb 0f00 	cmp.w	fp, #0
 8009912:	4604      	mov	r4, r0
 8009914:	460d      	mov	r5, r1
 8009916:	f6bf aed6 	bge.w	80096c6 <atan+0x3e>
 800991a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800991e:	461d      	mov	r5, r3
 8009920:	e6d1      	b.n	80096c6 <atan+0x3e>
 8009922:	a51d      	add	r5, pc, #116	; (adr r5, 8009998 <atan+0x310>)
 8009924:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009928:	e6cd      	b.n	80096c6 <atan+0x3e>
 800992a:	bf00      	nop
 800992c:	f3af 8000 	nop.w
 8009930:	54442d18 	.word	0x54442d18
 8009934:	bff921fb 	.word	0xbff921fb
 8009938:	8800759c 	.word	0x8800759c
 800993c:	7e37e43c 	.word	0x7e37e43c
 8009940:	e322da11 	.word	0xe322da11
 8009944:	3f90ad3a 	.word	0x3f90ad3a
 8009948:	24760deb 	.word	0x24760deb
 800994c:	3fa97b4b 	.word	0x3fa97b4b
 8009950:	a0d03d51 	.word	0xa0d03d51
 8009954:	3fb10d66 	.word	0x3fb10d66
 8009958:	c54c206e 	.word	0xc54c206e
 800995c:	3fb745cd 	.word	0x3fb745cd
 8009960:	920083ff 	.word	0x920083ff
 8009964:	3fc24924 	.word	0x3fc24924
 8009968:	5555550d 	.word	0x5555550d
 800996c:	3fd55555 	.word	0x3fd55555
 8009970:	2c6a6c2f 	.word	0x2c6a6c2f
 8009974:	bfa2b444 	.word	0xbfa2b444
 8009978:	52defd9a 	.word	0x52defd9a
 800997c:	3fadde2d 	.word	0x3fadde2d
 8009980:	af749a6d 	.word	0xaf749a6d
 8009984:	3fb3b0f2 	.word	0x3fb3b0f2
 8009988:	fe231671 	.word	0xfe231671
 800998c:	3fbc71c6 	.word	0x3fbc71c6
 8009990:	9998ebc4 	.word	0x9998ebc4
 8009994:	3fc99999 	.word	0x3fc99999
 8009998:	54442d18 	.word	0x54442d18
 800999c:	3ff921fb 	.word	0x3ff921fb
 80099a0:	440fffff 	.word	0x440fffff
 80099a4:	7ff00000 	.word	0x7ff00000
 80099a8:	3fdbffff 	.word	0x3fdbffff
 80099ac:	3ff00000 	.word	0x3ff00000
 80099b0:	3ff2ffff 	.word	0x3ff2ffff
 80099b4:	40038000 	.word	0x40038000
 80099b8:	3ff80000 	.word	0x3ff80000
 80099bc:	bff00000 	.word	0xbff00000
 80099c0:	0800ad08 	.word	0x0800ad08
 80099c4:	0800ace8 	.word	0x0800ace8

080099c8 <fabs>:
 80099c8:	ec51 0b10 	vmov	r0, r1, d0
 80099cc:	ee10 2a10 	vmov	r2, s0
 80099d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80099d4:	ec43 2b10 	vmov	d0, r2, r3
 80099d8:	4770      	bx	lr

080099da <finite>:
 80099da:	b082      	sub	sp, #8
 80099dc:	ed8d 0b00 	vstr	d0, [sp]
 80099e0:	9801      	ldr	r0, [sp, #4]
 80099e2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80099e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80099ea:	0fc0      	lsrs	r0, r0, #31
 80099ec:	b002      	add	sp, #8
 80099ee:	4770      	bx	lr

080099f0 <__ieee754_sqrt>:
 80099f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	ec55 4b10 	vmov	r4, r5, d0
 80099f8:	4e67      	ldr	r6, [pc, #412]	; (8009b98 <__ieee754_sqrt+0x1a8>)
 80099fa:	43ae      	bics	r6, r5
 80099fc:	ee10 0a10 	vmov	r0, s0
 8009a00:	ee10 2a10 	vmov	r2, s0
 8009a04:	4629      	mov	r1, r5
 8009a06:	462b      	mov	r3, r5
 8009a08:	d10d      	bne.n	8009a26 <__ieee754_sqrt+0x36>
 8009a0a:	f7f6 fe15 	bl	8000638 <__aeabi_dmul>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	4620      	mov	r0, r4
 8009a14:	4629      	mov	r1, r5
 8009a16:	f7f6 fc59 	bl	80002cc <__adddf3>
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	460d      	mov	r5, r1
 8009a1e:	ec45 4b10 	vmov	d0, r4, r5
 8009a22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	dc0b      	bgt.n	8009a42 <__ieee754_sqrt+0x52>
 8009a2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009a2e:	4326      	orrs	r6, r4
 8009a30:	d0f5      	beq.n	8009a1e <__ieee754_sqrt+0x2e>
 8009a32:	b135      	cbz	r5, 8009a42 <__ieee754_sqrt+0x52>
 8009a34:	f7f6 fc48 	bl	80002c8 <__aeabi_dsub>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	f7f6 ff26 	bl	800088c <__aeabi_ddiv>
 8009a40:	e7eb      	b.n	8009a1a <__ieee754_sqrt+0x2a>
 8009a42:	1509      	asrs	r1, r1, #20
 8009a44:	f000 808d 	beq.w	8009b62 <__ieee754_sqrt+0x172>
 8009a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a4c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a54:	07c9      	lsls	r1, r1, #31
 8009a56:	bf5c      	itt	pl
 8009a58:	005b      	lslpl	r3, r3, #1
 8009a5a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009a5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a62:	bf58      	it	pl
 8009a64:	0052      	lslpl	r2, r2, #1
 8009a66:	2500      	movs	r5, #0
 8009a68:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009a6c:	1076      	asrs	r6, r6, #1
 8009a6e:	0052      	lsls	r2, r2, #1
 8009a70:	f04f 0e16 	mov.w	lr, #22
 8009a74:	46ac      	mov	ip, r5
 8009a76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a7a:	eb0c 0001 	add.w	r0, ip, r1
 8009a7e:	4298      	cmp	r0, r3
 8009a80:	bfde      	ittt	le
 8009a82:	1a1b      	suble	r3, r3, r0
 8009a84:	eb00 0c01 	addle.w	ip, r0, r1
 8009a88:	186d      	addle	r5, r5, r1
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	f1be 0e01 	subs.w	lr, lr, #1
 8009a90:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009a94:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009a98:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009a9c:	d1ed      	bne.n	8009a7a <__ieee754_sqrt+0x8a>
 8009a9e:	4674      	mov	r4, lr
 8009aa0:	2720      	movs	r7, #32
 8009aa2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009aa6:	4563      	cmp	r3, ip
 8009aa8:	eb01 000e 	add.w	r0, r1, lr
 8009aac:	dc02      	bgt.n	8009ab4 <__ieee754_sqrt+0xc4>
 8009aae:	d113      	bne.n	8009ad8 <__ieee754_sqrt+0xe8>
 8009ab0:	4290      	cmp	r0, r2
 8009ab2:	d811      	bhi.n	8009ad8 <__ieee754_sqrt+0xe8>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	eb00 0e01 	add.w	lr, r0, r1
 8009aba:	da57      	bge.n	8009b6c <__ieee754_sqrt+0x17c>
 8009abc:	f1be 0f00 	cmp.w	lr, #0
 8009ac0:	db54      	blt.n	8009b6c <__ieee754_sqrt+0x17c>
 8009ac2:	f10c 0801 	add.w	r8, ip, #1
 8009ac6:	eba3 030c 	sub.w	r3, r3, ip
 8009aca:	4290      	cmp	r0, r2
 8009acc:	bf88      	it	hi
 8009ace:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009ad2:	1a12      	subs	r2, r2, r0
 8009ad4:	440c      	add	r4, r1
 8009ad6:	46c4      	mov	ip, r8
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	3f01      	subs	r7, #1
 8009adc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009ae0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009ae4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009ae8:	d1dd      	bne.n	8009aa6 <__ieee754_sqrt+0xb6>
 8009aea:	4313      	orrs	r3, r2
 8009aec:	d01b      	beq.n	8009b26 <__ieee754_sqrt+0x136>
 8009aee:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009b9c <__ieee754_sqrt+0x1ac>
 8009af2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009ba0 <__ieee754_sqrt+0x1b0>
 8009af6:	e9da 0100 	ldrd	r0, r1, [sl]
 8009afa:	e9db 2300 	ldrd	r2, r3, [fp]
 8009afe:	f7f6 fbe3 	bl	80002c8 <__aeabi_dsub>
 8009b02:	e9da 8900 	ldrd	r8, r9, [sl]
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4640      	mov	r0, r8
 8009b0c:	4649      	mov	r1, r9
 8009b0e:	f7f7 f80f 	bl	8000b30 <__aeabi_dcmple>
 8009b12:	b140      	cbz	r0, 8009b26 <__ieee754_sqrt+0x136>
 8009b14:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009b18:	e9da 0100 	ldrd	r0, r1, [sl]
 8009b1c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009b20:	d126      	bne.n	8009b70 <__ieee754_sqrt+0x180>
 8009b22:	3501      	adds	r5, #1
 8009b24:	463c      	mov	r4, r7
 8009b26:	106a      	asrs	r2, r5, #1
 8009b28:	0863      	lsrs	r3, r4, #1
 8009b2a:	07e9      	lsls	r1, r5, #31
 8009b2c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009b30:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009b34:	bf48      	it	mi
 8009b36:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009b3a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009b3e:	461c      	mov	r4, r3
 8009b40:	e76d      	b.n	8009a1e <__ieee754_sqrt+0x2e>
 8009b42:	0ad3      	lsrs	r3, r2, #11
 8009b44:	3815      	subs	r0, #21
 8009b46:	0552      	lsls	r2, r2, #21
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d0fa      	beq.n	8009b42 <__ieee754_sqrt+0x152>
 8009b4c:	02dc      	lsls	r4, r3, #11
 8009b4e:	d50a      	bpl.n	8009b66 <__ieee754_sqrt+0x176>
 8009b50:	f1c1 0420 	rsb	r4, r1, #32
 8009b54:	fa22 f404 	lsr.w	r4, r2, r4
 8009b58:	1e4d      	subs	r5, r1, #1
 8009b5a:	408a      	lsls	r2, r1
 8009b5c:	4323      	orrs	r3, r4
 8009b5e:	1b41      	subs	r1, r0, r5
 8009b60:	e772      	b.n	8009a48 <__ieee754_sqrt+0x58>
 8009b62:	4608      	mov	r0, r1
 8009b64:	e7f0      	b.n	8009b48 <__ieee754_sqrt+0x158>
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	3101      	adds	r1, #1
 8009b6a:	e7ef      	b.n	8009b4c <__ieee754_sqrt+0x15c>
 8009b6c:	46e0      	mov	r8, ip
 8009b6e:	e7aa      	b.n	8009ac6 <__ieee754_sqrt+0xd6>
 8009b70:	f7f6 fbac 	bl	80002cc <__adddf3>
 8009b74:	e9da 8900 	ldrd	r8, r9, [sl]
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	4649      	mov	r1, r9
 8009b80:	f7f6 ffcc 	bl	8000b1c <__aeabi_dcmplt>
 8009b84:	b120      	cbz	r0, 8009b90 <__ieee754_sqrt+0x1a0>
 8009b86:	1ca0      	adds	r0, r4, #2
 8009b88:	bf08      	it	eq
 8009b8a:	3501      	addeq	r5, #1
 8009b8c:	3402      	adds	r4, #2
 8009b8e:	e7ca      	b.n	8009b26 <__ieee754_sqrt+0x136>
 8009b90:	3401      	adds	r4, #1
 8009b92:	f024 0401 	bic.w	r4, r4, #1
 8009b96:	e7c6      	b.n	8009b26 <__ieee754_sqrt+0x136>
 8009b98:	7ff00000 	.word	0x7ff00000
 8009b9c:	20000268 	.word	0x20000268
 8009ba0:	20000270 	.word	0x20000270
 8009ba4:	00000000 	.word	0x00000000

08009ba8 <__ieee754_atan2>:
 8009ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bac:	ec57 6b11 	vmov	r6, r7, d1
 8009bb0:	4273      	negs	r3, r6
 8009bb2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009d30 <__ieee754_atan2+0x188>
 8009bb6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009bba:	4333      	orrs	r3, r6
 8009bbc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009bc0:	4543      	cmp	r3, r8
 8009bc2:	ec51 0b10 	vmov	r0, r1, d0
 8009bc6:	ee11 5a10 	vmov	r5, s2
 8009bca:	d80a      	bhi.n	8009be2 <__ieee754_atan2+0x3a>
 8009bcc:	4244      	negs	r4, r0
 8009bce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009bd2:	4304      	orrs	r4, r0
 8009bd4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009bd8:	4544      	cmp	r4, r8
 8009bda:	ee10 9a10 	vmov	r9, s0
 8009bde:	468e      	mov	lr, r1
 8009be0:	d907      	bls.n	8009bf2 <__ieee754_atan2+0x4a>
 8009be2:	4632      	mov	r2, r6
 8009be4:	463b      	mov	r3, r7
 8009be6:	f7f6 fb71 	bl	80002cc <__adddf3>
 8009bea:	ec41 0b10 	vmov	d0, r0, r1
 8009bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009bf6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009bfa:	4334      	orrs	r4, r6
 8009bfc:	d103      	bne.n	8009c06 <__ieee754_atan2+0x5e>
 8009bfe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c02:	f7ff bd41 	b.w	8009688 <atan>
 8009c06:	17bc      	asrs	r4, r7, #30
 8009c08:	f004 0402 	and.w	r4, r4, #2
 8009c0c:	ea53 0909 	orrs.w	r9, r3, r9
 8009c10:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009c14:	d107      	bne.n	8009c26 <__ieee754_atan2+0x7e>
 8009c16:	2c02      	cmp	r4, #2
 8009c18:	d05f      	beq.n	8009cda <__ieee754_atan2+0x132>
 8009c1a:	2c03      	cmp	r4, #3
 8009c1c:	d1e5      	bne.n	8009bea <__ieee754_atan2+0x42>
 8009c1e:	a140      	add	r1, pc, #256	; (adr r1, 8009d20 <__ieee754_atan2+0x178>)
 8009c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c24:	e7e1      	b.n	8009bea <__ieee754_atan2+0x42>
 8009c26:	4315      	orrs	r5, r2
 8009c28:	d106      	bne.n	8009c38 <__ieee754_atan2+0x90>
 8009c2a:	f1be 0f00 	cmp.w	lr, #0
 8009c2e:	da5f      	bge.n	8009cf0 <__ieee754_atan2+0x148>
 8009c30:	a13d      	add	r1, pc, #244	; (adr r1, 8009d28 <__ieee754_atan2+0x180>)
 8009c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c36:	e7d8      	b.n	8009bea <__ieee754_atan2+0x42>
 8009c38:	4542      	cmp	r2, r8
 8009c3a:	d10f      	bne.n	8009c5c <__ieee754_atan2+0xb4>
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c42:	d107      	bne.n	8009c54 <__ieee754_atan2+0xac>
 8009c44:	2c02      	cmp	r4, #2
 8009c46:	d84c      	bhi.n	8009ce2 <__ieee754_atan2+0x13a>
 8009c48:	4b33      	ldr	r3, [pc, #204]	; (8009d18 <__ieee754_atan2+0x170>)
 8009c4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c52:	e7ca      	b.n	8009bea <__ieee754_atan2+0x42>
 8009c54:	2c02      	cmp	r4, #2
 8009c56:	d848      	bhi.n	8009cea <__ieee754_atan2+0x142>
 8009c58:	4b30      	ldr	r3, [pc, #192]	; (8009d1c <__ieee754_atan2+0x174>)
 8009c5a:	e7f6      	b.n	8009c4a <__ieee754_atan2+0xa2>
 8009c5c:	4543      	cmp	r3, r8
 8009c5e:	d0e4      	beq.n	8009c2a <__ieee754_atan2+0x82>
 8009c60:	1a9b      	subs	r3, r3, r2
 8009c62:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009c66:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c6a:	da1e      	bge.n	8009caa <__ieee754_atan2+0x102>
 8009c6c:	2f00      	cmp	r7, #0
 8009c6e:	da01      	bge.n	8009c74 <__ieee754_atan2+0xcc>
 8009c70:	323c      	adds	r2, #60	; 0x3c
 8009c72:	db1e      	blt.n	8009cb2 <__ieee754_atan2+0x10a>
 8009c74:	4632      	mov	r2, r6
 8009c76:	463b      	mov	r3, r7
 8009c78:	f7f6 fe08 	bl	800088c <__aeabi_ddiv>
 8009c7c:	ec41 0b10 	vmov	d0, r0, r1
 8009c80:	f7ff fea2 	bl	80099c8 <fabs>
 8009c84:	f7ff fd00 	bl	8009688 <atan>
 8009c88:	ec51 0b10 	vmov	r0, r1, d0
 8009c8c:	2c01      	cmp	r4, #1
 8009c8e:	d013      	beq.n	8009cb8 <__ieee754_atan2+0x110>
 8009c90:	2c02      	cmp	r4, #2
 8009c92:	d015      	beq.n	8009cc0 <__ieee754_atan2+0x118>
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	d0a8      	beq.n	8009bea <__ieee754_atan2+0x42>
 8009c98:	a317      	add	r3, pc, #92	; (adr r3, 8009cf8 <__ieee754_atan2+0x150>)
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f7f6 fb13 	bl	80002c8 <__aeabi_dsub>
 8009ca2:	a317      	add	r3, pc, #92	; (adr r3, 8009d00 <__ieee754_atan2+0x158>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	e014      	b.n	8009cd4 <__ieee754_atan2+0x12c>
 8009caa:	a117      	add	r1, pc, #92	; (adr r1, 8009d08 <__ieee754_atan2+0x160>)
 8009cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cb0:	e7ec      	b.n	8009c8c <__ieee754_atan2+0xe4>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	e7e9      	b.n	8009c8c <__ieee754_atan2+0xe4>
 8009cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	e794      	b.n	8009bea <__ieee754_atan2+0x42>
 8009cc0:	a30d      	add	r3, pc, #52	; (adr r3, 8009cf8 <__ieee754_atan2+0x150>)
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	f7f6 faff 	bl	80002c8 <__aeabi_dsub>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	a10c      	add	r1, pc, #48	; (adr r1, 8009d00 <__ieee754_atan2+0x158>)
 8009cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cd4:	f7f6 faf8 	bl	80002c8 <__aeabi_dsub>
 8009cd8:	e787      	b.n	8009bea <__ieee754_atan2+0x42>
 8009cda:	a109      	add	r1, pc, #36	; (adr r1, 8009d00 <__ieee754_atan2+0x158>)
 8009cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce0:	e783      	b.n	8009bea <__ieee754_atan2+0x42>
 8009ce2:	a10b      	add	r1, pc, #44	; (adr r1, 8009d10 <__ieee754_atan2+0x168>)
 8009ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce8:	e77f      	b.n	8009bea <__ieee754_atan2+0x42>
 8009cea:	2000      	movs	r0, #0
 8009cec:	2100      	movs	r1, #0
 8009cee:	e77c      	b.n	8009bea <__ieee754_atan2+0x42>
 8009cf0:	a105      	add	r1, pc, #20	; (adr r1, 8009d08 <__ieee754_atan2+0x160>)
 8009cf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cf6:	e778      	b.n	8009bea <__ieee754_atan2+0x42>
 8009cf8:	33145c07 	.word	0x33145c07
 8009cfc:	3ca1a626 	.word	0x3ca1a626
 8009d00:	54442d18 	.word	0x54442d18
 8009d04:	400921fb 	.word	0x400921fb
 8009d08:	54442d18 	.word	0x54442d18
 8009d0c:	3ff921fb 	.word	0x3ff921fb
 8009d10:	54442d18 	.word	0x54442d18
 8009d14:	3fe921fb 	.word	0x3fe921fb
 8009d18:	0800ad28 	.word	0x0800ad28
 8009d1c:	0800ad40 	.word	0x0800ad40
 8009d20:	54442d18 	.word	0x54442d18
 8009d24:	c00921fb 	.word	0xc00921fb
 8009d28:	54442d18 	.word	0x54442d18
 8009d2c:	bff921fb 	.word	0xbff921fb
 8009d30:	7ff00000 	.word	0x7ff00000
 8009d34:	00000000 	.word	0x00000000

08009d38 <__ieee754_pow>:
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	ed2d 8b06 	vpush	{d8-d10}
 8009d40:	b089      	sub	sp, #36	; 0x24
 8009d42:	ed8d 1b00 	vstr	d1, [sp]
 8009d46:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009d4a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009d4e:	ea58 0102 	orrs.w	r1, r8, r2
 8009d52:	ec57 6b10 	vmov	r6, r7, d0
 8009d56:	d115      	bne.n	8009d84 <__ieee754_pow+0x4c>
 8009d58:	19b3      	adds	r3, r6, r6
 8009d5a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009d5e:	4152      	adcs	r2, r2
 8009d60:	4299      	cmp	r1, r3
 8009d62:	4b89      	ldr	r3, [pc, #548]	; (8009f88 <__ieee754_pow+0x250>)
 8009d64:	4193      	sbcs	r3, r2
 8009d66:	f080 84d1 	bcs.w	800a70c <__ieee754_pow+0x9d4>
 8009d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d6e:	4630      	mov	r0, r6
 8009d70:	4639      	mov	r1, r7
 8009d72:	f7f6 faab 	bl	80002cc <__adddf3>
 8009d76:	ec41 0b10 	vmov	d0, r0, r1
 8009d7a:	b009      	add	sp, #36	; 0x24
 8009d7c:	ecbd 8b06 	vpop	{d8-d10}
 8009d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d84:	4b81      	ldr	r3, [pc, #516]	; (8009f8c <__ieee754_pow+0x254>)
 8009d86:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009d8a:	429c      	cmp	r4, r3
 8009d8c:	ee10 aa10 	vmov	sl, s0
 8009d90:	463d      	mov	r5, r7
 8009d92:	dc06      	bgt.n	8009da2 <__ieee754_pow+0x6a>
 8009d94:	d101      	bne.n	8009d9a <__ieee754_pow+0x62>
 8009d96:	2e00      	cmp	r6, #0
 8009d98:	d1e7      	bne.n	8009d6a <__ieee754_pow+0x32>
 8009d9a:	4598      	cmp	r8, r3
 8009d9c:	dc01      	bgt.n	8009da2 <__ieee754_pow+0x6a>
 8009d9e:	d10f      	bne.n	8009dc0 <__ieee754_pow+0x88>
 8009da0:	b172      	cbz	r2, 8009dc0 <__ieee754_pow+0x88>
 8009da2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009da6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009daa:	ea55 050a 	orrs.w	r5, r5, sl
 8009dae:	d1dc      	bne.n	8009d6a <__ieee754_pow+0x32>
 8009db0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009db4:	18db      	adds	r3, r3, r3
 8009db6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009dba:	4152      	adcs	r2, r2
 8009dbc:	429d      	cmp	r5, r3
 8009dbe:	e7d0      	b.n	8009d62 <__ieee754_pow+0x2a>
 8009dc0:	2d00      	cmp	r5, #0
 8009dc2:	da3b      	bge.n	8009e3c <__ieee754_pow+0x104>
 8009dc4:	4b72      	ldr	r3, [pc, #456]	; (8009f90 <__ieee754_pow+0x258>)
 8009dc6:	4598      	cmp	r8, r3
 8009dc8:	dc51      	bgt.n	8009e6e <__ieee754_pow+0x136>
 8009dca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009dce:	4598      	cmp	r8, r3
 8009dd0:	f340 84ab 	ble.w	800a72a <__ieee754_pow+0x9f2>
 8009dd4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009dd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ddc:	2b14      	cmp	r3, #20
 8009dde:	dd0f      	ble.n	8009e00 <__ieee754_pow+0xc8>
 8009de0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009de4:	fa22 f103 	lsr.w	r1, r2, r3
 8009de8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dec:	4293      	cmp	r3, r2
 8009dee:	f040 849c 	bne.w	800a72a <__ieee754_pow+0x9f2>
 8009df2:	f001 0101 	and.w	r1, r1, #1
 8009df6:	f1c1 0302 	rsb	r3, r1, #2
 8009dfa:	9304      	str	r3, [sp, #16]
 8009dfc:	b182      	cbz	r2, 8009e20 <__ieee754_pow+0xe8>
 8009dfe:	e05f      	b.n	8009ec0 <__ieee754_pow+0x188>
 8009e00:	2a00      	cmp	r2, #0
 8009e02:	d15b      	bne.n	8009ebc <__ieee754_pow+0x184>
 8009e04:	f1c3 0314 	rsb	r3, r3, #20
 8009e08:	fa48 f103 	asr.w	r1, r8, r3
 8009e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e10:	4543      	cmp	r3, r8
 8009e12:	f040 8487 	bne.w	800a724 <__ieee754_pow+0x9ec>
 8009e16:	f001 0101 	and.w	r1, r1, #1
 8009e1a:	f1c1 0302 	rsb	r3, r1, #2
 8009e1e:	9304      	str	r3, [sp, #16]
 8009e20:	4b5c      	ldr	r3, [pc, #368]	; (8009f94 <__ieee754_pow+0x25c>)
 8009e22:	4598      	cmp	r8, r3
 8009e24:	d132      	bne.n	8009e8c <__ieee754_pow+0x154>
 8009e26:	f1b9 0f00 	cmp.w	r9, #0
 8009e2a:	f280 8477 	bge.w	800a71c <__ieee754_pow+0x9e4>
 8009e2e:	4959      	ldr	r1, [pc, #356]	; (8009f94 <__ieee754_pow+0x25c>)
 8009e30:	4632      	mov	r2, r6
 8009e32:	463b      	mov	r3, r7
 8009e34:	2000      	movs	r0, #0
 8009e36:	f7f6 fd29 	bl	800088c <__aeabi_ddiv>
 8009e3a:	e79c      	b.n	8009d76 <__ieee754_pow+0x3e>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	9304      	str	r3, [sp, #16]
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	d13d      	bne.n	8009ec0 <__ieee754_pow+0x188>
 8009e44:	4b51      	ldr	r3, [pc, #324]	; (8009f8c <__ieee754_pow+0x254>)
 8009e46:	4598      	cmp	r8, r3
 8009e48:	d1ea      	bne.n	8009e20 <__ieee754_pow+0xe8>
 8009e4a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009e4e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009e52:	ea53 030a 	orrs.w	r3, r3, sl
 8009e56:	f000 8459 	beq.w	800a70c <__ieee754_pow+0x9d4>
 8009e5a:	4b4f      	ldr	r3, [pc, #316]	; (8009f98 <__ieee754_pow+0x260>)
 8009e5c:	429c      	cmp	r4, r3
 8009e5e:	dd08      	ble.n	8009e72 <__ieee754_pow+0x13a>
 8009e60:	f1b9 0f00 	cmp.w	r9, #0
 8009e64:	f2c0 8456 	blt.w	800a714 <__ieee754_pow+0x9dc>
 8009e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e6c:	e783      	b.n	8009d76 <__ieee754_pow+0x3e>
 8009e6e:	2302      	movs	r3, #2
 8009e70:	e7e5      	b.n	8009e3e <__ieee754_pow+0x106>
 8009e72:	f1b9 0f00 	cmp.w	r9, #0
 8009e76:	f04f 0000 	mov.w	r0, #0
 8009e7a:	f04f 0100 	mov.w	r1, #0
 8009e7e:	f6bf af7a 	bge.w	8009d76 <__ieee754_pow+0x3e>
 8009e82:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009e86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009e8a:	e774      	b.n	8009d76 <__ieee754_pow+0x3e>
 8009e8c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009e90:	d106      	bne.n	8009ea0 <__ieee754_pow+0x168>
 8009e92:	4632      	mov	r2, r6
 8009e94:	463b      	mov	r3, r7
 8009e96:	4630      	mov	r0, r6
 8009e98:	4639      	mov	r1, r7
 8009e9a:	f7f6 fbcd 	bl	8000638 <__aeabi_dmul>
 8009e9e:	e76a      	b.n	8009d76 <__ieee754_pow+0x3e>
 8009ea0:	4b3e      	ldr	r3, [pc, #248]	; (8009f9c <__ieee754_pow+0x264>)
 8009ea2:	4599      	cmp	r9, r3
 8009ea4:	d10c      	bne.n	8009ec0 <__ieee754_pow+0x188>
 8009ea6:	2d00      	cmp	r5, #0
 8009ea8:	db0a      	blt.n	8009ec0 <__ieee754_pow+0x188>
 8009eaa:	ec47 6b10 	vmov	d0, r6, r7
 8009eae:	b009      	add	sp, #36	; 0x24
 8009eb0:	ecbd 8b06 	vpop	{d8-d10}
 8009eb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	f7ff bd9a 	b.w	80099f0 <__ieee754_sqrt>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9304      	str	r3, [sp, #16]
 8009ec0:	ec47 6b10 	vmov	d0, r6, r7
 8009ec4:	f7ff fd80 	bl	80099c8 <fabs>
 8009ec8:	ec51 0b10 	vmov	r0, r1, d0
 8009ecc:	f1ba 0f00 	cmp.w	sl, #0
 8009ed0:	d129      	bne.n	8009f26 <__ieee754_pow+0x1ee>
 8009ed2:	b124      	cbz	r4, 8009ede <__ieee754_pow+0x1a6>
 8009ed4:	4b2f      	ldr	r3, [pc, #188]	; (8009f94 <__ieee754_pow+0x25c>)
 8009ed6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d123      	bne.n	8009f26 <__ieee754_pow+0x1ee>
 8009ede:	f1b9 0f00 	cmp.w	r9, #0
 8009ee2:	da05      	bge.n	8009ef0 <__ieee754_pow+0x1b8>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	2000      	movs	r0, #0
 8009eea:	492a      	ldr	r1, [pc, #168]	; (8009f94 <__ieee754_pow+0x25c>)
 8009eec:	f7f6 fcce 	bl	800088c <__aeabi_ddiv>
 8009ef0:	2d00      	cmp	r5, #0
 8009ef2:	f6bf af40 	bge.w	8009d76 <__ieee754_pow+0x3e>
 8009ef6:	9b04      	ldr	r3, [sp, #16]
 8009ef8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009efc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009f00:	431c      	orrs	r4, r3
 8009f02:	d108      	bne.n	8009f16 <__ieee754_pow+0x1de>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4610      	mov	r0, r2
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	f7f6 f9dc 	bl	80002c8 <__aeabi_dsub>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	e78f      	b.n	8009e36 <__ieee754_pow+0xfe>
 8009f16:	9b04      	ldr	r3, [sp, #16]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	f47f af2c 	bne.w	8009d76 <__ieee754_pow+0x3e>
 8009f1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f22:	4619      	mov	r1, r3
 8009f24:	e727      	b.n	8009d76 <__ieee754_pow+0x3e>
 8009f26:	0feb      	lsrs	r3, r5, #31
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	9306      	str	r3, [sp, #24]
 8009f2c:	9a06      	ldr	r2, [sp, #24]
 8009f2e:	9b04      	ldr	r3, [sp, #16]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	d102      	bne.n	8009f3a <__ieee754_pow+0x202>
 8009f34:	4632      	mov	r2, r6
 8009f36:	463b      	mov	r3, r7
 8009f38:	e7e6      	b.n	8009f08 <__ieee754_pow+0x1d0>
 8009f3a:	4b19      	ldr	r3, [pc, #100]	; (8009fa0 <__ieee754_pow+0x268>)
 8009f3c:	4598      	cmp	r8, r3
 8009f3e:	f340 80fb 	ble.w	800a138 <__ieee754_pow+0x400>
 8009f42:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009f46:	4598      	cmp	r8, r3
 8009f48:	4b13      	ldr	r3, [pc, #76]	; (8009f98 <__ieee754_pow+0x260>)
 8009f4a:	dd0c      	ble.n	8009f66 <__ieee754_pow+0x22e>
 8009f4c:	429c      	cmp	r4, r3
 8009f4e:	dc0f      	bgt.n	8009f70 <__ieee754_pow+0x238>
 8009f50:	f1b9 0f00 	cmp.w	r9, #0
 8009f54:	da0f      	bge.n	8009f76 <__ieee754_pow+0x23e>
 8009f56:	2000      	movs	r0, #0
 8009f58:	b009      	add	sp, #36	; 0x24
 8009f5a:	ecbd 8b06 	vpop	{d8-d10}
 8009f5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f62:	f000 bcba 	b.w	800a8da <__math_oflow>
 8009f66:	429c      	cmp	r4, r3
 8009f68:	dbf2      	blt.n	8009f50 <__ieee754_pow+0x218>
 8009f6a:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <__ieee754_pow+0x25c>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	dd19      	ble.n	8009fa4 <__ieee754_pow+0x26c>
 8009f70:	f1b9 0f00 	cmp.w	r9, #0
 8009f74:	dcef      	bgt.n	8009f56 <__ieee754_pow+0x21e>
 8009f76:	2000      	movs	r0, #0
 8009f78:	b009      	add	sp, #36	; 0x24
 8009f7a:	ecbd 8b06 	vpop	{d8-d10}
 8009f7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f82:	f000 bca1 	b.w	800a8c8 <__math_uflow>
 8009f86:	bf00      	nop
 8009f88:	fff00000 	.word	0xfff00000
 8009f8c:	7ff00000 	.word	0x7ff00000
 8009f90:	433fffff 	.word	0x433fffff
 8009f94:	3ff00000 	.word	0x3ff00000
 8009f98:	3fefffff 	.word	0x3fefffff
 8009f9c:	3fe00000 	.word	0x3fe00000
 8009fa0:	41e00000 	.word	0x41e00000
 8009fa4:	4b60      	ldr	r3, [pc, #384]	; (800a128 <__ieee754_pow+0x3f0>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f7f6 f98e 	bl	80002c8 <__aeabi_dsub>
 8009fac:	a354      	add	r3, pc, #336	; (adr r3, 800a100 <__ieee754_pow+0x3c8>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	f7f6 fb3f 	bl	8000638 <__aeabi_dmul>
 8009fba:	a353      	add	r3, pc, #332	; (adr r3, 800a108 <__ieee754_pow+0x3d0>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	460f      	mov	r7, r1
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	f7f6 fb36 	bl	8000638 <__aeabi_dmul>
 8009fcc:	4b57      	ldr	r3, [pc, #348]	; (800a12c <__ieee754_pow+0x3f4>)
 8009fce:	4682      	mov	sl, r0
 8009fd0:	468b      	mov	fp, r1
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	f7f6 fb2e 	bl	8000638 <__aeabi_dmul>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	a14b      	add	r1, pc, #300	; (adr r1, 800a110 <__ieee754_pow+0x3d8>)
 8009fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fe6:	f7f6 f96f 	bl	80002c8 <__aeabi_dsub>
 8009fea:	4622      	mov	r2, r4
 8009fec:	462b      	mov	r3, r5
 8009fee:	f7f6 fb23 	bl	8000638 <__aeabi_dmul>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	494d      	ldr	r1, [pc, #308]	; (800a130 <__ieee754_pow+0x3f8>)
 8009ffa:	f7f6 f965 	bl	80002c8 <__aeabi_dsub>
 8009ffe:	4622      	mov	r2, r4
 800a000:	4680      	mov	r8, r0
 800a002:	4689      	mov	r9, r1
 800a004:	462b      	mov	r3, r5
 800a006:	4620      	mov	r0, r4
 800a008:	4629      	mov	r1, r5
 800a00a:	f7f6 fb15 	bl	8000638 <__aeabi_dmul>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4640      	mov	r0, r8
 800a014:	4649      	mov	r1, r9
 800a016:	f7f6 fb0f 	bl	8000638 <__aeabi_dmul>
 800a01a:	a33f      	add	r3, pc, #252	; (adr r3, 800a118 <__ieee754_pow+0x3e0>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f7f6 fb0a 	bl	8000638 <__aeabi_dmul>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4650      	mov	r0, sl
 800a02a:	4659      	mov	r1, fp
 800a02c:	f7f6 f94c 	bl	80002c8 <__aeabi_dsub>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4680      	mov	r8, r0
 800a036:	4689      	mov	r9, r1
 800a038:	4630      	mov	r0, r6
 800a03a:	4639      	mov	r1, r7
 800a03c:	f7f6 f946 	bl	80002cc <__adddf3>
 800a040:	2000      	movs	r0, #0
 800a042:	4632      	mov	r2, r6
 800a044:	463b      	mov	r3, r7
 800a046:	4604      	mov	r4, r0
 800a048:	460d      	mov	r5, r1
 800a04a:	f7f6 f93d 	bl	80002c8 <__aeabi_dsub>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4640      	mov	r0, r8
 800a054:	4649      	mov	r1, r9
 800a056:	f7f6 f937 	bl	80002c8 <__aeabi_dsub>
 800a05a:	9b04      	ldr	r3, [sp, #16]
 800a05c:	9a06      	ldr	r2, [sp, #24]
 800a05e:	3b01      	subs	r3, #1
 800a060:	4313      	orrs	r3, r2
 800a062:	4682      	mov	sl, r0
 800a064:	468b      	mov	fp, r1
 800a066:	f040 81e7 	bne.w	800a438 <__ieee754_pow+0x700>
 800a06a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a120 <__ieee754_pow+0x3e8>
 800a06e:	eeb0 8a47 	vmov.f32	s16, s14
 800a072:	eef0 8a67 	vmov.f32	s17, s15
 800a076:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a07a:	2600      	movs	r6, #0
 800a07c:	4632      	mov	r2, r6
 800a07e:	463b      	mov	r3, r7
 800a080:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a084:	f7f6 f920 	bl	80002c8 <__aeabi_dsub>
 800a088:	4622      	mov	r2, r4
 800a08a:	462b      	mov	r3, r5
 800a08c:	f7f6 fad4 	bl	8000638 <__aeabi_dmul>
 800a090:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a094:	4680      	mov	r8, r0
 800a096:	4689      	mov	r9, r1
 800a098:	4650      	mov	r0, sl
 800a09a:	4659      	mov	r1, fp
 800a09c:	f7f6 facc 	bl	8000638 <__aeabi_dmul>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4640      	mov	r0, r8
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	f7f6 f910 	bl	80002cc <__adddf3>
 800a0ac:	4632      	mov	r2, r6
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	4680      	mov	r8, r0
 800a0b2:	4689      	mov	r9, r1
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	f7f6 fabe 	bl	8000638 <__aeabi_dmul>
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4604      	mov	r4, r0
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	f7f6 f900 	bl	80002cc <__adddf3>
 800a0cc:	4b19      	ldr	r3, [pc, #100]	; (800a134 <__ieee754_pow+0x3fc>)
 800a0ce:	4299      	cmp	r1, r3
 800a0d0:	ec45 4b19 	vmov	d9, r4, r5
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	460f      	mov	r7, r1
 800a0d8:	468b      	mov	fp, r1
 800a0da:	f340 82f0 	ble.w	800a6be <__ieee754_pow+0x986>
 800a0de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a0e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a0e6:	4303      	orrs	r3, r0
 800a0e8:	f000 81e4 	beq.w	800a4b4 <__ieee754_pow+0x77c>
 800a0ec:	ec51 0b18 	vmov	r0, r1, d8
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f7f6 fd12 	bl	8000b1c <__aeabi_dcmplt>
 800a0f8:	3800      	subs	r0, #0
 800a0fa:	bf18      	it	ne
 800a0fc:	2001      	movne	r0, #1
 800a0fe:	e72b      	b.n	8009f58 <__ieee754_pow+0x220>
 800a100:	60000000 	.word	0x60000000
 800a104:	3ff71547 	.word	0x3ff71547
 800a108:	f85ddf44 	.word	0xf85ddf44
 800a10c:	3e54ae0b 	.word	0x3e54ae0b
 800a110:	55555555 	.word	0x55555555
 800a114:	3fd55555 	.word	0x3fd55555
 800a118:	652b82fe 	.word	0x652b82fe
 800a11c:	3ff71547 	.word	0x3ff71547
 800a120:	00000000 	.word	0x00000000
 800a124:	bff00000 	.word	0xbff00000
 800a128:	3ff00000 	.word	0x3ff00000
 800a12c:	3fd00000 	.word	0x3fd00000
 800a130:	3fe00000 	.word	0x3fe00000
 800a134:	408fffff 	.word	0x408fffff
 800a138:	4bd5      	ldr	r3, [pc, #852]	; (800a490 <__ieee754_pow+0x758>)
 800a13a:	402b      	ands	r3, r5
 800a13c:	2200      	movs	r2, #0
 800a13e:	b92b      	cbnz	r3, 800a14c <__ieee754_pow+0x414>
 800a140:	4bd4      	ldr	r3, [pc, #848]	; (800a494 <__ieee754_pow+0x75c>)
 800a142:	f7f6 fa79 	bl	8000638 <__aeabi_dmul>
 800a146:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a14a:	460c      	mov	r4, r1
 800a14c:	1523      	asrs	r3, r4, #20
 800a14e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a152:	4413      	add	r3, r2
 800a154:	9305      	str	r3, [sp, #20]
 800a156:	4bd0      	ldr	r3, [pc, #832]	; (800a498 <__ieee754_pow+0x760>)
 800a158:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a15c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a160:	429c      	cmp	r4, r3
 800a162:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a166:	dd08      	ble.n	800a17a <__ieee754_pow+0x442>
 800a168:	4bcc      	ldr	r3, [pc, #816]	; (800a49c <__ieee754_pow+0x764>)
 800a16a:	429c      	cmp	r4, r3
 800a16c:	f340 8162 	ble.w	800a434 <__ieee754_pow+0x6fc>
 800a170:	9b05      	ldr	r3, [sp, #20]
 800a172:	3301      	adds	r3, #1
 800a174:	9305      	str	r3, [sp, #20]
 800a176:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a17a:	2400      	movs	r4, #0
 800a17c:	00e3      	lsls	r3, r4, #3
 800a17e:	9307      	str	r3, [sp, #28]
 800a180:	4bc7      	ldr	r3, [pc, #796]	; (800a4a0 <__ieee754_pow+0x768>)
 800a182:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a186:	ed93 7b00 	vldr	d7, [r3]
 800a18a:	4629      	mov	r1, r5
 800a18c:	ec53 2b17 	vmov	r2, r3, d7
 800a190:	eeb0 9a47 	vmov.f32	s18, s14
 800a194:	eef0 9a67 	vmov.f32	s19, s15
 800a198:	4682      	mov	sl, r0
 800a19a:	f7f6 f895 	bl	80002c8 <__aeabi_dsub>
 800a19e:	4652      	mov	r2, sl
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	460f      	mov	r7, r1
 800a1a4:	462b      	mov	r3, r5
 800a1a6:	ec51 0b19 	vmov	r0, r1, d9
 800a1aa:	f7f6 f88f 	bl	80002cc <__adddf3>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	49bb      	ldr	r1, [pc, #748]	; (800a4a4 <__ieee754_pow+0x76c>)
 800a1b6:	f7f6 fb69 	bl	800088c <__aeabi_ddiv>
 800a1ba:	ec41 0b1a 	vmov	d10, r0, r1
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	4639      	mov	r1, r7
 800a1c6:	f7f6 fa37 	bl	8000638 <__aeabi_dmul>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1d0:	9302      	str	r3, [sp, #8]
 800a1d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a1d6:	46ab      	mov	fp, r5
 800a1d8:	106d      	asrs	r5, r5, #1
 800a1da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a1de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a1e2:	ec41 0b18 	vmov	d8, r0, r1
 800a1e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	4640      	mov	r0, r8
 800a1ee:	4649      	mov	r1, r9
 800a1f0:	4614      	mov	r4, r2
 800a1f2:	461d      	mov	r5, r3
 800a1f4:	f7f6 fa20 	bl	8000638 <__aeabi_dmul>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	4639      	mov	r1, r7
 800a200:	f7f6 f862 	bl	80002c8 <__aeabi_dsub>
 800a204:	ec53 2b19 	vmov	r2, r3, d9
 800a208:	4606      	mov	r6, r0
 800a20a:	460f      	mov	r7, r1
 800a20c:	4620      	mov	r0, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	f7f6 f85a 	bl	80002c8 <__aeabi_dsub>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	4650      	mov	r0, sl
 800a21a:	4659      	mov	r1, fp
 800a21c:	f7f6 f854 	bl	80002c8 <__aeabi_dsub>
 800a220:	4642      	mov	r2, r8
 800a222:	464b      	mov	r3, r9
 800a224:	f7f6 fa08 	bl	8000638 <__aeabi_dmul>
 800a228:	4602      	mov	r2, r0
 800a22a:	460b      	mov	r3, r1
 800a22c:	4630      	mov	r0, r6
 800a22e:	4639      	mov	r1, r7
 800a230:	f7f6 f84a 	bl	80002c8 <__aeabi_dsub>
 800a234:	ec53 2b1a 	vmov	r2, r3, d10
 800a238:	f7f6 f9fe 	bl	8000638 <__aeabi_dmul>
 800a23c:	ec53 2b18 	vmov	r2, r3, d8
 800a240:	ec41 0b19 	vmov	d9, r0, r1
 800a244:	ec51 0b18 	vmov	r0, r1, d8
 800a248:	f7f6 f9f6 	bl	8000638 <__aeabi_dmul>
 800a24c:	a37c      	add	r3, pc, #496	; (adr r3, 800a440 <__ieee754_pow+0x708>)
 800a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a252:	4604      	mov	r4, r0
 800a254:	460d      	mov	r5, r1
 800a256:	f7f6 f9ef 	bl	8000638 <__aeabi_dmul>
 800a25a:	a37b      	add	r3, pc, #492	; (adr r3, 800a448 <__ieee754_pow+0x710>)
 800a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a260:	f7f6 f834 	bl	80002cc <__adddf3>
 800a264:	4622      	mov	r2, r4
 800a266:	462b      	mov	r3, r5
 800a268:	f7f6 f9e6 	bl	8000638 <__aeabi_dmul>
 800a26c:	a378      	add	r3, pc, #480	; (adr r3, 800a450 <__ieee754_pow+0x718>)
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	f7f6 f82b 	bl	80002cc <__adddf3>
 800a276:	4622      	mov	r2, r4
 800a278:	462b      	mov	r3, r5
 800a27a:	f7f6 f9dd 	bl	8000638 <__aeabi_dmul>
 800a27e:	a376      	add	r3, pc, #472	; (adr r3, 800a458 <__ieee754_pow+0x720>)
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	f7f6 f822 	bl	80002cc <__adddf3>
 800a288:	4622      	mov	r2, r4
 800a28a:	462b      	mov	r3, r5
 800a28c:	f7f6 f9d4 	bl	8000638 <__aeabi_dmul>
 800a290:	a373      	add	r3, pc, #460	; (adr r3, 800a460 <__ieee754_pow+0x728>)
 800a292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a296:	f7f6 f819 	bl	80002cc <__adddf3>
 800a29a:	4622      	mov	r2, r4
 800a29c:	462b      	mov	r3, r5
 800a29e:	f7f6 f9cb 	bl	8000638 <__aeabi_dmul>
 800a2a2:	a371      	add	r3, pc, #452	; (adr r3, 800a468 <__ieee754_pow+0x730>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	f7f6 f810 	bl	80002cc <__adddf3>
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	462b      	mov	r3, r5
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f7f6 f9be 	bl	8000638 <__aeabi_dmul>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	4639      	mov	r1, r7
 800a2c4:	f7f6 f9b8 	bl	8000638 <__aeabi_dmul>
 800a2c8:	4642      	mov	r2, r8
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	460d      	mov	r5, r1
 800a2ce:	464b      	mov	r3, r9
 800a2d0:	ec51 0b18 	vmov	r0, r1, d8
 800a2d4:	f7f5 fffa 	bl	80002cc <__adddf3>
 800a2d8:	ec53 2b19 	vmov	r2, r3, d9
 800a2dc:	f7f6 f9ac 	bl	8000638 <__aeabi_dmul>
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	462b      	mov	r3, r5
 800a2e4:	f7f5 fff2 	bl	80002cc <__adddf3>
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	4682      	mov	sl, r0
 800a2ec:	468b      	mov	fp, r1
 800a2ee:	464b      	mov	r3, r9
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	f7f6 f9a0 	bl	8000638 <__aeabi_dmul>
 800a2f8:	4b6b      	ldr	r3, [pc, #428]	; (800a4a8 <__ieee754_pow+0x770>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	460f      	mov	r7, r1
 800a300:	f7f5 ffe4 	bl	80002cc <__adddf3>
 800a304:	4652      	mov	r2, sl
 800a306:	465b      	mov	r3, fp
 800a308:	f7f5 ffe0 	bl	80002cc <__adddf3>
 800a30c:	2000      	movs	r0, #0
 800a30e:	4604      	mov	r4, r0
 800a310:	460d      	mov	r5, r1
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	4640      	mov	r0, r8
 800a318:	4649      	mov	r1, r9
 800a31a:	f7f6 f98d 	bl	8000638 <__aeabi_dmul>
 800a31e:	4b62      	ldr	r3, [pc, #392]	; (800a4a8 <__ieee754_pow+0x770>)
 800a320:	4680      	mov	r8, r0
 800a322:	4689      	mov	r9, r1
 800a324:	2200      	movs	r2, #0
 800a326:	4620      	mov	r0, r4
 800a328:	4629      	mov	r1, r5
 800a32a:	f7f5 ffcd 	bl	80002c8 <__aeabi_dsub>
 800a32e:	4632      	mov	r2, r6
 800a330:	463b      	mov	r3, r7
 800a332:	f7f5 ffc9 	bl	80002c8 <__aeabi_dsub>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4650      	mov	r0, sl
 800a33c:	4659      	mov	r1, fp
 800a33e:	f7f5 ffc3 	bl	80002c8 <__aeabi_dsub>
 800a342:	ec53 2b18 	vmov	r2, r3, d8
 800a346:	f7f6 f977 	bl	8000638 <__aeabi_dmul>
 800a34a:	4622      	mov	r2, r4
 800a34c:	4606      	mov	r6, r0
 800a34e:	460f      	mov	r7, r1
 800a350:	462b      	mov	r3, r5
 800a352:	ec51 0b19 	vmov	r0, r1, d9
 800a356:	f7f6 f96f 	bl	8000638 <__aeabi_dmul>
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	4630      	mov	r0, r6
 800a360:	4639      	mov	r1, r7
 800a362:	f7f5 ffb3 	bl	80002cc <__adddf3>
 800a366:	4606      	mov	r6, r0
 800a368:	460f      	mov	r7, r1
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4640      	mov	r0, r8
 800a370:	4649      	mov	r1, r9
 800a372:	f7f5 ffab 	bl	80002cc <__adddf3>
 800a376:	a33e      	add	r3, pc, #248	; (adr r3, 800a470 <__ieee754_pow+0x738>)
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	2000      	movs	r0, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	460d      	mov	r5, r1
 800a382:	f7f6 f959 	bl	8000638 <__aeabi_dmul>
 800a386:	4642      	mov	r2, r8
 800a388:	ec41 0b18 	vmov	d8, r0, r1
 800a38c:	464b      	mov	r3, r9
 800a38e:	4620      	mov	r0, r4
 800a390:	4629      	mov	r1, r5
 800a392:	f7f5 ff99 	bl	80002c8 <__aeabi_dsub>
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	4630      	mov	r0, r6
 800a39c:	4639      	mov	r1, r7
 800a39e:	f7f5 ff93 	bl	80002c8 <__aeabi_dsub>
 800a3a2:	a335      	add	r3, pc, #212	; (adr r3, 800a478 <__ieee754_pow+0x740>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	f7f6 f946 	bl	8000638 <__aeabi_dmul>
 800a3ac:	a334      	add	r3, pc, #208	; (adr r3, 800a480 <__ieee754_pow+0x748>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	460f      	mov	r7, r1
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	f7f6 f93d 	bl	8000638 <__aeabi_dmul>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	f7f5 ff81 	bl	80002cc <__adddf3>
 800a3ca:	9a07      	ldr	r2, [sp, #28]
 800a3cc:	4b37      	ldr	r3, [pc, #220]	; (800a4ac <__ieee754_pow+0x774>)
 800a3ce:	4413      	add	r3, r2
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	f7f5 ff7a 	bl	80002cc <__adddf3>
 800a3d8:	4682      	mov	sl, r0
 800a3da:	9805      	ldr	r0, [sp, #20]
 800a3dc:	468b      	mov	fp, r1
 800a3de:	f7f6 f8c1 	bl	8000564 <__aeabi_i2d>
 800a3e2:	9a07      	ldr	r2, [sp, #28]
 800a3e4:	4b32      	ldr	r3, [pc, #200]	; (800a4b0 <__ieee754_pow+0x778>)
 800a3e6:	4413      	add	r3, r2
 800a3e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	460f      	mov	r7, r1
 800a3f0:	4652      	mov	r2, sl
 800a3f2:	465b      	mov	r3, fp
 800a3f4:	ec51 0b18 	vmov	r0, r1, d8
 800a3f8:	f7f5 ff68 	bl	80002cc <__adddf3>
 800a3fc:	4642      	mov	r2, r8
 800a3fe:	464b      	mov	r3, r9
 800a400:	f7f5 ff64 	bl	80002cc <__adddf3>
 800a404:	4632      	mov	r2, r6
 800a406:	463b      	mov	r3, r7
 800a408:	f7f5 ff60 	bl	80002cc <__adddf3>
 800a40c:	2000      	movs	r0, #0
 800a40e:	4632      	mov	r2, r6
 800a410:	463b      	mov	r3, r7
 800a412:	4604      	mov	r4, r0
 800a414:	460d      	mov	r5, r1
 800a416:	f7f5 ff57 	bl	80002c8 <__aeabi_dsub>
 800a41a:	4642      	mov	r2, r8
 800a41c:	464b      	mov	r3, r9
 800a41e:	f7f5 ff53 	bl	80002c8 <__aeabi_dsub>
 800a422:	ec53 2b18 	vmov	r2, r3, d8
 800a426:	f7f5 ff4f 	bl	80002c8 <__aeabi_dsub>
 800a42a:	4602      	mov	r2, r0
 800a42c:	460b      	mov	r3, r1
 800a42e:	4650      	mov	r0, sl
 800a430:	4659      	mov	r1, fp
 800a432:	e610      	b.n	800a056 <__ieee754_pow+0x31e>
 800a434:	2401      	movs	r4, #1
 800a436:	e6a1      	b.n	800a17c <__ieee754_pow+0x444>
 800a438:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a488 <__ieee754_pow+0x750>
 800a43c:	e617      	b.n	800a06e <__ieee754_pow+0x336>
 800a43e:	bf00      	nop
 800a440:	4a454eef 	.word	0x4a454eef
 800a444:	3fca7e28 	.word	0x3fca7e28
 800a448:	93c9db65 	.word	0x93c9db65
 800a44c:	3fcd864a 	.word	0x3fcd864a
 800a450:	a91d4101 	.word	0xa91d4101
 800a454:	3fd17460 	.word	0x3fd17460
 800a458:	518f264d 	.word	0x518f264d
 800a45c:	3fd55555 	.word	0x3fd55555
 800a460:	db6fabff 	.word	0xdb6fabff
 800a464:	3fdb6db6 	.word	0x3fdb6db6
 800a468:	33333303 	.word	0x33333303
 800a46c:	3fe33333 	.word	0x3fe33333
 800a470:	e0000000 	.word	0xe0000000
 800a474:	3feec709 	.word	0x3feec709
 800a478:	dc3a03fd 	.word	0xdc3a03fd
 800a47c:	3feec709 	.word	0x3feec709
 800a480:	145b01f5 	.word	0x145b01f5
 800a484:	be3e2fe0 	.word	0xbe3e2fe0
 800a488:	00000000 	.word	0x00000000
 800a48c:	3ff00000 	.word	0x3ff00000
 800a490:	7ff00000 	.word	0x7ff00000
 800a494:	43400000 	.word	0x43400000
 800a498:	0003988e 	.word	0x0003988e
 800a49c:	000bb679 	.word	0x000bb679
 800a4a0:	0800ad58 	.word	0x0800ad58
 800a4a4:	3ff00000 	.word	0x3ff00000
 800a4a8:	40080000 	.word	0x40080000
 800a4ac:	0800ad78 	.word	0x0800ad78
 800a4b0:	0800ad68 	.word	0x0800ad68
 800a4b4:	a3b3      	add	r3, pc, #716	; (adr r3, 800a784 <__ieee754_pow+0xa4c>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	4640      	mov	r0, r8
 800a4bc:	4649      	mov	r1, r9
 800a4be:	f7f5 ff05 	bl	80002cc <__adddf3>
 800a4c2:	4622      	mov	r2, r4
 800a4c4:	ec41 0b1a 	vmov	d10, r0, r1
 800a4c8:	462b      	mov	r3, r5
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	f7f5 fefb 	bl	80002c8 <__aeabi_dsub>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	ec51 0b1a 	vmov	r0, r1, d10
 800a4da:	f7f6 fb3d 	bl	8000b58 <__aeabi_dcmpgt>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	f47f ae04 	bne.w	800a0ec <__ieee754_pow+0x3b4>
 800a4e4:	4aa2      	ldr	r2, [pc, #648]	; (800a770 <__ieee754_pow+0xa38>)
 800a4e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	f340 8107 	ble.w	800a6fe <__ieee754_pow+0x9c6>
 800a4f0:	151b      	asrs	r3, r3, #20
 800a4f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a4f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a4fa:	fa4a fa03 	asr.w	sl, sl, r3
 800a4fe:	44da      	add	sl, fp
 800a500:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a504:	489b      	ldr	r0, [pc, #620]	; (800a774 <__ieee754_pow+0xa3c>)
 800a506:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a50a:	4108      	asrs	r0, r1
 800a50c:	ea00 030a 	and.w	r3, r0, sl
 800a510:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a514:	f1c1 0114 	rsb	r1, r1, #20
 800a518:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a51c:	fa4a fa01 	asr.w	sl, sl, r1
 800a520:	f1bb 0f00 	cmp.w	fp, #0
 800a524:	f04f 0200 	mov.w	r2, #0
 800a528:	4620      	mov	r0, r4
 800a52a:	4629      	mov	r1, r5
 800a52c:	bfb8      	it	lt
 800a52e:	f1ca 0a00 	rsblt	sl, sl, #0
 800a532:	f7f5 fec9 	bl	80002c8 <__aeabi_dsub>
 800a536:	ec41 0b19 	vmov	d9, r0, r1
 800a53a:	4642      	mov	r2, r8
 800a53c:	464b      	mov	r3, r9
 800a53e:	ec51 0b19 	vmov	r0, r1, d9
 800a542:	f7f5 fec3 	bl	80002cc <__adddf3>
 800a546:	a37a      	add	r3, pc, #488	; (adr r3, 800a730 <__ieee754_pow+0x9f8>)
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	2000      	movs	r0, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	460d      	mov	r5, r1
 800a552:	f7f6 f871 	bl	8000638 <__aeabi_dmul>
 800a556:	ec53 2b19 	vmov	r2, r3, d9
 800a55a:	4606      	mov	r6, r0
 800a55c:	460f      	mov	r7, r1
 800a55e:	4620      	mov	r0, r4
 800a560:	4629      	mov	r1, r5
 800a562:	f7f5 feb1 	bl	80002c8 <__aeabi_dsub>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4640      	mov	r0, r8
 800a56c:	4649      	mov	r1, r9
 800a56e:	f7f5 feab 	bl	80002c8 <__aeabi_dsub>
 800a572:	a371      	add	r3, pc, #452	; (adr r3, 800a738 <__ieee754_pow+0xa00>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f7f6 f85e 	bl	8000638 <__aeabi_dmul>
 800a57c:	a370      	add	r3, pc, #448	; (adr r3, 800a740 <__ieee754_pow+0xa08>)
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	4680      	mov	r8, r0
 800a584:	4689      	mov	r9, r1
 800a586:	4620      	mov	r0, r4
 800a588:	4629      	mov	r1, r5
 800a58a:	f7f6 f855 	bl	8000638 <__aeabi_dmul>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	4640      	mov	r0, r8
 800a594:	4649      	mov	r1, r9
 800a596:	f7f5 fe99 	bl	80002cc <__adddf3>
 800a59a:	4604      	mov	r4, r0
 800a59c:	460d      	mov	r5, r1
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	4639      	mov	r1, r7
 800a5a6:	f7f5 fe91 	bl	80002cc <__adddf3>
 800a5aa:	4632      	mov	r2, r6
 800a5ac:	463b      	mov	r3, r7
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	4689      	mov	r9, r1
 800a5b2:	f7f5 fe89 	bl	80002c8 <__aeabi_dsub>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	4629      	mov	r1, r5
 800a5be:	f7f5 fe83 	bl	80002c8 <__aeabi_dsub>
 800a5c2:	4642      	mov	r2, r8
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	460f      	mov	r7, r1
 800a5c8:	464b      	mov	r3, r9
 800a5ca:	4640      	mov	r0, r8
 800a5cc:	4649      	mov	r1, r9
 800a5ce:	f7f6 f833 	bl	8000638 <__aeabi_dmul>
 800a5d2:	a35d      	add	r3, pc, #372	; (adr r3, 800a748 <__ieee754_pow+0xa10>)
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	4604      	mov	r4, r0
 800a5da:	460d      	mov	r5, r1
 800a5dc:	f7f6 f82c 	bl	8000638 <__aeabi_dmul>
 800a5e0:	a35b      	add	r3, pc, #364	; (adr r3, 800a750 <__ieee754_pow+0xa18>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f5 fe6f 	bl	80002c8 <__aeabi_dsub>
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	f7f6 f823 	bl	8000638 <__aeabi_dmul>
 800a5f2:	a359      	add	r3, pc, #356	; (adr r3, 800a758 <__ieee754_pow+0xa20>)
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	f7f5 fe68 	bl	80002cc <__adddf3>
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	462b      	mov	r3, r5
 800a600:	f7f6 f81a 	bl	8000638 <__aeabi_dmul>
 800a604:	a356      	add	r3, pc, #344	; (adr r3, 800a760 <__ieee754_pow+0xa28>)
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	f7f5 fe5d 	bl	80002c8 <__aeabi_dsub>
 800a60e:	4622      	mov	r2, r4
 800a610:	462b      	mov	r3, r5
 800a612:	f7f6 f811 	bl	8000638 <__aeabi_dmul>
 800a616:	a354      	add	r3, pc, #336	; (adr r3, 800a768 <__ieee754_pow+0xa30>)
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	f7f5 fe56 	bl	80002cc <__adddf3>
 800a620:	4622      	mov	r2, r4
 800a622:	462b      	mov	r3, r5
 800a624:	f7f6 f808 	bl	8000638 <__aeabi_dmul>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4640      	mov	r0, r8
 800a62e:	4649      	mov	r1, r9
 800a630:	f7f5 fe4a 	bl	80002c8 <__aeabi_dsub>
 800a634:	4604      	mov	r4, r0
 800a636:	460d      	mov	r5, r1
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4640      	mov	r0, r8
 800a63e:	4649      	mov	r1, r9
 800a640:	f7f5 fffa 	bl	8000638 <__aeabi_dmul>
 800a644:	2200      	movs	r2, #0
 800a646:	ec41 0b19 	vmov	d9, r0, r1
 800a64a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a64e:	4620      	mov	r0, r4
 800a650:	4629      	mov	r1, r5
 800a652:	f7f5 fe39 	bl	80002c8 <__aeabi_dsub>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	ec51 0b19 	vmov	r0, r1, d9
 800a65e:	f7f6 f915 	bl	800088c <__aeabi_ddiv>
 800a662:	4632      	mov	r2, r6
 800a664:	4604      	mov	r4, r0
 800a666:	460d      	mov	r5, r1
 800a668:	463b      	mov	r3, r7
 800a66a:	4640      	mov	r0, r8
 800a66c:	4649      	mov	r1, r9
 800a66e:	f7f5 ffe3 	bl	8000638 <__aeabi_dmul>
 800a672:	4632      	mov	r2, r6
 800a674:	463b      	mov	r3, r7
 800a676:	f7f5 fe29 	bl	80002cc <__adddf3>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	4620      	mov	r0, r4
 800a680:	4629      	mov	r1, r5
 800a682:	f7f5 fe21 	bl	80002c8 <__aeabi_dsub>
 800a686:	4642      	mov	r2, r8
 800a688:	464b      	mov	r3, r9
 800a68a:	f7f5 fe1d 	bl	80002c8 <__aeabi_dsub>
 800a68e:	460b      	mov	r3, r1
 800a690:	4602      	mov	r2, r0
 800a692:	4939      	ldr	r1, [pc, #228]	; (800a778 <__ieee754_pow+0xa40>)
 800a694:	2000      	movs	r0, #0
 800a696:	f7f5 fe17 	bl	80002c8 <__aeabi_dsub>
 800a69a:	ec41 0b10 	vmov	d0, r0, r1
 800a69e:	ee10 3a90 	vmov	r3, s1
 800a6a2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a6a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6aa:	da2b      	bge.n	800a704 <__ieee754_pow+0x9cc>
 800a6ac:	4650      	mov	r0, sl
 800a6ae:	f000 f86f 	bl	800a790 <scalbn>
 800a6b2:	ec51 0b10 	vmov	r0, r1, d0
 800a6b6:	ec53 2b18 	vmov	r2, r3, d8
 800a6ba:	f7ff bbee 	b.w	8009e9a <__ieee754_pow+0x162>
 800a6be:	4b2f      	ldr	r3, [pc, #188]	; (800a77c <__ieee754_pow+0xa44>)
 800a6c0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a6c4:	429e      	cmp	r6, r3
 800a6c6:	f77f af0d 	ble.w	800a4e4 <__ieee754_pow+0x7ac>
 800a6ca:	4b2d      	ldr	r3, [pc, #180]	; (800a780 <__ieee754_pow+0xa48>)
 800a6cc:	440b      	add	r3, r1
 800a6ce:	4303      	orrs	r3, r0
 800a6d0:	d009      	beq.n	800a6e6 <__ieee754_pow+0x9ae>
 800a6d2:	ec51 0b18 	vmov	r0, r1, d8
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f7f6 fa1f 	bl	8000b1c <__aeabi_dcmplt>
 800a6de:	3800      	subs	r0, #0
 800a6e0:	bf18      	it	ne
 800a6e2:	2001      	movne	r0, #1
 800a6e4:	e448      	b.n	8009f78 <__ieee754_pow+0x240>
 800a6e6:	4622      	mov	r2, r4
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	f7f5 fded 	bl	80002c8 <__aeabi_dsub>
 800a6ee:	4642      	mov	r2, r8
 800a6f0:	464b      	mov	r3, r9
 800a6f2:	f7f6 fa27 	bl	8000b44 <__aeabi_dcmpge>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f43f aef4 	beq.w	800a4e4 <__ieee754_pow+0x7ac>
 800a6fc:	e7e9      	b.n	800a6d2 <__ieee754_pow+0x99a>
 800a6fe:	f04f 0a00 	mov.w	sl, #0
 800a702:	e71a      	b.n	800a53a <__ieee754_pow+0x802>
 800a704:	ec51 0b10 	vmov	r0, r1, d0
 800a708:	4619      	mov	r1, r3
 800a70a:	e7d4      	b.n	800a6b6 <__ieee754_pow+0x97e>
 800a70c:	491a      	ldr	r1, [pc, #104]	; (800a778 <__ieee754_pow+0xa40>)
 800a70e:	2000      	movs	r0, #0
 800a710:	f7ff bb31 	b.w	8009d76 <__ieee754_pow+0x3e>
 800a714:	2000      	movs	r0, #0
 800a716:	2100      	movs	r1, #0
 800a718:	f7ff bb2d 	b.w	8009d76 <__ieee754_pow+0x3e>
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	f7ff bb29 	b.w	8009d76 <__ieee754_pow+0x3e>
 800a724:	9204      	str	r2, [sp, #16]
 800a726:	f7ff bb7b 	b.w	8009e20 <__ieee754_pow+0xe8>
 800a72a:	2300      	movs	r3, #0
 800a72c:	f7ff bb65 	b.w	8009dfa <__ieee754_pow+0xc2>
 800a730:	00000000 	.word	0x00000000
 800a734:	3fe62e43 	.word	0x3fe62e43
 800a738:	fefa39ef 	.word	0xfefa39ef
 800a73c:	3fe62e42 	.word	0x3fe62e42
 800a740:	0ca86c39 	.word	0x0ca86c39
 800a744:	be205c61 	.word	0xbe205c61
 800a748:	72bea4d0 	.word	0x72bea4d0
 800a74c:	3e663769 	.word	0x3e663769
 800a750:	c5d26bf1 	.word	0xc5d26bf1
 800a754:	3ebbbd41 	.word	0x3ebbbd41
 800a758:	af25de2c 	.word	0xaf25de2c
 800a75c:	3f11566a 	.word	0x3f11566a
 800a760:	16bebd93 	.word	0x16bebd93
 800a764:	3f66c16c 	.word	0x3f66c16c
 800a768:	5555553e 	.word	0x5555553e
 800a76c:	3fc55555 	.word	0x3fc55555
 800a770:	3fe00000 	.word	0x3fe00000
 800a774:	fff00000 	.word	0xfff00000
 800a778:	3ff00000 	.word	0x3ff00000
 800a77c:	4090cbff 	.word	0x4090cbff
 800a780:	3f6f3400 	.word	0x3f6f3400
 800a784:	652b82fe 	.word	0x652b82fe
 800a788:	3c971547 	.word	0x3c971547
 800a78c:	00000000 	.word	0x00000000

0800a790 <scalbn>:
 800a790:	b570      	push	{r4, r5, r6, lr}
 800a792:	ec55 4b10 	vmov	r4, r5, d0
 800a796:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a79a:	4606      	mov	r6, r0
 800a79c:	462b      	mov	r3, r5
 800a79e:	b999      	cbnz	r1, 800a7c8 <scalbn+0x38>
 800a7a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a7a4:	4323      	orrs	r3, r4
 800a7a6:	d03f      	beq.n	800a828 <scalbn+0x98>
 800a7a8:	4b35      	ldr	r3, [pc, #212]	; (800a880 <scalbn+0xf0>)
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	ee10 0a10 	vmov	r0, s0
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f7f5 ff41 	bl	8000638 <__aeabi_dmul>
 800a7b6:	4b33      	ldr	r3, [pc, #204]	; (800a884 <scalbn+0xf4>)
 800a7b8:	429e      	cmp	r6, r3
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460d      	mov	r5, r1
 800a7be:	da10      	bge.n	800a7e2 <scalbn+0x52>
 800a7c0:	a327      	add	r3, pc, #156	; (adr r3, 800a860 <scalbn+0xd0>)
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	e01f      	b.n	800a808 <scalbn+0x78>
 800a7c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a7cc:	4291      	cmp	r1, r2
 800a7ce:	d10c      	bne.n	800a7ea <scalbn+0x5a>
 800a7d0:	ee10 2a10 	vmov	r2, s0
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	f7f5 fd78 	bl	80002cc <__adddf3>
 800a7dc:	4604      	mov	r4, r0
 800a7de:	460d      	mov	r5, r1
 800a7e0:	e022      	b.n	800a828 <scalbn+0x98>
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a7e8:	3936      	subs	r1, #54	; 0x36
 800a7ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a7ee:	4296      	cmp	r6, r2
 800a7f0:	dd0d      	ble.n	800a80e <scalbn+0x7e>
 800a7f2:	2d00      	cmp	r5, #0
 800a7f4:	a11c      	add	r1, pc, #112	; (adr r1, 800a868 <scalbn+0xd8>)
 800a7f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7fa:	da02      	bge.n	800a802 <scalbn+0x72>
 800a7fc:	a11c      	add	r1, pc, #112	; (adr r1, 800a870 <scalbn+0xe0>)
 800a7fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a802:	a319      	add	r3, pc, #100	; (adr r3, 800a868 <scalbn+0xd8>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	f7f5 ff16 	bl	8000638 <__aeabi_dmul>
 800a80c:	e7e6      	b.n	800a7dc <scalbn+0x4c>
 800a80e:	1872      	adds	r2, r6, r1
 800a810:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a814:	428a      	cmp	r2, r1
 800a816:	dcec      	bgt.n	800a7f2 <scalbn+0x62>
 800a818:	2a00      	cmp	r2, #0
 800a81a:	dd08      	ble.n	800a82e <scalbn+0x9e>
 800a81c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a820:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a824:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a828:	ec45 4b10 	vmov	d0, r4, r5
 800a82c:	bd70      	pop	{r4, r5, r6, pc}
 800a82e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a832:	da08      	bge.n	800a846 <scalbn+0xb6>
 800a834:	2d00      	cmp	r5, #0
 800a836:	a10a      	add	r1, pc, #40	; (adr r1, 800a860 <scalbn+0xd0>)
 800a838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a83c:	dac0      	bge.n	800a7c0 <scalbn+0x30>
 800a83e:	a10e      	add	r1, pc, #56	; (adr r1, 800a878 <scalbn+0xe8>)
 800a840:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a844:	e7bc      	b.n	800a7c0 <scalbn+0x30>
 800a846:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a84a:	3236      	adds	r2, #54	; 0x36
 800a84c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a850:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a854:	4620      	mov	r0, r4
 800a856:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <scalbn+0xf8>)
 800a858:	2200      	movs	r2, #0
 800a85a:	e7d5      	b.n	800a808 <scalbn+0x78>
 800a85c:	f3af 8000 	nop.w
 800a860:	c2f8f359 	.word	0xc2f8f359
 800a864:	01a56e1f 	.word	0x01a56e1f
 800a868:	8800759c 	.word	0x8800759c
 800a86c:	7e37e43c 	.word	0x7e37e43c
 800a870:	8800759c 	.word	0x8800759c
 800a874:	fe37e43c 	.word	0xfe37e43c
 800a878:	c2f8f359 	.word	0xc2f8f359
 800a87c:	81a56e1f 	.word	0x81a56e1f
 800a880:	43500000 	.word	0x43500000
 800a884:	ffff3cb0 	.word	0xffff3cb0
 800a888:	3c900000 	.word	0x3c900000

0800a88c <with_errno>:
 800a88c:	b570      	push	{r4, r5, r6, lr}
 800a88e:	4604      	mov	r4, r0
 800a890:	460d      	mov	r5, r1
 800a892:	4616      	mov	r6, r2
 800a894:	f7fc ffee 	bl	8007874 <__errno>
 800a898:	4629      	mov	r1, r5
 800a89a:	6006      	str	r6, [r0, #0]
 800a89c:	4620      	mov	r0, r4
 800a89e:	bd70      	pop	{r4, r5, r6, pc}

0800a8a0 <xflow>:
 800a8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8a2:	4614      	mov	r4, r2
 800a8a4:	461d      	mov	r5, r3
 800a8a6:	b108      	cbz	r0, 800a8ac <xflow+0xc>
 800a8a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a8ac:	e9cd 2300 	strd	r2, r3, [sp]
 800a8b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	f7f5 febe 	bl	8000638 <__aeabi_dmul>
 800a8bc:	2222      	movs	r2, #34	; 0x22
 800a8be:	b003      	add	sp, #12
 800a8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8c4:	f7ff bfe2 	b.w	800a88c <with_errno>

0800a8c8 <__math_uflow>:
 800a8c8:	b508      	push	{r3, lr}
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a8d0:	f7ff ffe6 	bl	800a8a0 <xflow>
 800a8d4:	ec41 0b10 	vmov	d0, r0, r1
 800a8d8:	bd08      	pop	{r3, pc}

0800a8da <__math_oflow>:
 800a8da:	b508      	push	{r3, lr}
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a8e2:	f7ff ffdd 	bl	800a8a0 <xflow>
 800a8e6:	ec41 0b10 	vmov	d0, r0, r1
 800a8ea:	bd08      	pop	{r3, pc}

0800a8ec <_init>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr

0800a8f8 <_fini>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	bf00      	nop
 800a8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fe:	bc08      	pop	{r3}
 800a900:	469e      	mov	lr, r3
 800a902:	4770      	bx	lr
