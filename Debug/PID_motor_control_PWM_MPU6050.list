
PID_motor_control_PWM_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08009f08  08009f08  00019f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a338  0800a338  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800a338  0800a338  0001a338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a340  0800a340  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a340  0800a340  0001a340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a344  0800a344  0001a344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800a348  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000278  0800a5c0  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  0800a5c0  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014511  00000000  00000000  000202eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d63  00000000  00000000  000347fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00037560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8d  00000000  00000000  000387d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003fc6  00000000  00000000  00039665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001863e  00000000  00000000  0003d62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d49  00000000  00000000  00055c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fe4  00000000  00000000  001389b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0013e998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000278 	.word	0x20000278
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009eec 	.word	0x08009eec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000027c 	.word	0x2000027c
 800020c:	08009eec 	.word	0x08009eec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b970 	b.w	8000f20 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0xe2>
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	b143      	cbz	r3, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c78:	f1c3 0220 	rsb	r2, r3, #32
 8000c7c:	409f      	lsls	r7, r3
 8000c7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	409c      	lsls	r4, r3
 8000c86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8a:	fa1f f58c 	uxth.w	r5, ip
 8000c8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c92:	0c22      	lsrs	r2, r4, #16
 8000c94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c9c:	fb01 f005 	mul.w	r0, r1, r5
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cac:	f080 811c 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f240 8119 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4462      	add	r2, ip
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cca:	fb00 f505 	mul.w	r5, r0, r5
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x90>
 8000cd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x294>
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x294>
 8000ce4:	4464      	add	r4, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11e      	cbz	r6, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40dc      	lsrs	r4, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0xbc>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80ed 	beq.w	8000ee2 <__udivmoddi4+0x28a>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d149      	bne.n	8000db0 <__udivmoddi4+0x158>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0xce>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80f8 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0203 	sbc.w	r2, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0e2      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	e9c6 4700 	strd	r4, r7, [r6]
 8000d38:	e7df      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xe6>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8090 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d58:	fb07 2015 	mls	r0, r7, r5, r2
 8000d5c:	0c22      	lsrs	r2, r4, #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb0e f005 	mul.w	r0, lr, r5
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2b8>
 8000d7a:	4645      	mov	r5, r8
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d84:	fb07 2210 	mls	r2, r7, r0, r2
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x14e>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x14c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2c2>
 8000da4:	4610      	mov	r0, r2
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dae:	e79f      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000db0:	f1c1 0720 	rsb	r7, r1, #32
 8000db4:	408b      	lsls	r3, r1
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc6:	40fd      	lsrs	r5, r7
 8000dc8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dda:	0c1c      	lsrs	r4, r3, #16
 8000ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de0:	fb08 f50e 	mul.w	r5, r8, lr
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	fa00 f001 	lsl.w	r0, r0, r1
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2b4>
 8000dfc:	42a5      	cmp	r5, r4
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2b4>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4464      	add	r4, ip
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	b29d      	uxth	r5, r3
 8000e0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e10:	fb09 4413 	mls	r4, r9, r3, r4
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fba3 9502 	umull	r9, r5, r3, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46ae      	mov	lr, r5
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x29c>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x298>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x208>
 8000e4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40ca      	lsrs	r2, r1
 8000e58:	40cc      	lsrs	r4, r1
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f1c3 0120 	rsb	r1, r3, #32
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	fa20 f201 	lsr.w	r2, r0, r1
 8000e74:	fa25 f101 	lsr.w	r1, r5, r1
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e92:	fb00 f50e 	mul.w	r5, r0, lr
 8000e96:	428d      	cmp	r5, r1
 8000e98:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x258>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000ea8:	428d      	cmp	r5, r1
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x282>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0xfc>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e708      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000ee8:	4639      	mov	r1, r7
 8000eea:	e6e6      	b.n	8000cba <__udivmoddi4+0x62>
 8000eec:	4610      	mov	r0, r2
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x90>
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000efc:	3b01      	subs	r3, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000f00:	4645      	mov	r5, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x282>
 8000f04:	462b      	mov	r3, r5
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x258>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f10:	3d02      	subs	r5, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e70a      	b.n	8000d30 <__udivmoddi4+0xd8>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x14e>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <_write>:
	  ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
	  HAL_ADC_Stop(&hadc1);
}

int _write(int file, char *ptr, int len)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	4804      	ldr	r0, [pc, #16]	; (8000f4c <_write+0x28>)
 8000f3c:	f004 ff96 	bl	8005e6c <HAL_UART_Transmit>
	return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200003d8 	.word	0x200003d8

08000f50 <set_PID_range>:

void	set_PID_range(double *MIN_PID_VALUE, double *MAX_PID_VALUE, double dt, double kp, double ki, double kd)
{
 8000f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f54:	b094      	sub	sp, #80	; 0x50
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6278      	str	r0, [r7, #36]	; 0x24
 8000f5a:	6239      	str	r1, [r7, #32]
 8000f5c:	ed87 0b06 	vstr	d0, [r7, #24]
 8000f60:	ed87 1b04 	vstr	d1, [r7, #16]
 8000f64:	ed87 2b02 	vstr	d2, [r7, #8]
 8000f68:	ed87 3b00 	vstr	d3, [r7]
    double error = 90;
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b2e      	ldr	r3, [pc, #184]	; (800102c <set_PID_range+0xdc>)
 8000f72:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double *integral = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
//    double D = kd * (error - prev_error) / dt;
//
//    prev_error = error;
//
//    double output = P + I + D;
    double P = kp * error;
 8000f7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000f7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f82:	f7ff fb59 	bl	8000638 <__aeabi_dmul>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    //    double I = ki * (*previous_error + error) * dt;
        *integral += ki * error;
 8000f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8000f94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000f98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f9c:	f7ff fb4c 	bl	8000638 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	4649      	mov	r1, r9
 8000fa8:	f7ff f990 	bl	80002cc <__adddf3>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000fb2:	e9c1 2300 	strd	r2, r3, [r1]
    //    double I = ki * error * dt;
    //    double D = kd * (error -  *previous_error) / dt;
        double D = kd * (error - prev_error);
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <set_PID_range+0xe0>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000fc0:	f7ff f982 	bl	80002c8 <__aeabi_dsub>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fcc:	f7ff fb34 	bl	8000638 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        prev_error = error;
 8000fd8:	4915      	ldr	r1, [pc, #84]	; (8001030 <set_PID_range+0xe0>)
 8000fda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000fde:	e9c1 2300 	strd	r2, r3, [r1]
//        *prev_input = angle;

        double output = P + *integral - D;
 8000fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000fec:	f7ff f96e 	bl	80002cc <__adddf3>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ffc:	f7ff f964 	bl	80002c8 <__aeabi_dsub>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	*MAX_PID_VALUE = output;
 8001008:	6a39      	ldr	r1, [r7, #32]
 800100a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800100e:	e9c1 2300 	strd	r2, r3, [r1]
	*MIN_PID_VALUE = -output;
 8001012:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001016:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001020:	bf00      	nop
 8001022:	3750      	adds	r7, #80	; 0x50
 8001024:	46bd      	mov	sp, r7
 8001026:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800102a:	bf00      	nop
 800102c:	40568000 	.word	0x40568000
 8001030:	20000440 	.word	0x20000440

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b0b6      	sub	sp, #216	; 0xd8
 8001038:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f001 f98b 	bl	8002354 <HAL_Init>
  /* USER CODE BEGIN Init */
  MPU6050_t mpu;
  Angle_t	angle;
  double	pot_P_value, pot_I_value, pot_D_value;

  double	dt = 0.0;
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
  uint32_t	start_time = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

  double integral = 0.0;
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double previous_error;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f8b4 	bl	80011c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 fa5e 	bl	8001520 <MX_GPIO_Init>
  MX_DMA_Init();
 8001064:	f000 fa3c 	bl	80014e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001068:	f000 fa10 	bl	800148c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800106c:	f000 f9b6 	bl	80013dc <MX_TIM2_Init>
  MX_ADC1_Init();
 8001070:	f000 f918 	bl	80012a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001074:	f000 f984 	bl	8001380 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_Init(GPIOA, GPIO_PIN_9, GPIO_MODE_OUTPUT_PP);

  while (MPU6050_Init(&hi2c1) == 1);
 8001078:	bf00      	nop
 800107a:	484a      	ldr	r0, [pc, #296]	; (80011a4 <main+0x170>)
 800107c:	f000 fad8 	bl	8001630 <MPU6050_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d0f9      	beq.n	800107a <main+0x46>
//  PID_SetSampleTime(&t_PID, 1);
//  PID_SetOutputLimits(&t_PID, -255, 255);

//  PID1(setpoint, setpoint, 0, dt, 0, 0, 0);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001086:	2108      	movs	r1, #8
 8001088:	4847      	ldr	r0, [pc, #284]	; (80011a8 <main+0x174>)
 800108a:	f004 fa17 	bl	80054bc <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001094:	4845      	ldr	r0, [pc, #276]	; (80011ac <main+0x178>)
 8001096:	f002 fb9b 	bl	80037d0 <HAL_GPIO_WritePin>
//	  read_potentiometers_values();

//	  pot_P_value = map1(ADC_VAL[0], 0, 4095, 0, 5, 0.1);
//	  pot_I_value = map1(ADC_VAL[1], 0, 4095, 0, 10, 0.1);
//	  pot_D_value = map1(ADC_VAL[2], 0, 4095, 0, 2, 0.01);
	  pot_P_value = 600;
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <main+0x17c>)
 80010a0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	  pot_I_value = 0.5;
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <main+0x180>)
 80010aa:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	  pot_D_value = 0;
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	  MPU6050_Read_Accel(&hi2c1, &mpu);
 80010ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010be:	4619      	mov	r1, r3
 80010c0:	4838      	ldr	r0, [pc, #224]	; (80011a4 <main+0x170>)
 80010c2:	f000 fb05 	bl	80016d0 <MPU6050_Read_Accel>
//	  CalculateAccAngle(&angle, &mpu);
	  input = (int)mpu.KalmanAngleX;
 80010c6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fd63 	bl	8000b98 <__aeabi_d2iz>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa45 	bl	8000564 <__aeabi_i2d>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4936      	ldr	r1, [pc, #216]	; (80011b8 <main+0x184>)
 80010e0:	e9c1 2300 	strd	r2, r3, [r1]
//
//	  uint32_t current_time = HAL_GetTick();
//	  dt = (current_time - start_time) / 1000.0;

//	  printf("%f\t", dt);
	  double output1 = PID1(input, setpoint, &previous_error, &prev_input, &integral, dt, pot_P_value, pot_I_value, pot_D_value);
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <main+0x184>)
 80010e6:	ed93 7b00 	vldr	d7, [r3]
 80010ea:	4b34      	ldr	r3, [pc, #208]	; (80011bc <main+0x188>)
 80010ec:	ed93 6b00 	vldr	d6, [r3]
 80010f0:	f107 0210 	add.w	r2, r7, #16
 80010f4:	4639      	mov	r1, r7
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	ed97 5b2a 	vldr	d5, [r7, #168]	; 0xa8
 80010fe:	ed97 4b2c 	vldr	d4, [r7, #176]	; 0xb0
 8001102:	ed97 3b2e 	vldr	d3, [r7, #184]	; 0xb8
 8001106:	ed97 2b32 	vldr	d2, [r7, #200]	; 0xc8
 800110a:	4618      	mov	r0, r3
 800110c:	eeb0 1a46 	vmov.f32	s2, s12
 8001110:	eef0 1a66 	vmov.f32	s3, s13
 8001114:	eeb0 0a47 	vmov.f32	s0, s14
 8001118:	eef0 0a67 	vmov.f32	s1, s15
 800111c:	f000 fdae 	bl	8001c7c <PID1>
 8001120:	ed87 0b28 	vstr	d0, [r7, #160]	; 0xa0

	  //	  printf("angle = %f\t OUTPUT1 = %f\n\r", input, output1);
//	  printf("Angle = %f\n\r", input);
//	  MIN_PID_VALUE = PID1(90, setpoint, &previous_error, dt, pot_P_value, pot_I_value, pot_D_value);
	  set_PID_range(&MIN_PID_VALUE, &MAX_PID_VALUE, dt, pot_P_value, pot_I_value, pot_D_value);
 8001124:	ed97 3b2a 	vldr	d3, [r7, #168]	; 0xa8
 8001128:	ed97 2b2c 	vldr	d2, [r7, #176]	; 0xb0
 800112c:	ed97 1b2e 	vldr	d1, [r7, #184]	; 0xb8
 8001130:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 8001134:	4922      	ldr	r1, [pc, #136]	; (80011c0 <main+0x18c>)
 8001136:	4823      	ldr	r0, [pc, #140]	; (80011c4 <main+0x190>)
 8001138:	f7ff ff0a 	bl	8000f50 <set_PID_range>


//	  printf("Angle = %f\t ", mpu.KalmanAngleX);
//	  set_PID_range(&MIN_PID_VALUE, &MAX_PID_VALUE, dt, pot_P_value, pot_I_value, pot_D_value);
//	  double pwm = map(output, -255, 255, 30, 70);
	  double pwm = map(output1, MIN_PID_VALUE, MAX_PID_VALUE, 10, 90);
 800113c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001140:	f7ff fd2a 	bl	8000b98 <__aeabi_d2iz>
 8001144:	4604      	mov	r4, r0
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <main+0x190>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fd22 	bl	8000b98 <__aeabi_d2iz>
 8001154:	4605      	mov	r5, r0
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <main+0x18c>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd1a 	bl	8000b98 <__aeabi_d2iz>
 8001164:	4602      	mov	r2, r0
 8001166:	235a      	movs	r3, #90	; 0x5a
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	230a      	movs	r3, #10
 800116c:	4629      	mov	r1, r5
 800116e:	4620      	mov	r0, r4
 8001170:	f001 f8aa 	bl	80022c8 <map>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9f4 	bl	8000564 <__aeabi_i2d>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	  TIM2->CCR3 = pwm;
 8001184:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001188:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800118c:	f7ff fd2c 	bl	8000be8 <__aeabi_d2uiz>
 8001190:	4603      	mov	r3, r0
 8001192:	63e3      	str	r3, [r4, #60]	; 0x3c
//	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);

//	  printf("pwm = %f\t P = %f\t I = %f\t D = %f\n\r", pwm, pot_P_value, pot_I_value, pot_D_value);
//	  HAL_Delay(0.1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <main+0x178>)
 800119c:	f002 fb18 	bl	80037d0 <HAL_GPIO_WritePin>
  {
 80011a0:	e775      	b.n	800108e <main+0x5a>
 80011a2:	bf00      	nop
 80011a4:	200002dc 	.word	0x200002dc
 80011a8:	20000330 	.word	0x20000330
 80011ac:	40020000 	.word	0x40020000
 80011b0:	4082c000 	.word	0x4082c000
 80011b4:	3fe00000 	.word	0x3fe00000
 80011b8:	20000428 	.word	0x20000428
 80011bc:	20000420 	.word	0x20000420
 80011c0:	20000430 	.word	0x20000430
 80011c4:	20000438 	.word	0x20000438

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b094      	sub	sp, #80	; 0x50
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	2234      	movs	r2, #52	; 0x34
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 fc56 	bl	8007a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <SystemClock_Config+0xd4>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	4a29      	ldr	r2, [pc, #164]	; (800129c <SystemClock_Config+0xd4>)
 80011f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fa:	6413      	str	r3, [r2, #64]	; 0x40
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <SystemClock_Config+0xd4>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <SystemClock_Config+0xd8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001214:	4a22      	ldr	r2, [pc, #136]	; (80012a0 <SystemClock_Config+0xd8>)
 8001216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <SystemClock_Config+0xd8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001228:	2302      	movs	r3, #2
 800122a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122c:	2301      	movs	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001230:	2310      	movs	r3, #16
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2302      	movs	r3, #2
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001238:	2300      	movs	r3, #0
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800123c:	2310      	movs	r3, #16
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001240:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001246:	2304      	movs	r3, #4
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fe42 	bl	8004ee0 <HAL_RCC_OscConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001262:	f000 f9df 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001266:	230f      	movs	r3, #15
 8001268:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126a:	2302      	movs	r3, #2
 800126c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	2102      	movs	r1, #2
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fae2 	bl	800484c <HAL_RCC_ClockConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800128e:	f000 f9c9 	bl	8001624 <Error_Handler>
  }
}
 8001292:	bf00      	nop
 8001294:	3750      	adds	r7, #80	; 0x50
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40007000 	.word	0x40007000

080012a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012aa:	463b      	mov	r3, r7
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012b6:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012b8:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <MX_ADC1_Init+0xd4>)
 80012ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012e6:	4a25      	ldr	r2, [pc, #148]	; (800137c <MX_ADC1_Init+0xd8>)
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012f2:	2203      	movs	r2, #3
 80012f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_ADC1_Init+0xd0>)
 8001300:	2201      	movs	r2, #1
 8001302:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001304:	481b      	ldr	r0, [pc, #108]	; (8001374 <MX_ADC1_Init+0xd0>)
 8001306:	f001 f897 	bl	8002438 <HAL_ADC_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001310:	f000 f988 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800131c:	2307      	movs	r3, #7
 800131e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <MX_ADC1_Init+0xd0>)
 8001326:	f001 f9f9 	bl	800271c <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001330:	f000 f978 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001334:	2301      	movs	r3, #1
 8001336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001338:	2302      	movs	r3, #2
 800133a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <MX_ADC1_Init+0xd0>)
 8001342:	f001 f9eb 	bl	800271c <HAL_ADC_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800134c:	f000 f96a 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001350:	2304      	movs	r3, #4
 8001352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001354:	2303      	movs	r3, #3
 8001356:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_ADC1_Init+0xd0>)
 800135e:	f001 f9dd 	bl	800271c <HAL_ADC_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001368:	f000 f95c 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000294 	.word	0x20000294
 8001378:	40012000 	.word	0x40012000
 800137c:	0f000001 	.word	0x0f000001

08001380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001386:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <MX_I2C1_Init+0x54>)
 8001388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_I2C1_Init+0x50>)
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <MX_I2C1_Init+0x58>)
 800138e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_I2C1_Init+0x50>)
 800139e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013be:	f002 fa21 	bl	8003804 <HAL_I2C_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013c8:	f000 f92c 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200002dc 	.word	0x200002dc
 80013d4:	40005400 	.word	0x40005400
 80013d8:	00061a80 	.word	0x00061a80

080013dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_TIM2_Init+0xac>)
 8001400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001404:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_TIM2_Init+0xac>)
 8001408:	2253      	movs	r2, #83	; 0x53
 800140a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_TIM2_Init+0xac>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_TIM2_Init+0xac>)
 8001414:	2263      	movs	r2, #99	; 0x63
 8001416:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_TIM2_Init+0xac>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_TIM2_Init+0xac>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001424:	4818      	ldr	r0, [pc, #96]	; (8001488 <MX_TIM2_Init+0xac>)
 8001426:	f003 fff9 	bl	800541c <HAL_TIM_PWM_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001430:	f000 f8f8 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	4619      	mov	r1, r3
 8001442:	4811      	ldr	r0, [pc, #68]	; (8001488 <MX_TIM2_Init+0xac>)
 8001444:	f004 fc46 	bl	8005cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800144e:	f000 f8e9 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001452:	2360      	movs	r3, #96	; 0x60
 8001454:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2208      	movs	r2, #8
 8001466:	4619      	mov	r1, r3
 8001468:	4807      	ldr	r0, [pc, #28]	; (8001488 <MX_TIM2_Init+0xac>)
 800146a:	f004 f8ef 	bl	800564c <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001474:	f000 f8d6 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <MX_TIM2_Init+0xac>)
 800147a:	f000 fd99 	bl	8001fb0 <HAL_TIM_MspPostInit>

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000330 	.word	0x20000330

0800148c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_USART2_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014c4:	f004 fc82 	bl	8005dcc <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 f8a9 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200003d8 	.word	0x200003d8
 80014dc:	40004400 	.word	0x40004400

080014e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_DMA_Init+0x3c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <MX_DMA_Init+0x3c>)
 80014f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_DMA_Init+0x3c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	200c      	movs	r0, #12
 8001508:	f001 fc1b 	bl	8002d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800150c:	200c      	movs	r0, #12
 800150e:	f001 fc34 	bl	8002d7a <HAL_NVIC_EnableIRQ>

}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <MX_GPIO_Init+0xf8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a36      	ldr	r2, [pc, #216]	; (8001618 <MX_GPIO_Init+0xf8>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <MX_GPIO_Init+0xf8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b30      	ldr	r3, [pc, #192]	; (8001618 <MX_GPIO_Init+0xf8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a2f      	ldr	r2, [pc, #188]	; (8001618 <MX_GPIO_Init+0xf8>)
 800155c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <MX_GPIO_Init+0xf8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b29      	ldr	r3, [pc, #164]	; (8001618 <MX_GPIO_Init+0xf8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a28      	ldr	r2, [pc, #160]	; (8001618 <MX_GPIO_Init+0xf8>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <MX_GPIO_Init+0xf8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <MX_GPIO_Init+0xf8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a21      	ldr	r2, [pc, #132]	; (8001618 <MX_GPIO_Init+0xf8>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <MX_GPIO_Init+0xf8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2120      	movs	r1, #32
 80015aa:	481c      	ldr	r0, [pc, #112]	; (800161c <MX_GPIO_Init+0xfc>)
 80015ac:	f002 f910 	bl	80037d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b6:	4819      	ldr	r0, [pc, #100]	; (800161c <MX_GPIO_Init+0xfc>)
 80015b8:	f002 f90a 	bl	80037d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4813      	ldr	r0, [pc, #76]	; (8001620 <MX_GPIO_Init+0x100>)
 80015d4:	f001 ff68 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015d8:	2301      	movs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015dc:	2303      	movs	r3, #3
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <MX_GPIO_Init+0x100>)
 80015ec:	f001 ff5c 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80015f0:	f44f 7308 	mov.w	r3, #544	; 0x220
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_GPIO_Init+0xfc>)
 800160a:	f001 ff4d 	bl	80034a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020800 	.word	0x40020800

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	e7fe      	b.n	800162c <Error_Handler+0x8>
	...

08001630 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af04      	add	r7, sp, #16
 8001636:	6078      	str	r0, [r7, #4]
    uint8_t Data;

    // check device ID WHO_AM_I

//    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, HAL_MAX_DELAY);
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001638:	2364      	movs	r3, #100	; 0x64
 800163a:	9302      	str	r3, [sp, #8]
 800163c:	2301      	movs	r3, #1
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	f107 030f 	add.w	r3, r7, #15
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2301      	movs	r3, #1
 8001648:	2275      	movs	r2, #117	; 0x75
 800164a:	21d0      	movs	r1, #208	; 0xd0
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f002 fb17 	bl	8003c80 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b68      	cmp	r3, #104	; 0x68
 8001656:	d12e      	bne.n	80016b6 <MPU6050_Init+0x86>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800165c:	2364      	movs	r3, #100	; 0x64
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	2301      	movs	r3, #1
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	f107 030e 	add.w	r3, r7, #14
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2301      	movs	r3, #1
 800166c:	226b      	movs	r2, #107	; 0x6b
 800166e:	21d0      	movs	r1, #208	; 0xd0
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f002 fa0b 	bl	8003a8c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001676:	2307      	movs	r3, #7
 8001678:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800167a:	2364      	movs	r3, #100	; 0x64
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	2301      	movs	r3, #1
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	f107 030e 	add.w	r3, r7, #14
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	2219      	movs	r2, #25
 800168c:	21d0      	movs	r1, #208	; 0xd0
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f002 f9fc 	bl	8003a8c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001694:	2300      	movs	r3, #0
 8001696:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001698:	2364      	movs	r3, #100	; 0x64
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	f107 030e 	add.w	r3, r7, #14
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2301      	movs	r3, #1
 80016a8:	221c      	movs	r2, #28
 80016aa:	21d0      	movs	r1, #208	; 0xd0
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f002 f9ed 	bl	8003a8c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
//        Data = 0x00;
//        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        return 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e003      	b.n	80016be <MPU6050_Init+0x8e>
    }
    else
    {
    	printf("Error in init\n");
 80016b6:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MPU6050_Init+0x98>)
 80016b8:	f006 f906 	bl	80078c8 <puts>
    }
    return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	08009f08 	.word	0x08009f08
 80016cc:	00000000 	.word	0x00000000

080016d0 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80016d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d4:	b090      	sub	sp, #64	; 0x40
 80016d6:	af04      	add	r7, sp, #16
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2306      	movs	r3, #6
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	223b      	movs	r2, #59	; 0x3b
 80016ee:	21d0      	movs	r1, #208	; 0xd0
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f002 fac5 	bl	8003c80 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80016f6:	7a3b      	ldrb	r3, [r7, #8]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	7a7b      	ldrb	r3, [r7, #9]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21a      	sxth	r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001708:	7abb      	ldrb	r3, [r7, #10]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	7afb      	ldrb	r3, [r7, #11]
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b21a      	sxth	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800171a:	7b3b      	ldrb	r3, [r7, #12]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	b21a      	sxth	r2, r3
 8001720:	7b7b      	ldrb	r3, [r7, #13]
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21a      	sxth	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff16 	bl	8000564 <__aeabi_i2d>
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	4b9a      	ldr	r3, [pc, #616]	; (80019a8 <MPU6050_Read_Accel+0x2d8>)
 800173e:	f7ff f8a5 	bl	800088c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff06 	bl	8000564 <__aeabi_i2d>
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b92      	ldr	r3, [pc, #584]	; (80019a8 <MPU6050_Read_Accel+0x2d8>)
 800175e:	f7ff f895 	bl	800088c <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	6839      	ldr	r1, [r7, #0]
 8001768:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fef6 	bl	8000564 <__aeabi_i2d>
 8001778:	a387      	add	r3, pc, #540	; (adr r3, 8001998 <MPU6050_Read_Accel+0x2c8>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7ff f885 	bl	800088c <__aeabi_ddiv>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	6839      	ldr	r1, [r7, #0]
 8001788:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Kalman angle solve
	double dt = (double)(HAL_GetTick() - timer) / 1000;
 800178c:	f000 fe48 	bl	8002420 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	4b86      	ldr	r3, [pc, #536]	; (80019ac <MPU6050_Read_Accel+0x2dc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fed3 	bl	8000544 <__aeabi_ui2d>
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	4b83      	ldr	r3, [pc, #524]	; (80019b0 <MPU6050_Read_Accel+0x2e0>)
 80017a4:	f7ff f872 	bl	800088c <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	timer = HAL_GetTick();
 80017b0:	f000 fe36 	bl	8002420 <HAL_GetTick>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a7d      	ldr	r2, [pc, #500]	; (80019ac <MPU6050_Read_Accel+0x2dc>)
 80017b8:	6013      	str	r3, [r2, #0]
	double roll;
	double roll_sqrt = sqrt(
		DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c0:	461a      	mov	r2, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c8:	fb03 f202 	mul.w	r2, r3, r2
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017d2:	4619      	mov	r1, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe febf 	bl	8000564 <__aeabi_i2d>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	ec43 2b10 	vmov	d0, r2, r3
 80017ee:	f008 f807 	bl	8009800 <sqrt>
 80017f2:	ed87 0b06 	vstr	d0, [r7, #24]
	if (roll_sqrt != 0.0)
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001802:	f7ff f981 	bl	8000b08 <__aeabi_dcmpeq>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d11f      	bne.n	800184c <MPU6050_Read_Accel+0x17c>
	{
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fea6 	bl	8000564 <__aeabi_i2d>
 8001818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800181c:	f7ff f836 	bl	800088c <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	ec43 2b17 	vmov	d7, r2, r3
 8001828:	eeb0 0a47 	vmov.f32	s0, s14
 800182c:	eef0 0a67 	vmov.f32	s1, s15
 8001830:	f008 f812 	bl	8009858 <atan>
 8001834:	ec51 0b10 	vmov	r0, r1, d0
 8001838:	a359      	add	r3, pc, #356	; (adr r3, 80019a0 <MPU6050_Read_Accel+0x2d0>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe fefb 	bl	8000638 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800184a:	e005      	b.n	8001858 <MPU6050_Read_Accel+0x188>
	}
	else
	{
		roll = 0.0;
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185e:	425b      	negs	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe7f 	bl	8000564 <__aeabi_i2d>
 8001866:	4682      	mov	sl, r0
 8001868:	468b      	mov	fp, r1
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fe77 	bl	8000564 <__aeabi_i2d>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	ec43 2b11 	vmov	d1, r2, r3
 800187e:	ec4b ab10 	vmov	d0, sl, fp
 8001882:	f007 ffbb 	bl	80097fc <atan2>
 8001886:	ec51 0b10 	vmov	r0, r1, d0
 800188a:	a345      	add	r3, pc, #276	; (adr r3, 80019a0 <MPU6050_Read_Accel+0x2d0>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe fed2 	bl	8000638 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <MPU6050_Read_Accel+0x2e4>)
 80018a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018a6:	f7ff f939 	bl	8000b1c <__aeabi_dcmplt>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00a      	beq.n	80018c6 <MPU6050_Read_Accel+0x1f6>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <MPU6050_Read_Accel+0x2e8>)
 80018bc:	f7ff f94c 	bl	8000b58 <__aeabi_dcmpgt>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d114      	bne.n	80018f0 <MPU6050_Read_Accel+0x220>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b3b      	ldr	r3, [pc, #236]	; (80019b8 <MPU6050_Read_Accel+0x2e8>)
 80018cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018d0:	f7ff f942 	bl	8000b58 <__aeabi_dcmpgt>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d015      	beq.n	8001906 <MPU6050_Read_Accel+0x236>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <MPU6050_Read_Accel+0x2e4>)
 80018e6:	f7ff f919 	bl	8000b1c <__aeabi_dcmplt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00a      	beq.n	8001906 <MPU6050_Read_Accel+0x236>
	{
		KalmanY.angle = pitch;
 80018f0:	4932      	ldr	r1, [pc, #200]	; (80019bc <MPU6050_Read_Accel+0x2ec>)
 80018f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018f6:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 80018fa:	6839      	ldr	r1, [r7, #0]
 80018fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001900:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001904:	e014      	b.n	8001930 <MPU6050_Read_Accel+0x260>
	}
	else
	{
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800190c:	ed97 2b08 	vldr	d2, [r7, #32]
 8001910:	eeb0 1a47 	vmov.f32	s2, s14
 8001914:	eef0 1a67 	vmov.f32	s3, s15
 8001918:	ed97 0b04 	vldr	d0, [r7, #16]
 800191c:	4827      	ldr	r0, [pc, #156]	; (80019bc <MPU6050_Read_Accel+0x2ec>)
 800191e:	f000 f851 	bl	80019c4 <Kalman_getAngle>
 8001922:	eeb0 7a40 	vmov.f32	s14, s0
 8001926:	eef0 7a60 	vmov.f32	s15, s1
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001936:	4690      	mov	r8, r2
 8001938:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <MPU6050_Read_Accel+0x2e8>)
 8001942:	4640      	mov	r0, r8
 8001944:	4649      	mov	r1, r9
 8001946:	f7ff f907 	bl	8000b58 <__aeabi_dcmpgt>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <MPU6050_Read_Accel+0x292>
		DataStruct->Gx = -DataStruct->Gx;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001956:	4614      	mov	r4, r2
 8001958:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001968:	ed97 2b08 	vldr	d2, [r7, #32]
 800196c:	eeb0 1a47 	vmov.f32	s2, s14
 8001970:	eef0 1a67 	vmov.f32	s3, s15
 8001974:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001978:	4811      	ldr	r0, [pc, #68]	; (80019c0 <MPU6050_Read_Accel+0x2f0>)
 800197a:	f000 f823 	bl	80019c4 <Kalman_getAngle>
 800197e:	eeb0 7a40 	vmov.f32	s14, s0
 8001982:	eef0 7a60 	vmov.f32	s15, s1
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 800198c:	bf00      	nop
 800198e:	3730      	adds	r7, #48	; 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001996:	bf00      	nop
 8001998:	00000000 	.word	0x00000000
 800199c:	40cc2900 	.word	0x40cc2900
 80019a0:	1a63c1f8 	.word	0x1a63c1f8
 80019a4:	404ca5dc 	.word	0x404ca5dc
 80019a8:	40d00000 	.word	0x40d00000
 80019ac:	20000448 	.word	0x20000448
 80019b0:	408f4000 	.word	0x408f4000
 80019b4:	c0568000 	.word	0xc0568000
 80019b8:	40568000 	.word	0x40568000
 80019bc:	20000048 	.word	0x20000048
 80019c0:	20000000 	.word	0x20000000

080019c4 <Kalman_getAngle>:
//        DataStruct->Gx = -DataStruct->Gx;
//    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b096      	sub	sp, #88	; 0x58
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	61f8      	str	r0, [r7, #28]
 80019cc:	ed87 0b04 	vstr	d0, [r7, #16]
 80019d0:	ed87 1b02 	vstr	d1, [r7, #8]
 80019d4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80019de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019e2:	f7fe fc71 	bl	80002c8 <__aeabi_dsub>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80019f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80019f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019fc:	f7fe fe1c 	bl	8000638 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4620      	mov	r0, r4
 8001a06:	4629      	mov	r1, r5
 8001a08:	f7fe fc60 	bl	80002cc <__adddf3>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	69f9      	ldr	r1, [r7, #28]
 8001a12:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a26:	f7fe fe07 	bl	8000638 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a38:	f7fe fc46 	bl	80002c8 <__aeabi_dsub>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001a4a:	f7fe fc3d 	bl	80002c8 <__aeabi_dsub>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fc36 	bl	80002cc <__adddf3>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a6c:	f7fe fde4 	bl	8000638 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4620      	mov	r0, r4
 8001a76:	4629      	mov	r1, r5
 8001a78:	f7fe fc28 	bl	80002cc <__adddf3>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	69f9      	ldr	r1, [r7, #28]
 8001a82:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a96:	f7fe fdcf 	bl	8000638 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fc11 	bl	80002c8 <__aeabi_dsub>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	69f9      	ldr	r1, [r7, #28]
 8001aac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ac0:	f7fe fdba 	bl	8000638 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4629      	mov	r1, r5
 8001acc:	f7fe fbfc 	bl	80002c8 <__aeabi_dsub>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	69f9      	ldr	r1, [r7, #28]
 8001ad6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001aea:	f7fe fda5 	bl	8000638 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fbe9 	bl	80002cc <__adddf3>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	69f9      	ldr	r1, [r7, #28]
 8001b00:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b10:	f7fe fbdc 	bl	80002cc <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001b22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b26:	f7fe feb1 	bl	800088c <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b3c:	f7fe fea6 	bl	800088c <__aeabi_ddiv>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b52:	f7fe fbb9 	bl	80002c8 <__aeabi_dsub>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b6c:	f7fe fd64 	bl	8000638 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7fe fba8 	bl	80002cc <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	69f9      	ldr	r1, [r7, #28]
 8001b82:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001b8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b94:	f7fe fd50 	bl	8000638 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f7fe fb94 	bl	80002cc <__adddf3>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	69f9      	ldr	r1, [r7, #28]
 8001baa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001bb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001bbe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001bc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bd0:	f7fe fd32 	bl	8000638 <__aeabi_dmul>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fb74 	bl	80002c8 <__aeabi_dsub>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	69f9      	ldr	r1, [r7, #28]
 8001be6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001bf0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bf4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001bf8:	f7fe fd1e 	bl	8000638 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fb60 	bl	80002c8 <__aeabi_dsub>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	69f9      	ldr	r1, [r7, #28]
 8001c0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001c18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c20:	f7fe fd0a 	bl	8000638 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fb4c 	bl	80002c8 <__aeabi_dsub>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	69f9      	ldr	r1, [r7, #28]
 8001c36:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001c40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c48:	f7fe fcf6 	bl	8000638 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4620      	mov	r0, r4
 8001c52:	4629      	mov	r1, r5
 8001c54:	f7fe fb38 	bl	80002c8 <__aeabi_dsub>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	69f9      	ldr	r1, [r7, #28]
 8001c5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c68:	ec43 2b17 	vmov	d7, r2, r3
};
 8001c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c70:	eef0 0a67 	vmov.f32	s1, s15
 8001c74:	3758      	adds	r7, #88	; 0x58
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c7c <PID1>:
 */

#include "my_pid.h"

double PID1(double angle, double setpoint, double *previous_error, double *prev_input, double *integral, double dt, double kp, double ki, double kd)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b09a      	sub	sp, #104	; 0x68
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8001c86:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8001c8a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8001c8e:	627a      	str	r2, [r7, #36]	; 0x24
 8001c90:	ed87 2b06 	vstr	d2, [r7, #24]
 8001c94:	ed87 3b04 	vstr	d3, [r7, #16]
 8001c98:	ed87 4b02 	vstr	d4, [r7, #8]
 8001c9c:	ed87 5b00 	vstr	d5, [r7]
	double I = 0;
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

//	double integral = 0;
    double error = setpoint - angle;
 8001cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001cb0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001cb4:	f7fe fb08 	bl	80002c8 <__aeabi_dsub>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
//    dt = 200;
//    printf("ERROR: %f\t", error);
    double P = kp * error;
 8001cc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cc8:	f7fe fcb6 	bl	8000638 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
//    double I = ki * (*previous_error + error) * dt;
//    *integral += ki * error;
    if (error < 5 || error > -5)
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <PID1+0x104>)
 8001cda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001cde:	f7fe ff1d 	bl	8000b1c <__aeabi_dcmplt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <PID1+0x80>
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <PID1+0x108>)
 8001cee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001cf2:	f7fe ff31 	bl	8000b58 <__aeabi_dcmpgt>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <PID1+0x94>
    	I = ki * error;
 8001cfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d04:	f7fe fc98 	bl	8000638 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

    double D = kd * (error - *previous_error);
 8001d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001d1a:	f7fe fad5 	bl	80002c8 <__aeabi_dsub>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d26:	f7fe fc87 	bl	8000638 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
//    double D = kd * (angle - *prev_input);
    *previous_error = error;
 8001d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d38:	e9c1 2300 	strd	r2, r3, [r1]
    *prev_input = angle;
 8001d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d42:	e9c1 2300 	strd	r2, r3, [r1]

//    double output = P + *integral - D;
    double output = P + I - D;
 8001d46:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d4e:	f7fe fabd 	bl	80002cc <__adddf3>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d5e:	f7fe fab3 	bl	80002c8 <__aeabi_dsub>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    return output;
 8001d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d72:	eeb0 0a47 	vmov.f32	s0, s14
 8001d76:	eef0 0a67 	vmov.f32	s1, s15
 8001d7a:	3768      	adds	r7, #104	; 0x68
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40140000 	.word	0x40140000
 8001d84:	c0140000 	.word	0xc0140000

08001d88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dc6:	2007      	movs	r0, #7
 8001dc8:	f000 ffb0 	bl	8002d2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800

08001dd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_ADC_MspInit+0x8c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d12f      	bne.n	8001e5a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_ADC_MspInit+0x90>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_ADC_MspInit+0x90>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_ADC_MspInit+0x90>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_ADC_MspInit+0x90>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_ADC_MspInit+0x90>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_ADC_MspInit+0x90>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001e32:	2313      	movs	r3, #19
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e36:	2303      	movs	r3, #3
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4809      	ldr	r0, [pc, #36]	; (8001e6c <HAL_ADC_MspInit+0x94>)
 8001e46:	f001 fb2f 	bl	80034a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2012      	movs	r0, #18
 8001e50:	f000 ff77 	bl	8002d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e54:	2012      	movs	r0, #18
 8001e56:	f000 ff90 	bl	8002d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	; 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40012000 	.word	0x40012000
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020000 	.word	0x40020000

08001e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_I2C_MspInit+0x84>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d12c      	bne.n	8001eec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb4:	2312      	movs	r3, #18
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480c      	ldr	r0, [pc, #48]	; (8001efc <HAL_I2C_MspInit+0x8c>)
 8001ecc:	f001 faec 	bl	80034a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ede:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40005400 	.word	0x40005400
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020400 	.word	0x40020400

08001f00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f10:	d143      	bne.n	8001f9a <HAL_TIM_PWM_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xa4>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a22      	ldr	r2, [pc, #136]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xa4>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xa4>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH3 Init */
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f30:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <HAL_TIM_PWM_MspInit+0xac>)
 8001f32:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f36:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f3a:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f3e:	2240      	movs	r2, #64	; 0x40
 8001f40:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f4e:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f56:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f5e:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8001f72:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f74:	f000 ff1c 	bl	8002db0 <HAL_DMA_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8001f7e:	f7ff fb51 	bl	8001624 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f86:	621a      	str	r2, [r3, #32]
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xa8>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	20000378 	.word	0x20000378
 8001fac:	40026028 	.word	0x40026028

08001fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd0:	d11e      	bne.n	8002010 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_TIM_MspPostInit+0x68>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <HAL_TIM_MspPostInit+0x68>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_TIM_MspPostInit+0x68>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002000:	2301      	movs	r3, #1
 8002002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	4619      	mov	r1, r3
 800200a:	4804      	ldr	r0, [pc, #16]	; (800201c <HAL_TIM_MspPostInit+0x6c>)
 800200c:	f001 fa4c 	bl	80034a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002010:	bf00      	nop
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	40020400 	.word	0x40020400

08002020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <HAL_UART_MspInit+0x94>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d133      	bne.n	80020aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <HAL_UART_MspInit+0x98>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <HAL_UART_MspInit+0x98>)
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_UART_MspInit+0x98>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_UART_MspInit+0x98>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <HAL_UART_MspInit+0x98>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_UART_MspInit+0x98>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800207a:	230c      	movs	r3, #12
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800208a:	2307      	movs	r3, #7
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4809      	ldr	r0, [pc, #36]	; (80020bc <HAL_UART_MspInit+0x9c>)
 8002096:	f001 fa07 	bl	80034a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	2026      	movs	r0, #38	; 0x26
 80020a0:	f000 fe4f 	bl	8002d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020a4:	2026      	movs	r0, #38	; 0x26
 80020a6:	f000 fe68 	bl	8002d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	; 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40004400 	.word	0x40004400
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020000 	.word	0x40020000

080020c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c4:	e7fe      	b.n	80020c4 <NMI_Handler+0x4>

080020c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ca:	e7fe      	b.n	80020ca <HardFault_Handler+0x4>

080020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <MemManage_Handler+0x4>

080020d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <BusFault_Handler+0x4>

080020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <UsageFault_Handler+0x4>

080020de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210c:	f000 f974 	bl	80023f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}

08002114 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <DMA1_Stream1_IRQHandler+0x10>)
 800211a:	f000 ff89 	bl	8003030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000378 	.word	0x20000378

08002128 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <ADC_IRQHandler+0x10>)
 800212e:	f000 f9c6 	bl	80024be <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000294 	.word	0x20000294

0800213c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <USART2_IRQHandler+0x10>)
 8002142:	f003 ff1f 	bl	8005f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200003d8 	.word	0x200003d8

08002150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return 1;
 8002154:	2301      	movs	r3, #1
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_kill>:

int _kill(int pid, int sig)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800216a:	f005 fcdf 	bl	8007b2c <__errno>
 800216e:	4603      	mov	r3, r0
 8002170:	2216      	movs	r2, #22
 8002172:	601a      	str	r2, [r3, #0]
  return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_exit>:

void _exit (int status)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ffe7 	bl	8002160 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002192:	e7fe      	b.n	8002192 <_exit+0x12>

08002194 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e00a      	b.n	80021bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a6:	f3af 8000 	nop.w
 80021aa:	4601      	mov	r1, r0
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	60ba      	str	r2, [r7, #8]
 80021b2:	b2ca      	uxtb	r2, r1
 80021b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3301      	adds	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dbf0      	blt.n	80021a6 <_read+0x12>
  }

  return len;
 80021c4:	687b      	ldr	r3, [r7, #4]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021f6:	605a      	str	r2, [r3, #4]
  return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <_isatty>:

int _isatty(int file)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002240:	4a14      	ldr	r2, [pc, #80]	; (8002294 <_sbrk+0x5c>)
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <_sbrk+0x60>)
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <_sbrk+0x64>)
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <_sbrk+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	429a      	cmp	r2, r3
 8002266:	d207      	bcs.n	8002278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002268:	f005 fc60 	bl	8007b2c <__errno>
 800226c:	4603      	mov	r3, r0
 800226e:	220c      	movs	r2, #12
 8002270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e009      	b.n	800228c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <_sbrk+0x64>)
 8002288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20020000 	.word	0x20020000
 8002298:	00000400 	.word	0x00000400
 800229c:	2000044c 	.word	0x2000044c
 80022a0:	200005a0 	.word	0x200005a0

080022a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <SystemInit+0x20>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <SystemInit+0x20>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <map>:
	    Error_Handler();
	  }
}

int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	69b9      	ldr	r1, [r7, #24]
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	1a8a      	subs	r2, r1, r2
 80022e2:	fb03 f202 	mul.w	r2, r3, r2
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1acb      	subs	r3, r1, r3
 80022ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4413      	add	r3, r2
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002338 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002304:	f7ff ffce 	bl	80022a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002308:	480c      	ldr	r0, [pc, #48]	; (800233c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800230a:	490d      	ldr	r1, [pc, #52]	; (8002340 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002310:	e002      	b.n	8002318 <LoopCopyDataInit>

08002312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002316:	3304      	adds	r3, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800231c:	d3f9      	bcc.n	8002312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002320:	4c0a      	ldr	r4, [pc, #40]	; (800234c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002324:	e001      	b.n	800232a <LoopFillZerobss>

08002326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002328:	3204      	adds	r2, #4

0800232a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800232c:	d3fb      	bcc.n	8002326 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800232e:	f005 fc03 	bl	8007b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002332:	f7fe fe7f 	bl	8001034 <main>
  bx  lr    
 8002336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002344:	0800a348 	.word	0x0800a348
  ldr r2, =_sbss
 8002348:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800234c:	200005a0 	.word	0x200005a0

08002350 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <CAN1_RX0_IRQHandler>
	...

08002354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_Init+0x40>)
 800235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002362:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_Init+0x40>)
 800236a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_Init+0x40>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237c:	2003      	movs	r0, #3
 800237e:	f000 fcd5 	bl	8002d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002382:	2000      	movs	r0, #0
 8002384:	f000 f808 	bl	8002398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002388:	f7ff fcfe 	bl	8001d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023c00 	.word	0x40023c00

08002398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_InitTick+0x54>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x58>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fced 	bl	8002d96 <HAL_SYSTICK_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00e      	b.n	80023e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b0f      	cmp	r3, #15
 80023ca:	d80a      	bhi.n	80023e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023cc:	2200      	movs	r2, #0
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f000 fcb5 	bl	8002d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d8:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <HAL_InitTick+0x5c>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000090 	.word	0x20000090
 80023f0:	20000098 	.word	0x20000098
 80023f4:	20000094 	.word	0x20000094

080023f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x20>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x24>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_IncTick+0x24>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000098 	.word	0x20000098
 800241c:	20000450 	.word	0x20000450

08002420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_GetTick+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000450 	.word	0x20000450

08002438 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e033      	b.n	80024b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fcbe 	bl	8001dd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	d118      	bne.n	80024a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800247e:	f023 0302 	bic.w	r3, r3, #2
 8002482:	f043 0202 	orr.w	r2, r3, #2
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fa78 	bl	8002980 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	f043 0201 	orr.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
 80024a6:	e001      	b.n	80024ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d049      	beq.n	8002588 <HAL_ADC_IRQHandler+0xca>
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d046      	beq.n	8002588 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d12b      	bne.n	8002578 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002524:	2b00      	cmp	r3, #0
 8002526:	d127      	bne.n	8002578 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002540:	2b00      	cmp	r3, #0
 8002542:	d119      	bne.n	8002578 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0220 	bic.w	r2, r2, #32
 8002552:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f8b0 	bl	80026de <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0212 	mvn.w	r2, #18
 8002586:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d057      	beq.n	800264e <HAL_ADC_IRQHandler+0x190>
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d054      	beq.n	800264e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d139      	bne.n	800263e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d12b      	bne.n	800263e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d124      	bne.n	800263e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d11d      	bne.n	800263e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002606:	2b00      	cmp	r3, #0
 8002608:	d119      	bne.n	800263e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002618:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d105      	bne.n	800263e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa9a 	bl	8002b78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 020c 	mvn.w	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d017      	beq.n	8002694 <HAL_ADC_IRQHandler+0x1d6>
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d014      	beq.n	8002694 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d10d      	bne.n	8002694 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f834 	bl	80026f2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f06f 0201 	mvn.w	r2, #1
 8002692:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026a2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d015      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x218>
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d012      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	f043 0202 	orr.w	r2, r3, #2
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0220 	mvn.w	r2, #32
 80026c4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f81d 	bl	8002706 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0220 	mvn.w	r2, #32
 80026d4:	601a      	str	r2, [r3, #0]
  }
}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1c>
 8002734:	2302      	movs	r3, #2
 8002736:	e113      	b.n	8002960 <HAL_ADC_ConfigChannel+0x244>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b09      	cmp	r3, #9
 8002746:	d925      	bls.n	8002794 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68d9      	ldr	r1, [r3, #12]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	3b1e      	subs	r3, #30
 800275e:	2207      	movs	r2, #7
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43da      	mvns	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	400a      	ands	r2, r1
 800276c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68d9      	ldr	r1, [r3, #12]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	4618      	mov	r0, r3
 8002780:	4603      	mov	r3, r0
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4403      	add	r3, r0
 8002786:	3b1e      	subs	r3, #30
 8002788:	409a      	lsls	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	e022      	b.n	80027da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6919      	ldr	r1, [r3, #16]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	2207      	movs	r2, #7
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	400a      	ands	r2, r1
 80027b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4403      	add	r3, r0
 80027d0:	409a      	lsls	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d824      	bhi.n	800282c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	3b05      	subs	r3, #5
 80027f4:	221f      	movs	r2, #31
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43da      	mvns	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	400a      	ands	r2, r1
 8002802:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	3b05      	subs	r3, #5
 800281e:	fa00 f203 	lsl.w	r2, r0, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	635a      	str	r2, [r3, #52]	; 0x34
 800282a:	e04c      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	d824      	bhi.n	800287e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b23      	subs	r3, #35	; 0x23
 8002846:	221f      	movs	r2, #31
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43da      	mvns	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	400a      	ands	r2, r1
 8002854:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	4618      	mov	r0, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	3b23      	subs	r3, #35	; 0x23
 8002870:	fa00 f203 	lsl.w	r2, r0, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
 800287c:	e023      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3b41      	subs	r3, #65	; 0x41
 8002890:	221f      	movs	r2, #31
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	400a      	ands	r2, r1
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4618      	mov	r0, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	3b41      	subs	r3, #65	; 0x41
 80028ba:	fa00 f203 	lsl.w	r2, r0, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_ADC_ConfigChannel+0x250>)
 80028c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a28      	ldr	r2, [pc, #160]	; (8002970 <HAL_ADC_ConfigChannel+0x254>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d10f      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x1d8>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b12      	cmp	r3, #18
 80028da:	d10b      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <HAL_ADC_ConfigChannel+0x254>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d12b      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x23a>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <HAL_ADC_ConfigChannel+0x258>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d003      	beq.n	8002910 <HAL_ADC_ConfigChannel+0x1f4>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b11      	cmp	r3, #17
 800290e:	d122      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a11      	ldr	r2, [pc, #68]	; (8002974 <HAL_ADC_ConfigChannel+0x258>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d111      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_ADC_ConfigChannel+0x25c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a11      	ldr	r2, [pc, #68]	; (800297c <HAL_ADC_ConfigChannel+0x260>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	0c9a      	lsrs	r2, r3, #18
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002948:	e002      	b.n	8002950 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3b01      	subs	r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f9      	bne.n	800294a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40012300 	.word	0x40012300
 8002970:	40012000 	.word	0x40012000
 8002974:	10000012 	.word	0x10000012
 8002978:	20000090 	.word	0x20000090
 800297c:	431bde83 	.word	0x431bde83

08002980 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002988:	4b79      	ldr	r3, [pc, #484]	; (8002b70 <ADC_Init+0x1f0>)
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	021a      	lsls	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <ADC_Init+0x1f4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6899      	ldr	r1, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	e00f      	b.n	8002a7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a7c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0202 	bic.w	r2, r2, #2
 8002a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6899      	ldr	r1, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7e1b      	ldrb	r3, [r3, #24]
 8002a98:	005a      	lsls	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01b      	beq.n	8002ae4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	035a      	lsls	r2, r3, #13
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	e007      	b.n	8002af4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	051a      	lsls	r2, r3, #20
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6899      	ldr	r1, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b36:	025a      	lsls	r2, r3, #9
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6899      	ldr	r1, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	029a      	lsls	r2, r3, #10
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40012300 	.word	0x40012300
 8002b74:	0f000001 	.word	0x0f000001

08002b78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bbe:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	60d3      	str	r3, [r2, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <__NVIC_GetPriorityGrouping+0x18>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f003 0307 	and.w	r3, r3, #7
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	db0b      	blt.n	8002c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	f003 021f 	and.w	r2, r3, #31
 8002c08:	4907      	ldr	r1, [pc, #28]	; (8002c28 <__NVIC_EnableIRQ+0x38>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2001      	movs	r0, #1
 8002c12:	fa00 f202 	lsl.w	r2, r0, r2
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000e100 	.word	0xe000e100

08002c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	6039      	str	r1, [r7, #0]
 8002c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	db0a      	blt.n	8002c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	490c      	ldr	r1, [pc, #48]	; (8002c78 <__NVIC_SetPriority+0x4c>)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	0112      	lsls	r2, r2, #4
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c54:	e00a      	b.n	8002c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	4908      	ldr	r1, [pc, #32]	; (8002c7c <__NVIC_SetPriority+0x50>)
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	3b04      	subs	r3, #4
 8002c64:	0112      	lsls	r2, r2, #4
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	440b      	add	r3, r1
 8002c6a:	761a      	strb	r2, [r3, #24]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000e100 	.word	0xe000e100
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b089      	sub	sp, #36	; 0x24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f1c3 0307 	rsb	r3, r3, #7
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	bf28      	it	cs
 8002c9e:	2304      	movcs	r3, #4
 8002ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	2b06      	cmp	r3, #6
 8002ca8:	d902      	bls.n	8002cb0 <NVIC_EncodePriority+0x30>
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3b03      	subs	r3, #3
 8002cae:	e000      	b.n	8002cb2 <NVIC_EncodePriority+0x32>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd2:	43d9      	mvns	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	4313      	orrs	r3, r2
         );
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3724      	adds	r7, #36	; 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf8:	d301      	bcc.n	8002cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00f      	b.n	8002d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <SysTick_Config+0x40>)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d06:	210f      	movs	r1, #15
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	f7ff ff8e 	bl	8002c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <SysTick_Config+0x40>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d16:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <SysTick_Config+0x40>)
 8002d18:	2207      	movs	r2, #7
 8002d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	e000e010 	.word	0xe000e010

08002d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff ff29 	bl	8002b8c <__NVIC_SetPriorityGrouping>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	4603      	mov	r3, r0
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d54:	f7ff ff3e 	bl	8002bd4 <__NVIC_GetPriorityGrouping>
 8002d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	6978      	ldr	r0, [r7, #20]
 8002d60:	f7ff ff8e 	bl	8002c80 <NVIC_EncodePriority>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff5d 	bl	8002c2c <__NVIC_SetPriority>
}
 8002d72:	bf00      	nop
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff31 	bl	8002bf0 <__NVIC_EnableIRQ>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ffa2 	bl	8002ce8 <SysTick_Config>
 8002da4:	4603      	mov	r3, r0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dbc:	f7ff fb30 	bl	8002420 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e099      	b.n	8002f00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dec:	e00f      	b.n	8002e0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dee:	f7ff fb17 	bl	8002420 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d908      	bls.n	8002e0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2203      	movs	r2, #3
 8002e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e078      	b.n	8002f00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e8      	bne.n	8002dee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <HAL_DMA_Init+0x158>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d107      	bne.n	8002e78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	4313      	orrs	r3, r2
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f023 0307 	bic.w	r3, r3, #7
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d117      	bne.n	8002ed2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fa7b 	bl	80033b0 <DMA_CheckFifoParam>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2240      	movs	r2, #64	; 0x40
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e016      	b.n	8002f00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fa32 	bl	8003344 <DMA_CalcBaseAndBitshift>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	223f      	movs	r2, #63	; 0x3f
 8002eea:	409a      	lsls	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	f010803f 	.word	0xf010803f

08002f0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f1a:	f7ff fa81 	bl	8002420 <HAL_GetTick>
 8002f1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d008      	beq.n	8002f3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e052      	b.n	8002fe4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0216 	bic.w	r2, r2, #22
 8002f4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <HAL_DMA_Abort+0x62>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0208 	bic.w	r2, r2, #8
 8002f7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0201 	bic.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8e:	e013      	b.n	8002fb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f90:	f7ff fa46 	bl	8002420 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d90c      	bls.n	8002fb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e015      	b.n	8002fe4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1e4      	bne.n	8002f90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fca:	223f      	movs	r2, #63	; 0x3f
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d004      	beq.n	800300a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e00c      	b.n	8003024 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2205      	movs	r2, #5
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800303c:	4b8e      	ldr	r3, [pc, #568]	; (8003278 <HAL_DMA_IRQHandler+0x248>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a8e      	ldr	r2, [pc, #568]	; (800327c <HAL_DMA_IRQHandler+0x24c>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0a9b      	lsrs	r3, r3, #10
 8003048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	2208      	movs	r2, #8
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01a      	beq.n	800309c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0204 	bic.w	r2, r2, #4
 8003082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	2208      	movs	r2, #8
 800308a:	409a      	lsls	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	2201      	movs	r2, #1
 80030a2:	409a      	lsls	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	2201      	movs	r2, #1
 80030c0:	409a      	lsls	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f043 0202 	orr.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	2204      	movs	r2, #4
 80030d8:	409a      	lsls	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	2204      	movs	r2, #4
 80030f6:	409a      	lsls	r2, r3
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	f043 0204 	orr.w	r2, r3, #4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	2210      	movs	r2, #16
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d043      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d03c      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	2210      	movs	r2, #16
 800312c:	409a      	lsls	r2, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d018      	beq.n	8003172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d024      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
 800315e:	e01f      	b.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01b      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
 8003170:	e016      	b.n	80031a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0208 	bic.w	r2, r2, #8
 800318e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	2220      	movs	r2, #32
 80031a6:	409a      	lsls	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 808f 	beq.w	80032d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8087 	beq.w	80032d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	2220      	movs	r2, #32
 80031c8:	409a      	lsls	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d136      	bne.n	8003248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0216 	bic.w	r2, r2, #22
 80031e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <HAL_DMA_IRQHandler+0x1da>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0208 	bic.w	r2, r2, #8
 8003218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	223f      	movs	r2, #63	; 0x3f
 8003220:	409a      	lsls	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323a:	2b00      	cmp	r3, #0
 800323c:	d07e      	beq.n	800333c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
        }
        return;
 8003246:	e079      	b.n	800333c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01d      	beq.n	8003292 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10d      	bne.n	8003280 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	2b00      	cmp	r3, #0
 800326a:	d031      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
 8003274:	e02c      	b.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
 8003276:	bf00      	nop
 8003278:	20000090 	.word	0x20000090
 800327c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d023      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
 8003290:	e01e      	b.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10f      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0210 	bic.w	r2, r2, #16
 80032ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d032      	beq.n	800333e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d022      	beq.n	800332a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2205      	movs	r2, #5
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	3301      	adds	r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	429a      	cmp	r2, r3
 8003306:	d307      	bcc.n	8003318 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f2      	bne.n	80032fc <HAL_DMA_IRQHandler+0x2cc>
 8003316:	e000      	b.n	800331a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003318:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	e000      	b.n	800333e <HAL_DMA_IRQHandler+0x30e>
        return;
 800333c:	bf00      	nop
    }
  }
}
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	3b10      	subs	r3, #16
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800335e:	4a13      	ldr	r2, [pc, #76]	; (80033ac <DMA_CalcBaseAndBitshift+0x68>)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d909      	bls.n	8003386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	1d1a      	adds	r2, r3, #4
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	659a      	str	r2, [r3, #88]	; 0x58
 8003384:	e007      	b.n	8003396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800338e:	f023 0303 	bic.w	r3, r3, #3
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	aaaaaaab 	.word	0xaaaaaaab
 80033ac:	08009f4c 	.word	0x08009f4c

080033b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d11f      	bne.n	800340a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d856      	bhi.n	800347e <DMA_CheckFifoParam+0xce>
 80033d0:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <DMA_CheckFifoParam+0x28>)
 80033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d6:	bf00      	nop
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033fb 	.word	0x080033fb
 80033e0:	080033e9 	.word	0x080033e9
 80033e4:	0800347f 	.word	0x0800347f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d046      	beq.n	8003482 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f8:	e043      	b.n	8003482 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003402:	d140      	bne.n	8003486 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003408:	e03d      	b.n	8003486 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003412:	d121      	bne.n	8003458 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b03      	cmp	r3, #3
 8003418:	d837      	bhi.n	800348a <DMA_CheckFifoParam+0xda>
 800341a:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <DMA_CheckFifoParam+0x70>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003431 	.word	0x08003431
 8003424:	08003437 	.word	0x08003437
 8003428:	08003431 	.word	0x08003431
 800342c:	08003449 	.word	0x08003449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
      break;
 8003434:	e030      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d025      	beq.n	800348e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003446:	e022      	b.n	800348e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003450:	d11f      	bne.n	8003492 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003456:	e01c      	b.n	8003492 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d903      	bls.n	8003466 <DMA_CheckFifoParam+0xb6>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d003      	beq.n	800346c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003464:	e018      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
      break;
 800346a:	e015      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      break;
 800347c:	e00b      	b.n	8003496 <DMA_CheckFifoParam+0xe6>
      break;
 800347e:	bf00      	nop
 8003480:	e00a      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;
 8003482:	bf00      	nop
 8003484:	e008      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;
 8003486:	bf00      	nop
 8003488:	e006      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;
 800348a:	bf00      	nop
 800348c:	e004      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;
 800348e:	bf00      	nop
 8003490:	e002      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;   
 8003492:	bf00      	nop
 8003494:	e000      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;
 8003496:	bf00      	nop
    }
  } 
  
  return status; 
 8003498:	7bfb      	ldrb	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop

080034a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	e165      	b.n	8003790 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034c4:	2201      	movs	r2, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	429a      	cmp	r2, r3
 80034de:	f040 8154 	bne.w	800378a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d005      	beq.n	80034fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d130      	bne.n	800355c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	2203      	movs	r2, #3
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003530:	2201      	movs	r2, #1
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 0201 	and.w	r2, r3, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b03      	cmp	r3, #3
 8003566:	d017      	beq.n	8003598 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2203      	movs	r2, #3
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d123      	bne.n	80035ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	08da      	lsrs	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3208      	adds	r2, #8
 80035ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	220f      	movs	r2, #15
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	08da      	lsrs	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3208      	adds	r2, #8
 80035e6:	69b9      	ldr	r1, [r7, #24]
 80035e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	2203      	movs	r2, #3
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0203 	and.w	r2, r3, #3
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80ae 	beq.w	800378a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	4b5d      	ldr	r3, [pc, #372]	; (80037a8 <HAL_GPIO_Init+0x300>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	4a5c      	ldr	r2, [pc, #368]	; (80037a8 <HAL_GPIO_Init+0x300>)
 8003638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800363c:	6453      	str	r3, [r2, #68]	; 0x44
 800363e:	4b5a      	ldr	r3, [pc, #360]	; (80037a8 <HAL_GPIO_Init+0x300>)
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800364a:	4a58      	ldr	r2, [pc, #352]	; (80037ac <HAL_GPIO_Init+0x304>)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	3302      	adds	r3, #2
 8003652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4f      	ldr	r2, [pc, #316]	; (80037b0 <HAL_GPIO_Init+0x308>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d025      	beq.n	80036c2 <HAL_GPIO_Init+0x21a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4e      	ldr	r2, [pc, #312]	; (80037b4 <HAL_GPIO_Init+0x30c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01f      	beq.n	80036be <HAL_GPIO_Init+0x216>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4d      	ldr	r2, [pc, #308]	; (80037b8 <HAL_GPIO_Init+0x310>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d019      	beq.n	80036ba <HAL_GPIO_Init+0x212>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a4c      	ldr	r2, [pc, #304]	; (80037bc <HAL_GPIO_Init+0x314>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <HAL_GPIO_Init+0x20e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4b      	ldr	r2, [pc, #300]	; (80037c0 <HAL_GPIO_Init+0x318>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00d      	beq.n	80036b2 <HAL_GPIO_Init+0x20a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a4a      	ldr	r2, [pc, #296]	; (80037c4 <HAL_GPIO_Init+0x31c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d007      	beq.n	80036ae <HAL_GPIO_Init+0x206>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a49      	ldr	r2, [pc, #292]	; (80037c8 <HAL_GPIO_Init+0x320>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_GPIO_Init+0x202>
 80036a6:	2306      	movs	r3, #6
 80036a8:	e00c      	b.n	80036c4 <HAL_GPIO_Init+0x21c>
 80036aa:	2307      	movs	r3, #7
 80036ac:	e00a      	b.n	80036c4 <HAL_GPIO_Init+0x21c>
 80036ae:	2305      	movs	r3, #5
 80036b0:	e008      	b.n	80036c4 <HAL_GPIO_Init+0x21c>
 80036b2:	2304      	movs	r3, #4
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x21c>
 80036b6:	2303      	movs	r3, #3
 80036b8:	e004      	b.n	80036c4 <HAL_GPIO_Init+0x21c>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e002      	b.n	80036c4 <HAL_GPIO_Init+0x21c>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_GPIO_Init+0x21c>
 80036c2:	2300      	movs	r3, #0
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	f002 0203 	and.w	r2, r2, #3
 80036ca:	0092      	lsls	r2, r2, #2
 80036cc:	4093      	lsls	r3, r2
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d4:	4935      	ldr	r1, [pc, #212]	; (80037ac <HAL_GPIO_Init+0x304>)
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	3302      	adds	r3, #2
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036e2:	4b3a      	ldr	r3, [pc, #232]	; (80037cc <HAL_GPIO_Init+0x324>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003706:	4a31      	ldr	r2, [pc, #196]	; (80037cc <HAL_GPIO_Init+0x324>)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800370c:	4b2f      	ldr	r3, [pc, #188]	; (80037cc <HAL_GPIO_Init+0x324>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003730:	4a26      	ldr	r2, [pc, #152]	; (80037cc <HAL_GPIO_Init+0x324>)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003736:	4b25      	ldr	r3, [pc, #148]	; (80037cc <HAL_GPIO_Init+0x324>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800375a:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <HAL_GPIO_Init+0x324>)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <HAL_GPIO_Init+0x324>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003784:	4a11      	ldr	r2, [pc, #68]	; (80037cc <HAL_GPIO_Init+0x324>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3301      	adds	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2b0f      	cmp	r3, #15
 8003794:	f67f ae96 	bls.w	80034c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40013800 	.word	0x40013800
 80037b0:	40020000 	.word	0x40020000
 80037b4:	40020400 	.word	0x40020400
 80037b8:	40020800 	.word	0x40020800
 80037bc:	40020c00 	.word	0x40020c00
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40021400 	.word	0x40021400
 80037c8:	40021800 	.word	0x40021800
 80037cc:	40013c00 	.word	0x40013c00

080037d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]
 80037dc:	4613      	mov	r3, r2
 80037de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e0:	787b      	ldrb	r3, [r7, #1]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037ec:	e003      	b.n	80037f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ee:	887b      	ldrh	r3, [r7, #2]
 80037f0:	041a      	lsls	r2, r3, #16
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	619a      	str	r2, [r3, #24]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e12b      	b.n	8003a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fe fb20 	bl	8001e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003868:	f001 f8e2 	bl	8004a30 <HAL_RCC_GetPCLK1Freq>
 800386c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4a81      	ldr	r2, [pc, #516]	; (8003a78 <HAL_I2C_Init+0x274>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d807      	bhi.n	8003888 <HAL_I2C_Init+0x84>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a80      	ldr	r2, [pc, #512]	; (8003a7c <HAL_I2C_Init+0x278>)
 800387c:	4293      	cmp	r3, r2
 800387e:	bf94      	ite	ls
 8003880:	2301      	movls	r3, #1
 8003882:	2300      	movhi	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e006      	b.n	8003896 <HAL_I2C_Init+0x92>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a7d      	ldr	r2, [pc, #500]	; (8003a80 <HAL_I2C_Init+0x27c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	bf94      	ite	ls
 8003890:	2301      	movls	r3, #1
 8003892:	2300      	movhi	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0e7      	b.n	8003a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a78      	ldr	r2, [pc, #480]	; (8003a84 <HAL_I2C_Init+0x280>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	0c9b      	lsrs	r3, r3, #18
 80038a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4a6a      	ldr	r2, [pc, #424]	; (8003a78 <HAL_I2C_Init+0x274>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d802      	bhi.n	80038d8 <HAL_I2C_Init+0xd4>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	3301      	adds	r3, #1
 80038d6:	e009      	b.n	80038ec <HAL_I2C_Init+0xe8>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	4a69      	ldr	r2, [pc, #420]	; (8003a88 <HAL_I2C_Init+0x284>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	099b      	lsrs	r3, r3, #6
 80038ea:	3301      	adds	r3, #1
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	495c      	ldr	r1, [pc, #368]	; (8003a78 <HAL_I2C_Init+0x274>)
 8003908:	428b      	cmp	r3, r1
 800390a:	d819      	bhi.n	8003940 <HAL_I2C_Init+0x13c>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1e59      	subs	r1, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	fbb1 f3f3 	udiv	r3, r1, r3
 800391a:	1c59      	adds	r1, r3, #1
 800391c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003920:	400b      	ands	r3, r1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_I2C_Init+0x138>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1e59      	subs	r1, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	fbb1 f3f3 	udiv	r3, r1, r3
 8003934:	3301      	adds	r3, #1
 8003936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393a:	e051      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 800393c:	2304      	movs	r3, #4
 800393e:	e04f      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d111      	bne.n	800396c <HAL_I2C_Init+0x168>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	440b      	add	r3, r1
 8003956:	fbb0 f3f3 	udiv	r3, r0, r3
 800395a:	3301      	adds	r3, #1
 800395c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e012      	b.n	8003992 <HAL_I2C_Init+0x18e>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e58      	subs	r0, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	0099      	lsls	r1, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003982:	3301      	adds	r3, #1
 8003984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Init+0x196>
 8003996:	2301      	movs	r3, #1
 8003998:	e022      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10e      	bne.n	80039c0 <HAL_I2C_Init+0x1bc>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1e58      	subs	r0, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	460b      	mov	r3, r1
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	440b      	add	r3, r1
 80039b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b4:	3301      	adds	r3, #1
 80039b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039be:	e00f      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e58      	subs	r0, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	0099      	lsls	r1, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	6809      	ldr	r1, [r1, #0]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69da      	ldr	r2, [r3, #28]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6911      	ldr	r1, [r2, #16]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68d2      	ldr	r2, [r2, #12]
 8003a1a:	4311      	orrs	r1, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	000186a0 	.word	0x000186a0
 8003a7c:	001e847f 	.word	0x001e847f
 8003a80:	003d08ff 	.word	0x003d08ff
 8003a84:	431bde83 	.word	0x431bde83
 8003a88:	10624dd3 	.word	0x10624dd3

08003a8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	4608      	mov	r0, r1
 8003a96:	4611      	mov	r1, r2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	817b      	strh	r3, [r7, #10]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	813b      	strh	r3, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aa6:	f7fe fcbb 	bl	8002420 <HAL_GetTick>
 8003aaa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	f040 80d9 	bne.w	8003c6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	2319      	movs	r3, #25
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	496d      	ldr	r1, [pc, #436]	; (8003c78 <HAL_I2C_Mem_Write+0x1ec>)
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 fc8b 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e0cc      	b.n	8003c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_I2C_Mem_Write+0x56>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e0c5      	b.n	8003c6e <HAL_I2C_Mem_Write+0x1e2>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d007      	beq.n	8003b08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2221      	movs	r2, #33	; 0x21
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2240      	movs	r2, #64	; 0x40
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a4d      	ldr	r2, [pc, #308]	; (8003c7c <HAL_I2C_Mem_Write+0x1f0>)
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b4a:	88f8      	ldrh	r0, [r7, #6]
 8003b4c:	893a      	ldrh	r2, [r7, #8]
 8003b4e:	8979      	ldrh	r1, [r7, #10]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	4603      	mov	r3, r0
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fac2 	bl	80040e4 <I2C_RequestMemoryWrite>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d052      	beq.n	8003c0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e081      	b.n	8003c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fd50 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d107      	bne.n	8003b92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e06b      	b.n	8003c6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d11b      	bne.n	8003c0c <HAL_I2C_Mem_Write+0x180>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d017      	beq.n	8003c0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1aa      	bne.n	8003b6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fd43 	bl	80046a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d107      	bne.n	8003c3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e016      	b.n	8003c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	00100002 	.word	0x00100002
 8003c7c:	ffff0000 	.word	0xffff0000

08003c80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	; 0x30
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	4608      	mov	r0, r1
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	817b      	strh	r3, [r7, #10]
 8003c92:	460b      	mov	r3, r1
 8003c94:	813b      	strh	r3, [r7, #8]
 8003c96:	4613      	mov	r3, r2
 8003c98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c9a:	f7fe fbc1 	bl	8002420 <HAL_GetTick>
 8003c9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	f040 8214 	bne.w	80040d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	2319      	movs	r3, #25
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	497b      	ldr	r1, [pc, #492]	; (8003ea4 <HAL_I2C_Mem_Read+0x224>)
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fb91 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e207      	b.n	80040d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2C_Mem_Read+0x56>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e200      	b.n	80040d8 <HAL_I2C_Mem_Read+0x458>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d007      	beq.n	8003cfc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2222      	movs	r2, #34	; 0x22
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a5b      	ldr	r2, [pc, #364]	; (8003ea8 <HAL_I2C_Mem_Read+0x228>)
 8003d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d3e:	88f8      	ldrh	r0, [r7, #6]
 8003d40:	893a      	ldrh	r2, [r7, #8]
 8003d42:	8979      	ldrh	r1, [r7, #10]
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fa5e 	bl	8004210 <I2C_RequestMemoryRead>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e1bc      	b.n	80040d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d113      	bne.n	8003d8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	623b      	str	r3, [r7, #32]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	623b      	str	r3, [r7, #32]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e190      	b.n	80040b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d11b      	bne.n	8003dce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e170      	b.n	80040b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d11b      	bne.n	8003e0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	e150      	b.n	80040b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e24:	e144      	b.n	80040b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	f200 80f1 	bhi.w	8004012 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d123      	bne.n	8003e80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fc79 	bl	8004734 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e145      	b.n	80040d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e7e:	e117      	b.n	80040b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d14e      	bne.n	8003f26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4906      	ldr	r1, [pc, #24]	; (8003eac <HAL_I2C_Mem_Read+0x22c>)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 faa4 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e11a      	b.n	80040d8 <HAL_I2C_Mem_Read+0x458>
 8003ea2:	bf00      	nop
 8003ea4:	00100002 	.word	0x00100002
 8003ea8:	ffff0000 	.word	0xffff0000
 8003eac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f24:	e0c4      	b.n	80040b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	496c      	ldr	r1, [pc, #432]	; (80040e0 <HAL_I2C_Mem_Read+0x460>)
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fa55 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0cb      	b.n	80040d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4955      	ldr	r1, [pc, #340]	; (80040e0 <HAL_I2C_Mem_Read+0x460>)
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa27 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e09d      	b.n	80040d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004010:	e04e      	b.n	80040b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fb8c 	bl	8004734 <I2C_WaitOnRXNEFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e058      	b.n	80040d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b04      	cmp	r3, #4
 8004064:	d124      	bne.n	80040b0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	2b03      	cmp	r3, #3
 800406c:	d107      	bne.n	800407e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f47f aeb6 	bne.w	8003e26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3728      	adds	r7, #40	; 0x28
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	00010004 	.word	0x00010004

080040e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	461a      	mov	r2, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	817b      	strh	r3, [r7, #10]
 80040f6:	460b      	mov	r3, r1
 80040f8:	813b      	strh	r3, [r7, #8]
 80040fa:	4613      	mov	r3, r2
 80040fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800410c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	2200      	movs	r2, #0
 8004116:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f960 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004134:	d103      	bne.n	800413e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e05f      	b.n	8004202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004142:	897b      	ldrh	r3, [r7, #10]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004150:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	6a3a      	ldr	r2, [r7, #32]
 8004156:	492d      	ldr	r1, [pc, #180]	; (800420c <I2C_RequestMemoryWrite+0x128>)
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f9bb 	bl	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e04c      	b.n	8004202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004180:	6a39      	ldr	r1, [r7, #32]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fa46 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2b04      	cmp	r3, #4
 8004194:	d107      	bne.n	80041a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e02b      	b.n	8004202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b0:	893b      	ldrh	r3, [r7, #8]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	611a      	str	r2, [r3, #16]
 80041ba:	e021      	b.n	8004200 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041bc:	893b      	ldrh	r3, [r7, #8]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041cc:	6a39      	ldr	r1, [r7, #32]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 fa20 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d107      	bne.n	80041f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e005      	b.n	8004202 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041f6:	893b      	ldrh	r3, [r7, #8]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	00010002 	.word	0x00010002

08004210 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	4608      	mov	r0, r1
 800421a:	4611      	mov	r1, r2
 800421c:	461a      	mov	r2, r3
 800421e:	4603      	mov	r3, r0
 8004220:	817b      	strh	r3, [r7, #10]
 8004222:	460b      	mov	r3, r1
 8004224:	813b      	strh	r3, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004238:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004248:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	2200      	movs	r2, #0
 8004252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f8c2 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00d      	beq.n	800427e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004270:	d103      	bne.n	800427a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0aa      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800428c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	6a3a      	ldr	r2, [r7, #32]
 8004292:	4952      	ldr	r1, [pc, #328]	; (80043dc <I2C_RequestMemoryRead+0x1cc>)
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f91d 	bl	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e097      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042bc:	6a39      	ldr	r1, [r7, #32]
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f9a8 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00d      	beq.n	80042e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d107      	bne.n	80042e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e076      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d105      	bne.n	80042f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ec:	893b      	ldrh	r3, [r7, #8]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	611a      	str	r2, [r3, #16]
 80042f6:	e021      	b.n	800433c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042f8:	893b      	ldrh	r3, [r7, #8]
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004308:	6a39      	ldr	r1, [r7, #32]
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f982 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00d      	beq.n	8004332 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2b04      	cmp	r3, #4
 800431c:	d107      	bne.n	800432e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e050      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004332:	893b      	ldrh	r3, [r7, #8]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433e:	6a39      	ldr	r1, [r7, #32]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f967 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00d      	beq.n	8004368 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	2b04      	cmp	r3, #4
 8004352:	d107      	bne.n	8004364 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004362:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e035      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004376:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	2200      	movs	r2, #0
 8004380:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f82b 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439e:	d103      	bne.n	80043a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e013      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043ac:	897b      	ldrh	r3, [r7, #10]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	6a3a      	ldr	r2, [r7, #32]
 80043c0:	4906      	ldr	r1, [pc, #24]	; (80043dc <I2C_RequestMemoryRead+0x1cc>)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f886 	bl	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	00010002 	.word	0x00010002

080043e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043f0:	e048      	b.n	8004484 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d044      	beq.n	8004484 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fa:	f7fe f811 	bl	8002420 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d302      	bcc.n	8004410 <I2C_WaitOnFlagUntilTimeout+0x30>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d139      	bne.n	8004484 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10d      	bne.n	8004436 <I2C_WaitOnFlagUntilTimeout+0x56>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	43da      	mvns	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	e00c      	b.n	8004450 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	43da      	mvns	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	429a      	cmp	r2, r3
 8004454:	d116      	bne.n	8004484 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e023      	b.n	80044cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	0c1b      	lsrs	r3, r3, #16
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10d      	bne.n	80044aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	43da      	mvns	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	e00c      	b.n	80044c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	43da      	mvns	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4013      	ands	r3, r2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d093      	beq.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e2:	e071      	b.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f2:	d123      	bne.n	800453c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004502:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800450c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f043 0204 	orr.w	r2, r3, #4
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e067      	b.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004542:	d041      	beq.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004544:	f7fd ff6c 	bl	8002420 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	429a      	cmp	r2, r3
 8004552:	d302      	bcc.n	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d136      	bne.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10c      	bne.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	43da      	mvns	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4013      	ands	r3, r2
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	bf14      	ite	ne
 8004576:	2301      	movne	r3, #1
 8004578:	2300      	moveq	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	e00b      	b.n	8004596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	43da      	mvns	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4013      	ands	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e021      	b.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	0c1b      	lsrs	r3, r3, #16
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d10c      	bne.n	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	43da      	mvns	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4013      	ands	r3, r2
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e00b      	b.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	43da      	mvns	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4013      	ands	r3, r2
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	f47f af6d 	bne.w	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004620:	e034      	b.n	800468c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f8e3 	bl	80047ee <I2C_IsAcknowledgeFailed>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e034      	b.n	800469c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004638:	d028      	beq.n	800468c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463a:	f7fd fef1 	bl	8002420 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d11d      	bne.n	800468c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b80      	cmp	r3, #128	; 0x80
 800465c:	d016      	beq.n	800468c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e007      	b.n	800469c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	2b80      	cmp	r3, #128	; 0x80
 8004698:	d1c3      	bne.n	8004622 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b0:	e034      	b.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f89b 	bl	80047ee <I2C_IsAcknowledgeFailed>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e034      	b.n	800472c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d028      	beq.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7fd fea9 	bl	8002420 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d11d      	bne.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d016      	beq.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f043 0220 	orr.w	r2, r3, #32
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e007      	b.n	800472c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b04      	cmp	r3, #4
 8004728:	d1c3      	bne.n	80046b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004740:	e049      	b.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b10      	cmp	r3, #16
 800474e:	d119      	bne.n	8004784 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0210 	mvn.w	r2, #16
 8004758:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e030      	b.n	80047e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004784:	f7fd fe4c 	bl	8002420 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	429a      	cmp	r2, r3
 8004792:	d302      	bcc.n	800479a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d11d      	bne.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d016      	beq.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f043 0220 	orr.w	r2, r3, #32
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e007      	b.n	80047e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	d1ae      	bne.n	8004742 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004804:	d11b      	bne.n	800483e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800480e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f043 0204 	orr.w	r2, r3, #4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0cc      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004860:	4b68      	ldr	r3, [pc, #416]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d90c      	bls.n	8004888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b65      	ldr	r3, [pc, #404]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0b8      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d020      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a0:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4a58      	ldr	r2, [pc, #352]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b8:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a52      	ldr	r2, [pc, #328]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c4:	4b50      	ldr	r3, [pc, #320]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	494d      	ldr	r1, [pc, #308]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d044      	beq.n	800496c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	4b47      	ldr	r3, [pc, #284]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d119      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e07f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d003      	beq.n	800490a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004906:	2b03      	cmp	r3, #3
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490a:	4b3f      	ldr	r3, [pc, #252]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e06f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491a:	4b3b      	ldr	r3, [pc, #236]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e067      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492a:	4b37      	ldr	r3, [pc, #220]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f023 0203 	bic.w	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4934      	ldr	r1, [pc, #208]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	4313      	orrs	r3, r2
 800493a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800493c:	f7fd fd70 	bl	8002420 <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	e00a      	b.n	800495a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004944:	f7fd fd6c 	bl	8002420 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e04f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 020c 	and.w	r2, r3, #12
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	429a      	cmp	r2, r3
 800496a:	d1eb      	bne.n	8004944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800496c:	4b25      	ldr	r3, [pc, #148]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d20c      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e032      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4916      	ldr	r1, [pc, #88]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	490e      	ldr	r1, [pc, #56]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049d2:	f000 f855 	bl	8004a80 <HAL_RCC_GetSysClockFreq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	490a      	ldr	r1, [pc, #40]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 80049e4:	5ccb      	ldrb	r3, [r1, r3]
 80049e6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd fcd0 	bl	8002398 <HAL_InitTick>

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40023c00 	.word	0x40023c00
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	08009f34 	.word	0x08009f34
 8004a10:	20000090 	.word	0x20000090
 8004a14:	20000094 	.word	0x20000094

08004a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a1c:	4b03      	ldr	r3, [pc, #12]	; (8004a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20000090 	.word	0x20000090

08004a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a34:	f7ff fff0 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	0a9b      	lsrs	r3, r3, #10
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4903      	ldr	r1, [pc, #12]	; (8004a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40023800 	.word	0x40023800
 8004a54:	08009f44 	.word	0x08009f44

08004a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a5c:	f7ff ffdc 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	0b5b      	lsrs	r3, r3, #13
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	4903      	ldr	r1, [pc, #12]	; (8004a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6e:	5ccb      	ldrb	r3, [r1, r3]
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	08009f44 	.word	0x08009f44

08004a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a84:	b0ae      	sub	sp, #184	; 0xb8
 8004a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa6:	4bcb      	ldr	r3, [pc, #812]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	f200 8206 	bhi.w	8004ec0 <HAL_RCC_GetSysClockFreq+0x440>
 8004ab4:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004af1 	.word	0x08004af1
 8004ac0:	08004ec1 	.word	0x08004ec1
 8004ac4:	08004ec1 	.word	0x08004ec1
 8004ac8:	08004ec1 	.word	0x08004ec1
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	08004ec1 	.word	0x08004ec1
 8004ad4:	08004ec1 	.word	0x08004ec1
 8004ad8:	08004ec1 	.word	0x08004ec1
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004ec1 	.word	0x08004ec1
 8004ae4:	08004ec1 	.word	0x08004ec1
 8004ae8:	08004ec1 	.word	0x08004ec1
 8004aec:	08004cf1 	.word	0x08004cf1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004af0:	4bb9      	ldr	r3, [pc, #740]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004af6:	e1e7      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004af8:	4bb8      	ldr	r3, [pc, #736]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x35c>)
 8004afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004afe:	e1e3      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b00:	4bb4      	ldr	r3, [pc, #720]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b0c:	4bb1      	ldr	r3, [pc, #708]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d071      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b18:	4bae      	ldr	r3, [pc, #696]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	099b      	lsrs	r3, r3, #6
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b24:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b34:	2300      	movs	r3, #0
 8004b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b3e:	4622      	mov	r2, r4
 8004b40:	462b      	mov	r3, r5
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f04f 0100 	mov.w	r1, #0
 8004b4a:	0159      	lsls	r1, r3, #5
 8004b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b50:	0150      	lsls	r0, r2, #5
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4621      	mov	r1, r4
 8004b58:	1a51      	subs	r1, r2, r1
 8004b5a:	6439      	str	r1, [r7, #64]	; 0x40
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b62:	647b      	str	r3, [r7, #68]	; 0x44
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004b70:	4649      	mov	r1, r9
 8004b72:	018b      	lsls	r3, r1, #6
 8004b74:	4641      	mov	r1, r8
 8004b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	018a      	lsls	r2, r1, #6
 8004b7e:	4641      	mov	r1, r8
 8004b80:	1a51      	subs	r1, r2, r1
 8004b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b84:	4649      	mov	r1, r9
 8004b86:	eb63 0301 	sbc.w	r3, r3, r1
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004b98:	4649      	mov	r1, r9
 8004b9a:	00cb      	lsls	r3, r1, #3
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ba2:	4641      	mov	r1, r8
 8004ba4:	00ca      	lsls	r2, r1, #3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	4622      	mov	r2, r4
 8004bae:	189b      	adds	r3, r3, r2
 8004bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb2:	462b      	mov	r3, r5
 8004bb4:	460a      	mov	r2, r1
 8004bb6:	eb42 0303 	adc.w	r3, r2, r3
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bc8:	4629      	mov	r1, r5
 8004bca:	024b      	lsls	r3, r1, #9
 8004bcc:	4621      	mov	r1, r4
 8004bce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	024a      	lsls	r2, r1, #9
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004be4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004be8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004bec:	f7fc f81c 	bl	8000c28 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bfa:	e067      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bfc:	4b75      	ldr	r3, [pc, #468]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	099b      	lsrs	r3, r3, #6
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c08:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c16:	2300      	movs	r3, #0
 8004c18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004c1e:	4622      	mov	r2, r4
 8004c20:	462b      	mov	r3, r5
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f04f 0100 	mov.w	r1, #0
 8004c2a:	0159      	lsls	r1, r3, #5
 8004c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c30:	0150      	lsls	r0, r2, #5
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4621      	mov	r1, r4
 8004c38:	1a51      	subs	r1, r2, r1
 8004c3a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004c50:	4649      	mov	r1, r9
 8004c52:	018b      	lsls	r3, r1, #6
 8004c54:	4641      	mov	r1, r8
 8004c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	018a      	lsls	r2, r1, #6
 8004c5e:	4641      	mov	r1, r8
 8004c60:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c64:	4649      	mov	r1, r9
 8004c66:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c7e:	4692      	mov	sl, r2
 8004c80:	469b      	mov	fp, r3
 8004c82:	4623      	mov	r3, r4
 8004c84:	eb1a 0303 	adds.w	r3, sl, r3
 8004c88:	623b      	str	r3, [r7, #32]
 8004c8a:	462b      	mov	r3, r5
 8004c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	028b      	lsls	r3, r1, #10
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ca8:	4621      	mov	r1, r4
 8004caa:	028a      	lsls	r2, r1, #10
 8004cac:	4610      	mov	r0, r2
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	673b      	str	r3, [r7, #112]	; 0x70
 8004cb8:	677a      	str	r2, [r7, #116]	; 0x74
 8004cba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004cbe:	f7fb ffb3 	bl	8000c28 <__aeabi_uldivmod>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ccc:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004cee:	e0eb      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf0:	4b38      	ldr	r3, [pc, #224]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cfc:	4b35      	ldr	r3, [pc, #212]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d06b      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d08:	4b32      	ldr	r3, [pc, #200]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	099b      	lsrs	r3, r3, #6
 8004d0e:	2200      	movs	r2, #0
 8004d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004d24:	4622      	mov	r2, r4
 8004d26:	462b      	mov	r3, r5
 8004d28:	f04f 0000 	mov.w	r0, #0
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	0159      	lsls	r1, r3, #5
 8004d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d36:	0150      	lsls	r0, r2, #5
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	1a51      	subs	r1, r2, r1
 8004d40:	61b9      	str	r1, [r7, #24]
 8004d42:	4629      	mov	r1, r5
 8004d44:	eb63 0301 	sbc.w	r3, r3, r1
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d56:	4659      	mov	r1, fp
 8004d58:	018b      	lsls	r3, r1, #6
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d60:	4651      	mov	r1, sl
 8004d62:	018a      	lsls	r2, r1, #6
 8004d64:	4651      	mov	r1, sl
 8004d66:	ebb2 0801 	subs.w	r8, r2, r1
 8004d6a:	4659      	mov	r1, fp
 8004d6c:	eb63 0901 	sbc.w	r9, r3, r1
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d84:	4690      	mov	r8, r2
 8004d86:	4699      	mov	r9, r3
 8004d88:	4623      	mov	r3, r4
 8004d8a:	eb18 0303 	adds.w	r3, r8, r3
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	462b      	mov	r3, r5
 8004d92:	eb49 0303 	adc.w	r3, r9, r3
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004da4:	4629      	mov	r1, r5
 8004da6:	024b      	lsls	r3, r1, #9
 8004da8:	4621      	mov	r1, r4
 8004daa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dae:	4621      	mov	r1, r4
 8004db0:	024a      	lsls	r2, r1, #9
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dba:	2200      	movs	r2, #0
 8004dbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dbe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004dc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dc4:	f7fb ff30 	bl	8000c28 <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dd2:	e065      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x420>
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de0:	4b3d      	ldr	r3, [pc, #244]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	099b      	lsrs	r3, r3, #6
 8004de6:	2200      	movs	r2, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	4611      	mov	r1, r2
 8004dec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004df0:	653b      	str	r3, [r7, #80]	; 0x50
 8004df2:	2300      	movs	r3, #0
 8004df4:	657b      	str	r3, [r7, #84]	; 0x54
 8004df6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004dfa:	4642      	mov	r2, r8
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	f04f 0000 	mov.w	r0, #0
 8004e02:	f04f 0100 	mov.w	r1, #0
 8004e06:	0159      	lsls	r1, r3, #5
 8004e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e0c:	0150      	lsls	r0, r2, #5
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4641      	mov	r1, r8
 8004e14:	1a51      	subs	r1, r2, r1
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	4649      	mov	r1, r9
 8004e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	018b      	lsls	r3, r1, #6
 8004e30:	4651      	mov	r1, sl
 8004e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e36:	4651      	mov	r1, sl
 8004e38:	018a      	lsls	r2, r1, #6
 8004e3a:	4651      	mov	r1, sl
 8004e3c:	1a54      	subs	r4, r2, r1
 8004e3e:	4659      	mov	r1, fp
 8004e40:	eb63 0501 	sbc.w	r5, r3, r1
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	00eb      	lsls	r3, r5, #3
 8004e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e52:	00e2      	lsls	r2, r4, #3
 8004e54:	4614      	mov	r4, r2
 8004e56:	461d      	mov	r5, r3
 8004e58:	4643      	mov	r3, r8
 8004e5a:	18e3      	adds	r3, r4, r3
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	464b      	mov	r3, r9
 8004e60:	eb45 0303 	adc.w	r3, r5, r3
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e72:	4629      	mov	r1, r5
 8004e74:	028b      	lsls	r3, r1, #10
 8004e76:	4621      	mov	r1, r4
 8004e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	028a      	lsls	r2, r1, #10
 8004e80:	4610      	mov	r0, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e88:	2200      	movs	r2, #0
 8004e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e8c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004e8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e92:	f7fb fec9 	bl	8000c28 <__aeabi_uldivmod>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ea0:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	0f1b      	lsrs	r3, r3, #28
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004eb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ebe:	e003      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ec0:	4b06      	ldr	r3, [pc, #24]	; (8004edc <HAL_RCC_GetSysClockFreq+0x45c>)
 8004ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ec6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	37b8      	adds	r7, #184	; 0xb8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	00f42400 	.word	0x00f42400

08004ee0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e28d      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8083 	beq.w	8005006 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f00:	4b94      	ldr	r3, [pc, #592]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 030c 	and.w	r3, r3, #12
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d019      	beq.n	8004f40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f0c:	4b91      	ldr	r3, [pc, #580]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d106      	bne.n	8004f26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f18:	4b8e      	ldr	r3, [pc, #568]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f24:	d00c      	beq.n	8004f40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f26:	4b8b      	ldr	r3, [pc, #556]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f2e:	2b0c      	cmp	r3, #12
 8004f30:	d112      	bne.n	8004f58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f32:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f3e:	d10b      	bne.n	8004f58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f40:	4b84      	ldr	r3, [pc, #528]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d05b      	beq.n	8005004 <HAL_RCC_OscConfig+0x124>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d157      	bne.n	8005004 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e25a      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f60:	d106      	bne.n	8004f70 <HAL_RCC_OscConfig+0x90>
 8004f62:	4b7c      	ldr	r3, [pc, #496]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a7b      	ldr	r2, [pc, #492]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e01d      	b.n	8004fac <HAL_RCC_OscConfig+0xcc>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCC_OscConfig+0xb4>
 8004f7a:	4b76      	ldr	r3, [pc, #472]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a75      	ldr	r2, [pc, #468]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	4b73      	ldr	r3, [pc, #460]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a72      	ldr	r2, [pc, #456]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e00b      	b.n	8004fac <HAL_RCC_OscConfig+0xcc>
 8004f94:	4b6f      	ldr	r3, [pc, #444]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a6e      	ldr	r2, [pc, #440]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a6b      	ldr	r2, [pc, #428]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d013      	beq.n	8004fdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb4:	f7fd fa34 	bl	8002420 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fbc:	f7fd fa30 	bl	8002420 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	; 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e21f      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	4b61      	ldr	r3, [pc, #388]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0xdc>
 8004fda:	e014      	b.n	8005006 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fd fa20 	bl	8002420 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe4:	f7fd fa1c 	bl	8002420 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	; 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e20b      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff6:	4b57      	ldr	r3, [pc, #348]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x104>
 8005002:	e000      	b.n	8005006 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d06f      	beq.n	80050f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005012:	4b50      	ldr	r3, [pc, #320]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 030c 	and.w	r3, r3, #12
 800501a:	2b00      	cmp	r3, #0
 800501c:	d017      	beq.n	800504e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800501e:	4b4d      	ldr	r3, [pc, #308]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005026:	2b08      	cmp	r3, #8
 8005028:	d105      	bne.n	8005036 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800502a:	4b4a      	ldr	r3, [pc, #296]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005036:	4b47      	ldr	r3, [pc, #284]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d11c      	bne.n	800507c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005042:	4b44      	ldr	r3, [pc, #272]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d116      	bne.n	800507c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504e:	4b41      	ldr	r3, [pc, #260]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_RCC_OscConfig+0x186>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d001      	beq.n	8005066 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e1d3      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005066:	4b3b      	ldr	r3, [pc, #236]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4937      	ldr	r1, [pc, #220]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800507a:	e03a      	b.n	80050f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d020      	beq.n	80050c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005084:	4b34      	ldr	r3, [pc, #208]	; (8005158 <HAL_RCC_OscConfig+0x278>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508a:	f7fd f9c9 	bl	8002420 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005092:	f7fd f9c5 	bl	8002420 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e1b4      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a4:	4b2b      	ldr	r3, [pc, #172]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b0:	4b28      	ldr	r3, [pc, #160]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4925      	ldr	r1, [pc, #148]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	600b      	str	r3, [r1, #0]
 80050c4:	e015      	b.n	80050f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c6:	4b24      	ldr	r3, [pc, #144]	; (8005158 <HAL_RCC_OscConfig+0x278>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fd f9a8 	bl	8002420 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d4:	f7fd f9a4 	bl	8002420 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e193      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d036      	beq.n	800516c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d016      	beq.n	8005134 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005106:	4b15      	ldr	r3, [pc, #84]	; (800515c <HAL_RCC_OscConfig+0x27c>)
 8005108:	2201      	movs	r2, #1
 800510a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510c:	f7fd f988 	bl	8002420 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005114:	f7fd f984 	bl	8002420 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e173      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005126:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8005128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x234>
 8005132:	e01b      	b.n	800516c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005134:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_RCC_OscConfig+0x27c>)
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513a:	f7fd f971 	bl	8002420 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005140:	e00e      	b.n	8005160 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005142:	f7fd f96d 	bl	8002420 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d907      	bls.n	8005160 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e15c      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
 8005154:	40023800 	.word	0x40023800
 8005158:	42470000 	.word	0x42470000
 800515c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005160:	4b8a      	ldr	r3, [pc, #552]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ea      	bne.n	8005142 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8097 	beq.w	80052a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800517a:	2300      	movs	r3, #0
 800517c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517e:	4b83      	ldr	r3, [pc, #524]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10f      	bne.n	80051aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	4b7f      	ldr	r3, [pc, #508]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4a7e      	ldr	r2, [pc, #504]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005198:	6413      	str	r3, [r2, #64]	; 0x40
 800519a:	4b7c      	ldr	r3, [pc, #496]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a6:	2301      	movs	r3, #1
 80051a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051aa:	4b79      	ldr	r3, [pc, #484]	; (8005390 <HAL_RCC_OscConfig+0x4b0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d118      	bne.n	80051e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b6:	4b76      	ldr	r3, [pc, #472]	; (8005390 <HAL_RCC_OscConfig+0x4b0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a75      	ldr	r2, [pc, #468]	; (8005390 <HAL_RCC_OscConfig+0x4b0>)
 80051bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c2:	f7fd f92d 	bl	8002420 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ca:	f7fd f929 	bl	8002420 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e118      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051dc:	4b6c      	ldr	r3, [pc, #432]	; (8005390 <HAL_RCC_OscConfig+0x4b0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d106      	bne.n	80051fe <HAL_RCC_OscConfig+0x31e>
 80051f0:	4b66      	ldr	r3, [pc, #408]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	4a65      	ldr	r2, [pc, #404]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	6713      	str	r3, [r2, #112]	; 0x70
 80051fc:	e01c      	b.n	8005238 <HAL_RCC_OscConfig+0x358>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b05      	cmp	r3, #5
 8005204:	d10c      	bne.n	8005220 <HAL_RCC_OscConfig+0x340>
 8005206:	4b61      	ldr	r3, [pc, #388]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	4a60      	ldr	r2, [pc, #384]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 800520c:	f043 0304 	orr.w	r3, r3, #4
 8005210:	6713      	str	r3, [r2, #112]	; 0x70
 8005212:	4b5e      	ldr	r3, [pc, #376]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005216:	4a5d      	ldr	r2, [pc, #372]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	6713      	str	r3, [r2, #112]	; 0x70
 800521e:	e00b      	b.n	8005238 <HAL_RCC_OscConfig+0x358>
 8005220:	4b5a      	ldr	r3, [pc, #360]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	4a59      	ldr	r2, [pc, #356]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	6713      	str	r3, [r2, #112]	; 0x70
 800522c:	4b57      	ldr	r3, [pc, #348]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a56      	ldr	r2, [pc, #344]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005232:	f023 0304 	bic.w	r3, r3, #4
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d015      	beq.n	800526c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005240:	f7fd f8ee 	bl	8002420 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005246:	e00a      	b.n	800525e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005248:	f7fd f8ea 	bl	8002420 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f241 3288 	movw	r2, #5000	; 0x1388
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e0d7      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525e:	4b4b      	ldr	r3, [pc, #300]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0ee      	beq.n	8005248 <HAL_RCC_OscConfig+0x368>
 800526a:	e014      	b.n	8005296 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526c:	f7fd f8d8 	bl	8002420 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005272:	e00a      	b.n	800528a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005274:	f7fd f8d4 	bl	8002420 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e0c1      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800528a:	4b40      	ldr	r3, [pc, #256]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1ee      	bne.n	8005274 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d105      	bne.n	80052a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800529c:	4b3b      	ldr	r3, [pc, #236]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	4a3a      	ldr	r2, [pc, #232]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 80052a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 80ad 	beq.w	800540c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052b2:	4b36      	ldr	r3, [pc, #216]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d060      	beq.n	8005380 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d145      	bne.n	8005352 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c6:	4b33      	ldr	r3, [pc, #204]	; (8005394 <HAL_RCC_OscConfig+0x4b4>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fd f8a8 	bl	8002420 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fd f8a4 	bl	8002420 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e093      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	4b29      	ldr	r3, [pc, #164]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69da      	ldr	r2, [r3, #28]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	019b      	lsls	r3, r3, #6
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	3b01      	subs	r3, #1
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	061b      	lsls	r3, r3, #24
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	071b      	lsls	r3, r3, #28
 800531e:	491b      	ldr	r1, [pc, #108]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005320:	4313      	orrs	r3, r2
 8005322:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005324:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <HAL_RCC_OscConfig+0x4b4>)
 8005326:	2201      	movs	r2, #1
 8005328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532a:	f7fd f879 	bl	8002420 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005332:	f7fd f875 	bl	8002420 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e064      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005344:	4b11      	ldr	r3, [pc, #68]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x452>
 8005350:	e05c      	b.n	800540c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <HAL_RCC_OscConfig+0x4b4>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fd f862 	bl	8002420 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005360:	f7fd f85e 	bl	8002420 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e04d      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <HAL_RCC_OscConfig+0x4ac>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x480>
 800537e:	e045      	b.n	800540c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d107      	bne.n	8005398 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e040      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
 800538c:	40023800 	.word	0x40023800
 8005390:	40007000 	.word	0x40007000
 8005394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005398:	4b1f      	ldr	r3, [pc, #124]	; (8005418 <HAL_RCC_OscConfig+0x538>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d030      	beq.n	8005408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d129      	bne.n	8005408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053be:	429a      	cmp	r2, r3
 80053c0:	d122      	bne.n	8005408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053c8:	4013      	ands	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d119      	bne.n	8005408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	3b01      	subs	r3, #1
 80053e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d10f      	bne.n	8005408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d107      	bne.n	8005408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40023800 	.word	0x40023800

0800541c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e041      	b.n	80054b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fc fd5c 	bl	8001f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f000 f9b8 	bl	80057d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d109      	bne.n	80054e0 <HAL_TIM_PWM_Start+0x24>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	e022      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d109      	bne.n	80054fa <HAL_TIM_PWM_Start+0x3e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	bf14      	ite	ne
 80054f2:	2301      	movne	r3, #1
 80054f4:	2300      	moveq	r3, #0
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	e015      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d109      	bne.n	8005514 <HAL_TIM_PWM_Start+0x58>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b01      	cmp	r3, #1
 800550a:	bf14      	ite	ne
 800550c:	2301      	movne	r3, #1
 800550e:	2300      	moveq	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	e008      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	bf14      	ite	ne
 8005520:	2301      	movne	r3, #1
 8005522:	2300      	moveq	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e07c      	b.n	8005628 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_TIM_PWM_Start+0x82>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800553c:	e013      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d104      	bne.n	800554e <HAL_TIM_PWM_Start+0x92>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554c:	e00b      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d104      	bne.n	800555e <HAL_TIM_PWM_Start+0xa2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555c:	e003      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fb8a 	bl	8005c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2d      	ldr	r2, [pc, #180]	; (8005630 <HAL_TIM_PWM_Start+0x174>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_TIM_PWM_Start+0xcc>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2c      	ldr	r2, [pc, #176]	; (8005634 <HAL_TIM_PWM_Start+0x178>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_TIM_PWM_Start+0xd0>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <HAL_TIM_PWM_Start+0xd2>
 800558c:	2300      	movs	r3, #0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a22      	ldr	r2, [pc, #136]	; (8005630 <HAL_TIM_PWM_Start+0x174>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d022      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b4:	d01d      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <HAL_TIM_PWM_Start+0x17c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d018      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <HAL_TIM_PWM_Start+0x180>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <HAL_TIM_PWM_Start+0x184>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00e      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a16      	ldr	r2, [pc, #88]	; (8005634 <HAL_TIM_PWM_Start+0x178>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d009      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a18      	ldr	r2, [pc, #96]	; (8005644 <HAL_TIM_PWM_Start+0x188>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d004      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a16      	ldr	r2, [pc, #88]	; (8005648 <HAL_TIM_PWM_Start+0x18c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d111      	bne.n	8005616 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b06      	cmp	r3, #6
 8005602:	d010      	beq.n	8005626 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005614:	e007      	b.n	8005626 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40010000 	.word	0x40010000
 8005634:	40010400 	.word	0x40010400
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40014000 	.word	0x40014000
 8005648:	40001800 	.word	0x40001800

0800564c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005666:	2302      	movs	r3, #2
 8005668:	e0ae      	b.n	80057c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b0c      	cmp	r3, #12
 8005676:	f200 809f 	bhi.w	80057b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800567a:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	080056b5 	.word	0x080056b5
 8005684:	080057b9 	.word	0x080057b9
 8005688:	080057b9 	.word	0x080057b9
 800568c:	080057b9 	.word	0x080057b9
 8005690:	080056f5 	.word	0x080056f5
 8005694:	080057b9 	.word	0x080057b9
 8005698:	080057b9 	.word	0x080057b9
 800569c:	080057b9 	.word	0x080057b9
 80056a0:	08005737 	.word	0x08005737
 80056a4:	080057b9 	.word	0x080057b9
 80056a8:	080057b9 	.word	0x080057b9
 80056ac:	080057b9 	.word	0x080057b9
 80056b0:	08005777 	.word	0x08005777
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 f934 	bl	8005928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0208 	orr.w	r2, r2, #8
 80056ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0204 	bic.w	r2, r2, #4
 80056de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6999      	ldr	r1, [r3, #24]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	619a      	str	r2, [r3, #24]
      break;
 80056f2:	e064      	b.n	80057be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 f984 	bl	8005a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800570e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6999      	ldr	r1, [r3, #24]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	021a      	lsls	r2, r3, #8
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	619a      	str	r2, [r3, #24]
      break;
 8005734:	e043      	b.n	80057be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 f9d9 	bl	8005af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0208 	orr.w	r2, r2, #8
 8005750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0204 	bic.w	r2, r2, #4
 8005760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69d9      	ldr	r1, [r3, #28]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	61da      	str	r2, [r3, #28]
      break;
 8005774:	e023      	b.n	80057be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fa2d 	bl	8005bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69d9      	ldr	r1, [r3, #28]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	021a      	lsls	r2, r3, #8
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	61da      	str	r2, [r3, #28]
      break;
 80057b6:	e002      	b.n	80057be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	75fb      	strb	r3, [r7, #23]
      break;
 80057bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a46      	ldr	r2, [pc, #280]	; (80058fc <TIM_Base_SetConfig+0x12c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ee:	d00f      	beq.n	8005810 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a43      	ldr	r2, [pc, #268]	; (8005900 <TIM_Base_SetConfig+0x130>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00b      	beq.n	8005810 <TIM_Base_SetConfig+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a42      	ldr	r2, [pc, #264]	; (8005904 <TIM_Base_SetConfig+0x134>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d007      	beq.n	8005810 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a41      	ldr	r2, [pc, #260]	; (8005908 <TIM_Base_SetConfig+0x138>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_Base_SetConfig+0x40>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a40      	ldr	r2, [pc, #256]	; (800590c <TIM_Base_SetConfig+0x13c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d108      	bne.n	8005822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a35      	ldr	r2, [pc, #212]	; (80058fc <TIM_Base_SetConfig+0x12c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d02b      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005830:	d027      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a32      	ldr	r2, [pc, #200]	; (8005900 <TIM_Base_SetConfig+0x130>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d023      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a31      	ldr	r2, [pc, #196]	; (8005904 <TIM_Base_SetConfig+0x134>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01f      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a30      	ldr	r2, [pc, #192]	; (8005908 <TIM_Base_SetConfig+0x138>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01b      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2f      	ldr	r2, [pc, #188]	; (800590c <TIM_Base_SetConfig+0x13c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d017      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2e      	ldr	r2, [pc, #184]	; (8005910 <TIM_Base_SetConfig+0x140>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2d      	ldr	r2, [pc, #180]	; (8005914 <TIM_Base_SetConfig+0x144>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00f      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2c      	ldr	r2, [pc, #176]	; (8005918 <TIM_Base_SetConfig+0x148>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00b      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2b      	ldr	r2, [pc, #172]	; (800591c <TIM_Base_SetConfig+0x14c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <TIM_Base_SetConfig+0x150>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a29      	ldr	r2, [pc, #164]	; (8005924 <TIM_Base_SetConfig+0x154>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d108      	bne.n	8005894 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a10      	ldr	r2, [pc, #64]	; (80058fc <TIM_Base_SetConfig+0x12c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_Base_SetConfig+0xf8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a12      	ldr	r2, [pc, #72]	; (800590c <TIM_Base_SetConfig+0x13c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d103      	bne.n	80058d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	611a      	str	r2, [r3, #16]
  }
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40010000 	.word	0x40010000
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40010400 	.word	0x40010400
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800
 800591c:	40001800 	.word	0x40001800
 8005920:	40001c00 	.word	0x40001c00
 8005924:	40002000 	.word	0x40002000

08005928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f023 0201 	bic.w	r2, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 0302 	bic.w	r3, r3, #2
 8005970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a20      	ldr	r2, [pc, #128]	; (8005a00 <TIM_OC1_SetConfig+0xd8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC1_SetConfig+0x64>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a1f      	ldr	r2, [pc, #124]	; (8005a04 <TIM_OC1_SetConfig+0xdc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d10c      	bne.n	80059a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0308 	bic.w	r3, r3, #8
 8005992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f023 0304 	bic.w	r3, r3, #4
 80059a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <TIM_OC1_SetConfig+0xd8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_OC1_SetConfig+0x8e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a14      	ldr	r2, [pc, #80]	; (8005a04 <TIM_OC1_SetConfig+0xdc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d111      	bne.n	80059da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40010000 	.word	0x40010000
 8005a04:	40010400 	.word	0x40010400

08005a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f023 0210 	bic.w	r2, r3, #16
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f023 0320 	bic.w	r3, r3, #32
 8005a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a22      	ldr	r2, [pc, #136]	; (8005aec <TIM_OC2_SetConfig+0xe4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_OC2_SetConfig+0x68>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a21      	ldr	r2, [pc, #132]	; (8005af0 <TIM_OC2_SetConfig+0xe8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d10d      	bne.n	8005a8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a17      	ldr	r2, [pc, #92]	; (8005aec <TIM_OC2_SetConfig+0xe4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_OC2_SetConfig+0x94>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <TIM_OC2_SetConfig+0xe8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d113      	bne.n	8005ac4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40010400 	.word	0x40010400

08005af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a21      	ldr	r2, [pc, #132]	; (8005bd4 <TIM_OC3_SetConfig+0xe0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_OC3_SetConfig+0x66>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a20      	ldr	r2, [pc, #128]	; (8005bd8 <TIM_OC3_SetConfig+0xe4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d10d      	bne.n	8005b76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a16      	ldr	r2, [pc, #88]	; (8005bd4 <TIM_OC3_SetConfig+0xe0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d003      	beq.n	8005b86 <TIM_OC3_SetConfig+0x92>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <TIM_OC3_SetConfig+0xe4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d113      	bne.n	8005bae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	621a      	str	r2, [r3, #32]
}
 8005bc8:	bf00      	nop
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	40010000 	.word	0x40010000
 8005bd8:	40010400 	.word	0x40010400

08005bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	031b      	lsls	r3, r3, #12
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a12      	ldr	r2, [pc, #72]	; (8005c80 <TIM_OC4_SetConfig+0xa4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_OC4_SetConfig+0x68>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a11      	ldr	r2, [pc, #68]	; (8005c84 <TIM_OC4_SetConfig+0xa8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d109      	bne.n	8005c58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	019b      	lsls	r3, r3, #6
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40010400 	.word	0x40010400

08005c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 031f 	and.w	r3, r3, #31
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a1a      	ldr	r2, [r3, #32]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	401a      	ands	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a1a      	ldr	r2, [r3, #32]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
	...

08005cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e05a      	b.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a21      	ldr	r2, [pc, #132]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d022      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d01d      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d018      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00e      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d009      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10c      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40000c00 	.word	0x40000c00
 8005dc0:	40010400 	.word	0x40010400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40001800 	.word	0x40001800

08005dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e042      	b.n	8005e64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fc f914 	bl	8002020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2224      	movs	r2, #36	; 0x24
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fd69 	bl	80068e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695a      	ldr	r2, [r3, #20]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d175      	bne.n	8005f78 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_UART_Transmit+0x2c>
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e06e      	b.n	8005f7a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2221      	movs	r2, #33	; 0x21
 8005ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eaa:	f7fc fab9 	bl	8002420 <HAL_GetTick>
 8005eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	88fa      	ldrh	r2, [r7, #6]
 8005eba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec4:	d108      	bne.n	8005ed8 <HAL_UART_Transmit+0x6c>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	e003      	b.n	8005ee0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ee0:	e02e      	b.n	8005f40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2180      	movs	r1, #128	; 0x80
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 fb05 	bl	80064fc <UART_WaitOnFlagUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e03a      	b.n	8005f7a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	e007      	b.n	8005f32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	781a      	ldrb	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1cb      	bne.n	8005ee2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2200      	movs	r2, #0
 8005f52:	2140      	movs	r1, #64	; 0x40
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fad1 	bl	80064fc <UART_WaitOnFlagUntilTimeout>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e006      	b.n	8005f7a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e000      	b.n	8005f7a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f78:	2302      	movs	r3, #2
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3720      	adds	r7, #32
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b0ba      	sub	sp, #232	; 0xe8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <HAL_UART_IRQHandler+0x66>
 8005fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fbc2 	bl	800676c <UART_Receive_IT>
      return;
 8005fe8:	e25b      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80de 	beq.w	80061b0 <HAL_UART_IRQHandler+0x22c>
 8005ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006004:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80d1 	beq.w	80061b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <HAL_UART_IRQHandler+0xae>
 800601a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	f043 0201 	orr.w	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00b      	beq.n	8006056 <HAL_UART_IRQHandler+0xd2>
 800603e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	f043 0202 	orr.w	r2, r3, #2
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <HAL_UART_IRQHandler+0xf6>
 8006062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	f043 0204 	orr.w	r2, r3, #4
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d011      	beq.n	80060aa <HAL_UART_IRQHandler+0x126>
 8006086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a2:	f043 0208 	orr.w	r2, r3, #8
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 81f2 	beq.w	8006498 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_UART_IRQHandler+0x14e>
 80060c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fb4d 	bl	800676c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	bf0c      	ite	eq
 80060e0:	2301      	moveq	r3, #1
 80060e2:	2300      	movne	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <HAL_UART_IRQHandler+0x17a>
 80060f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d04f      	beq.n	800619e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa55 	bl	80065ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d141      	bne.n	8006196 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3314      	adds	r3, #20
 8006118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800612c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3314      	adds	r3, #20
 800613a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800613e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800614a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1d9      	bne.n	8006112 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d013      	beq.n	800618e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	4a7e      	ldr	r2, [pc, #504]	; (8006364 <HAL_UART_IRQHandler+0x3e0>)
 800616c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	4618      	mov	r0, r3
 8006174:	f7fc ff3a 	bl	8002fec <HAL_DMA_Abort_IT>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d016      	beq.n	80061ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618c:	e00e      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f99e 	bl	80064d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006194:	e00a      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f99a 	bl	80064d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619c:	e006      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f996 	bl	80064d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80061aa:	e175      	b.n	8006498 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ac:	bf00      	nop
    return;
 80061ae:	e173      	b.n	8006498 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	f040 814f 	bne.w	8006458 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8148 	beq.w	8006458 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8141 	beq.w	8006458 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60bb      	str	r3, [r7, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	f040 80b6 	bne.w	8006368 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006208:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8145 	beq.w	800649c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800621a:	429a      	cmp	r2, r3
 800621c:	f080 813e 	bcs.w	800649c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006226:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006232:	f000 8088 	beq.w	8006346 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006244:	e853 3f00 	ldrex	r3, [r3]
 8006248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800624c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	330c      	adds	r3, #12
 800625e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006262:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800626e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800627a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1d9      	bne.n	8006236 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3314      	adds	r3, #20
 8006288:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006294:	f023 0301 	bic.w	r3, r3, #1
 8006298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3314      	adds	r3, #20
 80062a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e1      	bne.n	8006282 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3314      	adds	r3, #20
 80062c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3314      	adds	r3, #20
 80062de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e3      	bne.n	80062be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006316:	f023 0310 	bic.w	r3, r3, #16
 800631a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	330c      	adds	r3, #12
 8006324:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006328:	65ba      	str	r2, [r7, #88]	; 0x58
 800632a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800632e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e3      	bne.n	8006304 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006340:	4618      	mov	r0, r3
 8006342:	f7fc fde3 	bl	8002f0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006354:	b29b      	uxth	r3, r3
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	b29b      	uxth	r3, r3
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f8c1 	bl	80064e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006362:	e09b      	b.n	800649c <HAL_UART_IRQHandler+0x518>
 8006364:	08006675 	.word	0x08006675
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006370:	b29b      	uxth	r3, r3
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 808e 	beq.w	80064a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 8089 	beq.w	80064a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063b2:	647a      	str	r2, [r7, #68]	; 0x44
 80063b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e3      	bne.n	800638e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3314      	adds	r3, #20
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	623b      	str	r3, [r7, #32]
   return(result);
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3314      	adds	r3, #20
 80063e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063ea:	633a      	str	r2, [r7, #48]	; 0x30
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e3      	bne.n	80063c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	60fb      	str	r3, [r7, #12]
   return(result);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0310 	bic.w	r3, r3, #16
 8006422:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006430:	61fa      	str	r2, [r7, #28]
 8006432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	69b9      	ldr	r1, [r7, #24]
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	617b      	str	r3, [r7, #20]
   return(result);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e3      	bne.n	800640c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800644a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f847 	bl	80064e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006456:	e023      	b.n	80064a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <HAL_UART_IRQHandler+0x4f4>
 8006464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f913 	bl	800669c <UART_Transmit_IT>
    return;
 8006476:	e014      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00e      	beq.n	80064a2 <HAL_UART_IRQHandler+0x51e>
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f953 	bl	800673c <UART_EndTransmit_IT>
    return;
 8006496:	e004      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006498:	bf00      	nop
 800649a:	e002      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800649c:	bf00      	nop
 800649e:	e000      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80064a0:	bf00      	nop
  }
}
 80064a2:	37e8      	adds	r7, #232	; 0xe8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	4613      	mov	r3, r2
 800650a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800650c:	e03b      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006514:	d037      	beq.n	8006586 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006516:	f7fb ff83 	bl	8002420 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	6a3a      	ldr	r2, [r7, #32]
 8006522:	429a      	cmp	r2, r3
 8006524:	d302      	bcc.n	800652c <UART_WaitOnFlagUntilTimeout+0x30>
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e03a      	b.n	80065a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	d023      	beq.n	8006586 <UART_WaitOnFlagUntilTimeout+0x8a>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b80      	cmp	r3, #128	; 0x80
 8006542:	d020      	beq.n	8006586 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	d01d      	beq.n	8006586 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b08      	cmp	r3, #8
 8006556:	d116      	bne.n	8006586 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 f81d 	bl	80065ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2208      	movs	r2, #8
 8006578:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e00f      	b.n	80065a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4013      	ands	r3, r2
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	429a      	cmp	r2, r3
 8006594:	bf0c      	ite	eq
 8006596:	2301      	moveq	r3, #1
 8006598:	2300      	movne	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d0b4      	beq.n	800650e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b095      	sub	sp, #84	; 0x54
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065d6:	643a      	str	r2, [r7, #64]	; 0x40
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e5      	bne.n	80065b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3314      	adds	r3, #20
 80065f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	64bb      	str	r3, [r7, #72]	; 0x48
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3314      	adds	r3, #20
 8006608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800660a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e5      	bne.n	80065ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	2b01      	cmp	r3, #1
 8006624:	d119      	bne.n	800665a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	60bb      	str	r3, [r7, #8]
   return(result);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f023 0310 	bic.w	r3, r3, #16
 800663c:	647b      	str	r3, [r7, #68]	; 0x44
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006646:	61ba      	str	r2, [r7, #24]
 8006648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6979      	ldr	r1, [r7, #20]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	613b      	str	r3, [r7, #16]
   return(result);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e5      	bne.n	8006626 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006668:	bf00      	nop
 800666a:	3754      	adds	r7, #84	; 0x54
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff ff1e 	bl	80064d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b21      	cmp	r3, #33	; 0x21
 80066ae:	d13e      	bne.n	800672e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b8:	d114      	bne.n	80066e4 <UART_Transmit_IT+0x48>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d110      	bne.n	80066e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	1c9a      	adds	r2, r3, #2
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	621a      	str	r2, [r3, #32]
 80066e2:	e008      	b.n	80066f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	1c59      	adds	r1, r3, #1
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6211      	str	r1, [r2, #32]
 80066ee:	781a      	ldrb	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29b      	uxth	r3, r3
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	4619      	mov	r1, r3
 8006704:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10f      	bne.n	800672a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006718:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006728:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	e000      	b.n	8006730 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800672e:	2302      	movs	r3, #2
  }
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006752:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff fea3 	bl	80064a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08c      	sub	sp, #48	; 0x30
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b22      	cmp	r3, #34	; 0x22
 800677e:	f040 80ae 	bne.w	80068de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678a:	d117      	bne.n	80067bc <UART_Receive_IT+0x50>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d113      	bne.n	80067bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006794:	2300      	movs	r3, #0
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	1c9a      	adds	r2, r3, #2
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	629a      	str	r2, [r3, #40]	; 0x28
 80067ba:	e026      	b.n	800680a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ce:	d007      	beq.n	80067e0 <UART_Receive_IT+0x74>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <UART_Receive_IT+0x82>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	e008      	b.n	8006800 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29b      	uxth	r3, r3
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	4619      	mov	r1, r3
 8006818:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800681a:	2b00      	cmp	r3, #0
 800681c:	d15d      	bne.n	80068da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0220 	bic.w	r2, r2, #32
 800682c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800683c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695a      	ldr	r2, [r3, #20]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006860:	2b01      	cmp	r3, #1
 8006862:	d135      	bne.n	80068d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	330c      	adds	r3, #12
 8006870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	613b      	str	r3, [r7, #16]
   return(result);
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f023 0310 	bic.w	r3, r3, #16
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	330c      	adds	r3, #12
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	623a      	str	r2, [r7, #32]
 800688c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	69f9      	ldr	r1, [r7, #28]
 8006890:	6a3a      	ldr	r2, [r7, #32]
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	61bb      	str	r3, [r7, #24]
   return(result);
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e5      	bne.n	800686a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d10a      	bne.n	80068c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff fe0b 	bl	80064e4 <HAL_UARTEx_RxEventCallback>
 80068ce:	e002      	b.n	80068d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff fdf3 	bl	80064bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e002      	b.n	80068e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	e000      	b.n	80068e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80068de:	2302      	movs	r3, #2
  }
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3730      	adds	r7, #48	; 0x30
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068ec:	b0c0      	sub	sp, #256	; 0x100
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006904:	68d9      	ldr	r1, [r3, #12]
 8006906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	ea40 0301 	orr.w	r3, r0, r1
 8006910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	431a      	orrs	r2, r3
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	431a      	orrs	r2, r3
 8006928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	4313      	orrs	r3, r2
 8006930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006940:	f021 010c 	bic.w	r1, r1, #12
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800694e:	430b      	orrs	r3, r1
 8006950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006962:	6999      	ldr	r1, [r3, #24]
 8006964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	ea40 0301 	orr.w	r3, r0, r1
 800696e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	4b8f      	ldr	r3, [pc, #572]	; (8006bb4 <UART_SetConfig+0x2cc>)
 8006978:	429a      	cmp	r2, r3
 800697a:	d005      	beq.n	8006988 <UART_SetConfig+0xa0>
 800697c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b8d      	ldr	r3, [pc, #564]	; (8006bb8 <UART_SetConfig+0x2d0>)
 8006984:	429a      	cmp	r2, r3
 8006986:	d104      	bne.n	8006992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006988:	f7fe f866 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 800698c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006990:	e003      	b.n	800699a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006992:	f7fe f84d 	bl	8004a30 <HAL_RCC_GetPCLK1Freq>
 8006996:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a4:	f040 810c 	bne.w	8006bc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069ba:	4622      	mov	r2, r4
 80069bc:	462b      	mov	r3, r5
 80069be:	1891      	adds	r1, r2, r2
 80069c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80069c2:	415b      	adcs	r3, r3
 80069c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069ca:	4621      	mov	r1, r4
 80069cc:	eb12 0801 	adds.w	r8, r2, r1
 80069d0:	4629      	mov	r1, r5
 80069d2:	eb43 0901 	adc.w	r9, r3, r1
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069ea:	4690      	mov	r8, r2
 80069ec:	4699      	mov	r9, r3
 80069ee:	4623      	mov	r3, r4
 80069f0:	eb18 0303 	adds.w	r3, r8, r3
 80069f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069f8:	462b      	mov	r3, r5
 80069fa:	eb49 0303 	adc.w	r3, r9, r3
 80069fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a16:	460b      	mov	r3, r1
 8006a18:	18db      	adds	r3, r3, r3
 8006a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	eb42 0303 	adc.w	r3, r2, r3
 8006a22:	657b      	str	r3, [r7, #84]	; 0x54
 8006a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a2c:	f7fa f8fc 	bl	8000c28 <__aeabi_uldivmod>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4b61      	ldr	r3, [pc, #388]	; (8006bbc <UART_SetConfig+0x2d4>)
 8006a36:	fba3 2302 	umull	r2, r3, r3, r2
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	011c      	lsls	r4, r3, #4
 8006a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a50:	4642      	mov	r2, r8
 8006a52:	464b      	mov	r3, r9
 8006a54:	1891      	adds	r1, r2, r2
 8006a56:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a58:	415b      	adcs	r3, r3
 8006a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a60:	4641      	mov	r1, r8
 8006a62:	eb12 0a01 	adds.w	sl, r2, r1
 8006a66:	4649      	mov	r1, r9
 8006a68:	eb43 0b01 	adc.w	fp, r3, r1
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	f04f 0300 	mov.w	r3, #0
 8006a74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a80:	4692      	mov	sl, r2
 8006a82:	469b      	mov	fp, r3
 8006a84:	4643      	mov	r3, r8
 8006a86:	eb1a 0303 	adds.w	r3, sl, r3
 8006a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a8e:	464b      	mov	r3, r9
 8006a90:	eb4b 0303 	adc.w	r3, fp, r3
 8006a94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aa4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006aa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006aac:	460b      	mov	r3, r1
 8006aae:	18db      	adds	r3, r3, r3
 8006ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	eb42 0303 	adc.w	r3, r2, r3
 8006ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8006aba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006abe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ac2:	f7fa f8b1 	bl	8000c28 <__aeabi_uldivmod>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	4b3b      	ldr	r3, [pc, #236]	; (8006bbc <UART_SetConfig+0x2d4>)
 8006ace:	fba3 2301 	umull	r2, r3, r3, r1
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	2264      	movs	r2, #100	; 0x64
 8006ad6:	fb02 f303 	mul.w	r3, r2, r3
 8006ada:	1acb      	subs	r3, r1, r3
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ae2:	4b36      	ldr	r3, [pc, #216]	; (8006bbc <UART_SetConfig+0x2d4>)
 8006ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ae8:	095b      	lsrs	r3, r3, #5
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006af0:	441c      	add	r4, r3
 8006af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006afc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b04:	4642      	mov	r2, r8
 8006b06:	464b      	mov	r3, r9
 8006b08:	1891      	adds	r1, r2, r2
 8006b0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b0c:	415b      	adcs	r3, r3
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b14:	4641      	mov	r1, r8
 8006b16:	1851      	adds	r1, r2, r1
 8006b18:	6339      	str	r1, [r7, #48]	; 0x30
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	414b      	adcs	r3, r1
 8006b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b20:	f04f 0200 	mov.w	r2, #0
 8006b24:	f04f 0300 	mov.w	r3, #0
 8006b28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	00cb      	lsls	r3, r1, #3
 8006b30:	4651      	mov	r1, sl
 8006b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b36:	4651      	mov	r1, sl
 8006b38:	00ca      	lsls	r2, r1, #3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4642      	mov	r2, r8
 8006b42:	189b      	adds	r3, r3, r2
 8006b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b48:	464b      	mov	r3, r9
 8006b4a:	460a      	mov	r2, r1
 8006b4c:	eb42 0303 	adc.w	r3, r2, r3
 8006b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b68:	460b      	mov	r3, r1
 8006b6a:	18db      	adds	r3, r3, r3
 8006b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b6e:	4613      	mov	r3, r2
 8006b70:	eb42 0303 	adc.w	r3, r2, r3
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b7e:	f7fa f853 	bl	8000c28 <__aeabi_uldivmod>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <UART_SetConfig+0x2d4>)
 8006b88:	fba3 1302 	umull	r1, r3, r3, r2
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	2164      	movs	r1, #100	; 0x64
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	3332      	adds	r3, #50	; 0x32
 8006b9a:	4a08      	ldr	r2, [pc, #32]	; (8006bbc <UART_SetConfig+0x2d4>)
 8006b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba0:	095b      	lsrs	r3, r3, #5
 8006ba2:	f003 0207 	and.w	r2, r3, #7
 8006ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4422      	add	r2, r4
 8006bae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bb0:	e106      	b.n	8006dc0 <UART_SetConfig+0x4d8>
 8006bb2:	bf00      	nop
 8006bb4:	40011000 	.word	0x40011000
 8006bb8:	40011400 	.word	0x40011400
 8006bbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bd2:	4642      	mov	r2, r8
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	1891      	adds	r1, r2, r2
 8006bd8:	6239      	str	r1, [r7, #32]
 8006bda:	415b      	adcs	r3, r3
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006be2:	4641      	mov	r1, r8
 8006be4:	1854      	adds	r4, r2, r1
 8006be6:	4649      	mov	r1, r9
 8006be8:	eb43 0501 	adc.w	r5, r3, r1
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	00eb      	lsls	r3, r5, #3
 8006bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bfa:	00e2      	lsls	r2, r4, #3
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	461d      	mov	r5, r3
 8006c00:	4643      	mov	r3, r8
 8006c02:	18e3      	adds	r3, r4, r3
 8006c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c08:	464b      	mov	r3, r9
 8006c0a:	eb45 0303 	adc.w	r3, r5, r3
 8006c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c22:	f04f 0200 	mov.w	r2, #0
 8006c26:	f04f 0300 	mov.w	r3, #0
 8006c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c2e:	4629      	mov	r1, r5
 8006c30:	008b      	lsls	r3, r1, #2
 8006c32:	4621      	mov	r1, r4
 8006c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c38:	4621      	mov	r1, r4
 8006c3a:	008a      	lsls	r2, r1, #2
 8006c3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c40:	f7f9 fff2 	bl	8000c28 <__aeabi_uldivmod>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4b60      	ldr	r3, [pc, #384]	; (8006dcc <UART_SetConfig+0x4e4>)
 8006c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	011c      	lsls	r4, r3, #4
 8006c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c64:	4642      	mov	r2, r8
 8006c66:	464b      	mov	r3, r9
 8006c68:	1891      	adds	r1, r2, r2
 8006c6a:	61b9      	str	r1, [r7, #24]
 8006c6c:	415b      	adcs	r3, r3
 8006c6e:	61fb      	str	r3, [r7, #28]
 8006c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c74:	4641      	mov	r1, r8
 8006c76:	1851      	adds	r1, r2, r1
 8006c78:	6139      	str	r1, [r7, #16]
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	414b      	adcs	r3, r1
 8006c7e:	617b      	str	r3, [r7, #20]
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	f04f 0300 	mov.w	r3, #0
 8006c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c8c:	4659      	mov	r1, fp
 8006c8e:	00cb      	lsls	r3, r1, #3
 8006c90:	4651      	mov	r1, sl
 8006c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c96:	4651      	mov	r1, sl
 8006c98:	00ca      	lsls	r2, r1, #3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	189b      	adds	r3, r3, r2
 8006ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ca8:	464b      	mov	r3, r9
 8006caa:	460a      	mov	r2, r1
 8006cac:	eb42 0303 	adc.w	r3, r2, r3
 8006cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ccc:	4649      	mov	r1, r9
 8006cce:	008b      	lsls	r3, r1, #2
 8006cd0:	4641      	mov	r1, r8
 8006cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cd6:	4641      	mov	r1, r8
 8006cd8:	008a      	lsls	r2, r1, #2
 8006cda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cde:	f7f9 ffa3 	bl	8000c28 <__aeabi_uldivmod>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	4b38      	ldr	r3, [pc, #224]	; (8006dcc <UART_SetConfig+0x4e4>)
 8006cea:	fba3 2301 	umull	r2, r3, r3, r1
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	2264      	movs	r2, #100	; 0x64
 8006cf2:	fb02 f303 	mul.w	r3, r2, r3
 8006cf6:	1acb      	subs	r3, r1, r3
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	3332      	adds	r3, #50	; 0x32
 8006cfc:	4a33      	ldr	r2, [pc, #204]	; (8006dcc <UART_SetConfig+0x4e4>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d08:	441c      	add	r4, r3
 8006d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d0e:	2200      	movs	r2, #0
 8006d10:	673b      	str	r3, [r7, #112]	; 0x70
 8006d12:	677a      	str	r2, [r7, #116]	; 0x74
 8006d14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d18:	4642      	mov	r2, r8
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	1891      	adds	r1, r2, r2
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	415b      	adcs	r3, r3
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d28:	4641      	mov	r1, r8
 8006d2a:	1851      	adds	r1, r2, r1
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	4649      	mov	r1, r9
 8006d30:	414b      	adcs	r3, r1
 8006d32:	607b      	str	r3, [r7, #4]
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d40:	4659      	mov	r1, fp
 8006d42:	00cb      	lsls	r3, r1, #3
 8006d44:	4651      	mov	r1, sl
 8006d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d4a:	4651      	mov	r1, sl
 8006d4c:	00ca      	lsls	r2, r1, #3
 8006d4e:	4610      	mov	r0, r2
 8006d50:	4619      	mov	r1, r3
 8006d52:	4603      	mov	r3, r0
 8006d54:	4642      	mov	r2, r8
 8006d56:	189b      	adds	r3, r3, r2
 8006d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d5a:	464b      	mov	r3, r9
 8006d5c:	460a      	mov	r2, r1
 8006d5e:	eb42 0303 	adc.w	r3, r2, r3
 8006d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d6e:	667a      	str	r2, [r7, #100]	; 0x64
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d7c:	4649      	mov	r1, r9
 8006d7e:	008b      	lsls	r3, r1, #2
 8006d80:	4641      	mov	r1, r8
 8006d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d86:	4641      	mov	r1, r8
 8006d88:	008a      	lsls	r2, r1, #2
 8006d8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d8e:	f7f9 ff4b 	bl	8000c28 <__aeabi_uldivmod>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <UART_SetConfig+0x4e4>)
 8006d98:	fba3 1302 	umull	r1, r3, r3, r2
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	2164      	movs	r1, #100	; 0x64
 8006da0:	fb01 f303 	mul.w	r3, r1, r3
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	3332      	adds	r3, #50	; 0x32
 8006daa:	4a08      	ldr	r2, [pc, #32]	; (8006dcc <UART_SetConfig+0x4e4>)
 8006dac:	fba2 2303 	umull	r2, r3, r2, r3
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	f003 020f 	and.w	r2, r3, #15
 8006db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4422      	add	r2, r4
 8006dbe:	609a      	str	r2, [r3, #8]
}
 8006dc0:	bf00      	nop
 8006dc2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dcc:	51eb851f 	.word	0x51eb851f

08006dd0 <__cvt>:
 8006dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd4:	ec55 4b10 	vmov	r4, r5, d0
 8006dd8:	2d00      	cmp	r5, #0
 8006dda:	460e      	mov	r6, r1
 8006ddc:	4619      	mov	r1, r3
 8006dde:	462b      	mov	r3, r5
 8006de0:	bfbb      	ittet	lt
 8006de2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006de6:	461d      	movlt	r5, r3
 8006de8:	2300      	movge	r3, #0
 8006dea:	232d      	movlt	r3, #45	; 0x2d
 8006dec:	700b      	strb	r3, [r1, #0]
 8006dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006df0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006df4:	4691      	mov	r9, r2
 8006df6:	f023 0820 	bic.w	r8, r3, #32
 8006dfa:	bfbc      	itt	lt
 8006dfc:	4622      	movlt	r2, r4
 8006dfe:	4614      	movlt	r4, r2
 8006e00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e04:	d005      	beq.n	8006e12 <__cvt+0x42>
 8006e06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e0a:	d100      	bne.n	8006e0e <__cvt+0x3e>
 8006e0c:	3601      	adds	r6, #1
 8006e0e:	2102      	movs	r1, #2
 8006e10:	e000      	b.n	8006e14 <__cvt+0x44>
 8006e12:	2103      	movs	r1, #3
 8006e14:	ab03      	add	r3, sp, #12
 8006e16:	9301      	str	r3, [sp, #4]
 8006e18:	ab02      	add	r3, sp, #8
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	ec45 4b10 	vmov	d0, r4, r5
 8006e20:	4653      	mov	r3, sl
 8006e22:	4632      	mov	r2, r6
 8006e24:	f000 ff38 	bl	8007c98 <_dtoa_r>
 8006e28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	d102      	bne.n	8006e36 <__cvt+0x66>
 8006e30:	f019 0f01 	tst.w	r9, #1
 8006e34:	d022      	beq.n	8006e7c <__cvt+0xac>
 8006e36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e3a:	eb07 0906 	add.w	r9, r7, r6
 8006e3e:	d110      	bne.n	8006e62 <__cvt+0x92>
 8006e40:	783b      	ldrb	r3, [r7, #0]
 8006e42:	2b30      	cmp	r3, #48	; 0x30
 8006e44:	d10a      	bne.n	8006e5c <__cvt+0x8c>
 8006e46:	2200      	movs	r2, #0
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	f7f9 fe5b 	bl	8000b08 <__aeabi_dcmpeq>
 8006e52:	b918      	cbnz	r0, 8006e5c <__cvt+0x8c>
 8006e54:	f1c6 0601 	rsb	r6, r6, #1
 8006e58:	f8ca 6000 	str.w	r6, [sl]
 8006e5c:	f8da 3000 	ldr.w	r3, [sl]
 8006e60:	4499      	add	r9, r3
 8006e62:	2200      	movs	r2, #0
 8006e64:	2300      	movs	r3, #0
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7f9 fe4d 	bl	8000b08 <__aeabi_dcmpeq>
 8006e6e:	b108      	cbz	r0, 8006e74 <__cvt+0xa4>
 8006e70:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e74:	2230      	movs	r2, #48	; 0x30
 8006e76:	9b03      	ldr	r3, [sp, #12]
 8006e78:	454b      	cmp	r3, r9
 8006e7a:	d307      	bcc.n	8006e8c <__cvt+0xbc>
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e80:	1bdb      	subs	r3, r3, r7
 8006e82:	4638      	mov	r0, r7
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	b004      	add	sp, #16
 8006e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8c:	1c59      	adds	r1, r3, #1
 8006e8e:	9103      	str	r1, [sp, #12]
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e7f0      	b.n	8006e76 <__cvt+0xa6>

08006e94 <__exponent>:
 8006e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e96:	4603      	mov	r3, r0
 8006e98:	2900      	cmp	r1, #0
 8006e9a:	bfb8      	it	lt
 8006e9c:	4249      	neglt	r1, r1
 8006e9e:	f803 2b02 	strb.w	r2, [r3], #2
 8006ea2:	bfb4      	ite	lt
 8006ea4:	222d      	movlt	r2, #45	; 0x2d
 8006ea6:	222b      	movge	r2, #43	; 0x2b
 8006ea8:	2909      	cmp	r1, #9
 8006eaa:	7042      	strb	r2, [r0, #1]
 8006eac:	dd2a      	ble.n	8006f04 <__exponent+0x70>
 8006eae:	f10d 0207 	add.w	r2, sp, #7
 8006eb2:	4617      	mov	r7, r2
 8006eb4:	260a      	movs	r6, #10
 8006eb6:	4694      	mov	ip, r2
 8006eb8:	fb91 f5f6 	sdiv	r5, r1, r6
 8006ebc:	fb06 1415 	mls	r4, r6, r5, r1
 8006ec0:	3430      	adds	r4, #48	; 0x30
 8006ec2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	2c63      	cmp	r4, #99	; 0x63
 8006eca:	f102 32ff 	add.w	r2, r2, #4294967295
 8006ece:	4629      	mov	r1, r5
 8006ed0:	dcf1      	bgt.n	8006eb6 <__exponent+0x22>
 8006ed2:	3130      	adds	r1, #48	; 0x30
 8006ed4:	f1ac 0402 	sub.w	r4, ip, #2
 8006ed8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006edc:	1c41      	adds	r1, r0, #1
 8006ede:	4622      	mov	r2, r4
 8006ee0:	42ba      	cmp	r2, r7
 8006ee2:	d30a      	bcc.n	8006efa <__exponent+0x66>
 8006ee4:	f10d 0209 	add.w	r2, sp, #9
 8006ee8:	eba2 020c 	sub.w	r2, r2, ip
 8006eec:	42bc      	cmp	r4, r7
 8006eee:	bf88      	it	hi
 8006ef0:	2200      	movhi	r2, #0
 8006ef2:	4413      	add	r3, r2
 8006ef4:	1a18      	subs	r0, r3, r0
 8006ef6:	b003      	add	sp, #12
 8006ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006efa:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006efe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006f02:	e7ed      	b.n	8006ee0 <__exponent+0x4c>
 8006f04:	2330      	movs	r3, #48	; 0x30
 8006f06:	3130      	adds	r1, #48	; 0x30
 8006f08:	7083      	strb	r3, [r0, #2]
 8006f0a:	70c1      	strb	r1, [r0, #3]
 8006f0c:	1d03      	adds	r3, r0, #4
 8006f0e:	e7f1      	b.n	8006ef4 <__exponent+0x60>

08006f10 <_printf_float>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	ed2d 8b02 	vpush	{d8}
 8006f18:	b08d      	sub	sp, #52	; 0x34
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f20:	4616      	mov	r6, r2
 8006f22:	461f      	mov	r7, r3
 8006f24:	4605      	mov	r5, r0
 8006f26:	f000 fdb7 	bl	8007a98 <_localeconv_r>
 8006f2a:	f8d0 a000 	ldr.w	sl, [r0]
 8006f2e:	4650      	mov	r0, sl
 8006f30:	f7f9 f9be 	bl	80002b0 <strlen>
 8006f34:	2300      	movs	r3, #0
 8006f36:	930a      	str	r3, [sp, #40]	; 0x28
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	9305      	str	r3, [sp, #20]
 8006f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f44:	3307      	adds	r3, #7
 8006f46:	f023 0307 	bic.w	r3, r3, #7
 8006f4a:	f103 0208 	add.w	r2, r3, #8
 8006f4e:	f8c8 2000 	str.w	r2, [r8]
 8006f52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f5a:	9307      	str	r3, [sp, #28]
 8006f5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f60:	ee08 0a10 	vmov	s16, r0
 8006f64:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006f68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f6c:	4b9e      	ldr	r3, [pc, #632]	; (80071e8 <_printf_float+0x2d8>)
 8006f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f72:	f7f9 fdfb 	bl	8000b6c <__aeabi_dcmpun>
 8006f76:	bb88      	cbnz	r0, 8006fdc <_printf_float+0xcc>
 8006f78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f7c:	4b9a      	ldr	r3, [pc, #616]	; (80071e8 <_printf_float+0x2d8>)
 8006f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f82:	f7f9 fdd5 	bl	8000b30 <__aeabi_dcmple>
 8006f86:	bb48      	cbnz	r0, 8006fdc <_printf_float+0xcc>
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	4649      	mov	r1, r9
 8006f90:	f7f9 fdc4 	bl	8000b1c <__aeabi_dcmplt>
 8006f94:	b110      	cbz	r0, 8006f9c <_printf_float+0x8c>
 8006f96:	232d      	movs	r3, #45	; 0x2d
 8006f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f9c:	4a93      	ldr	r2, [pc, #588]	; (80071ec <_printf_float+0x2dc>)
 8006f9e:	4b94      	ldr	r3, [pc, #592]	; (80071f0 <_printf_float+0x2e0>)
 8006fa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006fa4:	bf94      	ite	ls
 8006fa6:	4690      	movls	r8, r2
 8006fa8:	4698      	movhi	r8, r3
 8006faa:	2303      	movs	r3, #3
 8006fac:	6123      	str	r3, [r4, #16]
 8006fae:	9b05      	ldr	r3, [sp, #20]
 8006fb0:	f023 0304 	bic.w	r3, r3, #4
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	f04f 0900 	mov.w	r9, #0
 8006fba:	9700      	str	r7, [sp, #0]
 8006fbc:	4633      	mov	r3, r6
 8006fbe:	aa0b      	add	r2, sp, #44	; 0x2c
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f000 f9da 	bl	800737c <_printf_common>
 8006fc8:	3001      	adds	r0, #1
 8006fca:	f040 8090 	bne.w	80070ee <_printf_float+0x1de>
 8006fce:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd2:	b00d      	add	sp, #52	; 0x34
 8006fd4:	ecbd 8b02 	vpop	{d8}
 8006fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	f7f9 fdc2 	bl	8000b6c <__aeabi_dcmpun>
 8006fe8:	b140      	cbz	r0, 8006ffc <_printf_float+0xec>
 8006fea:	464b      	mov	r3, r9
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bfbc      	itt	lt
 8006ff0:	232d      	movlt	r3, #45	; 0x2d
 8006ff2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ff6:	4a7f      	ldr	r2, [pc, #508]	; (80071f4 <_printf_float+0x2e4>)
 8006ff8:	4b7f      	ldr	r3, [pc, #508]	; (80071f8 <_printf_float+0x2e8>)
 8006ffa:	e7d1      	b.n	8006fa0 <_printf_float+0x90>
 8006ffc:	6863      	ldr	r3, [r4, #4]
 8006ffe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007002:	9206      	str	r2, [sp, #24]
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	d13f      	bne.n	8007088 <_printf_float+0x178>
 8007008:	2306      	movs	r3, #6
 800700a:	6063      	str	r3, [r4, #4]
 800700c:	9b05      	ldr	r3, [sp, #20]
 800700e:	6861      	ldr	r1, [r4, #4]
 8007010:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007014:	2300      	movs	r3, #0
 8007016:	9303      	str	r3, [sp, #12]
 8007018:	ab0a      	add	r3, sp, #40	; 0x28
 800701a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800701e:	ab09      	add	r3, sp, #36	; 0x24
 8007020:	ec49 8b10 	vmov	d0, r8, r9
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	6022      	str	r2, [r4, #0]
 8007028:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800702c:	4628      	mov	r0, r5
 800702e:	f7ff fecf 	bl	8006dd0 <__cvt>
 8007032:	9b06      	ldr	r3, [sp, #24]
 8007034:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007036:	2b47      	cmp	r3, #71	; 0x47
 8007038:	4680      	mov	r8, r0
 800703a:	d108      	bne.n	800704e <_printf_float+0x13e>
 800703c:	1cc8      	adds	r0, r1, #3
 800703e:	db02      	blt.n	8007046 <_printf_float+0x136>
 8007040:	6863      	ldr	r3, [r4, #4]
 8007042:	4299      	cmp	r1, r3
 8007044:	dd41      	ble.n	80070ca <_printf_float+0x1ba>
 8007046:	f1ab 0302 	sub.w	r3, fp, #2
 800704a:	fa5f fb83 	uxtb.w	fp, r3
 800704e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007052:	d820      	bhi.n	8007096 <_printf_float+0x186>
 8007054:	3901      	subs	r1, #1
 8007056:	465a      	mov	r2, fp
 8007058:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800705c:	9109      	str	r1, [sp, #36]	; 0x24
 800705e:	f7ff ff19 	bl	8006e94 <__exponent>
 8007062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007064:	1813      	adds	r3, r2, r0
 8007066:	2a01      	cmp	r2, #1
 8007068:	4681      	mov	r9, r0
 800706a:	6123      	str	r3, [r4, #16]
 800706c:	dc02      	bgt.n	8007074 <_printf_float+0x164>
 800706e:	6822      	ldr	r2, [r4, #0]
 8007070:	07d2      	lsls	r2, r2, #31
 8007072:	d501      	bpl.n	8007078 <_printf_float+0x168>
 8007074:	3301      	adds	r3, #1
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800707c:	2b00      	cmp	r3, #0
 800707e:	d09c      	beq.n	8006fba <_printf_float+0xaa>
 8007080:	232d      	movs	r3, #45	; 0x2d
 8007082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007086:	e798      	b.n	8006fba <_printf_float+0xaa>
 8007088:	9a06      	ldr	r2, [sp, #24]
 800708a:	2a47      	cmp	r2, #71	; 0x47
 800708c:	d1be      	bne.n	800700c <_printf_float+0xfc>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1bc      	bne.n	800700c <_printf_float+0xfc>
 8007092:	2301      	movs	r3, #1
 8007094:	e7b9      	b.n	800700a <_printf_float+0xfa>
 8007096:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800709a:	d118      	bne.n	80070ce <_printf_float+0x1be>
 800709c:	2900      	cmp	r1, #0
 800709e:	6863      	ldr	r3, [r4, #4]
 80070a0:	dd0b      	ble.n	80070ba <_printf_float+0x1aa>
 80070a2:	6121      	str	r1, [r4, #16]
 80070a4:	b913      	cbnz	r3, 80070ac <_printf_float+0x19c>
 80070a6:	6822      	ldr	r2, [r4, #0]
 80070a8:	07d0      	lsls	r0, r2, #31
 80070aa:	d502      	bpl.n	80070b2 <_printf_float+0x1a2>
 80070ac:	3301      	adds	r3, #1
 80070ae:	440b      	add	r3, r1
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80070b4:	f04f 0900 	mov.w	r9, #0
 80070b8:	e7de      	b.n	8007078 <_printf_float+0x168>
 80070ba:	b913      	cbnz	r3, 80070c2 <_printf_float+0x1b2>
 80070bc:	6822      	ldr	r2, [r4, #0]
 80070be:	07d2      	lsls	r2, r2, #31
 80070c0:	d501      	bpl.n	80070c6 <_printf_float+0x1b6>
 80070c2:	3302      	adds	r3, #2
 80070c4:	e7f4      	b.n	80070b0 <_printf_float+0x1a0>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e7f2      	b.n	80070b0 <_printf_float+0x1a0>
 80070ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80070ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d0:	4299      	cmp	r1, r3
 80070d2:	db05      	blt.n	80070e0 <_printf_float+0x1d0>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	6121      	str	r1, [r4, #16]
 80070d8:	07d8      	lsls	r0, r3, #31
 80070da:	d5ea      	bpl.n	80070b2 <_printf_float+0x1a2>
 80070dc:	1c4b      	adds	r3, r1, #1
 80070de:	e7e7      	b.n	80070b0 <_printf_float+0x1a0>
 80070e0:	2900      	cmp	r1, #0
 80070e2:	bfd4      	ite	le
 80070e4:	f1c1 0202 	rsble	r2, r1, #2
 80070e8:	2201      	movgt	r2, #1
 80070ea:	4413      	add	r3, r2
 80070ec:	e7e0      	b.n	80070b0 <_printf_float+0x1a0>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	055a      	lsls	r2, r3, #21
 80070f2:	d407      	bmi.n	8007104 <_printf_float+0x1f4>
 80070f4:	6923      	ldr	r3, [r4, #16]
 80070f6:	4642      	mov	r2, r8
 80070f8:	4631      	mov	r1, r6
 80070fa:	4628      	mov	r0, r5
 80070fc:	47b8      	blx	r7
 80070fe:	3001      	adds	r0, #1
 8007100:	d12c      	bne.n	800715c <_printf_float+0x24c>
 8007102:	e764      	b.n	8006fce <_printf_float+0xbe>
 8007104:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007108:	f240 80e0 	bls.w	80072cc <_printf_float+0x3bc>
 800710c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007110:	2200      	movs	r2, #0
 8007112:	2300      	movs	r3, #0
 8007114:	f7f9 fcf8 	bl	8000b08 <__aeabi_dcmpeq>
 8007118:	2800      	cmp	r0, #0
 800711a:	d034      	beq.n	8007186 <_printf_float+0x276>
 800711c:	4a37      	ldr	r2, [pc, #220]	; (80071fc <_printf_float+0x2ec>)
 800711e:	2301      	movs	r3, #1
 8007120:	4631      	mov	r1, r6
 8007122:	4628      	mov	r0, r5
 8007124:	47b8      	blx	r7
 8007126:	3001      	adds	r0, #1
 8007128:	f43f af51 	beq.w	8006fce <_printf_float+0xbe>
 800712c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007130:	429a      	cmp	r2, r3
 8007132:	db02      	blt.n	800713a <_printf_float+0x22a>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	07d8      	lsls	r0, r3, #31
 8007138:	d510      	bpl.n	800715c <_printf_float+0x24c>
 800713a:	ee18 3a10 	vmov	r3, s16
 800713e:	4652      	mov	r2, sl
 8007140:	4631      	mov	r1, r6
 8007142:	4628      	mov	r0, r5
 8007144:	47b8      	blx	r7
 8007146:	3001      	adds	r0, #1
 8007148:	f43f af41 	beq.w	8006fce <_printf_float+0xbe>
 800714c:	f04f 0800 	mov.w	r8, #0
 8007150:	f104 091a 	add.w	r9, r4, #26
 8007154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007156:	3b01      	subs	r3, #1
 8007158:	4543      	cmp	r3, r8
 800715a:	dc09      	bgt.n	8007170 <_printf_float+0x260>
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	079b      	lsls	r3, r3, #30
 8007160:	f100 8107 	bmi.w	8007372 <_printf_float+0x462>
 8007164:	68e0      	ldr	r0, [r4, #12]
 8007166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007168:	4298      	cmp	r0, r3
 800716a:	bfb8      	it	lt
 800716c:	4618      	movlt	r0, r3
 800716e:	e730      	b.n	8006fd2 <_printf_float+0xc2>
 8007170:	2301      	movs	r3, #1
 8007172:	464a      	mov	r2, r9
 8007174:	4631      	mov	r1, r6
 8007176:	4628      	mov	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	3001      	adds	r0, #1
 800717c:	f43f af27 	beq.w	8006fce <_printf_float+0xbe>
 8007180:	f108 0801 	add.w	r8, r8, #1
 8007184:	e7e6      	b.n	8007154 <_printf_float+0x244>
 8007186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	dc39      	bgt.n	8007200 <_printf_float+0x2f0>
 800718c:	4a1b      	ldr	r2, [pc, #108]	; (80071fc <_printf_float+0x2ec>)
 800718e:	2301      	movs	r3, #1
 8007190:	4631      	mov	r1, r6
 8007192:	4628      	mov	r0, r5
 8007194:	47b8      	blx	r7
 8007196:	3001      	adds	r0, #1
 8007198:	f43f af19 	beq.w	8006fce <_printf_float+0xbe>
 800719c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80071a0:	4313      	orrs	r3, r2
 80071a2:	d102      	bne.n	80071aa <_printf_float+0x29a>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	07d9      	lsls	r1, r3, #31
 80071a8:	d5d8      	bpl.n	800715c <_printf_float+0x24c>
 80071aa:	ee18 3a10 	vmov	r3, s16
 80071ae:	4652      	mov	r2, sl
 80071b0:	4631      	mov	r1, r6
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	f43f af09 	beq.w	8006fce <_printf_float+0xbe>
 80071bc:	f04f 0900 	mov.w	r9, #0
 80071c0:	f104 0a1a 	add.w	sl, r4, #26
 80071c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c6:	425b      	negs	r3, r3
 80071c8:	454b      	cmp	r3, r9
 80071ca:	dc01      	bgt.n	80071d0 <_printf_float+0x2c0>
 80071cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ce:	e792      	b.n	80070f6 <_printf_float+0x1e6>
 80071d0:	2301      	movs	r3, #1
 80071d2:	4652      	mov	r2, sl
 80071d4:	4631      	mov	r1, r6
 80071d6:	4628      	mov	r0, r5
 80071d8:	47b8      	blx	r7
 80071da:	3001      	adds	r0, #1
 80071dc:	f43f aef7 	beq.w	8006fce <_printf_float+0xbe>
 80071e0:	f109 0901 	add.w	r9, r9, #1
 80071e4:	e7ee      	b.n	80071c4 <_printf_float+0x2b4>
 80071e6:	bf00      	nop
 80071e8:	7fefffff 	.word	0x7fefffff
 80071ec:	08009f54 	.word	0x08009f54
 80071f0:	08009f58 	.word	0x08009f58
 80071f4:	08009f5c 	.word	0x08009f5c
 80071f8:	08009f60 	.word	0x08009f60
 80071fc:	08009f64 	.word	0x08009f64
 8007200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007202:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007204:	429a      	cmp	r2, r3
 8007206:	bfa8      	it	ge
 8007208:	461a      	movge	r2, r3
 800720a:	2a00      	cmp	r2, #0
 800720c:	4691      	mov	r9, r2
 800720e:	dc37      	bgt.n	8007280 <_printf_float+0x370>
 8007210:	f04f 0b00 	mov.w	fp, #0
 8007214:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007218:	f104 021a 	add.w	r2, r4, #26
 800721c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800721e:	9305      	str	r3, [sp, #20]
 8007220:	eba3 0309 	sub.w	r3, r3, r9
 8007224:	455b      	cmp	r3, fp
 8007226:	dc33      	bgt.n	8007290 <_printf_float+0x380>
 8007228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800722c:	429a      	cmp	r2, r3
 800722e:	db3b      	blt.n	80072a8 <_printf_float+0x398>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	07da      	lsls	r2, r3, #31
 8007234:	d438      	bmi.n	80072a8 <_printf_float+0x398>
 8007236:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800723a:	eba2 0903 	sub.w	r9, r2, r3
 800723e:	9b05      	ldr	r3, [sp, #20]
 8007240:	1ad2      	subs	r2, r2, r3
 8007242:	4591      	cmp	r9, r2
 8007244:	bfa8      	it	ge
 8007246:	4691      	movge	r9, r2
 8007248:	f1b9 0f00 	cmp.w	r9, #0
 800724c:	dc35      	bgt.n	80072ba <_printf_float+0x3aa>
 800724e:	f04f 0800 	mov.w	r8, #0
 8007252:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007256:	f104 0a1a 	add.w	sl, r4, #26
 800725a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800725e:	1a9b      	subs	r3, r3, r2
 8007260:	eba3 0309 	sub.w	r3, r3, r9
 8007264:	4543      	cmp	r3, r8
 8007266:	f77f af79 	ble.w	800715c <_printf_float+0x24c>
 800726a:	2301      	movs	r3, #1
 800726c:	4652      	mov	r2, sl
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	f43f aeaa 	beq.w	8006fce <_printf_float+0xbe>
 800727a:	f108 0801 	add.w	r8, r8, #1
 800727e:	e7ec      	b.n	800725a <_printf_float+0x34a>
 8007280:	4613      	mov	r3, r2
 8007282:	4631      	mov	r1, r6
 8007284:	4642      	mov	r2, r8
 8007286:	4628      	mov	r0, r5
 8007288:	47b8      	blx	r7
 800728a:	3001      	adds	r0, #1
 800728c:	d1c0      	bne.n	8007210 <_printf_float+0x300>
 800728e:	e69e      	b.n	8006fce <_printf_float+0xbe>
 8007290:	2301      	movs	r3, #1
 8007292:	4631      	mov	r1, r6
 8007294:	4628      	mov	r0, r5
 8007296:	9205      	str	r2, [sp, #20]
 8007298:	47b8      	blx	r7
 800729a:	3001      	adds	r0, #1
 800729c:	f43f ae97 	beq.w	8006fce <_printf_float+0xbe>
 80072a0:	9a05      	ldr	r2, [sp, #20]
 80072a2:	f10b 0b01 	add.w	fp, fp, #1
 80072a6:	e7b9      	b.n	800721c <_printf_float+0x30c>
 80072a8:	ee18 3a10 	vmov	r3, s16
 80072ac:	4652      	mov	r2, sl
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	d1be      	bne.n	8007236 <_printf_float+0x326>
 80072b8:	e689      	b.n	8006fce <_printf_float+0xbe>
 80072ba:	9a05      	ldr	r2, [sp, #20]
 80072bc:	464b      	mov	r3, r9
 80072be:	4442      	add	r2, r8
 80072c0:	4631      	mov	r1, r6
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b8      	blx	r7
 80072c6:	3001      	adds	r0, #1
 80072c8:	d1c1      	bne.n	800724e <_printf_float+0x33e>
 80072ca:	e680      	b.n	8006fce <_printf_float+0xbe>
 80072cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ce:	2a01      	cmp	r2, #1
 80072d0:	dc01      	bgt.n	80072d6 <_printf_float+0x3c6>
 80072d2:	07db      	lsls	r3, r3, #31
 80072d4:	d53a      	bpl.n	800734c <_printf_float+0x43c>
 80072d6:	2301      	movs	r3, #1
 80072d8:	4642      	mov	r2, r8
 80072da:	4631      	mov	r1, r6
 80072dc:	4628      	mov	r0, r5
 80072de:	47b8      	blx	r7
 80072e0:	3001      	adds	r0, #1
 80072e2:	f43f ae74 	beq.w	8006fce <_printf_float+0xbe>
 80072e6:	ee18 3a10 	vmov	r3, s16
 80072ea:	4652      	mov	r2, sl
 80072ec:	4631      	mov	r1, r6
 80072ee:	4628      	mov	r0, r5
 80072f0:	47b8      	blx	r7
 80072f2:	3001      	adds	r0, #1
 80072f4:	f43f ae6b 	beq.w	8006fce <_printf_float+0xbe>
 80072f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072fc:	2200      	movs	r2, #0
 80072fe:	2300      	movs	r3, #0
 8007300:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007304:	f7f9 fc00 	bl	8000b08 <__aeabi_dcmpeq>
 8007308:	b9d8      	cbnz	r0, 8007342 <_printf_float+0x432>
 800730a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800730e:	f108 0201 	add.w	r2, r8, #1
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	d10e      	bne.n	800733a <_printf_float+0x42a>
 800731c:	e657      	b.n	8006fce <_printf_float+0xbe>
 800731e:	2301      	movs	r3, #1
 8007320:	4652      	mov	r2, sl
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	f43f ae50 	beq.w	8006fce <_printf_float+0xbe>
 800732e:	f108 0801 	add.w	r8, r8, #1
 8007332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007334:	3b01      	subs	r3, #1
 8007336:	4543      	cmp	r3, r8
 8007338:	dcf1      	bgt.n	800731e <_printf_float+0x40e>
 800733a:	464b      	mov	r3, r9
 800733c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007340:	e6da      	b.n	80070f8 <_printf_float+0x1e8>
 8007342:	f04f 0800 	mov.w	r8, #0
 8007346:	f104 0a1a 	add.w	sl, r4, #26
 800734a:	e7f2      	b.n	8007332 <_printf_float+0x422>
 800734c:	2301      	movs	r3, #1
 800734e:	4642      	mov	r2, r8
 8007350:	e7df      	b.n	8007312 <_printf_float+0x402>
 8007352:	2301      	movs	r3, #1
 8007354:	464a      	mov	r2, r9
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	47b8      	blx	r7
 800735c:	3001      	adds	r0, #1
 800735e:	f43f ae36 	beq.w	8006fce <_printf_float+0xbe>
 8007362:	f108 0801 	add.w	r8, r8, #1
 8007366:	68e3      	ldr	r3, [r4, #12]
 8007368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800736a:	1a5b      	subs	r3, r3, r1
 800736c:	4543      	cmp	r3, r8
 800736e:	dcf0      	bgt.n	8007352 <_printf_float+0x442>
 8007370:	e6f8      	b.n	8007164 <_printf_float+0x254>
 8007372:	f04f 0800 	mov.w	r8, #0
 8007376:	f104 0919 	add.w	r9, r4, #25
 800737a:	e7f4      	b.n	8007366 <_printf_float+0x456>

0800737c <_printf_common>:
 800737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007380:	4616      	mov	r6, r2
 8007382:	4699      	mov	r9, r3
 8007384:	688a      	ldr	r2, [r1, #8]
 8007386:	690b      	ldr	r3, [r1, #16]
 8007388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800738c:	4293      	cmp	r3, r2
 800738e:	bfb8      	it	lt
 8007390:	4613      	movlt	r3, r2
 8007392:	6033      	str	r3, [r6, #0]
 8007394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007398:	4607      	mov	r7, r0
 800739a:	460c      	mov	r4, r1
 800739c:	b10a      	cbz	r2, 80073a2 <_printf_common+0x26>
 800739e:	3301      	adds	r3, #1
 80073a0:	6033      	str	r3, [r6, #0]
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	0699      	lsls	r1, r3, #26
 80073a6:	bf42      	ittt	mi
 80073a8:	6833      	ldrmi	r3, [r6, #0]
 80073aa:	3302      	addmi	r3, #2
 80073ac:	6033      	strmi	r3, [r6, #0]
 80073ae:	6825      	ldr	r5, [r4, #0]
 80073b0:	f015 0506 	ands.w	r5, r5, #6
 80073b4:	d106      	bne.n	80073c4 <_printf_common+0x48>
 80073b6:	f104 0a19 	add.w	sl, r4, #25
 80073ba:	68e3      	ldr	r3, [r4, #12]
 80073bc:	6832      	ldr	r2, [r6, #0]
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	42ab      	cmp	r3, r5
 80073c2:	dc26      	bgt.n	8007412 <_printf_common+0x96>
 80073c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073c8:	1e13      	subs	r3, r2, #0
 80073ca:	6822      	ldr	r2, [r4, #0]
 80073cc:	bf18      	it	ne
 80073ce:	2301      	movne	r3, #1
 80073d0:	0692      	lsls	r2, r2, #26
 80073d2:	d42b      	bmi.n	800742c <_printf_common+0xb0>
 80073d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073d8:	4649      	mov	r1, r9
 80073da:	4638      	mov	r0, r7
 80073dc:	47c0      	blx	r8
 80073de:	3001      	adds	r0, #1
 80073e0:	d01e      	beq.n	8007420 <_printf_common+0xa4>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	6922      	ldr	r2, [r4, #16]
 80073e6:	f003 0306 	and.w	r3, r3, #6
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	bf02      	ittt	eq
 80073ee:	68e5      	ldreq	r5, [r4, #12]
 80073f0:	6833      	ldreq	r3, [r6, #0]
 80073f2:	1aed      	subeq	r5, r5, r3
 80073f4:	68a3      	ldr	r3, [r4, #8]
 80073f6:	bf0c      	ite	eq
 80073f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073fc:	2500      	movne	r5, #0
 80073fe:	4293      	cmp	r3, r2
 8007400:	bfc4      	itt	gt
 8007402:	1a9b      	subgt	r3, r3, r2
 8007404:	18ed      	addgt	r5, r5, r3
 8007406:	2600      	movs	r6, #0
 8007408:	341a      	adds	r4, #26
 800740a:	42b5      	cmp	r5, r6
 800740c:	d11a      	bne.n	8007444 <_printf_common+0xc8>
 800740e:	2000      	movs	r0, #0
 8007410:	e008      	b.n	8007424 <_printf_common+0xa8>
 8007412:	2301      	movs	r3, #1
 8007414:	4652      	mov	r2, sl
 8007416:	4649      	mov	r1, r9
 8007418:	4638      	mov	r0, r7
 800741a:	47c0      	blx	r8
 800741c:	3001      	adds	r0, #1
 800741e:	d103      	bne.n	8007428 <_printf_common+0xac>
 8007420:	f04f 30ff 	mov.w	r0, #4294967295
 8007424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007428:	3501      	adds	r5, #1
 800742a:	e7c6      	b.n	80073ba <_printf_common+0x3e>
 800742c:	18e1      	adds	r1, r4, r3
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	2030      	movs	r0, #48	; 0x30
 8007432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007436:	4422      	add	r2, r4
 8007438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800743c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007440:	3302      	adds	r3, #2
 8007442:	e7c7      	b.n	80073d4 <_printf_common+0x58>
 8007444:	2301      	movs	r3, #1
 8007446:	4622      	mov	r2, r4
 8007448:	4649      	mov	r1, r9
 800744a:	4638      	mov	r0, r7
 800744c:	47c0      	blx	r8
 800744e:	3001      	adds	r0, #1
 8007450:	d0e6      	beq.n	8007420 <_printf_common+0xa4>
 8007452:	3601      	adds	r6, #1
 8007454:	e7d9      	b.n	800740a <_printf_common+0x8e>
	...

08007458 <_printf_i>:
 8007458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800745c:	7e0f      	ldrb	r7, [r1, #24]
 800745e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007460:	2f78      	cmp	r7, #120	; 0x78
 8007462:	4691      	mov	r9, r2
 8007464:	4680      	mov	r8, r0
 8007466:	460c      	mov	r4, r1
 8007468:	469a      	mov	sl, r3
 800746a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800746e:	d807      	bhi.n	8007480 <_printf_i+0x28>
 8007470:	2f62      	cmp	r7, #98	; 0x62
 8007472:	d80a      	bhi.n	800748a <_printf_i+0x32>
 8007474:	2f00      	cmp	r7, #0
 8007476:	f000 80d4 	beq.w	8007622 <_printf_i+0x1ca>
 800747a:	2f58      	cmp	r7, #88	; 0x58
 800747c:	f000 80c0 	beq.w	8007600 <_printf_i+0x1a8>
 8007480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007488:	e03a      	b.n	8007500 <_printf_i+0xa8>
 800748a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800748e:	2b15      	cmp	r3, #21
 8007490:	d8f6      	bhi.n	8007480 <_printf_i+0x28>
 8007492:	a101      	add	r1, pc, #4	; (adr r1, 8007498 <_printf_i+0x40>)
 8007494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007498:	080074f1 	.word	0x080074f1
 800749c:	08007505 	.word	0x08007505
 80074a0:	08007481 	.word	0x08007481
 80074a4:	08007481 	.word	0x08007481
 80074a8:	08007481 	.word	0x08007481
 80074ac:	08007481 	.word	0x08007481
 80074b0:	08007505 	.word	0x08007505
 80074b4:	08007481 	.word	0x08007481
 80074b8:	08007481 	.word	0x08007481
 80074bc:	08007481 	.word	0x08007481
 80074c0:	08007481 	.word	0x08007481
 80074c4:	08007609 	.word	0x08007609
 80074c8:	08007531 	.word	0x08007531
 80074cc:	080075c3 	.word	0x080075c3
 80074d0:	08007481 	.word	0x08007481
 80074d4:	08007481 	.word	0x08007481
 80074d8:	0800762b 	.word	0x0800762b
 80074dc:	08007481 	.word	0x08007481
 80074e0:	08007531 	.word	0x08007531
 80074e4:	08007481 	.word	0x08007481
 80074e8:	08007481 	.word	0x08007481
 80074ec:	080075cb 	.word	0x080075cb
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	1d1a      	adds	r2, r3, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	602a      	str	r2, [r5, #0]
 80074f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007500:	2301      	movs	r3, #1
 8007502:	e09f      	b.n	8007644 <_printf_i+0x1ec>
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	0607      	lsls	r7, r0, #24
 800750a:	f103 0104 	add.w	r1, r3, #4
 800750e:	6029      	str	r1, [r5, #0]
 8007510:	d501      	bpl.n	8007516 <_printf_i+0xbe>
 8007512:	681e      	ldr	r6, [r3, #0]
 8007514:	e003      	b.n	800751e <_printf_i+0xc6>
 8007516:	0646      	lsls	r6, r0, #25
 8007518:	d5fb      	bpl.n	8007512 <_printf_i+0xba>
 800751a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800751e:	2e00      	cmp	r6, #0
 8007520:	da03      	bge.n	800752a <_printf_i+0xd2>
 8007522:	232d      	movs	r3, #45	; 0x2d
 8007524:	4276      	negs	r6, r6
 8007526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800752a:	485a      	ldr	r0, [pc, #360]	; (8007694 <_printf_i+0x23c>)
 800752c:	230a      	movs	r3, #10
 800752e:	e012      	b.n	8007556 <_printf_i+0xfe>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	6820      	ldr	r0, [r4, #0]
 8007534:	1d19      	adds	r1, r3, #4
 8007536:	6029      	str	r1, [r5, #0]
 8007538:	0605      	lsls	r5, r0, #24
 800753a:	d501      	bpl.n	8007540 <_printf_i+0xe8>
 800753c:	681e      	ldr	r6, [r3, #0]
 800753e:	e002      	b.n	8007546 <_printf_i+0xee>
 8007540:	0641      	lsls	r1, r0, #25
 8007542:	d5fb      	bpl.n	800753c <_printf_i+0xe4>
 8007544:	881e      	ldrh	r6, [r3, #0]
 8007546:	4853      	ldr	r0, [pc, #332]	; (8007694 <_printf_i+0x23c>)
 8007548:	2f6f      	cmp	r7, #111	; 0x6f
 800754a:	bf0c      	ite	eq
 800754c:	2308      	moveq	r3, #8
 800754e:	230a      	movne	r3, #10
 8007550:	2100      	movs	r1, #0
 8007552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007556:	6865      	ldr	r5, [r4, #4]
 8007558:	60a5      	str	r5, [r4, #8]
 800755a:	2d00      	cmp	r5, #0
 800755c:	bfa2      	ittt	ge
 800755e:	6821      	ldrge	r1, [r4, #0]
 8007560:	f021 0104 	bicge.w	r1, r1, #4
 8007564:	6021      	strge	r1, [r4, #0]
 8007566:	b90e      	cbnz	r6, 800756c <_printf_i+0x114>
 8007568:	2d00      	cmp	r5, #0
 800756a:	d04b      	beq.n	8007604 <_printf_i+0x1ac>
 800756c:	4615      	mov	r5, r2
 800756e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007572:	fb03 6711 	mls	r7, r3, r1, r6
 8007576:	5dc7      	ldrb	r7, [r0, r7]
 8007578:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800757c:	4637      	mov	r7, r6
 800757e:	42bb      	cmp	r3, r7
 8007580:	460e      	mov	r6, r1
 8007582:	d9f4      	bls.n	800756e <_printf_i+0x116>
 8007584:	2b08      	cmp	r3, #8
 8007586:	d10b      	bne.n	80075a0 <_printf_i+0x148>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	07de      	lsls	r6, r3, #31
 800758c:	d508      	bpl.n	80075a0 <_printf_i+0x148>
 800758e:	6923      	ldr	r3, [r4, #16]
 8007590:	6861      	ldr	r1, [r4, #4]
 8007592:	4299      	cmp	r1, r3
 8007594:	bfde      	ittt	le
 8007596:	2330      	movle	r3, #48	; 0x30
 8007598:	f805 3c01 	strble.w	r3, [r5, #-1]
 800759c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075a0:	1b52      	subs	r2, r2, r5
 80075a2:	6122      	str	r2, [r4, #16]
 80075a4:	f8cd a000 	str.w	sl, [sp]
 80075a8:	464b      	mov	r3, r9
 80075aa:	aa03      	add	r2, sp, #12
 80075ac:	4621      	mov	r1, r4
 80075ae:	4640      	mov	r0, r8
 80075b0:	f7ff fee4 	bl	800737c <_printf_common>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d14a      	bne.n	800764e <_printf_i+0x1f6>
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	b004      	add	sp, #16
 80075be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	f043 0320 	orr.w	r3, r3, #32
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	4833      	ldr	r0, [pc, #204]	; (8007698 <_printf_i+0x240>)
 80075cc:	2778      	movs	r7, #120	; 0x78
 80075ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	6829      	ldr	r1, [r5, #0]
 80075d6:	061f      	lsls	r7, r3, #24
 80075d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80075dc:	d402      	bmi.n	80075e4 <_printf_i+0x18c>
 80075de:	065f      	lsls	r7, r3, #25
 80075e0:	bf48      	it	mi
 80075e2:	b2b6      	uxthmi	r6, r6
 80075e4:	07df      	lsls	r7, r3, #31
 80075e6:	bf48      	it	mi
 80075e8:	f043 0320 	orrmi.w	r3, r3, #32
 80075ec:	6029      	str	r1, [r5, #0]
 80075ee:	bf48      	it	mi
 80075f0:	6023      	strmi	r3, [r4, #0]
 80075f2:	b91e      	cbnz	r6, 80075fc <_printf_i+0x1a4>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	f023 0320 	bic.w	r3, r3, #32
 80075fa:	6023      	str	r3, [r4, #0]
 80075fc:	2310      	movs	r3, #16
 80075fe:	e7a7      	b.n	8007550 <_printf_i+0xf8>
 8007600:	4824      	ldr	r0, [pc, #144]	; (8007694 <_printf_i+0x23c>)
 8007602:	e7e4      	b.n	80075ce <_printf_i+0x176>
 8007604:	4615      	mov	r5, r2
 8007606:	e7bd      	b.n	8007584 <_printf_i+0x12c>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	6826      	ldr	r6, [r4, #0]
 800760c:	6961      	ldr	r1, [r4, #20]
 800760e:	1d18      	adds	r0, r3, #4
 8007610:	6028      	str	r0, [r5, #0]
 8007612:	0635      	lsls	r5, r6, #24
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	d501      	bpl.n	800761c <_printf_i+0x1c4>
 8007618:	6019      	str	r1, [r3, #0]
 800761a:	e002      	b.n	8007622 <_printf_i+0x1ca>
 800761c:	0670      	lsls	r0, r6, #25
 800761e:	d5fb      	bpl.n	8007618 <_printf_i+0x1c0>
 8007620:	8019      	strh	r1, [r3, #0]
 8007622:	2300      	movs	r3, #0
 8007624:	6123      	str	r3, [r4, #16]
 8007626:	4615      	mov	r5, r2
 8007628:	e7bc      	b.n	80075a4 <_printf_i+0x14c>
 800762a:	682b      	ldr	r3, [r5, #0]
 800762c:	1d1a      	adds	r2, r3, #4
 800762e:	602a      	str	r2, [r5, #0]
 8007630:	681d      	ldr	r5, [r3, #0]
 8007632:	6862      	ldr	r2, [r4, #4]
 8007634:	2100      	movs	r1, #0
 8007636:	4628      	mov	r0, r5
 8007638:	f7f8 fdea 	bl	8000210 <memchr>
 800763c:	b108      	cbz	r0, 8007642 <_printf_i+0x1ea>
 800763e:	1b40      	subs	r0, r0, r5
 8007640:	6060      	str	r0, [r4, #4]
 8007642:	6863      	ldr	r3, [r4, #4]
 8007644:	6123      	str	r3, [r4, #16]
 8007646:	2300      	movs	r3, #0
 8007648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800764c:	e7aa      	b.n	80075a4 <_printf_i+0x14c>
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	462a      	mov	r2, r5
 8007652:	4649      	mov	r1, r9
 8007654:	4640      	mov	r0, r8
 8007656:	47d0      	blx	sl
 8007658:	3001      	adds	r0, #1
 800765a:	d0ad      	beq.n	80075b8 <_printf_i+0x160>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	079b      	lsls	r3, r3, #30
 8007660:	d413      	bmi.n	800768a <_printf_i+0x232>
 8007662:	68e0      	ldr	r0, [r4, #12]
 8007664:	9b03      	ldr	r3, [sp, #12]
 8007666:	4298      	cmp	r0, r3
 8007668:	bfb8      	it	lt
 800766a:	4618      	movlt	r0, r3
 800766c:	e7a6      	b.n	80075bc <_printf_i+0x164>
 800766e:	2301      	movs	r3, #1
 8007670:	4632      	mov	r2, r6
 8007672:	4649      	mov	r1, r9
 8007674:	4640      	mov	r0, r8
 8007676:	47d0      	blx	sl
 8007678:	3001      	adds	r0, #1
 800767a:	d09d      	beq.n	80075b8 <_printf_i+0x160>
 800767c:	3501      	adds	r5, #1
 800767e:	68e3      	ldr	r3, [r4, #12]
 8007680:	9903      	ldr	r1, [sp, #12]
 8007682:	1a5b      	subs	r3, r3, r1
 8007684:	42ab      	cmp	r3, r5
 8007686:	dcf2      	bgt.n	800766e <_printf_i+0x216>
 8007688:	e7eb      	b.n	8007662 <_printf_i+0x20a>
 800768a:	2500      	movs	r5, #0
 800768c:	f104 0619 	add.w	r6, r4, #25
 8007690:	e7f5      	b.n	800767e <_printf_i+0x226>
 8007692:	bf00      	nop
 8007694:	08009f66 	.word	0x08009f66
 8007698:	08009f77 	.word	0x08009f77

0800769c <std>:
 800769c:	2300      	movs	r3, #0
 800769e:	b510      	push	{r4, lr}
 80076a0:	4604      	mov	r4, r0
 80076a2:	e9c0 3300 	strd	r3, r3, [r0]
 80076a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076aa:	6083      	str	r3, [r0, #8]
 80076ac:	8181      	strh	r1, [r0, #12]
 80076ae:	6643      	str	r3, [r0, #100]	; 0x64
 80076b0:	81c2      	strh	r2, [r0, #14]
 80076b2:	6183      	str	r3, [r0, #24]
 80076b4:	4619      	mov	r1, r3
 80076b6:	2208      	movs	r2, #8
 80076b8:	305c      	adds	r0, #92	; 0x5c
 80076ba:	f000 f9e5 	bl	8007a88 <memset>
 80076be:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <std+0x58>)
 80076c0:	6263      	str	r3, [r4, #36]	; 0x24
 80076c2:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <std+0x5c>)
 80076c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80076c6:	4b0d      	ldr	r3, [pc, #52]	; (80076fc <std+0x60>)
 80076c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076ca:	4b0d      	ldr	r3, [pc, #52]	; (8007700 <std+0x64>)
 80076cc:	6323      	str	r3, [r4, #48]	; 0x30
 80076ce:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <std+0x68>)
 80076d0:	6224      	str	r4, [r4, #32]
 80076d2:	429c      	cmp	r4, r3
 80076d4:	d006      	beq.n	80076e4 <std+0x48>
 80076d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80076da:	4294      	cmp	r4, r2
 80076dc:	d002      	beq.n	80076e4 <std+0x48>
 80076de:	33d0      	adds	r3, #208	; 0xd0
 80076e0:	429c      	cmp	r4, r3
 80076e2:	d105      	bne.n	80076f0 <std+0x54>
 80076e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ec:	f000 ba48 	b.w	8007b80 <__retarget_lock_init_recursive>
 80076f0:	bd10      	pop	{r4, pc}
 80076f2:	bf00      	nop
 80076f4:	080078d9 	.word	0x080078d9
 80076f8:	080078fb 	.word	0x080078fb
 80076fc:	08007933 	.word	0x08007933
 8007700:	08007957 	.word	0x08007957
 8007704:	20000454 	.word	0x20000454

08007708 <stdio_exit_handler>:
 8007708:	4a02      	ldr	r2, [pc, #8]	; (8007714 <stdio_exit_handler+0xc>)
 800770a:	4903      	ldr	r1, [pc, #12]	; (8007718 <stdio_exit_handler+0x10>)
 800770c:	4803      	ldr	r0, [pc, #12]	; (800771c <stdio_exit_handler+0x14>)
 800770e:	f000 b869 	b.w	80077e4 <_fwalk_sglue>
 8007712:	bf00      	nop
 8007714:	2000009c 	.word	0x2000009c
 8007718:	08009281 	.word	0x08009281
 800771c:	200000a8 	.word	0x200000a8

08007720 <cleanup_stdio>:
 8007720:	6841      	ldr	r1, [r0, #4]
 8007722:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <cleanup_stdio+0x34>)
 8007724:	4299      	cmp	r1, r3
 8007726:	b510      	push	{r4, lr}
 8007728:	4604      	mov	r4, r0
 800772a:	d001      	beq.n	8007730 <cleanup_stdio+0x10>
 800772c:	f001 fda8 	bl	8009280 <_fflush_r>
 8007730:	68a1      	ldr	r1, [r4, #8]
 8007732:	4b09      	ldr	r3, [pc, #36]	; (8007758 <cleanup_stdio+0x38>)
 8007734:	4299      	cmp	r1, r3
 8007736:	d002      	beq.n	800773e <cleanup_stdio+0x1e>
 8007738:	4620      	mov	r0, r4
 800773a:	f001 fda1 	bl	8009280 <_fflush_r>
 800773e:	68e1      	ldr	r1, [r4, #12]
 8007740:	4b06      	ldr	r3, [pc, #24]	; (800775c <cleanup_stdio+0x3c>)
 8007742:	4299      	cmp	r1, r3
 8007744:	d004      	beq.n	8007750 <cleanup_stdio+0x30>
 8007746:	4620      	mov	r0, r4
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774c:	f001 bd98 	b.w	8009280 <_fflush_r>
 8007750:	bd10      	pop	{r4, pc}
 8007752:	bf00      	nop
 8007754:	20000454 	.word	0x20000454
 8007758:	200004bc 	.word	0x200004bc
 800775c:	20000524 	.word	0x20000524

08007760 <global_stdio_init.part.0>:
 8007760:	b510      	push	{r4, lr}
 8007762:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <global_stdio_init.part.0+0x30>)
 8007764:	4c0b      	ldr	r4, [pc, #44]	; (8007794 <global_stdio_init.part.0+0x34>)
 8007766:	4a0c      	ldr	r2, [pc, #48]	; (8007798 <global_stdio_init.part.0+0x38>)
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	4620      	mov	r0, r4
 800776c:	2200      	movs	r2, #0
 800776e:	2104      	movs	r1, #4
 8007770:	f7ff ff94 	bl	800769c <std>
 8007774:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007778:	2201      	movs	r2, #1
 800777a:	2109      	movs	r1, #9
 800777c:	f7ff ff8e 	bl	800769c <std>
 8007780:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007784:	2202      	movs	r2, #2
 8007786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800778a:	2112      	movs	r1, #18
 800778c:	f7ff bf86 	b.w	800769c <std>
 8007790:	2000058c 	.word	0x2000058c
 8007794:	20000454 	.word	0x20000454
 8007798:	08007709 	.word	0x08007709

0800779c <__sfp_lock_acquire>:
 800779c:	4801      	ldr	r0, [pc, #4]	; (80077a4 <__sfp_lock_acquire+0x8>)
 800779e:	f000 b9f0 	b.w	8007b82 <__retarget_lock_acquire_recursive>
 80077a2:	bf00      	nop
 80077a4:	20000595 	.word	0x20000595

080077a8 <__sfp_lock_release>:
 80077a8:	4801      	ldr	r0, [pc, #4]	; (80077b0 <__sfp_lock_release+0x8>)
 80077aa:	f000 b9eb 	b.w	8007b84 <__retarget_lock_release_recursive>
 80077ae:	bf00      	nop
 80077b0:	20000595 	.word	0x20000595

080077b4 <__sinit>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	4604      	mov	r4, r0
 80077b8:	f7ff fff0 	bl	800779c <__sfp_lock_acquire>
 80077bc:	6a23      	ldr	r3, [r4, #32]
 80077be:	b11b      	cbz	r3, 80077c8 <__sinit+0x14>
 80077c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c4:	f7ff bff0 	b.w	80077a8 <__sfp_lock_release>
 80077c8:	4b04      	ldr	r3, [pc, #16]	; (80077dc <__sinit+0x28>)
 80077ca:	6223      	str	r3, [r4, #32]
 80077cc:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <__sinit+0x2c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1f5      	bne.n	80077c0 <__sinit+0xc>
 80077d4:	f7ff ffc4 	bl	8007760 <global_stdio_init.part.0>
 80077d8:	e7f2      	b.n	80077c0 <__sinit+0xc>
 80077da:	bf00      	nop
 80077dc:	08007721 	.word	0x08007721
 80077e0:	2000058c 	.word	0x2000058c

080077e4 <_fwalk_sglue>:
 80077e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e8:	4607      	mov	r7, r0
 80077ea:	4688      	mov	r8, r1
 80077ec:	4614      	mov	r4, r2
 80077ee:	2600      	movs	r6, #0
 80077f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077f4:	f1b9 0901 	subs.w	r9, r9, #1
 80077f8:	d505      	bpl.n	8007806 <_fwalk_sglue+0x22>
 80077fa:	6824      	ldr	r4, [r4, #0]
 80077fc:	2c00      	cmp	r4, #0
 80077fe:	d1f7      	bne.n	80077f0 <_fwalk_sglue+0xc>
 8007800:	4630      	mov	r0, r6
 8007802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007806:	89ab      	ldrh	r3, [r5, #12]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d907      	bls.n	800781c <_fwalk_sglue+0x38>
 800780c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007810:	3301      	adds	r3, #1
 8007812:	d003      	beq.n	800781c <_fwalk_sglue+0x38>
 8007814:	4629      	mov	r1, r5
 8007816:	4638      	mov	r0, r7
 8007818:	47c0      	blx	r8
 800781a:	4306      	orrs	r6, r0
 800781c:	3568      	adds	r5, #104	; 0x68
 800781e:	e7e9      	b.n	80077f4 <_fwalk_sglue+0x10>

08007820 <_puts_r>:
 8007820:	6a03      	ldr	r3, [r0, #32]
 8007822:	b570      	push	{r4, r5, r6, lr}
 8007824:	6884      	ldr	r4, [r0, #8]
 8007826:	4605      	mov	r5, r0
 8007828:	460e      	mov	r6, r1
 800782a:	b90b      	cbnz	r3, 8007830 <_puts_r+0x10>
 800782c:	f7ff ffc2 	bl	80077b4 <__sinit>
 8007830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007832:	07db      	lsls	r3, r3, #31
 8007834:	d405      	bmi.n	8007842 <_puts_r+0x22>
 8007836:	89a3      	ldrh	r3, [r4, #12]
 8007838:	0598      	lsls	r0, r3, #22
 800783a:	d402      	bmi.n	8007842 <_puts_r+0x22>
 800783c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800783e:	f000 f9a0 	bl	8007b82 <__retarget_lock_acquire_recursive>
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	0719      	lsls	r1, r3, #28
 8007846:	d513      	bpl.n	8007870 <_puts_r+0x50>
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	b18b      	cbz	r3, 8007870 <_puts_r+0x50>
 800784c:	3e01      	subs	r6, #1
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007854:	3b01      	subs	r3, #1
 8007856:	60a3      	str	r3, [r4, #8]
 8007858:	b9e9      	cbnz	r1, 8007896 <_puts_r+0x76>
 800785a:	2b00      	cmp	r3, #0
 800785c:	da2e      	bge.n	80078bc <_puts_r+0x9c>
 800785e:	4622      	mov	r2, r4
 8007860:	210a      	movs	r1, #10
 8007862:	4628      	mov	r0, r5
 8007864:	f000 f87b 	bl	800795e <__swbuf_r>
 8007868:	3001      	adds	r0, #1
 800786a:	d007      	beq.n	800787c <_puts_r+0x5c>
 800786c:	250a      	movs	r5, #10
 800786e:	e007      	b.n	8007880 <_puts_r+0x60>
 8007870:	4621      	mov	r1, r4
 8007872:	4628      	mov	r0, r5
 8007874:	f000 f8b0 	bl	80079d8 <__swsetup_r>
 8007878:	2800      	cmp	r0, #0
 800787a:	d0e7      	beq.n	800784c <_puts_r+0x2c>
 800787c:	f04f 35ff 	mov.w	r5, #4294967295
 8007880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007882:	07da      	lsls	r2, r3, #31
 8007884:	d405      	bmi.n	8007892 <_puts_r+0x72>
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	059b      	lsls	r3, r3, #22
 800788a:	d402      	bmi.n	8007892 <_puts_r+0x72>
 800788c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800788e:	f000 f979 	bl	8007b84 <__retarget_lock_release_recursive>
 8007892:	4628      	mov	r0, r5
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	2b00      	cmp	r3, #0
 8007898:	da04      	bge.n	80078a4 <_puts_r+0x84>
 800789a:	69a2      	ldr	r2, [r4, #24]
 800789c:	429a      	cmp	r2, r3
 800789e:	dc06      	bgt.n	80078ae <_puts_r+0x8e>
 80078a0:	290a      	cmp	r1, #10
 80078a2:	d004      	beq.n	80078ae <_puts_r+0x8e>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	6022      	str	r2, [r4, #0]
 80078aa:	7019      	strb	r1, [r3, #0]
 80078ac:	e7cf      	b.n	800784e <_puts_r+0x2e>
 80078ae:	4622      	mov	r2, r4
 80078b0:	4628      	mov	r0, r5
 80078b2:	f000 f854 	bl	800795e <__swbuf_r>
 80078b6:	3001      	adds	r0, #1
 80078b8:	d1c9      	bne.n	800784e <_puts_r+0x2e>
 80078ba:	e7df      	b.n	800787c <_puts_r+0x5c>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	250a      	movs	r5, #10
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	6022      	str	r2, [r4, #0]
 80078c4:	701d      	strb	r5, [r3, #0]
 80078c6:	e7db      	b.n	8007880 <_puts_r+0x60>

080078c8 <puts>:
 80078c8:	4b02      	ldr	r3, [pc, #8]	; (80078d4 <puts+0xc>)
 80078ca:	4601      	mov	r1, r0
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	f7ff bfa7 	b.w	8007820 <_puts_r>
 80078d2:	bf00      	nop
 80078d4:	200000f4 	.word	0x200000f4

080078d8 <__sread>:
 80078d8:	b510      	push	{r4, lr}
 80078da:	460c      	mov	r4, r1
 80078dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e0:	f000 f900 	bl	8007ae4 <_read_r>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	bfab      	itete	ge
 80078e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078ea:	89a3      	ldrhlt	r3, [r4, #12]
 80078ec:	181b      	addge	r3, r3, r0
 80078ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078f2:	bfac      	ite	ge
 80078f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078f6:	81a3      	strhlt	r3, [r4, #12]
 80078f8:	bd10      	pop	{r4, pc}

080078fa <__swrite>:
 80078fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fe:	461f      	mov	r7, r3
 8007900:	898b      	ldrh	r3, [r1, #12]
 8007902:	05db      	lsls	r3, r3, #23
 8007904:	4605      	mov	r5, r0
 8007906:	460c      	mov	r4, r1
 8007908:	4616      	mov	r6, r2
 800790a:	d505      	bpl.n	8007918 <__swrite+0x1e>
 800790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007910:	2302      	movs	r3, #2
 8007912:	2200      	movs	r2, #0
 8007914:	f000 f8d4 	bl	8007ac0 <_lseek_r>
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800791e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007922:	81a3      	strh	r3, [r4, #12]
 8007924:	4632      	mov	r2, r6
 8007926:	463b      	mov	r3, r7
 8007928:	4628      	mov	r0, r5
 800792a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800792e:	f000 b8eb 	b.w	8007b08 <_write_r>

08007932 <__sseek>:
 8007932:	b510      	push	{r4, lr}
 8007934:	460c      	mov	r4, r1
 8007936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793a:	f000 f8c1 	bl	8007ac0 <_lseek_r>
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	bf15      	itete	ne
 8007944:	6560      	strne	r0, [r4, #84]	; 0x54
 8007946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800794a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800794e:	81a3      	strheq	r3, [r4, #12]
 8007950:	bf18      	it	ne
 8007952:	81a3      	strhne	r3, [r4, #12]
 8007954:	bd10      	pop	{r4, pc}

08007956 <__sclose>:
 8007956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800795a:	f000 b8a1 	b.w	8007aa0 <_close_r>

0800795e <__swbuf_r>:
 800795e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007960:	460e      	mov	r6, r1
 8007962:	4614      	mov	r4, r2
 8007964:	4605      	mov	r5, r0
 8007966:	b118      	cbz	r0, 8007970 <__swbuf_r+0x12>
 8007968:	6a03      	ldr	r3, [r0, #32]
 800796a:	b90b      	cbnz	r3, 8007970 <__swbuf_r+0x12>
 800796c:	f7ff ff22 	bl	80077b4 <__sinit>
 8007970:	69a3      	ldr	r3, [r4, #24]
 8007972:	60a3      	str	r3, [r4, #8]
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	071a      	lsls	r2, r3, #28
 8007978:	d525      	bpl.n	80079c6 <__swbuf_r+0x68>
 800797a:	6923      	ldr	r3, [r4, #16]
 800797c:	b31b      	cbz	r3, 80079c6 <__swbuf_r+0x68>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	6922      	ldr	r2, [r4, #16]
 8007982:	1a98      	subs	r0, r3, r2
 8007984:	6963      	ldr	r3, [r4, #20]
 8007986:	b2f6      	uxtb	r6, r6
 8007988:	4283      	cmp	r3, r0
 800798a:	4637      	mov	r7, r6
 800798c:	dc04      	bgt.n	8007998 <__swbuf_r+0x3a>
 800798e:	4621      	mov	r1, r4
 8007990:	4628      	mov	r0, r5
 8007992:	f001 fc75 	bl	8009280 <_fflush_r>
 8007996:	b9e0      	cbnz	r0, 80079d2 <__swbuf_r+0x74>
 8007998:	68a3      	ldr	r3, [r4, #8]
 800799a:	3b01      	subs	r3, #1
 800799c:	60a3      	str	r3, [r4, #8]
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	6022      	str	r2, [r4, #0]
 80079a4:	701e      	strb	r6, [r3, #0]
 80079a6:	6962      	ldr	r2, [r4, #20]
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d004      	beq.n	80079b8 <__swbuf_r+0x5a>
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	07db      	lsls	r3, r3, #31
 80079b2:	d506      	bpl.n	80079c2 <__swbuf_r+0x64>
 80079b4:	2e0a      	cmp	r6, #10
 80079b6:	d104      	bne.n	80079c2 <__swbuf_r+0x64>
 80079b8:	4621      	mov	r1, r4
 80079ba:	4628      	mov	r0, r5
 80079bc:	f001 fc60 	bl	8009280 <_fflush_r>
 80079c0:	b938      	cbnz	r0, 80079d2 <__swbuf_r+0x74>
 80079c2:	4638      	mov	r0, r7
 80079c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c6:	4621      	mov	r1, r4
 80079c8:	4628      	mov	r0, r5
 80079ca:	f000 f805 	bl	80079d8 <__swsetup_r>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d0d5      	beq.n	800797e <__swbuf_r+0x20>
 80079d2:	f04f 37ff 	mov.w	r7, #4294967295
 80079d6:	e7f4      	b.n	80079c2 <__swbuf_r+0x64>

080079d8 <__swsetup_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4b2a      	ldr	r3, [pc, #168]	; (8007a84 <__swsetup_r+0xac>)
 80079dc:	4605      	mov	r5, r0
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	460c      	mov	r4, r1
 80079e2:	b118      	cbz	r0, 80079ec <__swsetup_r+0x14>
 80079e4:	6a03      	ldr	r3, [r0, #32]
 80079e6:	b90b      	cbnz	r3, 80079ec <__swsetup_r+0x14>
 80079e8:	f7ff fee4 	bl	80077b4 <__sinit>
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079f2:	0718      	lsls	r0, r3, #28
 80079f4:	d422      	bmi.n	8007a3c <__swsetup_r+0x64>
 80079f6:	06d9      	lsls	r1, r3, #27
 80079f8:	d407      	bmi.n	8007a0a <__swsetup_r+0x32>
 80079fa:	2309      	movs	r3, #9
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a02:	81a3      	strh	r3, [r4, #12]
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	e034      	b.n	8007a74 <__swsetup_r+0x9c>
 8007a0a:	0758      	lsls	r0, r3, #29
 8007a0c:	d512      	bpl.n	8007a34 <__swsetup_r+0x5c>
 8007a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a10:	b141      	cbz	r1, 8007a24 <__swsetup_r+0x4c>
 8007a12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a16:	4299      	cmp	r1, r3
 8007a18:	d002      	beq.n	8007a20 <__swsetup_r+0x48>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f000 ff2e 	bl	800887c <_free_r>
 8007a20:	2300      	movs	r3, #0
 8007a22:	6363      	str	r3, [r4, #52]	; 0x34
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a2a:	81a3      	strh	r3, [r4, #12]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	6063      	str	r3, [r4, #4]
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	6023      	str	r3, [r4, #0]
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f043 0308 	orr.w	r3, r3, #8
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	b94b      	cbnz	r3, 8007a54 <__swsetup_r+0x7c>
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a4a:	d003      	beq.n	8007a54 <__swsetup_r+0x7c>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4628      	mov	r0, r5
 8007a50:	f001 fc64 	bl	800931c <__smakebuf_r>
 8007a54:	89a0      	ldrh	r0, [r4, #12]
 8007a56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a5a:	f010 0301 	ands.w	r3, r0, #1
 8007a5e:	d00a      	beq.n	8007a76 <__swsetup_r+0x9e>
 8007a60:	2300      	movs	r3, #0
 8007a62:	60a3      	str	r3, [r4, #8]
 8007a64:	6963      	ldr	r3, [r4, #20]
 8007a66:	425b      	negs	r3, r3
 8007a68:	61a3      	str	r3, [r4, #24]
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	b943      	cbnz	r3, 8007a80 <__swsetup_r+0xa8>
 8007a6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a72:	d1c4      	bne.n	80079fe <__swsetup_r+0x26>
 8007a74:	bd38      	pop	{r3, r4, r5, pc}
 8007a76:	0781      	lsls	r1, r0, #30
 8007a78:	bf58      	it	pl
 8007a7a:	6963      	ldrpl	r3, [r4, #20]
 8007a7c:	60a3      	str	r3, [r4, #8]
 8007a7e:	e7f4      	b.n	8007a6a <__swsetup_r+0x92>
 8007a80:	2000      	movs	r0, #0
 8007a82:	e7f7      	b.n	8007a74 <__swsetup_r+0x9c>
 8007a84:	200000f4 	.word	0x200000f4

08007a88 <memset>:
 8007a88:	4402      	add	r2, r0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d100      	bne.n	8007a92 <memset+0xa>
 8007a90:	4770      	bx	lr
 8007a92:	f803 1b01 	strb.w	r1, [r3], #1
 8007a96:	e7f9      	b.n	8007a8c <memset+0x4>

08007a98 <_localeconv_r>:
 8007a98:	4800      	ldr	r0, [pc, #0]	; (8007a9c <_localeconv_r+0x4>)
 8007a9a:	4770      	bx	lr
 8007a9c:	200001e8 	.word	0x200001e8

08007aa0 <_close_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d06      	ldr	r5, [pc, #24]	; (8007abc <_close_r+0x1c>)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	f7fa fb8f 	bl	80021ce <_close>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_close_r+0x1a>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_close_r+0x1a>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	20000590 	.word	0x20000590

08007ac0 <_lseek_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4d07      	ldr	r5, [pc, #28]	; (8007ae0 <_lseek_r+0x20>)
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	2200      	movs	r2, #0
 8007acc:	602a      	str	r2, [r5, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f7fa fba4 	bl	800221c <_lseek>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_lseek_r+0x1e>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_lseek_r+0x1e>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	20000590 	.word	0x20000590

08007ae4 <_read_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d07      	ldr	r5, [pc, #28]	; (8007b04 <_read_r+0x20>)
 8007ae8:	4604      	mov	r4, r0
 8007aea:	4608      	mov	r0, r1
 8007aec:	4611      	mov	r1, r2
 8007aee:	2200      	movs	r2, #0
 8007af0:	602a      	str	r2, [r5, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f7fa fb4e 	bl	8002194 <_read>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_read_r+0x1e>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_read_r+0x1e>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	20000590 	.word	0x20000590

08007b08 <_write_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	; (8007b28 <_write_r+0x20>)
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	4608      	mov	r0, r1
 8007b10:	4611      	mov	r1, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	602a      	str	r2, [r5, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f7f9 fa04 	bl	8000f24 <_write>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_write_r+0x1e>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_write_r+0x1e>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	20000590 	.word	0x20000590

08007b2c <__errno>:
 8007b2c:	4b01      	ldr	r3, [pc, #4]	; (8007b34 <__errno+0x8>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	200000f4 	.word	0x200000f4

08007b38 <__libc_init_array>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	4d0d      	ldr	r5, [pc, #52]	; (8007b70 <__libc_init_array+0x38>)
 8007b3c:	4c0d      	ldr	r4, [pc, #52]	; (8007b74 <__libc_init_array+0x3c>)
 8007b3e:	1b64      	subs	r4, r4, r5
 8007b40:	10a4      	asrs	r4, r4, #2
 8007b42:	2600      	movs	r6, #0
 8007b44:	42a6      	cmp	r6, r4
 8007b46:	d109      	bne.n	8007b5c <__libc_init_array+0x24>
 8007b48:	4d0b      	ldr	r5, [pc, #44]	; (8007b78 <__libc_init_array+0x40>)
 8007b4a:	4c0c      	ldr	r4, [pc, #48]	; (8007b7c <__libc_init_array+0x44>)
 8007b4c:	f002 f9ce 	bl	8009eec <_init>
 8007b50:	1b64      	subs	r4, r4, r5
 8007b52:	10a4      	asrs	r4, r4, #2
 8007b54:	2600      	movs	r6, #0
 8007b56:	42a6      	cmp	r6, r4
 8007b58:	d105      	bne.n	8007b66 <__libc_init_array+0x2e>
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
 8007b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b60:	4798      	blx	r3
 8007b62:	3601      	adds	r6, #1
 8007b64:	e7ee      	b.n	8007b44 <__libc_init_array+0xc>
 8007b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b6a:	4798      	blx	r3
 8007b6c:	3601      	adds	r6, #1
 8007b6e:	e7f2      	b.n	8007b56 <__libc_init_array+0x1e>
 8007b70:	0800a340 	.word	0x0800a340
 8007b74:	0800a340 	.word	0x0800a340
 8007b78:	0800a340 	.word	0x0800a340
 8007b7c:	0800a344 	.word	0x0800a344

08007b80 <__retarget_lock_init_recursive>:
 8007b80:	4770      	bx	lr

08007b82 <__retarget_lock_acquire_recursive>:
 8007b82:	4770      	bx	lr

08007b84 <__retarget_lock_release_recursive>:
 8007b84:	4770      	bx	lr

08007b86 <quorem>:
 8007b86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	6903      	ldr	r3, [r0, #16]
 8007b8c:	690c      	ldr	r4, [r1, #16]
 8007b8e:	42a3      	cmp	r3, r4
 8007b90:	4607      	mov	r7, r0
 8007b92:	db7e      	blt.n	8007c92 <quorem+0x10c>
 8007b94:	3c01      	subs	r4, #1
 8007b96:	f101 0814 	add.w	r8, r1, #20
 8007b9a:	f100 0514 	add.w	r5, r0, #20
 8007b9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ba8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bac:	3301      	adds	r3, #1
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bbc:	d331      	bcc.n	8007c22 <quorem+0x9c>
 8007bbe:	f04f 0e00 	mov.w	lr, #0
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	46ac      	mov	ip, r5
 8007bc6:	46f2      	mov	sl, lr
 8007bc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bcc:	b293      	uxth	r3, r2
 8007bce:	fb06 e303 	mla	r3, r6, r3, lr
 8007bd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bd6:	0c1a      	lsrs	r2, r3, #16
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	ebaa 0303 	sub.w	r3, sl, r3
 8007bde:	f8dc a000 	ldr.w	sl, [ip]
 8007be2:	fa13 f38a 	uxtah	r3, r3, sl
 8007be6:	fb06 220e 	mla	r2, r6, lr, r2
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	9b00      	ldr	r3, [sp, #0]
 8007bee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bf2:	b292      	uxth	r2, r2
 8007bf4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007bf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bfc:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c00:	4581      	cmp	r9, r0
 8007c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c06:	f84c 3b04 	str.w	r3, [ip], #4
 8007c0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c0e:	d2db      	bcs.n	8007bc8 <quorem+0x42>
 8007c10:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c14:	b92b      	cbnz	r3, 8007c22 <quorem+0x9c>
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	3b04      	subs	r3, #4
 8007c1a:	429d      	cmp	r5, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	d32c      	bcc.n	8007c7a <quorem+0xf4>
 8007c20:	613c      	str	r4, [r7, #16]
 8007c22:	4638      	mov	r0, r7
 8007c24:	f001 f9a6 	bl	8008f74 <__mcmp>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	db22      	blt.n	8007c72 <quorem+0xec>
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	4629      	mov	r1, r5
 8007c30:	2000      	movs	r0, #0
 8007c32:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c36:	f8d1 c000 	ldr.w	ip, [r1]
 8007c3a:	b293      	uxth	r3, r2
 8007c3c:	1ac3      	subs	r3, r0, r3
 8007c3e:	0c12      	lsrs	r2, r2, #16
 8007c40:	fa13 f38c 	uxtah	r3, r3, ip
 8007c44:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007c48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c52:	45c1      	cmp	r9, r8
 8007c54:	f841 3b04 	str.w	r3, [r1], #4
 8007c58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c5c:	d2e9      	bcs.n	8007c32 <quorem+0xac>
 8007c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c66:	b922      	cbnz	r2, 8007c72 <quorem+0xec>
 8007c68:	3b04      	subs	r3, #4
 8007c6a:	429d      	cmp	r5, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	d30a      	bcc.n	8007c86 <quorem+0x100>
 8007c70:	613c      	str	r4, [r7, #16]
 8007c72:	4630      	mov	r0, r6
 8007c74:	b003      	add	sp, #12
 8007c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7a:	6812      	ldr	r2, [r2, #0]
 8007c7c:	3b04      	subs	r3, #4
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	d1ce      	bne.n	8007c20 <quorem+0x9a>
 8007c82:	3c01      	subs	r4, #1
 8007c84:	e7c9      	b.n	8007c1a <quorem+0x94>
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	3b04      	subs	r3, #4
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d1f0      	bne.n	8007c70 <quorem+0xea>
 8007c8e:	3c01      	subs	r4, #1
 8007c90:	e7eb      	b.n	8007c6a <quorem+0xe4>
 8007c92:	2000      	movs	r0, #0
 8007c94:	e7ee      	b.n	8007c74 <quorem+0xee>
	...

08007c98 <_dtoa_r>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	ed2d 8b04 	vpush	{d8-d9}
 8007ca0:	69c5      	ldr	r5, [r0, #28]
 8007ca2:	b093      	sub	sp, #76	; 0x4c
 8007ca4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ca8:	ec57 6b10 	vmov	r6, r7, d0
 8007cac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cb0:	9107      	str	r1, [sp, #28]
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	920a      	str	r2, [sp, #40]	; 0x28
 8007cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8007cb8:	b975      	cbnz	r5, 8007cd8 <_dtoa_r+0x40>
 8007cba:	2010      	movs	r0, #16
 8007cbc:	f000 fe2a 	bl	8008914 <malloc>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	61e0      	str	r0, [r4, #28]
 8007cc4:	b920      	cbnz	r0, 8007cd0 <_dtoa_r+0x38>
 8007cc6:	4bae      	ldr	r3, [pc, #696]	; (8007f80 <_dtoa_r+0x2e8>)
 8007cc8:	21ef      	movs	r1, #239	; 0xef
 8007cca:	48ae      	ldr	r0, [pc, #696]	; (8007f84 <_dtoa_r+0x2ec>)
 8007ccc:	f001 fba2 	bl	8009414 <__assert_func>
 8007cd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cd4:	6005      	str	r5, [r0, #0]
 8007cd6:	60c5      	str	r5, [r0, #12]
 8007cd8:	69e3      	ldr	r3, [r4, #28]
 8007cda:	6819      	ldr	r1, [r3, #0]
 8007cdc:	b151      	cbz	r1, 8007cf4 <_dtoa_r+0x5c>
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	604a      	str	r2, [r1, #4]
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4093      	lsls	r3, r2
 8007ce6:	608b      	str	r3, [r1, #8]
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 ff07 	bl	8008afc <_Bfree>
 8007cee:	69e3      	ldr	r3, [r4, #28]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	1e3b      	subs	r3, r7, #0
 8007cf6:	bfbb      	ittet	lt
 8007cf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007cfc:	9303      	strlt	r3, [sp, #12]
 8007cfe:	2300      	movge	r3, #0
 8007d00:	2201      	movlt	r2, #1
 8007d02:	bfac      	ite	ge
 8007d04:	f8c8 3000 	strge.w	r3, [r8]
 8007d08:	f8c8 2000 	strlt.w	r2, [r8]
 8007d0c:	4b9e      	ldr	r3, [pc, #632]	; (8007f88 <_dtoa_r+0x2f0>)
 8007d0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007d12:	ea33 0308 	bics.w	r3, r3, r8
 8007d16:	d11b      	bne.n	8007d50 <_dtoa_r+0xb8>
 8007d18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007d24:	4333      	orrs	r3, r6
 8007d26:	f000 8593 	beq.w	8008850 <_dtoa_r+0xbb8>
 8007d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d2c:	b963      	cbnz	r3, 8007d48 <_dtoa_r+0xb0>
 8007d2e:	4b97      	ldr	r3, [pc, #604]	; (8007f8c <_dtoa_r+0x2f4>)
 8007d30:	e027      	b.n	8007d82 <_dtoa_r+0xea>
 8007d32:	4b97      	ldr	r3, [pc, #604]	; (8007f90 <_dtoa_r+0x2f8>)
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	3308      	adds	r3, #8
 8007d38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	9800      	ldr	r0, [sp, #0]
 8007d3e:	b013      	add	sp, #76	; 0x4c
 8007d40:	ecbd 8b04 	vpop	{d8-d9}
 8007d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d48:	4b90      	ldr	r3, [pc, #576]	; (8007f8c <_dtoa_r+0x2f4>)
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	3303      	adds	r3, #3
 8007d4e:	e7f3      	b.n	8007d38 <_dtoa_r+0xa0>
 8007d50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d54:	2200      	movs	r2, #0
 8007d56:	ec51 0b17 	vmov	r0, r1, d7
 8007d5a:	eeb0 8a47 	vmov.f32	s16, s14
 8007d5e:	eef0 8a67 	vmov.f32	s17, s15
 8007d62:	2300      	movs	r3, #0
 8007d64:	f7f8 fed0 	bl	8000b08 <__aeabi_dcmpeq>
 8007d68:	4681      	mov	r9, r0
 8007d6a:	b160      	cbz	r0, 8007d86 <_dtoa_r+0xee>
 8007d6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d6e:	2301      	movs	r3, #1
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8568 	beq.w	800884a <_dtoa_r+0xbb2>
 8007d7a:	4b86      	ldr	r3, [pc, #536]	; (8007f94 <_dtoa_r+0x2fc>)
 8007d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	e7da      	b.n	8007d3c <_dtoa_r+0xa4>
 8007d86:	aa10      	add	r2, sp, #64	; 0x40
 8007d88:	a911      	add	r1, sp, #68	; 0x44
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8007d90:	eef0 0a68 	vmov.f32	s1, s17
 8007d94:	f001 f994 	bl	80090c0 <__d2b>
 8007d98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007d9c:	4682      	mov	sl, r0
 8007d9e:	2d00      	cmp	r5, #0
 8007da0:	d07f      	beq.n	8007ea2 <_dtoa_r+0x20a>
 8007da2:	ee18 3a90 	vmov	r3, s17
 8007da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007daa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007dae:	ec51 0b18 	vmov	r0, r1, d8
 8007db2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007db6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4b75      	ldr	r3, [pc, #468]	; (8007f98 <_dtoa_r+0x300>)
 8007dc4:	f7f8 fa80 	bl	80002c8 <__aeabi_dsub>
 8007dc8:	a367      	add	r3, pc, #412	; (adr r3, 8007f68 <_dtoa_r+0x2d0>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fc33 	bl	8000638 <__aeabi_dmul>
 8007dd2:	a367      	add	r3, pc, #412	; (adr r3, 8007f70 <_dtoa_r+0x2d8>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 fa78 	bl	80002cc <__adddf3>
 8007ddc:	4606      	mov	r6, r0
 8007dde:	4628      	mov	r0, r5
 8007de0:	460f      	mov	r7, r1
 8007de2:	f7f8 fbbf 	bl	8000564 <__aeabi_i2d>
 8007de6:	a364      	add	r3, pc, #400	; (adr r3, 8007f78 <_dtoa_r+0x2e0>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 fc24 	bl	8000638 <__aeabi_dmul>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fa68 	bl	80002cc <__adddf3>
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	460f      	mov	r7, r1
 8007e00:	f7f8 feca 	bl	8000b98 <__aeabi_d2iz>
 8007e04:	2200      	movs	r2, #0
 8007e06:	4683      	mov	fp, r0
 8007e08:	2300      	movs	r3, #0
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	f7f8 fe85 	bl	8000b1c <__aeabi_dcmplt>
 8007e12:	b148      	cbz	r0, 8007e28 <_dtoa_r+0x190>
 8007e14:	4658      	mov	r0, fp
 8007e16:	f7f8 fba5 	bl	8000564 <__aeabi_i2d>
 8007e1a:	4632      	mov	r2, r6
 8007e1c:	463b      	mov	r3, r7
 8007e1e:	f7f8 fe73 	bl	8000b08 <__aeabi_dcmpeq>
 8007e22:	b908      	cbnz	r0, 8007e28 <_dtoa_r+0x190>
 8007e24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e28:	f1bb 0f16 	cmp.w	fp, #22
 8007e2c:	d857      	bhi.n	8007ede <_dtoa_r+0x246>
 8007e2e:	4b5b      	ldr	r3, [pc, #364]	; (8007f9c <_dtoa_r+0x304>)
 8007e30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	ec51 0b18 	vmov	r0, r1, d8
 8007e3c:	f7f8 fe6e 	bl	8000b1c <__aeabi_dcmplt>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d04e      	beq.n	8007ee2 <_dtoa_r+0x24a>
 8007e44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e48:	2300      	movs	r3, #0
 8007e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e4e:	1b5b      	subs	r3, r3, r5
 8007e50:	1e5a      	subs	r2, r3, #1
 8007e52:	bf45      	ittet	mi
 8007e54:	f1c3 0301 	rsbmi	r3, r3, #1
 8007e58:	9305      	strmi	r3, [sp, #20]
 8007e5a:	2300      	movpl	r3, #0
 8007e5c:	2300      	movmi	r3, #0
 8007e5e:	9206      	str	r2, [sp, #24]
 8007e60:	bf54      	ite	pl
 8007e62:	9305      	strpl	r3, [sp, #20]
 8007e64:	9306      	strmi	r3, [sp, #24]
 8007e66:	f1bb 0f00 	cmp.w	fp, #0
 8007e6a:	db3c      	blt.n	8007ee6 <_dtoa_r+0x24e>
 8007e6c:	9b06      	ldr	r3, [sp, #24]
 8007e6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007e72:	445b      	add	r3, fp
 8007e74:	9306      	str	r3, [sp, #24]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9308      	str	r3, [sp, #32]
 8007e7a:	9b07      	ldr	r3, [sp, #28]
 8007e7c:	2b09      	cmp	r3, #9
 8007e7e:	d868      	bhi.n	8007f52 <_dtoa_r+0x2ba>
 8007e80:	2b05      	cmp	r3, #5
 8007e82:	bfc4      	itt	gt
 8007e84:	3b04      	subgt	r3, #4
 8007e86:	9307      	strgt	r3, [sp, #28]
 8007e88:	9b07      	ldr	r3, [sp, #28]
 8007e8a:	f1a3 0302 	sub.w	r3, r3, #2
 8007e8e:	bfcc      	ite	gt
 8007e90:	2500      	movgt	r5, #0
 8007e92:	2501      	movle	r5, #1
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	f200 8085 	bhi.w	8007fa4 <_dtoa_r+0x30c>
 8007e9a:	e8df f003 	tbb	[pc, r3]
 8007e9e:	3b2e      	.short	0x3b2e
 8007ea0:	5839      	.short	0x5839
 8007ea2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ea6:	441d      	add	r5, r3
 8007ea8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	bfc1      	itttt	gt
 8007eb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007eb4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007eb8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007ebc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007ec0:	bfd6      	itet	le
 8007ec2:	f1c3 0320 	rsble	r3, r3, #32
 8007ec6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007eca:	fa06 f003 	lslle.w	r0, r6, r3
 8007ece:	f7f8 fb39 	bl	8000544 <__aeabi_ui2d>
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007ed8:	3d01      	subs	r5, #1
 8007eda:	920e      	str	r2, [sp, #56]	; 0x38
 8007edc:	e76f      	b.n	8007dbe <_dtoa_r+0x126>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e7b3      	b.n	8007e4a <_dtoa_r+0x1b2>
 8007ee2:	900c      	str	r0, [sp, #48]	; 0x30
 8007ee4:	e7b2      	b.n	8007e4c <_dtoa_r+0x1b4>
 8007ee6:	9b05      	ldr	r3, [sp, #20]
 8007ee8:	eba3 030b 	sub.w	r3, r3, fp
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	f1cb 0300 	rsb	r3, fp, #0
 8007ef2:	9308      	str	r3, [sp, #32]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ef8:	e7bf      	b.n	8007e7a <_dtoa_r+0x1e2>
 8007efa:	2300      	movs	r3, #0
 8007efc:	9309      	str	r3, [sp, #36]	; 0x24
 8007efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dc52      	bgt.n	8007faa <_dtoa_r+0x312>
 8007f04:	2301      	movs	r3, #1
 8007f06:	9301      	str	r3, [sp, #4]
 8007f08:	9304      	str	r3, [sp, #16]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	920a      	str	r2, [sp, #40]	; 0x28
 8007f0e:	e00b      	b.n	8007f28 <_dtoa_r+0x290>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e7f3      	b.n	8007efc <_dtoa_r+0x264>
 8007f14:	2300      	movs	r3, #0
 8007f16:	9309      	str	r3, [sp, #36]	; 0x24
 8007f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1a:	445b      	add	r3, fp
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	bfb8      	it	lt
 8007f26:	2301      	movlt	r3, #1
 8007f28:	69e0      	ldr	r0, [r4, #28]
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	f102 0614 	add.w	r6, r2, #20
 8007f32:	429e      	cmp	r6, r3
 8007f34:	d93d      	bls.n	8007fb2 <_dtoa_r+0x31a>
 8007f36:	6041      	str	r1, [r0, #4]
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 fd9f 	bl	8008a7c <_Balloc>
 8007f3e:	9000      	str	r0, [sp, #0]
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d139      	bne.n	8007fb8 <_dtoa_r+0x320>
 8007f44:	4b16      	ldr	r3, [pc, #88]	; (8007fa0 <_dtoa_r+0x308>)
 8007f46:	4602      	mov	r2, r0
 8007f48:	f240 11af 	movw	r1, #431	; 0x1af
 8007f4c:	e6bd      	b.n	8007cca <_dtoa_r+0x32>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e7e1      	b.n	8007f16 <_dtoa_r+0x27e>
 8007f52:	2501      	movs	r5, #1
 8007f54:	2300      	movs	r3, #0
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	9509      	str	r5, [sp, #36]	; 0x24
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	2200      	movs	r2, #0
 8007f64:	2312      	movs	r3, #18
 8007f66:	e7d1      	b.n	8007f0c <_dtoa_r+0x274>
 8007f68:	636f4361 	.word	0x636f4361
 8007f6c:	3fd287a7 	.word	0x3fd287a7
 8007f70:	8b60c8b3 	.word	0x8b60c8b3
 8007f74:	3fc68a28 	.word	0x3fc68a28
 8007f78:	509f79fb 	.word	0x509f79fb
 8007f7c:	3fd34413 	.word	0x3fd34413
 8007f80:	08009f95 	.word	0x08009f95
 8007f84:	08009fac 	.word	0x08009fac
 8007f88:	7ff00000 	.word	0x7ff00000
 8007f8c:	08009f91 	.word	0x08009f91
 8007f90:	08009f88 	.word	0x08009f88
 8007f94:	08009f65 	.word	0x08009f65
 8007f98:	3ff80000 	.word	0x3ff80000
 8007f9c:	0800a098 	.word	0x0800a098
 8007fa0:	0800a004 	.word	0x0800a004
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa8:	e7d7      	b.n	8007f5a <_dtoa_r+0x2c2>
 8007faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	9304      	str	r3, [sp, #16]
 8007fb0:	e7ba      	b.n	8007f28 <_dtoa_r+0x290>
 8007fb2:	3101      	adds	r1, #1
 8007fb4:	0052      	lsls	r2, r2, #1
 8007fb6:	e7ba      	b.n	8007f2e <_dtoa_r+0x296>
 8007fb8:	69e3      	ldr	r3, [r4, #28]
 8007fba:	9a00      	ldr	r2, [sp, #0]
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	9b04      	ldr	r3, [sp, #16]
 8007fc0:	2b0e      	cmp	r3, #14
 8007fc2:	f200 80a8 	bhi.w	8008116 <_dtoa_r+0x47e>
 8007fc6:	2d00      	cmp	r5, #0
 8007fc8:	f000 80a5 	beq.w	8008116 <_dtoa_r+0x47e>
 8007fcc:	f1bb 0f00 	cmp.w	fp, #0
 8007fd0:	dd38      	ble.n	8008044 <_dtoa_r+0x3ac>
 8007fd2:	4bc0      	ldr	r3, [pc, #768]	; (80082d4 <_dtoa_r+0x63c>)
 8007fd4:	f00b 020f 	and.w	r2, fp, #15
 8007fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007fe0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007fe4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007fe8:	d019      	beq.n	800801e <_dtoa_r+0x386>
 8007fea:	4bbb      	ldr	r3, [pc, #748]	; (80082d8 <_dtoa_r+0x640>)
 8007fec:	ec51 0b18 	vmov	r0, r1, d8
 8007ff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ff4:	f7f8 fc4a 	bl	800088c <__aeabi_ddiv>
 8007ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ffc:	f008 080f 	and.w	r8, r8, #15
 8008000:	2503      	movs	r5, #3
 8008002:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80082d8 <_dtoa_r+0x640>
 8008006:	f1b8 0f00 	cmp.w	r8, #0
 800800a:	d10a      	bne.n	8008022 <_dtoa_r+0x38a>
 800800c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008010:	4632      	mov	r2, r6
 8008012:	463b      	mov	r3, r7
 8008014:	f7f8 fc3a 	bl	800088c <__aeabi_ddiv>
 8008018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800801c:	e02b      	b.n	8008076 <_dtoa_r+0x3de>
 800801e:	2502      	movs	r5, #2
 8008020:	e7ef      	b.n	8008002 <_dtoa_r+0x36a>
 8008022:	f018 0f01 	tst.w	r8, #1
 8008026:	d008      	beq.n	800803a <_dtoa_r+0x3a2>
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008030:	f7f8 fb02 	bl	8000638 <__aeabi_dmul>
 8008034:	3501      	adds	r5, #1
 8008036:	4606      	mov	r6, r0
 8008038:	460f      	mov	r7, r1
 800803a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800803e:	f109 0908 	add.w	r9, r9, #8
 8008042:	e7e0      	b.n	8008006 <_dtoa_r+0x36e>
 8008044:	f000 809f 	beq.w	8008186 <_dtoa_r+0x4ee>
 8008048:	f1cb 0600 	rsb	r6, fp, #0
 800804c:	4ba1      	ldr	r3, [pc, #644]	; (80082d4 <_dtoa_r+0x63c>)
 800804e:	4fa2      	ldr	r7, [pc, #648]	; (80082d8 <_dtoa_r+0x640>)
 8008050:	f006 020f 	and.w	r2, r6, #15
 8008054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	ec51 0b18 	vmov	r0, r1, d8
 8008060:	f7f8 faea 	bl	8000638 <__aeabi_dmul>
 8008064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008068:	1136      	asrs	r6, r6, #4
 800806a:	2300      	movs	r3, #0
 800806c:	2502      	movs	r5, #2
 800806e:	2e00      	cmp	r6, #0
 8008070:	d17e      	bne.n	8008170 <_dtoa_r+0x4d8>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1d0      	bne.n	8008018 <_dtoa_r+0x380>
 8008076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008078:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8084 	beq.w	800818a <_dtoa_r+0x4f2>
 8008082:	4b96      	ldr	r3, [pc, #600]	; (80082dc <_dtoa_r+0x644>)
 8008084:	2200      	movs	r2, #0
 8008086:	4640      	mov	r0, r8
 8008088:	4649      	mov	r1, r9
 800808a:	f7f8 fd47 	bl	8000b1c <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d07b      	beq.n	800818a <_dtoa_r+0x4f2>
 8008092:	9b04      	ldr	r3, [sp, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d078      	beq.n	800818a <_dtoa_r+0x4f2>
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	dd39      	ble.n	8008112 <_dtoa_r+0x47a>
 800809e:	4b90      	ldr	r3, [pc, #576]	; (80082e0 <_dtoa_r+0x648>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	f7f8 fac7 	bl	8000638 <__aeabi_dmul>
 80080aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ae:	9e01      	ldr	r6, [sp, #4]
 80080b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80080b4:	3501      	adds	r5, #1
 80080b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80080ba:	4628      	mov	r0, r5
 80080bc:	f7f8 fa52 	bl	8000564 <__aeabi_i2d>
 80080c0:	4642      	mov	r2, r8
 80080c2:	464b      	mov	r3, r9
 80080c4:	f7f8 fab8 	bl	8000638 <__aeabi_dmul>
 80080c8:	4b86      	ldr	r3, [pc, #536]	; (80082e4 <_dtoa_r+0x64c>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	f7f8 f8fe 	bl	80002cc <__adddf3>
 80080d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80080d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	2e00      	cmp	r6, #0
 80080dc:	d158      	bne.n	8008190 <_dtoa_r+0x4f8>
 80080de:	4b82      	ldr	r3, [pc, #520]	; (80082e8 <_dtoa_r+0x650>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	4640      	mov	r0, r8
 80080e4:	4649      	mov	r1, r9
 80080e6:	f7f8 f8ef 	bl	80002c8 <__aeabi_dsub>
 80080ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080ee:	4680      	mov	r8, r0
 80080f0:	4689      	mov	r9, r1
 80080f2:	f7f8 fd31 	bl	8000b58 <__aeabi_dcmpgt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	f040 8296 	bne.w	8008628 <_dtoa_r+0x990>
 80080fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008100:	4640      	mov	r0, r8
 8008102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008106:	4649      	mov	r1, r9
 8008108:	f7f8 fd08 	bl	8000b1c <__aeabi_dcmplt>
 800810c:	2800      	cmp	r0, #0
 800810e:	f040 8289 	bne.w	8008624 <_dtoa_r+0x98c>
 8008112:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008118:	2b00      	cmp	r3, #0
 800811a:	f2c0 814e 	blt.w	80083ba <_dtoa_r+0x722>
 800811e:	f1bb 0f0e 	cmp.w	fp, #14
 8008122:	f300 814a 	bgt.w	80083ba <_dtoa_r+0x722>
 8008126:	4b6b      	ldr	r3, [pc, #428]	; (80082d4 <_dtoa_r+0x63c>)
 8008128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800812c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008132:	2b00      	cmp	r3, #0
 8008134:	f280 80dc 	bge.w	80082f0 <_dtoa_r+0x658>
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f300 80d8 	bgt.w	80082f0 <_dtoa_r+0x658>
 8008140:	f040 826f 	bne.w	8008622 <_dtoa_r+0x98a>
 8008144:	4b68      	ldr	r3, [pc, #416]	; (80082e8 <_dtoa_r+0x650>)
 8008146:	2200      	movs	r2, #0
 8008148:	4640      	mov	r0, r8
 800814a:	4649      	mov	r1, r9
 800814c:	f7f8 fa74 	bl	8000638 <__aeabi_dmul>
 8008150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008154:	f7f8 fcf6 	bl	8000b44 <__aeabi_dcmpge>
 8008158:	9e04      	ldr	r6, [sp, #16]
 800815a:	4637      	mov	r7, r6
 800815c:	2800      	cmp	r0, #0
 800815e:	f040 8245 	bne.w	80085ec <_dtoa_r+0x954>
 8008162:	9d00      	ldr	r5, [sp, #0]
 8008164:	2331      	movs	r3, #49	; 0x31
 8008166:	f805 3b01 	strb.w	r3, [r5], #1
 800816a:	f10b 0b01 	add.w	fp, fp, #1
 800816e:	e241      	b.n	80085f4 <_dtoa_r+0x95c>
 8008170:	07f2      	lsls	r2, r6, #31
 8008172:	d505      	bpl.n	8008180 <_dtoa_r+0x4e8>
 8008174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008178:	f7f8 fa5e 	bl	8000638 <__aeabi_dmul>
 800817c:	3501      	adds	r5, #1
 800817e:	2301      	movs	r3, #1
 8008180:	1076      	asrs	r6, r6, #1
 8008182:	3708      	adds	r7, #8
 8008184:	e773      	b.n	800806e <_dtoa_r+0x3d6>
 8008186:	2502      	movs	r5, #2
 8008188:	e775      	b.n	8008076 <_dtoa_r+0x3de>
 800818a:	9e04      	ldr	r6, [sp, #16]
 800818c:	465f      	mov	r7, fp
 800818e:	e792      	b.n	80080b6 <_dtoa_r+0x41e>
 8008190:	9900      	ldr	r1, [sp, #0]
 8008192:	4b50      	ldr	r3, [pc, #320]	; (80082d4 <_dtoa_r+0x63c>)
 8008194:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008198:	4431      	add	r1, r6
 800819a:	9102      	str	r1, [sp, #8]
 800819c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800819e:	eeb0 9a47 	vmov.f32	s18, s14
 80081a2:	eef0 9a67 	vmov.f32	s19, s15
 80081a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d044      	beq.n	800823c <_dtoa_r+0x5a4>
 80081b2:	494e      	ldr	r1, [pc, #312]	; (80082ec <_dtoa_r+0x654>)
 80081b4:	2000      	movs	r0, #0
 80081b6:	f7f8 fb69 	bl	800088c <__aeabi_ddiv>
 80081ba:	ec53 2b19 	vmov	r2, r3, d9
 80081be:	f7f8 f883 	bl	80002c8 <__aeabi_dsub>
 80081c2:	9d00      	ldr	r5, [sp, #0]
 80081c4:	ec41 0b19 	vmov	d9, r0, r1
 80081c8:	4649      	mov	r1, r9
 80081ca:	4640      	mov	r0, r8
 80081cc:	f7f8 fce4 	bl	8000b98 <__aeabi_d2iz>
 80081d0:	4606      	mov	r6, r0
 80081d2:	f7f8 f9c7 	bl	8000564 <__aeabi_i2d>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	f7f8 f873 	bl	80002c8 <__aeabi_dsub>
 80081e2:	3630      	adds	r6, #48	; 0x30
 80081e4:	f805 6b01 	strb.w	r6, [r5], #1
 80081e8:	ec53 2b19 	vmov	r2, r3, d9
 80081ec:	4680      	mov	r8, r0
 80081ee:	4689      	mov	r9, r1
 80081f0:	f7f8 fc94 	bl	8000b1c <__aeabi_dcmplt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d164      	bne.n	80082c2 <_dtoa_r+0x62a>
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	4937      	ldr	r1, [pc, #220]	; (80082dc <_dtoa_r+0x644>)
 80081fe:	2000      	movs	r0, #0
 8008200:	f7f8 f862 	bl	80002c8 <__aeabi_dsub>
 8008204:	ec53 2b19 	vmov	r2, r3, d9
 8008208:	f7f8 fc88 	bl	8000b1c <__aeabi_dcmplt>
 800820c:	2800      	cmp	r0, #0
 800820e:	f040 80b6 	bne.w	800837e <_dtoa_r+0x6e6>
 8008212:	9b02      	ldr	r3, [sp, #8]
 8008214:	429d      	cmp	r5, r3
 8008216:	f43f af7c 	beq.w	8008112 <_dtoa_r+0x47a>
 800821a:	4b31      	ldr	r3, [pc, #196]	; (80082e0 <_dtoa_r+0x648>)
 800821c:	ec51 0b19 	vmov	r0, r1, d9
 8008220:	2200      	movs	r2, #0
 8008222:	f7f8 fa09 	bl	8000638 <__aeabi_dmul>
 8008226:	4b2e      	ldr	r3, [pc, #184]	; (80082e0 <_dtoa_r+0x648>)
 8008228:	ec41 0b19 	vmov	d9, r0, r1
 800822c:	2200      	movs	r2, #0
 800822e:	4640      	mov	r0, r8
 8008230:	4649      	mov	r1, r9
 8008232:	f7f8 fa01 	bl	8000638 <__aeabi_dmul>
 8008236:	4680      	mov	r8, r0
 8008238:	4689      	mov	r9, r1
 800823a:	e7c5      	b.n	80081c8 <_dtoa_r+0x530>
 800823c:	ec51 0b17 	vmov	r0, r1, d7
 8008240:	f7f8 f9fa 	bl	8000638 <__aeabi_dmul>
 8008244:	9b02      	ldr	r3, [sp, #8]
 8008246:	9d00      	ldr	r5, [sp, #0]
 8008248:	930f      	str	r3, [sp, #60]	; 0x3c
 800824a:	ec41 0b19 	vmov	d9, r0, r1
 800824e:	4649      	mov	r1, r9
 8008250:	4640      	mov	r0, r8
 8008252:	f7f8 fca1 	bl	8000b98 <__aeabi_d2iz>
 8008256:	4606      	mov	r6, r0
 8008258:	f7f8 f984 	bl	8000564 <__aeabi_i2d>
 800825c:	3630      	adds	r6, #48	; 0x30
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	4640      	mov	r0, r8
 8008264:	4649      	mov	r1, r9
 8008266:	f7f8 f82f 	bl	80002c8 <__aeabi_dsub>
 800826a:	f805 6b01 	strb.w	r6, [r5], #1
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	429d      	cmp	r5, r3
 8008272:	4680      	mov	r8, r0
 8008274:	4689      	mov	r9, r1
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	d124      	bne.n	80082c6 <_dtoa_r+0x62e>
 800827c:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <_dtoa_r+0x654>)
 800827e:	ec51 0b19 	vmov	r0, r1, d9
 8008282:	f7f8 f823 	bl	80002cc <__adddf3>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4640      	mov	r0, r8
 800828c:	4649      	mov	r1, r9
 800828e:	f7f8 fc63 	bl	8000b58 <__aeabi_dcmpgt>
 8008292:	2800      	cmp	r0, #0
 8008294:	d173      	bne.n	800837e <_dtoa_r+0x6e6>
 8008296:	ec53 2b19 	vmov	r2, r3, d9
 800829a:	4914      	ldr	r1, [pc, #80]	; (80082ec <_dtoa_r+0x654>)
 800829c:	2000      	movs	r0, #0
 800829e:	f7f8 f813 	bl	80002c8 <__aeabi_dsub>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4640      	mov	r0, r8
 80082a8:	4649      	mov	r1, r9
 80082aa:	f7f8 fc37 	bl	8000b1c <__aeabi_dcmplt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f43f af2f 	beq.w	8008112 <_dtoa_r+0x47a>
 80082b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082b6:	1e6b      	subs	r3, r5, #1
 80082b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80082ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082be:	2b30      	cmp	r3, #48	; 0x30
 80082c0:	d0f8      	beq.n	80082b4 <_dtoa_r+0x61c>
 80082c2:	46bb      	mov	fp, r7
 80082c4:	e04a      	b.n	800835c <_dtoa_r+0x6c4>
 80082c6:	4b06      	ldr	r3, [pc, #24]	; (80082e0 <_dtoa_r+0x648>)
 80082c8:	f7f8 f9b6 	bl	8000638 <__aeabi_dmul>
 80082cc:	4680      	mov	r8, r0
 80082ce:	4689      	mov	r9, r1
 80082d0:	e7bd      	b.n	800824e <_dtoa_r+0x5b6>
 80082d2:	bf00      	nop
 80082d4:	0800a098 	.word	0x0800a098
 80082d8:	0800a070 	.word	0x0800a070
 80082dc:	3ff00000 	.word	0x3ff00000
 80082e0:	40240000 	.word	0x40240000
 80082e4:	401c0000 	.word	0x401c0000
 80082e8:	40140000 	.word	0x40140000
 80082ec:	3fe00000 	.word	0x3fe00000
 80082f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082f4:	9d00      	ldr	r5, [sp, #0]
 80082f6:	4642      	mov	r2, r8
 80082f8:	464b      	mov	r3, r9
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	f7f8 fac5 	bl	800088c <__aeabi_ddiv>
 8008302:	f7f8 fc49 	bl	8000b98 <__aeabi_d2iz>
 8008306:	9001      	str	r0, [sp, #4]
 8008308:	f7f8 f92c 	bl	8000564 <__aeabi_i2d>
 800830c:	4642      	mov	r2, r8
 800830e:	464b      	mov	r3, r9
 8008310:	f7f8 f992 	bl	8000638 <__aeabi_dmul>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	f7f7 ffd4 	bl	80002c8 <__aeabi_dsub>
 8008320:	9e01      	ldr	r6, [sp, #4]
 8008322:	9f04      	ldr	r7, [sp, #16]
 8008324:	3630      	adds	r6, #48	; 0x30
 8008326:	f805 6b01 	strb.w	r6, [r5], #1
 800832a:	9e00      	ldr	r6, [sp, #0]
 800832c:	1bae      	subs	r6, r5, r6
 800832e:	42b7      	cmp	r7, r6
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	d134      	bne.n	80083a0 <_dtoa_r+0x708>
 8008336:	f7f7 ffc9 	bl	80002cc <__adddf3>
 800833a:	4642      	mov	r2, r8
 800833c:	464b      	mov	r3, r9
 800833e:	4606      	mov	r6, r0
 8008340:	460f      	mov	r7, r1
 8008342:	f7f8 fc09 	bl	8000b58 <__aeabi_dcmpgt>
 8008346:	b9c8      	cbnz	r0, 800837c <_dtoa_r+0x6e4>
 8008348:	4642      	mov	r2, r8
 800834a:	464b      	mov	r3, r9
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f7f8 fbda 	bl	8000b08 <__aeabi_dcmpeq>
 8008354:	b110      	cbz	r0, 800835c <_dtoa_r+0x6c4>
 8008356:	9b01      	ldr	r3, [sp, #4]
 8008358:	07db      	lsls	r3, r3, #31
 800835a:	d40f      	bmi.n	800837c <_dtoa_r+0x6e4>
 800835c:	4651      	mov	r1, sl
 800835e:	4620      	mov	r0, r4
 8008360:	f000 fbcc 	bl	8008afc <_Bfree>
 8008364:	2300      	movs	r3, #0
 8008366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008368:	702b      	strb	r3, [r5, #0]
 800836a:	f10b 0301 	add.w	r3, fp, #1
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008372:	2b00      	cmp	r3, #0
 8008374:	f43f ace2 	beq.w	8007d3c <_dtoa_r+0xa4>
 8008378:	601d      	str	r5, [r3, #0]
 800837a:	e4df      	b.n	8007d3c <_dtoa_r+0xa4>
 800837c:	465f      	mov	r7, fp
 800837e:	462b      	mov	r3, r5
 8008380:	461d      	mov	r5, r3
 8008382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008386:	2a39      	cmp	r2, #57	; 0x39
 8008388:	d106      	bne.n	8008398 <_dtoa_r+0x700>
 800838a:	9a00      	ldr	r2, [sp, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d1f7      	bne.n	8008380 <_dtoa_r+0x6e8>
 8008390:	9900      	ldr	r1, [sp, #0]
 8008392:	2230      	movs	r2, #48	; 0x30
 8008394:	3701      	adds	r7, #1
 8008396:	700a      	strb	r2, [r1, #0]
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	3201      	adds	r2, #1
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	e790      	b.n	80082c2 <_dtoa_r+0x62a>
 80083a0:	4ba3      	ldr	r3, [pc, #652]	; (8008630 <_dtoa_r+0x998>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	f7f8 f948 	bl	8000638 <__aeabi_dmul>
 80083a8:	2200      	movs	r2, #0
 80083aa:	2300      	movs	r3, #0
 80083ac:	4606      	mov	r6, r0
 80083ae:	460f      	mov	r7, r1
 80083b0:	f7f8 fbaa 	bl	8000b08 <__aeabi_dcmpeq>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d09e      	beq.n	80082f6 <_dtoa_r+0x65e>
 80083b8:	e7d0      	b.n	800835c <_dtoa_r+0x6c4>
 80083ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083bc:	2a00      	cmp	r2, #0
 80083be:	f000 80ca 	beq.w	8008556 <_dtoa_r+0x8be>
 80083c2:	9a07      	ldr	r2, [sp, #28]
 80083c4:	2a01      	cmp	r2, #1
 80083c6:	f300 80ad 	bgt.w	8008524 <_dtoa_r+0x88c>
 80083ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083cc:	2a00      	cmp	r2, #0
 80083ce:	f000 80a5 	beq.w	800851c <_dtoa_r+0x884>
 80083d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083d6:	9e08      	ldr	r6, [sp, #32]
 80083d8:	9d05      	ldr	r5, [sp, #20]
 80083da:	9a05      	ldr	r2, [sp, #20]
 80083dc:	441a      	add	r2, r3
 80083de:	9205      	str	r2, [sp, #20]
 80083e0:	9a06      	ldr	r2, [sp, #24]
 80083e2:	2101      	movs	r1, #1
 80083e4:	441a      	add	r2, r3
 80083e6:	4620      	mov	r0, r4
 80083e8:	9206      	str	r2, [sp, #24]
 80083ea:	f000 fc3d 	bl	8008c68 <__i2b>
 80083ee:	4607      	mov	r7, r0
 80083f0:	b165      	cbz	r5, 800840c <_dtoa_r+0x774>
 80083f2:	9b06      	ldr	r3, [sp, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dd09      	ble.n	800840c <_dtoa_r+0x774>
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	9a05      	ldr	r2, [sp, #20]
 80083fc:	bfa8      	it	ge
 80083fe:	462b      	movge	r3, r5
 8008400:	1ad2      	subs	r2, r2, r3
 8008402:	9205      	str	r2, [sp, #20]
 8008404:	9a06      	ldr	r2, [sp, #24]
 8008406:	1aed      	subs	r5, r5, r3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	9306      	str	r3, [sp, #24]
 800840c:	9b08      	ldr	r3, [sp, #32]
 800840e:	b1f3      	cbz	r3, 800844e <_dtoa_r+0x7b6>
 8008410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 80a3 	beq.w	800855e <_dtoa_r+0x8c6>
 8008418:	2e00      	cmp	r6, #0
 800841a:	dd10      	ble.n	800843e <_dtoa_r+0x7a6>
 800841c:	4639      	mov	r1, r7
 800841e:	4632      	mov	r2, r6
 8008420:	4620      	mov	r0, r4
 8008422:	f000 fce1 	bl	8008de8 <__pow5mult>
 8008426:	4652      	mov	r2, sl
 8008428:	4601      	mov	r1, r0
 800842a:	4607      	mov	r7, r0
 800842c:	4620      	mov	r0, r4
 800842e:	f000 fc31 	bl	8008c94 <__multiply>
 8008432:	4651      	mov	r1, sl
 8008434:	4680      	mov	r8, r0
 8008436:	4620      	mov	r0, r4
 8008438:	f000 fb60 	bl	8008afc <_Bfree>
 800843c:	46c2      	mov	sl, r8
 800843e:	9b08      	ldr	r3, [sp, #32]
 8008440:	1b9a      	subs	r2, r3, r6
 8008442:	d004      	beq.n	800844e <_dtoa_r+0x7b6>
 8008444:	4651      	mov	r1, sl
 8008446:	4620      	mov	r0, r4
 8008448:	f000 fcce 	bl	8008de8 <__pow5mult>
 800844c:	4682      	mov	sl, r0
 800844e:	2101      	movs	r1, #1
 8008450:	4620      	mov	r0, r4
 8008452:	f000 fc09 	bl	8008c68 <__i2b>
 8008456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008458:	2b00      	cmp	r3, #0
 800845a:	4606      	mov	r6, r0
 800845c:	f340 8081 	ble.w	8008562 <_dtoa_r+0x8ca>
 8008460:	461a      	mov	r2, r3
 8008462:	4601      	mov	r1, r0
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fcbf 	bl	8008de8 <__pow5mult>
 800846a:	9b07      	ldr	r3, [sp, #28]
 800846c:	2b01      	cmp	r3, #1
 800846e:	4606      	mov	r6, r0
 8008470:	dd7a      	ble.n	8008568 <_dtoa_r+0x8d0>
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	6933      	ldr	r3, [r6, #16]
 8008478:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800847c:	6918      	ldr	r0, [r3, #16]
 800847e:	f000 fba5 	bl	8008bcc <__hi0bits>
 8008482:	f1c0 0020 	rsb	r0, r0, #32
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	4418      	add	r0, r3
 800848a:	f010 001f 	ands.w	r0, r0, #31
 800848e:	f000 8094 	beq.w	80085ba <_dtoa_r+0x922>
 8008492:	f1c0 0320 	rsb	r3, r0, #32
 8008496:	2b04      	cmp	r3, #4
 8008498:	f340 8085 	ble.w	80085a6 <_dtoa_r+0x90e>
 800849c:	9b05      	ldr	r3, [sp, #20]
 800849e:	f1c0 001c 	rsb	r0, r0, #28
 80084a2:	4403      	add	r3, r0
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	9b06      	ldr	r3, [sp, #24]
 80084a8:	4403      	add	r3, r0
 80084aa:	4405      	add	r5, r0
 80084ac:	9306      	str	r3, [sp, #24]
 80084ae:	9b05      	ldr	r3, [sp, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	dd05      	ble.n	80084c0 <_dtoa_r+0x828>
 80084b4:	4651      	mov	r1, sl
 80084b6:	461a      	mov	r2, r3
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fcef 	bl	8008e9c <__lshift>
 80084be:	4682      	mov	sl, r0
 80084c0:	9b06      	ldr	r3, [sp, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dd05      	ble.n	80084d2 <_dtoa_r+0x83a>
 80084c6:	4631      	mov	r1, r6
 80084c8:	461a      	mov	r2, r3
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 fce6 	bl	8008e9c <__lshift>
 80084d0:	4606      	mov	r6, r0
 80084d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d072      	beq.n	80085be <_dtoa_r+0x926>
 80084d8:	4631      	mov	r1, r6
 80084da:	4650      	mov	r0, sl
 80084dc:	f000 fd4a 	bl	8008f74 <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	da6c      	bge.n	80085be <_dtoa_r+0x926>
 80084e4:	2300      	movs	r3, #0
 80084e6:	4651      	mov	r1, sl
 80084e8:	220a      	movs	r2, #10
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 fb28 	bl	8008b40 <__multadd>
 80084f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084f6:	4682      	mov	sl, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 81b0 	beq.w	800885e <_dtoa_r+0xbc6>
 80084fe:	2300      	movs	r3, #0
 8008500:	4639      	mov	r1, r7
 8008502:	220a      	movs	r2, #10
 8008504:	4620      	mov	r0, r4
 8008506:	f000 fb1b 	bl	8008b40 <__multadd>
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	4607      	mov	r7, r0
 8008510:	f300 8096 	bgt.w	8008640 <_dtoa_r+0x9a8>
 8008514:	9b07      	ldr	r3, [sp, #28]
 8008516:	2b02      	cmp	r3, #2
 8008518:	dc59      	bgt.n	80085ce <_dtoa_r+0x936>
 800851a:	e091      	b.n	8008640 <_dtoa_r+0x9a8>
 800851c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800851e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008522:	e758      	b.n	80083d6 <_dtoa_r+0x73e>
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	1e5e      	subs	r6, r3, #1
 8008528:	9b08      	ldr	r3, [sp, #32]
 800852a:	42b3      	cmp	r3, r6
 800852c:	bfbf      	itttt	lt
 800852e:	9b08      	ldrlt	r3, [sp, #32]
 8008530:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008532:	9608      	strlt	r6, [sp, #32]
 8008534:	1af3      	sublt	r3, r6, r3
 8008536:	bfb4      	ite	lt
 8008538:	18d2      	addlt	r2, r2, r3
 800853a:	1b9e      	subge	r6, r3, r6
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	bfbc      	itt	lt
 8008540:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008542:	2600      	movlt	r6, #0
 8008544:	2b00      	cmp	r3, #0
 8008546:	bfb7      	itett	lt
 8008548:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800854c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008550:	1a9d      	sublt	r5, r3, r2
 8008552:	2300      	movlt	r3, #0
 8008554:	e741      	b.n	80083da <_dtoa_r+0x742>
 8008556:	9e08      	ldr	r6, [sp, #32]
 8008558:	9d05      	ldr	r5, [sp, #20]
 800855a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800855c:	e748      	b.n	80083f0 <_dtoa_r+0x758>
 800855e:	9a08      	ldr	r2, [sp, #32]
 8008560:	e770      	b.n	8008444 <_dtoa_r+0x7ac>
 8008562:	9b07      	ldr	r3, [sp, #28]
 8008564:	2b01      	cmp	r3, #1
 8008566:	dc19      	bgt.n	800859c <_dtoa_r+0x904>
 8008568:	9b02      	ldr	r3, [sp, #8]
 800856a:	b9bb      	cbnz	r3, 800859c <_dtoa_r+0x904>
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008572:	b99b      	cbnz	r3, 800859c <_dtoa_r+0x904>
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800857a:	0d1b      	lsrs	r3, r3, #20
 800857c:	051b      	lsls	r3, r3, #20
 800857e:	b183      	cbz	r3, 80085a2 <_dtoa_r+0x90a>
 8008580:	9b05      	ldr	r3, [sp, #20]
 8008582:	3301      	adds	r3, #1
 8008584:	9305      	str	r3, [sp, #20]
 8008586:	9b06      	ldr	r3, [sp, #24]
 8008588:	3301      	adds	r3, #1
 800858a:	9306      	str	r3, [sp, #24]
 800858c:	f04f 0801 	mov.w	r8, #1
 8008590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008592:	2b00      	cmp	r3, #0
 8008594:	f47f af6f 	bne.w	8008476 <_dtoa_r+0x7de>
 8008598:	2001      	movs	r0, #1
 800859a:	e774      	b.n	8008486 <_dtoa_r+0x7ee>
 800859c:	f04f 0800 	mov.w	r8, #0
 80085a0:	e7f6      	b.n	8008590 <_dtoa_r+0x8f8>
 80085a2:	4698      	mov	r8, r3
 80085a4:	e7f4      	b.n	8008590 <_dtoa_r+0x8f8>
 80085a6:	d082      	beq.n	80084ae <_dtoa_r+0x816>
 80085a8:	9a05      	ldr	r2, [sp, #20]
 80085aa:	331c      	adds	r3, #28
 80085ac:	441a      	add	r2, r3
 80085ae:	9205      	str	r2, [sp, #20]
 80085b0:	9a06      	ldr	r2, [sp, #24]
 80085b2:	441a      	add	r2, r3
 80085b4:	441d      	add	r5, r3
 80085b6:	9206      	str	r2, [sp, #24]
 80085b8:	e779      	b.n	80084ae <_dtoa_r+0x816>
 80085ba:	4603      	mov	r3, r0
 80085bc:	e7f4      	b.n	80085a8 <_dtoa_r+0x910>
 80085be:	9b04      	ldr	r3, [sp, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dc37      	bgt.n	8008634 <_dtoa_r+0x99c>
 80085c4:	9b07      	ldr	r3, [sp, #28]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	dd34      	ble.n	8008634 <_dtoa_r+0x99c>
 80085ca:	9b04      	ldr	r3, [sp, #16]
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	9b01      	ldr	r3, [sp, #4]
 80085d0:	b963      	cbnz	r3, 80085ec <_dtoa_r+0x954>
 80085d2:	4631      	mov	r1, r6
 80085d4:	2205      	movs	r2, #5
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 fab2 	bl	8008b40 <__multadd>
 80085dc:	4601      	mov	r1, r0
 80085de:	4606      	mov	r6, r0
 80085e0:	4650      	mov	r0, sl
 80085e2:	f000 fcc7 	bl	8008f74 <__mcmp>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f73f adbb 	bgt.w	8008162 <_dtoa_r+0x4ca>
 80085ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ee:	9d00      	ldr	r5, [sp, #0]
 80085f0:	ea6f 0b03 	mvn.w	fp, r3
 80085f4:	f04f 0800 	mov.w	r8, #0
 80085f8:	4631      	mov	r1, r6
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 fa7e 	bl	8008afc <_Bfree>
 8008600:	2f00      	cmp	r7, #0
 8008602:	f43f aeab 	beq.w	800835c <_dtoa_r+0x6c4>
 8008606:	f1b8 0f00 	cmp.w	r8, #0
 800860a:	d005      	beq.n	8008618 <_dtoa_r+0x980>
 800860c:	45b8      	cmp	r8, r7
 800860e:	d003      	beq.n	8008618 <_dtoa_r+0x980>
 8008610:	4641      	mov	r1, r8
 8008612:	4620      	mov	r0, r4
 8008614:	f000 fa72 	bl	8008afc <_Bfree>
 8008618:	4639      	mov	r1, r7
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fa6e 	bl	8008afc <_Bfree>
 8008620:	e69c      	b.n	800835c <_dtoa_r+0x6c4>
 8008622:	2600      	movs	r6, #0
 8008624:	4637      	mov	r7, r6
 8008626:	e7e1      	b.n	80085ec <_dtoa_r+0x954>
 8008628:	46bb      	mov	fp, r7
 800862a:	4637      	mov	r7, r6
 800862c:	e599      	b.n	8008162 <_dtoa_r+0x4ca>
 800862e:	bf00      	nop
 8008630:	40240000 	.word	0x40240000
 8008634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 80c8 	beq.w	80087cc <_dtoa_r+0xb34>
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	2d00      	cmp	r5, #0
 8008642:	dd05      	ble.n	8008650 <_dtoa_r+0x9b8>
 8008644:	4639      	mov	r1, r7
 8008646:	462a      	mov	r2, r5
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fc27 	bl	8008e9c <__lshift>
 800864e:	4607      	mov	r7, r0
 8008650:	f1b8 0f00 	cmp.w	r8, #0
 8008654:	d05b      	beq.n	800870e <_dtoa_r+0xa76>
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fa0f 	bl	8008a7c <_Balloc>
 800865e:	4605      	mov	r5, r0
 8008660:	b928      	cbnz	r0, 800866e <_dtoa_r+0x9d6>
 8008662:	4b83      	ldr	r3, [pc, #524]	; (8008870 <_dtoa_r+0xbd8>)
 8008664:	4602      	mov	r2, r0
 8008666:	f240 21ef 	movw	r1, #751	; 0x2ef
 800866a:	f7ff bb2e 	b.w	8007cca <_dtoa_r+0x32>
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	3202      	adds	r2, #2
 8008672:	0092      	lsls	r2, r2, #2
 8008674:	f107 010c 	add.w	r1, r7, #12
 8008678:	300c      	adds	r0, #12
 800867a:	f000 febd 	bl	80093f8 <memcpy>
 800867e:	2201      	movs	r2, #1
 8008680:	4629      	mov	r1, r5
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fc0a 	bl	8008e9c <__lshift>
 8008688:	9b00      	ldr	r3, [sp, #0]
 800868a:	3301      	adds	r3, #1
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008692:	4413      	add	r3, r2
 8008694:	9308      	str	r3, [sp, #32]
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	46b8      	mov	r8, r7
 800869e:	9306      	str	r3, [sp, #24]
 80086a0:	4607      	mov	r7, r0
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	4631      	mov	r1, r6
 80086a6:	3b01      	subs	r3, #1
 80086a8:	4650      	mov	r0, sl
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	f7ff fa6b 	bl	8007b86 <quorem>
 80086b0:	4641      	mov	r1, r8
 80086b2:	9002      	str	r0, [sp, #8]
 80086b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80086b8:	4650      	mov	r0, sl
 80086ba:	f000 fc5b 	bl	8008f74 <__mcmp>
 80086be:	463a      	mov	r2, r7
 80086c0:	9005      	str	r0, [sp, #20]
 80086c2:	4631      	mov	r1, r6
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 fc71 	bl	8008fac <__mdiff>
 80086ca:	68c2      	ldr	r2, [r0, #12]
 80086cc:	4605      	mov	r5, r0
 80086ce:	bb02      	cbnz	r2, 8008712 <_dtoa_r+0xa7a>
 80086d0:	4601      	mov	r1, r0
 80086d2:	4650      	mov	r0, sl
 80086d4:	f000 fc4e 	bl	8008f74 <__mcmp>
 80086d8:	4602      	mov	r2, r0
 80086da:	4629      	mov	r1, r5
 80086dc:	4620      	mov	r0, r4
 80086de:	9209      	str	r2, [sp, #36]	; 0x24
 80086e0:	f000 fa0c 	bl	8008afc <_Bfree>
 80086e4:	9b07      	ldr	r3, [sp, #28]
 80086e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086e8:	9d04      	ldr	r5, [sp, #16]
 80086ea:	ea43 0102 	orr.w	r1, r3, r2
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	4319      	orrs	r1, r3
 80086f2:	d110      	bne.n	8008716 <_dtoa_r+0xa7e>
 80086f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80086f8:	d029      	beq.n	800874e <_dtoa_r+0xab6>
 80086fa:	9b05      	ldr	r3, [sp, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	dd02      	ble.n	8008706 <_dtoa_r+0xa6e>
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008706:	9b01      	ldr	r3, [sp, #4]
 8008708:	f883 9000 	strb.w	r9, [r3]
 800870c:	e774      	b.n	80085f8 <_dtoa_r+0x960>
 800870e:	4638      	mov	r0, r7
 8008710:	e7ba      	b.n	8008688 <_dtoa_r+0x9f0>
 8008712:	2201      	movs	r2, #1
 8008714:	e7e1      	b.n	80086da <_dtoa_r+0xa42>
 8008716:	9b05      	ldr	r3, [sp, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db04      	blt.n	8008726 <_dtoa_r+0xa8e>
 800871c:	9907      	ldr	r1, [sp, #28]
 800871e:	430b      	orrs	r3, r1
 8008720:	9906      	ldr	r1, [sp, #24]
 8008722:	430b      	orrs	r3, r1
 8008724:	d120      	bne.n	8008768 <_dtoa_r+0xad0>
 8008726:	2a00      	cmp	r2, #0
 8008728:	dded      	ble.n	8008706 <_dtoa_r+0xa6e>
 800872a:	4651      	mov	r1, sl
 800872c:	2201      	movs	r2, #1
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fbb4 	bl	8008e9c <__lshift>
 8008734:	4631      	mov	r1, r6
 8008736:	4682      	mov	sl, r0
 8008738:	f000 fc1c 	bl	8008f74 <__mcmp>
 800873c:	2800      	cmp	r0, #0
 800873e:	dc03      	bgt.n	8008748 <_dtoa_r+0xab0>
 8008740:	d1e1      	bne.n	8008706 <_dtoa_r+0xa6e>
 8008742:	f019 0f01 	tst.w	r9, #1
 8008746:	d0de      	beq.n	8008706 <_dtoa_r+0xa6e>
 8008748:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800874c:	d1d8      	bne.n	8008700 <_dtoa_r+0xa68>
 800874e:	9a01      	ldr	r2, [sp, #4]
 8008750:	2339      	movs	r3, #57	; 0x39
 8008752:	7013      	strb	r3, [r2, #0]
 8008754:	462b      	mov	r3, r5
 8008756:	461d      	mov	r5, r3
 8008758:	3b01      	subs	r3, #1
 800875a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800875e:	2a39      	cmp	r2, #57	; 0x39
 8008760:	d06c      	beq.n	800883c <_dtoa_r+0xba4>
 8008762:	3201      	adds	r2, #1
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	e747      	b.n	80085f8 <_dtoa_r+0x960>
 8008768:	2a00      	cmp	r2, #0
 800876a:	dd07      	ble.n	800877c <_dtoa_r+0xae4>
 800876c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008770:	d0ed      	beq.n	800874e <_dtoa_r+0xab6>
 8008772:	9a01      	ldr	r2, [sp, #4]
 8008774:	f109 0301 	add.w	r3, r9, #1
 8008778:	7013      	strb	r3, [r2, #0]
 800877a:	e73d      	b.n	80085f8 <_dtoa_r+0x960>
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	9a08      	ldr	r2, [sp, #32]
 8008780:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008784:	4293      	cmp	r3, r2
 8008786:	d043      	beq.n	8008810 <_dtoa_r+0xb78>
 8008788:	4651      	mov	r1, sl
 800878a:	2300      	movs	r3, #0
 800878c:	220a      	movs	r2, #10
 800878e:	4620      	mov	r0, r4
 8008790:	f000 f9d6 	bl	8008b40 <__multadd>
 8008794:	45b8      	cmp	r8, r7
 8008796:	4682      	mov	sl, r0
 8008798:	f04f 0300 	mov.w	r3, #0
 800879c:	f04f 020a 	mov.w	r2, #10
 80087a0:	4641      	mov	r1, r8
 80087a2:	4620      	mov	r0, r4
 80087a4:	d107      	bne.n	80087b6 <_dtoa_r+0xb1e>
 80087a6:	f000 f9cb 	bl	8008b40 <__multadd>
 80087aa:	4680      	mov	r8, r0
 80087ac:	4607      	mov	r7, r0
 80087ae:	9b04      	ldr	r3, [sp, #16]
 80087b0:	3301      	adds	r3, #1
 80087b2:	9304      	str	r3, [sp, #16]
 80087b4:	e775      	b.n	80086a2 <_dtoa_r+0xa0a>
 80087b6:	f000 f9c3 	bl	8008b40 <__multadd>
 80087ba:	4639      	mov	r1, r7
 80087bc:	4680      	mov	r8, r0
 80087be:	2300      	movs	r3, #0
 80087c0:	220a      	movs	r2, #10
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 f9bc 	bl	8008b40 <__multadd>
 80087c8:	4607      	mov	r7, r0
 80087ca:	e7f0      	b.n	80087ae <_dtoa_r+0xb16>
 80087cc:	9b04      	ldr	r3, [sp, #16]
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	9d00      	ldr	r5, [sp, #0]
 80087d2:	4631      	mov	r1, r6
 80087d4:	4650      	mov	r0, sl
 80087d6:	f7ff f9d6 	bl	8007b86 <quorem>
 80087da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80087de:	9b00      	ldr	r3, [sp, #0]
 80087e0:	f805 9b01 	strb.w	r9, [r5], #1
 80087e4:	1aea      	subs	r2, r5, r3
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	4293      	cmp	r3, r2
 80087ea:	dd07      	ble.n	80087fc <_dtoa_r+0xb64>
 80087ec:	4651      	mov	r1, sl
 80087ee:	2300      	movs	r3, #0
 80087f0:	220a      	movs	r2, #10
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 f9a4 	bl	8008b40 <__multadd>
 80087f8:	4682      	mov	sl, r0
 80087fa:	e7ea      	b.n	80087d2 <_dtoa_r+0xb3a>
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bfc8      	it	gt
 8008802:	461d      	movgt	r5, r3
 8008804:	9b00      	ldr	r3, [sp, #0]
 8008806:	bfd8      	it	le
 8008808:	2501      	movle	r5, #1
 800880a:	441d      	add	r5, r3
 800880c:	f04f 0800 	mov.w	r8, #0
 8008810:	4651      	mov	r1, sl
 8008812:	2201      	movs	r2, #1
 8008814:	4620      	mov	r0, r4
 8008816:	f000 fb41 	bl	8008e9c <__lshift>
 800881a:	4631      	mov	r1, r6
 800881c:	4682      	mov	sl, r0
 800881e:	f000 fba9 	bl	8008f74 <__mcmp>
 8008822:	2800      	cmp	r0, #0
 8008824:	dc96      	bgt.n	8008754 <_dtoa_r+0xabc>
 8008826:	d102      	bne.n	800882e <_dtoa_r+0xb96>
 8008828:	f019 0f01 	tst.w	r9, #1
 800882c:	d192      	bne.n	8008754 <_dtoa_r+0xabc>
 800882e:	462b      	mov	r3, r5
 8008830:	461d      	mov	r5, r3
 8008832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008836:	2a30      	cmp	r2, #48	; 0x30
 8008838:	d0fa      	beq.n	8008830 <_dtoa_r+0xb98>
 800883a:	e6dd      	b.n	80085f8 <_dtoa_r+0x960>
 800883c:	9a00      	ldr	r2, [sp, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d189      	bne.n	8008756 <_dtoa_r+0xabe>
 8008842:	f10b 0b01 	add.w	fp, fp, #1
 8008846:	2331      	movs	r3, #49	; 0x31
 8008848:	e796      	b.n	8008778 <_dtoa_r+0xae0>
 800884a:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <_dtoa_r+0xbdc>)
 800884c:	f7ff ba99 	b.w	8007d82 <_dtoa_r+0xea>
 8008850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008852:	2b00      	cmp	r3, #0
 8008854:	f47f aa6d 	bne.w	8007d32 <_dtoa_r+0x9a>
 8008858:	4b07      	ldr	r3, [pc, #28]	; (8008878 <_dtoa_r+0xbe0>)
 800885a:	f7ff ba92 	b.w	8007d82 <_dtoa_r+0xea>
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	dcb5      	bgt.n	80087d0 <_dtoa_r+0xb38>
 8008864:	9b07      	ldr	r3, [sp, #28]
 8008866:	2b02      	cmp	r3, #2
 8008868:	f73f aeb1 	bgt.w	80085ce <_dtoa_r+0x936>
 800886c:	e7b0      	b.n	80087d0 <_dtoa_r+0xb38>
 800886e:	bf00      	nop
 8008870:	0800a004 	.word	0x0800a004
 8008874:	08009f64 	.word	0x08009f64
 8008878:	08009f88 	.word	0x08009f88

0800887c <_free_r>:
 800887c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800887e:	2900      	cmp	r1, #0
 8008880:	d044      	beq.n	800890c <_free_r+0x90>
 8008882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008886:	9001      	str	r0, [sp, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f1a1 0404 	sub.w	r4, r1, #4
 800888e:	bfb8      	it	lt
 8008890:	18e4      	addlt	r4, r4, r3
 8008892:	f000 f8e7 	bl	8008a64 <__malloc_lock>
 8008896:	4a1e      	ldr	r2, [pc, #120]	; (8008910 <_free_r+0x94>)
 8008898:	9801      	ldr	r0, [sp, #4]
 800889a:	6813      	ldr	r3, [r2, #0]
 800889c:	b933      	cbnz	r3, 80088ac <_free_r+0x30>
 800889e:	6063      	str	r3, [r4, #4]
 80088a0:	6014      	str	r4, [r2, #0]
 80088a2:	b003      	add	sp, #12
 80088a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088a8:	f000 b8e2 	b.w	8008a70 <__malloc_unlock>
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	d908      	bls.n	80088c2 <_free_r+0x46>
 80088b0:	6825      	ldr	r5, [r4, #0]
 80088b2:	1961      	adds	r1, r4, r5
 80088b4:	428b      	cmp	r3, r1
 80088b6:	bf01      	itttt	eq
 80088b8:	6819      	ldreq	r1, [r3, #0]
 80088ba:	685b      	ldreq	r3, [r3, #4]
 80088bc:	1949      	addeq	r1, r1, r5
 80088be:	6021      	streq	r1, [r4, #0]
 80088c0:	e7ed      	b.n	800889e <_free_r+0x22>
 80088c2:	461a      	mov	r2, r3
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	b10b      	cbz	r3, 80088cc <_free_r+0x50>
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	d9fa      	bls.n	80088c2 <_free_r+0x46>
 80088cc:	6811      	ldr	r1, [r2, #0]
 80088ce:	1855      	adds	r5, r2, r1
 80088d0:	42a5      	cmp	r5, r4
 80088d2:	d10b      	bne.n	80088ec <_free_r+0x70>
 80088d4:	6824      	ldr	r4, [r4, #0]
 80088d6:	4421      	add	r1, r4
 80088d8:	1854      	adds	r4, r2, r1
 80088da:	42a3      	cmp	r3, r4
 80088dc:	6011      	str	r1, [r2, #0]
 80088de:	d1e0      	bne.n	80088a2 <_free_r+0x26>
 80088e0:	681c      	ldr	r4, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	6053      	str	r3, [r2, #4]
 80088e6:	440c      	add	r4, r1
 80088e8:	6014      	str	r4, [r2, #0]
 80088ea:	e7da      	b.n	80088a2 <_free_r+0x26>
 80088ec:	d902      	bls.n	80088f4 <_free_r+0x78>
 80088ee:	230c      	movs	r3, #12
 80088f0:	6003      	str	r3, [r0, #0]
 80088f2:	e7d6      	b.n	80088a2 <_free_r+0x26>
 80088f4:	6825      	ldr	r5, [r4, #0]
 80088f6:	1961      	adds	r1, r4, r5
 80088f8:	428b      	cmp	r3, r1
 80088fa:	bf04      	itt	eq
 80088fc:	6819      	ldreq	r1, [r3, #0]
 80088fe:	685b      	ldreq	r3, [r3, #4]
 8008900:	6063      	str	r3, [r4, #4]
 8008902:	bf04      	itt	eq
 8008904:	1949      	addeq	r1, r1, r5
 8008906:	6021      	streq	r1, [r4, #0]
 8008908:	6054      	str	r4, [r2, #4]
 800890a:	e7ca      	b.n	80088a2 <_free_r+0x26>
 800890c:	b003      	add	sp, #12
 800890e:	bd30      	pop	{r4, r5, pc}
 8008910:	20000598 	.word	0x20000598

08008914 <malloc>:
 8008914:	4b02      	ldr	r3, [pc, #8]	; (8008920 <malloc+0xc>)
 8008916:	4601      	mov	r1, r0
 8008918:	6818      	ldr	r0, [r3, #0]
 800891a:	f000 b823 	b.w	8008964 <_malloc_r>
 800891e:	bf00      	nop
 8008920:	200000f4 	.word	0x200000f4

08008924 <sbrk_aligned>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4e0e      	ldr	r6, [pc, #56]	; (8008960 <sbrk_aligned+0x3c>)
 8008928:	460c      	mov	r4, r1
 800892a:	6831      	ldr	r1, [r6, #0]
 800892c:	4605      	mov	r5, r0
 800892e:	b911      	cbnz	r1, 8008936 <sbrk_aligned+0x12>
 8008930:	f000 fd52 	bl	80093d8 <_sbrk_r>
 8008934:	6030      	str	r0, [r6, #0]
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f000 fd4d 	bl	80093d8 <_sbrk_r>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	d00a      	beq.n	8008958 <sbrk_aligned+0x34>
 8008942:	1cc4      	adds	r4, r0, #3
 8008944:	f024 0403 	bic.w	r4, r4, #3
 8008948:	42a0      	cmp	r0, r4
 800894a:	d007      	beq.n	800895c <sbrk_aligned+0x38>
 800894c:	1a21      	subs	r1, r4, r0
 800894e:	4628      	mov	r0, r5
 8008950:	f000 fd42 	bl	80093d8 <_sbrk_r>
 8008954:	3001      	adds	r0, #1
 8008956:	d101      	bne.n	800895c <sbrk_aligned+0x38>
 8008958:	f04f 34ff 	mov.w	r4, #4294967295
 800895c:	4620      	mov	r0, r4
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	2000059c 	.word	0x2000059c

08008964 <_malloc_r>:
 8008964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008968:	1ccd      	adds	r5, r1, #3
 800896a:	f025 0503 	bic.w	r5, r5, #3
 800896e:	3508      	adds	r5, #8
 8008970:	2d0c      	cmp	r5, #12
 8008972:	bf38      	it	cc
 8008974:	250c      	movcc	r5, #12
 8008976:	2d00      	cmp	r5, #0
 8008978:	4607      	mov	r7, r0
 800897a:	db01      	blt.n	8008980 <_malloc_r+0x1c>
 800897c:	42a9      	cmp	r1, r5
 800897e:	d905      	bls.n	800898c <_malloc_r+0x28>
 8008980:	230c      	movs	r3, #12
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	2600      	movs	r6, #0
 8008986:	4630      	mov	r0, r6
 8008988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800898c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a60 <_malloc_r+0xfc>
 8008990:	f000 f868 	bl	8008a64 <__malloc_lock>
 8008994:	f8d8 3000 	ldr.w	r3, [r8]
 8008998:	461c      	mov	r4, r3
 800899a:	bb5c      	cbnz	r4, 80089f4 <_malloc_r+0x90>
 800899c:	4629      	mov	r1, r5
 800899e:	4638      	mov	r0, r7
 80089a0:	f7ff ffc0 	bl	8008924 <sbrk_aligned>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	4604      	mov	r4, r0
 80089a8:	d155      	bne.n	8008a56 <_malloc_r+0xf2>
 80089aa:	f8d8 4000 	ldr.w	r4, [r8]
 80089ae:	4626      	mov	r6, r4
 80089b0:	2e00      	cmp	r6, #0
 80089b2:	d145      	bne.n	8008a40 <_malloc_r+0xdc>
 80089b4:	2c00      	cmp	r4, #0
 80089b6:	d048      	beq.n	8008a4a <_malloc_r+0xe6>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	4631      	mov	r1, r6
 80089bc:	4638      	mov	r0, r7
 80089be:	eb04 0903 	add.w	r9, r4, r3
 80089c2:	f000 fd09 	bl	80093d8 <_sbrk_r>
 80089c6:	4581      	cmp	r9, r0
 80089c8:	d13f      	bne.n	8008a4a <_malloc_r+0xe6>
 80089ca:	6821      	ldr	r1, [r4, #0]
 80089cc:	1a6d      	subs	r5, r5, r1
 80089ce:	4629      	mov	r1, r5
 80089d0:	4638      	mov	r0, r7
 80089d2:	f7ff ffa7 	bl	8008924 <sbrk_aligned>
 80089d6:	3001      	adds	r0, #1
 80089d8:	d037      	beq.n	8008a4a <_malloc_r+0xe6>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	442b      	add	r3, r5
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	f8d8 3000 	ldr.w	r3, [r8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d038      	beq.n	8008a5a <_malloc_r+0xf6>
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	42a2      	cmp	r2, r4
 80089ec:	d12b      	bne.n	8008a46 <_malloc_r+0xe2>
 80089ee:	2200      	movs	r2, #0
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	e00f      	b.n	8008a14 <_malloc_r+0xb0>
 80089f4:	6822      	ldr	r2, [r4, #0]
 80089f6:	1b52      	subs	r2, r2, r5
 80089f8:	d41f      	bmi.n	8008a3a <_malloc_r+0xd6>
 80089fa:	2a0b      	cmp	r2, #11
 80089fc:	d917      	bls.n	8008a2e <_malloc_r+0xca>
 80089fe:	1961      	adds	r1, r4, r5
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	6025      	str	r5, [r4, #0]
 8008a04:	bf18      	it	ne
 8008a06:	6059      	strne	r1, [r3, #4]
 8008a08:	6863      	ldr	r3, [r4, #4]
 8008a0a:	bf08      	it	eq
 8008a0c:	f8c8 1000 	streq.w	r1, [r8]
 8008a10:	5162      	str	r2, [r4, r5]
 8008a12:	604b      	str	r3, [r1, #4]
 8008a14:	4638      	mov	r0, r7
 8008a16:	f104 060b 	add.w	r6, r4, #11
 8008a1a:	f000 f829 	bl	8008a70 <__malloc_unlock>
 8008a1e:	f026 0607 	bic.w	r6, r6, #7
 8008a22:	1d23      	adds	r3, r4, #4
 8008a24:	1af2      	subs	r2, r6, r3
 8008a26:	d0ae      	beq.n	8008986 <_malloc_r+0x22>
 8008a28:	1b9b      	subs	r3, r3, r6
 8008a2a:	50a3      	str	r3, [r4, r2]
 8008a2c:	e7ab      	b.n	8008986 <_malloc_r+0x22>
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	6862      	ldr	r2, [r4, #4]
 8008a32:	d1dd      	bne.n	80089f0 <_malloc_r+0x8c>
 8008a34:	f8c8 2000 	str.w	r2, [r8]
 8008a38:	e7ec      	b.n	8008a14 <_malloc_r+0xb0>
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	6864      	ldr	r4, [r4, #4]
 8008a3e:	e7ac      	b.n	800899a <_malloc_r+0x36>
 8008a40:	4634      	mov	r4, r6
 8008a42:	6876      	ldr	r6, [r6, #4]
 8008a44:	e7b4      	b.n	80089b0 <_malloc_r+0x4c>
 8008a46:	4613      	mov	r3, r2
 8008a48:	e7cc      	b.n	80089e4 <_malloc_r+0x80>
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f000 f80e 	bl	8008a70 <__malloc_unlock>
 8008a54:	e797      	b.n	8008986 <_malloc_r+0x22>
 8008a56:	6025      	str	r5, [r4, #0]
 8008a58:	e7dc      	b.n	8008a14 <_malloc_r+0xb0>
 8008a5a:	605b      	str	r3, [r3, #4]
 8008a5c:	deff      	udf	#255	; 0xff
 8008a5e:	bf00      	nop
 8008a60:	20000598 	.word	0x20000598

08008a64 <__malloc_lock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__malloc_lock+0x8>)
 8008a66:	f7ff b88c 	b.w	8007b82 <__retarget_lock_acquire_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	20000594 	.word	0x20000594

08008a70 <__malloc_unlock>:
 8008a70:	4801      	ldr	r0, [pc, #4]	; (8008a78 <__malloc_unlock+0x8>)
 8008a72:	f7ff b887 	b.w	8007b84 <__retarget_lock_release_recursive>
 8008a76:	bf00      	nop
 8008a78:	20000594 	.word	0x20000594

08008a7c <_Balloc>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	69c6      	ldr	r6, [r0, #28]
 8008a80:	4604      	mov	r4, r0
 8008a82:	460d      	mov	r5, r1
 8008a84:	b976      	cbnz	r6, 8008aa4 <_Balloc+0x28>
 8008a86:	2010      	movs	r0, #16
 8008a88:	f7ff ff44 	bl	8008914 <malloc>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	61e0      	str	r0, [r4, #28]
 8008a90:	b920      	cbnz	r0, 8008a9c <_Balloc+0x20>
 8008a92:	4b18      	ldr	r3, [pc, #96]	; (8008af4 <_Balloc+0x78>)
 8008a94:	4818      	ldr	r0, [pc, #96]	; (8008af8 <_Balloc+0x7c>)
 8008a96:	216b      	movs	r1, #107	; 0x6b
 8008a98:	f000 fcbc 	bl	8009414 <__assert_func>
 8008a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008aa0:	6006      	str	r6, [r0, #0]
 8008aa2:	60c6      	str	r6, [r0, #12]
 8008aa4:	69e6      	ldr	r6, [r4, #28]
 8008aa6:	68f3      	ldr	r3, [r6, #12]
 8008aa8:	b183      	cbz	r3, 8008acc <_Balloc+0x50>
 8008aaa:	69e3      	ldr	r3, [r4, #28]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ab2:	b9b8      	cbnz	r0, 8008ae4 <_Balloc+0x68>
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	fa01 f605 	lsl.w	r6, r1, r5
 8008aba:	1d72      	adds	r2, r6, #5
 8008abc:	0092      	lsls	r2, r2, #2
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 fcc6 	bl	8009450 <_calloc_r>
 8008ac4:	b160      	cbz	r0, 8008ae0 <_Balloc+0x64>
 8008ac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008aca:	e00e      	b.n	8008aea <_Balloc+0x6e>
 8008acc:	2221      	movs	r2, #33	; 0x21
 8008ace:	2104      	movs	r1, #4
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 fcbd 	bl	8009450 <_calloc_r>
 8008ad6:	69e3      	ldr	r3, [r4, #28]
 8008ad8:	60f0      	str	r0, [r6, #12]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e4      	bne.n	8008aaa <_Balloc+0x2e>
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}
 8008ae4:	6802      	ldr	r2, [r0, #0]
 8008ae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008aea:	2300      	movs	r3, #0
 8008aec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008af0:	e7f7      	b.n	8008ae2 <_Balloc+0x66>
 8008af2:	bf00      	nop
 8008af4:	08009f95 	.word	0x08009f95
 8008af8:	0800a015 	.word	0x0800a015

08008afc <_Bfree>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	69c6      	ldr	r6, [r0, #28]
 8008b00:	4605      	mov	r5, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	b976      	cbnz	r6, 8008b24 <_Bfree+0x28>
 8008b06:	2010      	movs	r0, #16
 8008b08:	f7ff ff04 	bl	8008914 <malloc>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	61e8      	str	r0, [r5, #28]
 8008b10:	b920      	cbnz	r0, 8008b1c <_Bfree+0x20>
 8008b12:	4b09      	ldr	r3, [pc, #36]	; (8008b38 <_Bfree+0x3c>)
 8008b14:	4809      	ldr	r0, [pc, #36]	; (8008b3c <_Bfree+0x40>)
 8008b16:	218f      	movs	r1, #143	; 0x8f
 8008b18:	f000 fc7c 	bl	8009414 <__assert_func>
 8008b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b20:	6006      	str	r6, [r0, #0]
 8008b22:	60c6      	str	r6, [r0, #12]
 8008b24:	b13c      	cbz	r4, 8008b36 <_Bfree+0x3a>
 8008b26:	69eb      	ldr	r3, [r5, #28]
 8008b28:	6862      	ldr	r2, [r4, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b30:	6021      	str	r1, [r4, #0]
 8008b32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	08009f95 	.word	0x08009f95
 8008b3c:	0800a015 	.word	0x0800a015

08008b40 <__multadd>:
 8008b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b44:	690d      	ldr	r5, [r1, #16]
 8008b46:	4607      	mov	r7, r0
 8008b48:	460c      	mov	r4, r1
 8008b4a:	461e      	mov	r6, r3
 8008b4c:	f101 0c14 	add.w	ip, r1, #20
 8008b50:	2000      	movs	r0, #0
 8008b52:	f8dc 3000 	ldr.w	r3, [ip]
 8008b56:	b299      	uxth	r1, r3
 8008b58:	fb02 6101 	mla	r1, r2, r1, r6
 8008b5c:	0c1e      	lsrs	r6, r3, #16
 8008b5e:	0c0b      	lsrs	r3, r1, #16
 8008b60:	fb02 3306 	mla	r3, r2, r6, r3
 8008b64:	b289      	uxth	r1, r1
 8008b66:	3001      	adds	r0, #1
 8008b68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b6c:	4285      	cmp	r5, r0
 8008b6e:	f84c 1b04 	str.w	r1, [ip], #4
 8008b72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b76:	dcec      	bgt.n	8008b52 <__multadd+0x12>
 8008b78:	b30e      	cbz	r6, 8008bbe <__multadd+0x7e>
 8008b7a:	68a3      	ldr	r3, [r4, #8]
 8008b7c:	42ab      	cmp	r3, r5
 8008b7e:	dc19      	bgt.n	8008bb4 <__multadd+0x74>
 8008b80:	6861      	ldr	r1, [r4, #4]
 8008b82:	4638      	mov	r0, r7
 8008b84:	3101      	adds	r1, #1
 8008b86:	f7ff ff79 	bl	8008a7c <_Balloc>
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	b928      	cbnz	r0, 8008b9a <__multadd+0x5a>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	4b0c      	ldr	r3, [pc, #48]	; (8008bc4 <__multadd+0x84>)
 8008b92:	480d      	ldr	r0, [pc, #52]	; (8008bc8 <__multadd+0x88>)
 8008b94:	21ba      	movs	r1, #186	; 0xba
 8008b96:	f000 fc3d 	bl	8009414 <__assert_func>
 8008b9a:	6922      	ldr	r2, [r4, #16]
 8008b9c:	3202      	adds	r2, #2
 8008b9e:	f104 010c 	add.w	r1, r4, #12
 8008ba2:	0092      	lsls	r2, r2, #2
 8008ba4:	300c      	adds	r0, #12
 8008ba6:	f000 fc27 	bl	80093f8 <memcpy>
 8008baa:	4621      	mov	r1, r4
 8008bac:	4638      	mov	r0, r7
 8008bae:	f7ff ffa5 	bl	8008afc <_Bfree>
 8008bb2:	4644      	mov	r4, r8
 8008bb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bb8:	3501      	adds	r5, #1
 8008bba:	615e      	str	r6, [r3, #20]
 8008bbc:	6125      	str	r5, [r4, #16]
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc4:	0800a004 	.word	0x0800a004
 8008bc8:	0800a015 	.word	0x0800a015

08008bcc <__hi0bits>:
 8008bcc:	0c03      	lsrs	r3, r0, #16
 8008bce:	041b      	lsls	r3, r3, #16
 8008bd0:	b9d3      	cbnz	r3, 8008c08 <__hi0bits+0x3c>
 8008bd2:	0400      	lsls	r0, r0, #16
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008bda:	bf04      	itt	eq
 8008bdc:	0200      	lsleq	r0, r0, #8
 8008bde:	3308      	addeq	r3, #8
 8008be0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008be4:	bf04      	itt	eq
 8008be6:	0100      	lsleq	r0, r0, #4
 8008be8:	3304      	addeq	r3, #4
 8008bea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bee:	bf04      	itt	eq
 8008bf0:	0080      	lsleq	r0, r0, #2
 8008bf2:	3302      	addeq	r3, #2
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	db05      	blt.n	8008c04 <__hi0bits+0x38>
 8008bf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008bfc:	f103 0301 	add.w	r3, r3, #1
 8008c00:	bf08      	it	eq
 8008c02:	2320      	moveq	r3, #32
 8008c04:	4618      	mov	r0, r3
 8008c06:	4770      	bx	lr
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e7e4      	b.n	8008bd6 <__hi0bits+0xa>

08008c0c <__lo0bits>:
 8008c0c:	6803      	ldr	r3, [r0, #0]
 8008c0e:	f013 0207 	ands.w	r2, r3, #7
 8008c12:	d00c      	beq.n	8008c2e <__lo0bits+0x22>
 8008c14:	07d9      	lsls	r1, r3, #31
 8008c16:	d422      	bmi.n	8008c5e <__lo0bits+0x52>
 8008c18:	079a      	lsls	r2, r3, #30
 8008c1a:	bf49      	itett	mi
 8008c1c:	085b      	lsrmi	r3, r3, #1
 8008c1e:	089b      	lsrpl	r3, r3, #2
 8008c20:	6003      	strmi	r3, [r0, #0]
 8008c22:	2201      	movmi	r2, #1
 8008c24:	bf5c      	itt	pl
 8008c26:	6003      	strpl	r3, [r0, #0]
 8008c28:	2202      	movpl	r2, #2
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	4770      	bx	lr
 8008c2e:	b299      	uxth	r1, r3
 8008c30:	b909      	cbnz	r1, 8008c36 <__lo0bits+0x2a>
 8008c32:	0c1b      	lsrs	r3, r3, #16
 8008c34:	2210      	movs	r2, #16
 8008c36:	b2d9      	uxtb	r1, r3
 8008c38:	b909      	cbnz	r1, 8008c3e <__lo0bits+0x32>
 8008c3a:	3208      	adds	r2, #8
 8008c3c:	0a1b      	lsrs	r3, r3, #8
 8008c3e:	0719      	lsls	r1, r3, #28
 8008c40:	bf04      	itt	eq
 8008c42:	091b      	lsreq	r3, r3, #4
 8008c44:	3204      	addeq	r2, #4
 8008c46:	0799      	lsls	r1, r3, #30
 8008c48:	bf04      	itt	eq
 8008c4a:	089b      	lsreq	r3, r3, #2
 8008c4c:	3202      	addeq	r2, #2
 8008c4e:	07d9      	lsls	r1, r3, #31
 8008c50:	d403      	bmi.n	8008c5a <__lo0bits+0x4e>
 8008c52:	085b      	lsrs	r3, r3, #1
 8008c54:	f102 0201 	add.w	r2, r2, #1
 8008c58:	d003      	beq.n	8008c62 <__lo0bits+0x56>
 8008c5a:	6003      	str	r3, [r0, #0]
 8008c5c:	e7e5      	b.n	8008c2a <__lo0bits+0x1e>
 8008c5e:	2200      	movs	r2, #0
 8008c60:	e7e3      	b.n	8008c2a <__lo0bits+0x1e>
 8008c62:	2220      	movs	r2, #32
 8008c64:	e7e1      	b.n	8008c2a <__lo0bits+0x1e>
	...

08008c68 <__i2b>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	f7ff ff05 	bl	8008a7c <_Balloc>
 8008c72:	4602      	mov	r2, r0
 8008c74:	b928      	cbnz	r0, 8008c82 <__i2b+0x1a>
 8008c76:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <__i2b+0x24>)
 8008c78:	4805      	ldr	r0, [pc, #20]	; (8008c90 <__i2b+0x28>)
 8008c7a:	f240 1145 	movw	r1, #325	; 0x145
 8008c7e:	f000 fbc9 	bl	8009414 <__assert_func>
 8008c82:	2301      	movs	r3, #1
 8008c84:	6144      	str	r4, [r0, #20]
 8008c86:	6103      	str	r3, [r0, #16]
 8008c88:	bd10      	pop	{r4, pc}
 8008c8a:	bf00      	nop
 8008c8c:	0800a004 	.word	0x0800a004
 8008c90:	0800a015 	.word	0x0800a015

08008c94 <__multiply>:
 8008c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c98:	4691      	mov	r9, r2
 8008c9a:	690a      	ldr	r2, [r1, #16]
 8008c9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	bfb8      	it	lt
 8008ca4:	460b      	movlt	r3, r1
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	bfbc      	itt	lt
 8008caa:	464c      	movlt	r4, r9
 8008cac:	4699      	movlt	r9, r3
 8008cae:	6927      	ldr	r7, [r4, #16]
 8008cb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008cb4:	68a3      	ldr	r3, [r4, #8]
 8008cb6:	6861      	ldr	r1, [r4, #4]
 8008cb8:	eb07 060a 	add.w	r6, r7, sl
 8008cbc:	42b3      	cmp	r3, r6
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	bfb8      	it	lt
 8008cc2:	3101      	addlt	r1, #1
 8008cc4:	f7ff feda 	bl	8008a7c <_Balloc>
 8008cc8:	b930      	cbnz	r0, 8008cd8 <__multiply+0x44>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	4b44      	ldr	r3, [pc, #272]	; (8008de0 <__multiply+0x14c>)
 8008cce:	4845      	ldr	r0, [pc, #276]	; (8008de4 <__multiply+0x150>)
 8008cd0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008cd4:	f000 fb9e 	bl	8009414 <__assert_func>
 8008cd8:	f100 0514 	add.w	r5, r0, #20
 8008cdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ce0:	462b      	mov	r3, r5
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	4543      	cmp	r3, r8
 8008ce6:	d321      	bcc.n	8008d2c <__multiply+0x98>
 8008ce8:	f104 0314 	add.w	r3, r4, #20
 8008cec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008cf0:	f109 0314 	add.w	r3, r9, #20
 8008cf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008cf8:	9202      	str	r2, [sp, #8]
 8008cfa:	1b3a      	subs	r2, r7, r4
 8008cfc:	3a15      	subs	r2, #21
 8008cfe:	f022 0203 	bic.w	r2, r2, #3
 8008d02:	3204      	adds	r2, #4
 8008d04:	f104 0115 	add.w	r1, r4, #21
 8008d08:	428f      	cmp	r7, r1
 8008d0a:	bf38      	it	cc
 8008d0c:	2204      	movcc	r2, #4
 8008d0e:	9201      	str	r2, [sp, #4]
 8008d10:	9a02      	ldr	r2, [sp, #8]
 8008d12:	9303      	str	r3, [sp, #12]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d80c      	bhi.n	8008d32 <__multiply+0x9e>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	dd03      	ble.n	8008d24 <__multiply+0x90>
 8008d1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d05b      	beq.n	8008ddc <__multiply+0x148>
 8008d24:	6106      	str	r6, [r0, #16]
 8008d26:	b005      	add	sp, #20
 8008d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2c:	f843 2b04 	str.w	r2, [r3], #4
 8008d30:	e7d8      	b.n	8008ce4 <__multiply+0x50>
 8008d32:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d36:	f1ba 0f00 	cmp.w	sl, #0
 8008d3a:	d024      	beq.n	8008d86 <__multiply+0xf2>
 8008d3c:	f104 0e14 	add.w	lr, r4, #20
 8008d40:	46a9      	mov	r9, r5
 8008d42:	f04f 0c00 	mov.w	ip, #0
 8008d46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d4a:	f8d9 1000 	ldr.w	r1, [r9]
 8008d4e:	fa1f fb82 	uxth.w	fp, r2
 8008d52:	b289      	uxth	r1, r1
 8008d54:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008d5c:	f8d9 2000 	ldr.w	r2, [r9]
 8008d60:	4461      	add	r1, ip
 8008d62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d66:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d6e:	b289      	uxth	r1, r1
 8008d70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d74:	4577      	cmp	r7, lr
 8008d76:	f849 1b04 	str.w	r1, [r9], #4
 8008d7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d7e:	d8e2      	bhi.n	8008d46 <__multiply+0xb2>
 8008d80:	9a01      	ldr	r2, [sp, #4]
 8008d82:	f845 c002 	str.w	ip, [r5, r2]
 8008d86:	9a03      	ldr	r2, [sp, #12]
 8008d88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	f1b9 0f00 	cmp.w	r9, #0
 8008d92:	d021      	beq.n	8008dd8 <__multiply+0x144>
 8008d94:	6829      	ldr	r1, [r5, #0]
 8008d96:	f104 0c14 	add.w	ip, r4, #20
 8008d9a:	46ae      	mov	lr, r5
 8008d9c:	f04f 0a00 	mov.w	sl, #0
 8008da0:	f8bc b000 	ldrh.w	fp, [ip]
 8008da4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008da8:	fb09 220b 	mla	r2, r9, fp, r2
 8008dac:	4452      	add	r2, sl
 8008dae:	b289      	uxth	r1, r1
 8008db0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008db4:	f84e 1b04 	str.w	r1, [lr], #4
 8008db8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008dbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008dc0:	f8be 1000 	ldrh.w	r1, [lr]
 8008dc4:	fb09 110a 	mla	r1, r9, sl, r1
 8008dc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008dcc:	4567      	cmp	r7, ip
 8008dce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008dd2:	d8e5      	bhi.n	8008da0 <__multiply+0x10c>
 8008dd4:	9a01      	ldr	r2, [sp, #4]
 8008dd6:	50a9      	str	r1, [r5, r2]
 8008dd8:	3504      	adds	r5, #4
 8008dda:	e799      	b.n	8008d10 <__multiply+0x7c>
 8008ddc:	3e01      	subs	r6, #1
 8008dde:	e79b      	b.n	8008d18 <__multiply+0x84>
 8008de0:	0800a004 	.word	0x0800a004
 8008de4:	0800a015 	.word	0x0800a015

08008de8 <__pow5mult>:
 8008de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dec:	4615      	mov	r5, r2
 8008dee:	f012 0203 	ands.w	r2, r2, #3
 8008df2:	4606      	mov	r6, r0
 8008df4:	460f      	mov	r7, r1
 8008df6:	d007      	beq.n	8008e08 <__pow5mult+0x20>
 8008df8:	4c25      	ldr	r4, [pc, #148]	; (8008e90 <__pow5mult+0xa8>)
 8008dfa:	3a01      	subs	r2, #1
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e02:	f7ff fe9d 	bl	8008b40 <__multadd>
 8008e06:	4607      	mov	r7, r0
 8008e08:	10ad      	asrs	r5, r5, #2
 8008e0a:	d03d      	beq.n	8008e88 <__pow5mult+0xa0>
 8008e0c:	69f4      	ldr	r4, [r6, #28]
 8008e0e:	b97c      	cbnz	r4, 8008e30 <__pow5mult+0x48>
 8008e10:	2010      	movs	r0, #16
 8008e12:	f7ff fd7f 	bl	8008914 <malloc>
 8008e16:	4602      	mov	r2, r0
 8008e18:	61f0      	str	r0, [r6, #28]
 8008e1a:	b928      	cbnz	r0, 8008e28 <__pow5mult+0x40>
 8008e1c:	4b1d      	ldr	r3, [pc, #116]	; (8008e94 <__pow5mult+0xac>)
 8008e1e:	481e      	ldr	r0, [pc, #120]	; (8008e98 <__pow5mult+0xb0>)
 8008e20:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008e24:	f000 faf6 	bl	8009414 <__assert_func>
 8008e28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e2c:	6004      	str	r4, [r0, #0]
 8008e2e:	60c4      	str	r4, [r0, #12]
 8008e30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008e34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e38:	b94c      	cbnz	r4, 8008e4e <__pow5mult+0x66>
 8008e3a:	f240 2171 	movw	r1, #625	; 0x271
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f7ff ff12 	bl	8008c68 <__i2b>
 8008e44:	2300      	movs	r3, #0
 8008e46:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	6003      	str	r3, [r0, #0]
 8008e4e:	f04f 0900 	mov.w	r9, #0
 8008e52:	07eb      	lsls	r3, r5, #31
 8008e54:	d50a      	bpl.n	8008e6c <__pow5mult+0x84>
 8008e56:	4639      	mov	r1, r7
 8008e58:	4622      	mov	r2, r4
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f7ff ff1a 	bl	8008c94 <__multiply>
 8008e60:	4639      	mov	r1, r7
 8008e62:	4680      	mov	r8, r0
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff fe49 	bl	8008afc <_Bfree>
 8008e6a:	4647      	mov	r7, r8
 8008e6c:	106d      	asrs	r5, r5, #1
 8008e6e:	d00b      	beq.n	8008e88 <__pow5mult+0xa0>
 8008e70:	6820      	ldr	r0, [r4, #0]
 8008e72:	b938      	cbnz	r0, 8008e84 <__pow5mult+0x9c>
 8008e74:	4622      	mov	r2, r4
 8008e76:	4621      	mov	r1, r4
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff ff0b 	bl	8008c94 <__multiply>
 8008e7e:	6020      	str	r0, [r4, #0]
 8008e80:	f8c0 9000 	str.w	r9, [r0]
 8008e84:	4604      	mov	r4, r0
 8008e86:	e7e4      	b.n	8008e52 <__pow5mult+0x6a>
 8008e88:	4638      	mov	r0, r7
 8008e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e8e:	bf00      	nop
 8008e90:	0800a160 	.word	0x0800a160
 8008e94:	08009f95 	.word	0x08009f95
 8008e98:	0800a015 	.word	0x0800a015

08008e9c <__lshift>:
 8008e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	6849      	ldr	r1, [r1, #4]
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008eaa:	68a3      	ldr	r3, [r4, #8]
 8008eac:	4607      	mov	r7, r0
 8008eae:	4691      	mov	r9, r2
 8008eb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008eb4:	f108 0601 	add.w	r6, r8, #1
 8008eb8:	42b3      	cmp	r3, r6
 8008eba:	db0b      	blt.n	8008ed4 <__lshift+0x38>
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7ff fddd 	bl	8008a7c <_Balloc>
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	b948      	cbnz	r0, 8008eda <__lshift+0x3e>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	4b28      	ldr	r3, [pc, #160]	; (8008f6c <__lshift+0xd0>)
 8008eca:	4829      	ldr	r0, [pc, #164]	; (8008f70 <__lshift+0xd4>)
 8008ecc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008ed0:	f000 faa0 	bl	8009414 <__assert_func>
 8008ed4:	3101      	adds	r1, #1
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	e7ee      	b.n	8008eb8 <__lshift+0x1c>
 8008eda:	2300      	movs	r3, #0
 8008edc:	f100 0114 	add.w	r1, r0, #20
 8008ee0:	f100 0210 	add.w	r2, r0, #16
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	4553      	cmp	r3, sl
 8008ee8:	db33      	blt.n	8008f52 <__lshift+0xb6>
 8008eea:	6920      	ldr	r0, [r4, #16]
 8008eec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ef0:	f104 0314 	add.w	r3, r4, #20
 8008ef4:	f019 091f 	ands.w	r9, r9, #31
 8008ef8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008efc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f00:	d02b      	beq.n	8008f5a <__lshift+0xbe>
 8008f02:	f1c9 0e20 	rsb	lr, r9, #32
 8008f06:	468a      	mov	sl, r1
 8008f08:	2200      	movs	r2, #0
 8008f0a:	6818      	ldr	r0, [r3, #0]
 8008f0c:	fa00 f009 	lsl.w	r0, r0, r9
 8008f10:	4310      	orrs	r0, r2
 8008f12:	f84a 0b04 	str.w	r0, [sl], #4
 8008f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f1a:	459c      	cmp	ip, r3
 8008f1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f20:	d8f3      	bhi.n	8008f0a <__lshift+0x6e>
 8008f22:	ebac 0304 	sub.w	r3, ip, r4
 8008f26:	3b15      	subs	r3, #21
 8008f28:	f023 0303 	bic.w	r3, r3, #3
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	f104 0015 	add.w	r0, r4, #21
 8008f32:	4584      	cmp	ip, r0
 8008f34:	bf38      	it	cc
 8008f36:	2304      	movcc	r3, #4
 8008f38:	50ca      	str	r2, [r1, r3]
 8008f3a:	b10a      	cbz	r2, 8008f40 <__lshift+0xa4>
 8008f3c:	f108 0602 	add.w	r6, r8, #2
 8008f40:	3e01      	subs	r6, #1
 8008f42:	4638      	mov	r0, r7
 8008f44:	612e      	str	r6, [r5, #16]
 8008f46:	4621      	mov	r1, r4
 8008f48:	f7ff fdd8 	bl	8008afc <_Bfree>
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f52:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f56:	3301      	adds	r3, #1
 8008f58:	e7c5      	b.n	8008ee6 <__lshift+0x4a>
 8008f5a:	3904      	subs	r1, #4
 8008f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f60:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f64:	459c      	cmp	ip, r3
 8008f66:	d8f9      	bhi.n	8008f5c <__lshift+0xc0>
 8008f68:	e7ea      	b.n	8008f40 <__lshift+0xa4>
 8008f6a:	bf00      	nop
 8008f6c:	0800a004 	.word	0x0800a004
 8008f70:	0800a015 	.word	0x0800a015

08008f74 <__mcmp>:
 8008f74:	b530      	push	{r4, r5, lr}
 8008f76:	6902      	ldr	r2, [r0, #16]
 8008f78:	690c      	ldr	r4, [r1, #16]
 8008f7a:	1b12      	subs	r2, r2, r4
 8008f7c:	d10e      	bne.n	8008f9c <__mcmp+0x28>
 8008f7e:	f100 0314 	add.w	r3, r0, #20
 8008f82:	3114      	adds	r1, #20
 8008f84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f94:	42a5      	cmp	r5, r4
 8008f96:	d003      	beq.n	8008fa0 <__mcmp+0x2c>
 8008f98:	d305      	bcc.n	8008fa6 <__mcmp+0x32>
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	bd30      	pop	{r4, r5, pc}
 8008fa0:	4283      	cmp	r3, r0
 8008fa2:	d3f3      	bcc.n	8008f8c <__mcmp+0x18>
 8008fa4:	e7fa      	b.n	8008f9c <__mcmp+0x28>
 8008fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8008faa:	e7f7      	b.n	8008f9c <__mcmp+0x28>

08008fac <__mdiff>:
 8008fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4690      	mov	r8, r2
 8008fba:	f7ff ffdb 	bl	8008f74 <__mcmp>
 8008fbe:	1e05      	subs	r5, r0, #0
 8008fc0:	d110      	bne.n	8008fe4 <__mdiff+0x38>
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7ff fd59 	bl	8008a7c <_Balloc>
 8008fca:	b930      	cbnz	r0, 8008fda <__mdiff+0x2e>
 8008fcc:	4b3a      	ldr	r3, [pc, #232]	; (80090b8 <__mdiff+0x10c>)
 8008fce:	4602      	mov	r2, r0
 8008fd0:	f240 2137 	movw	r1, #567	; 0x237
 8008fd4:	4839      	ldr	r0, [pc, #228]	; (80090bc <__mdiff+0x110>)
 8008fd6:	f000 fa1d 	bl	8009414 <__assert_func>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe4:	bfa4      	itt	ge
 8008fe6:	4643      	movge	r3, r8
 8008fe8:	46a0      	movge	r8, r4
 8008fea:	4630      	mov	r0, r6
 8008fec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ff0:	bfa6      	itte	ge
 8008ff2:	461c      	movge	r4, r3
 8008ff4:	2500      	movge	r5, #0
 8008ff6:	2501      	movlt	r5, #1
 8008ff8:	f7ff fd40 	bl	8008a7c <_Balloc>
 8008ffc:	b920      	cbnz	r0, 8009008 <__mdiff+0x5c>
 8008ffe:	4b2e      	ldr	r3, [pc, #184]	; (80090b8 <__mdiff+0x10c>)
 8009000:	4602      	mov	r2, r0
 8009002:	f240 2145 	movw	r1, #581	; 0x245
 8009006:	e7e5      	b.n	8008fd4 <__mdiff+0x28>
 8009008:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800900c:	6926      	ldr	r6, [r4, #16]
 800900e:	60c5      	str	r5, [r0, #12]
 8009010:	f104 0914 	add.w	r9, r4, #20
 8009014:	f108 0514 	add.w	r5, r8, #20
 8009018:	f100 0e14 	add.w	lr, r0, #20
 800901c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009020:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009024:	f108 0210 	add.w	r2, r8, #16
 8009028:	46f2      	mov	sl, lr
 800902a:	2100      	movs	r1, #0
 800902c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009030:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009034:	fa11 f88b 	uxtah	r8, r1, fp
 8009038:	b299      	uxth	r1, r3
 800903a:	0c1b      	lsrs	r3, r3, #16
 800903c:	eba8 0801 	sub.w	r8, r8, r1
 8009040:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009044:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009048:	fa1f f888 	uxth.w	r8, r8
 800904c:	1419      	asrs	r1, r3, #16
 800904e:	454e      	cmp	r6, r9
 8009050:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009054:	f84a 3b04 	str.w	r3, [sl], #4
 8009058:	d8e8      	bhi.n	800902c <__mdiff+0x80>
 800905a:	1b33      	subs	r3, r6, r4
 800905c:	3b15      	subs	r3, #21
 800905e:	f023 0303 	bic.w	r3, r3, #3
 8009062:	3304      	adds	r3, #4
 8009064:	3415      	adds	r4, #21
 8009066:	42a6      	cmp	r6, r4
 8009068:	bf38      	it	cc
 800906a:	2304      	movcc	r3, #4
 800906c:	441d      	add	r5, r3
 800906e:	4473      	add	r3, lr
 8009070:	469e      	mov	lr, r3
 8009072:	462e      	mov	r6, r5
 8009074:	4566      	cmp	r6, ip
 8009076:	d30e      	bcc.n	8009096 <__mdiff+0xea>
 8009078:	f10c 0203 	add.w	r2, ip, #3
 800907c:	1b52      	subs	r2, r2, r5
 800907e:	f022 0203 	bic.w	r2, r2, #3
 8009082:	3d03      	subs	r5, #3
 8009084:	45ac      	cmp	ip, r5
 8009086:	bf38      	it	cc
 8009088:	2200      	movcc	r2, #0
 800908a:	4413      	add	r3, r2
 800908c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009090:	b17a      	cbz	r2, 80090b2 <__mdiff+0x106>
 8009092:	6107      	str	r7, [r0, #16]
 8009094:	e7a4      	b.n	8008fe0 <__mdiff+0x34>
 8009096:	f856 8b04 	ldr.w	r8, [r6], #4
 800909a:	fa11 f288 	uxtah	r2, r1, r8
 800909e:	1414      	asrs	r4, r2, #16
 80090a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80090a4:	b292      	uxth	r2, r2
 80090a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80090aa:	f84e 2b04 	str.w	r2, [lr], #4
 80090ae:	1421      	asrs	r1, r4, #16
 80090b0:	e7e0      	b.n	8009074 <__mdiff+0xc8>
 80090b2:	3f01      	subs	r7, #1
 80090b4:	e7ea      	b.n	800908c <__mdiff+0xe0>
 80090b6:	bf00      	nop
 80090b8:	0800a004 	.word	0x0800a004
 80090bc:	0800a015 	.word	0x0800a015

080090c0 <__d2b>:
 80090c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090c4:	460f      	mov	r7, r1
 80090c6:	2101      	movs	r1, #1
 80090c8:	ec59 8b10 	vmov	r8, r9, d0
 80090cc:	4616      	mov	r6, r2
 80090ce:	f7ff fcd5 	bl	8008a7c <_Balloc>
 80090d2:	4604      	mov	r4, r0
 80090d4:	b930      	cbnz	r0, 80090e4 <__d2b+0x24>
 80090d6:	4602      	mov	r2, r0
 80090d8:	4b24      	ldr	r3, [pc, #144]	; (800916c <__d2b+0xac>)
 80090da:	4825      	ldr	r0, [pc, #148]	; (8009170 <__d2b+0xb0>)
 80090dc:	f240 310f 	movw	r1, #783	; 0x30f
 80090e0:	f000 f998 	bl	8009414 <__assert_func>
 80090e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090ec:	bb2d      	cbnz	r5, 800913a <__d2b+0x7a>
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	f1b8 0300 	subs.w	r3, r8, #0
 80090f4:	d026      	beq.n	8009144 <__d2b+0x84>
 80090f6:	4668      	mov	r0, sp
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	f7ff fd87 	bl	8008c0c <__lo0bits>
 80090fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009102:	b1e8      	cbz	r0, 8009140 <__d2b+0x80>
 8009104:	f1c0 0320 	rsb	r3, r0, #32
 8009108:	fa02 f303 	lsl.w	r3, r2, r3
 800910c:	430b      	orrs	r3, r1
 800910e:	40c2      	lsrs	r2, r0
 8009110:	6163      	str	r3, [r4, #20]
 8009112:	9201      	str	r2, [sp, #4]
 8009114:	9b01      	ldr	r3, [sp, #4]
 8009116:	61a3      	str	r3, [r4, #24]
 8009118:	2b00      	cmp	r3, #0
 800911a:	bf14      	ite	ne
 800911c:	2202      	movne	r2, #2
 800911e:	2201      	moveq	r2, #1
 8009120:	6122      	str	r2, [r4, #16]
 8009122:	b1bd      	cbz	r5, 8009154 <__d2b+0x94>
 8009124:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009128:	4405      	add	r5, r0
 800912a:	603d      	str	r5, [r7, #0]
 800912c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009130:	6030      	str	r0, [r6, #0]
 8009132:	4620      	mov	r0, r4
 8009134:	b003      	add	sp, #12
 8009136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800913a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800913e:	e7d6      	b.n	80090ee <__d2b+0x2e>
 8009140:	6161      	str	r1, [r4, #20]
 8009142:	e7e7      	b.n	8009114 <__d2b+0x54>
 8009144:	a801      	add	r0, sp, #4
 8009146:	f7ff fd61 	bl	8008c0c <__lo0bits>
 800914a:	9b01      	ldr	r3, [sp, #4]
 800914c:	6163      	str	r3, [r4, #20]
 800914e:	3020      	adds	r0, #32
 8009150:	2201      	movs	r2, #1
 8009152:	e7e5      	b.n	8009120 <__d2b+0x60>
 8009154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800915c:	6038      	str	r0, [r7, #0]
 800915e:	6918      	ldr	r0, [r3, #16]
 8009160:	f7ff fd34 	bl	8008bcc <__hi0bits>
 8009164:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009168:	e7e2      	b.n	8009130 <__d2b+0x70>
 800916a:	bf00      	nop
 800916c:	0800a004 	.word	0x0800a004
 8009170:	0800a015 	.word	0x0800a015

08009174 <__sflush_r>:
 8009174:	898a      	ldrh	r2, [r1, #12]
 8009176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800917a:	4605      	mov	r5, r0
 800917c:	0710      	lsls	r0, r2, #28
 800917e:	460c      	mov	r4, r1
 8009180:	d458      	bmi.n	8009234 <__sflush_r+0xc0>
 8009182:	684b      	ldr	r3, [r1, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	dc05      	bgt.n	8009194 <__sflush_r+0x20>
 8009188:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800918a:	2b00      	cmp	r3, #0
 800918c:	dc02      	bgt.n	8009194 <__sflush_r+0x20>
 800918e:	2000      	movs	r0, #0
 8009190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009196:	2e00      	cmp	r6, #0
 8009198:	d0f9      	beq.n	800918e <__sflush_r+0x1a>
 800919a:	2300      	movs	r3, #0
 800919c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091a0:	682f      	ldr	r7, [r5, #0]
 80091a2:	6a21      	ldr	r1, [r4, #32]
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	d032      	beq.n	800920e <__sflush_r+0x9a>
 80091a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	075a      	lsls	r2, r3, #29
 80091ae:	d505      	bpl.n	80091bc <__sflush_r+0x48>
 80091b0:	6863      	ldr	r3, [r4, #4]
 80091b2:	1ac0      	subs	r0, r0, r3
 80091b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091b6:	b10b      	cbz	r3, 80091bc <__sflush_r+0x48>
 80091b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091ba:	1ac0      	subs	r0, r0, r3
 80091bc:	2300      	movs	r3, #0
 80091be:	4602      	mov	r2, r0
 80091c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091c2:	6a21      	ldr	r1, [r4, #32]
 80091c4:	4628      	mov	r0, r5
 80091c6:	47b0      	blx	r6
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	d106      	bne.n	80091dc <__sflush_r+0x68>
 80091ce:	6829      	ldr	r1, [r5, #0]
 80091d0:	291d      	cmp	r1, #29
 80091d2:	d82b      	bhi.n	800922c <__sflush_r+0xb8>
 80091d4:	4a29      	ldr	r2, [pc, #164]	; (800927c <__sflush_r+0x108>)
 80091d6:	410a      	asrs	r2, r1
 80091d8:	07d6      	lsls	r6, r2, #31
 80091da:	d427      	bmi.n	800922c <__sflush_r+0xb8>
 80091dc:	2200      	movs	r2, #0
 80091de:	6062      	str	r2, [r4, #4]
 80091e0:	04d9      	lsls	r1, r3, #19
 80091e2:	6922      	ldr	r2, [r4, #16]
 80091e4:	6022      	str	r2, [r4, #0]
 80091e6:	d504      	bpl.n	80091f2 <__sflush_r+0x7e>
 80091e8:	1c42      	adds	r2, r0, #1
 80091ea:	d101      	bne.n	80091f0 <__sflush_r+0x7c>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	b903      	cbnz	r3, 80091f2 <__sflush_r+0x7e>
 80091f0:	6560      	str	r0, [r4, #84]	; 0x54
 80091f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091f4:	602f      	str	r7, [r5, #0]
 80091f6:	2900      	cmp	r1, #0
 80091f8:	d0c9      	beq.n	800918e <__sflush_r+0x1a>
 80091fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091fe:	4299      	cmp	r1, r3
 8009200:	d002      	beq.n	8009208 <__sflush_r+0x94>
 8009202:	4628      	mov	r0, r5
 8009204:	f7ff fb3a 	bl	800887c <_free_r>
 8009208:	2000      	movs	r0, #0
 800920a:	6360      	str	r0, [r4, #52]	; 0x34
 800920c:	e7c0      	b.n	8009190 <__sflush_r+0x1c>
 800920e:	2301      	movs	r3, #1
 8009210:	4628      	mov	r0, r5
 8009212:	47b0      	blx	r6
 8009214:	1c41      	adds	r1, r0, #1
 8009216:	d1c8      	bne.n	80091aa <__sflush_r+0x36>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d0c5      	beq.n	80091aa <__sflush_r+0x36>
 800921e:	2b1d      	cmp	r3, #29
 8009220:	d001      	beq.n	8009226 <__sflush_r+0xb2>
 8009222:	2b16      	cmp	r3, #22
 8009224:	d101      	bne.n	800922a <__sflush_r+0xb6>
 8009226:	602f      	str	r7, [r5, #0]
 8009228:	e7b1      	b.n	800918e <__sflush_r+0x1a>
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	e7ad      	b.n	8009190 <__sflush_r+0x1c>
 8009234:	690f      	ldr	r7, [r1, #16]
 8009236:	2f00      	cmp	r7, #0
 8009238:	d0a9      	beq.n	800918e <__sflush_r+0x1a>
 800923a:	0793      	lsls	r3, r2, #30
 800923c:	680e      	ldr	r6, [r1, #0]
 800923e:	bf08      	it	eq
 8009240:	694b      	ldreq	r3, [r1, #20]
 8009242:	600f      	str	r7, [r1, #0]
 8009244:	bf18      	it	ne
 8009246:	2300      	movne	r3, #0
 8009248:	eba6 0807 	sub.w	r8, r6, r7
 800924c:	608b      	str	r3, [r1, #8]
 800924e:	f1b8 0f00 	cmp.w	r8, #0
 8009252:	dd9c      	ble.n	800918e <__sflush_r+0x1a>
 8009254:	6a21      	ldr	r1, [r4, #32]
 8009256:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009258:	4643      	mov	r3, r8
 800925a:	463a      	mov	r2, r7
 800925c:	4628      	mov	r0, r5
 800925e:	47b0      	blx	r6
 8009260:	2800      	cmp	r0, #0
 8009262:	dc06      	bgt.n	8009272 <__sflush_r+0xfe>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	e78e      	b.n	8009190 <__sflush_r+0x1c>
 8009272:	4407      	add	r7, r0
 8009274:	eba8 0800 	sub.w	r8, r8, r0
 8009278:	e7e9      	b.n	800924e <__sflush_r+0xda>
 800927a:	bf00      	nop
 800927c:	dfbffffe 	.word	0xdfbffffe

08009280 <_fflush_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	690b      	ldr	r3, [r1, #16]
 8009284:	4605      	mov	r5, r0
 8009286:	460c      	mov	r4, r1
 8009288:	b913      	cbnz	r3, 8009290 <_fflush_r+0x10>
 800928a:	2500      	movs	r5, #0
 800928c:	4628      	mov	r0, r5
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	b118      	cbz	r0, 800929a <_fflush_r+0x1a>
 8009292:	6a03      	ldr	r3, [r0, #32]
 8009294:	b90b      	cbnz	r3, 800929a <_fflush_r+0x1a>
 8009296:	f7fe fa8d 	bl	80077b4 <__sinit>
 800929a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0f3      	beq.n	800928a <_fflush_r+0xa>
 80092a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092a4:	07d0      	lsls	r0, r2, #31
 80092a6:	d404      	bmi.n	80092b2 <_fflush_r+0x32>
 80092a8:	0599      	lsls	r1, r3, #22
 80092aa:	d402      	bmi.n	80092b2 <_fflush_r+0x32>
 80092ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ae:	f7fe fc68 	bl	8007b82 <__retarget_lock_acquire_recursive>
 80092b2:	4628      	mov	r0, r5
 80092b4:	4621      	mov	r1, r4
 80092b6:	f7ff ff5d 	bl	8009174 <__sflush_r>
 80092ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092bc:	07da      	lsls	r2, r3, #31
 80092be:	4605      	mov	r5, r0
 80092c0:	d4e4      	bmi.n	800928c <_fflush_r+0xc>
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	059b      	lsls	r3, r3, #22
 80092c6:	d4e1      	bmi.n	800928c <_fflush_r+0xc>
 80092c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ca:	f7fe fc5b 	bl	8007b84 <__retarget_lock_release_recursive>
 80092ce:	e7dd      	b.n	800928c <_fflush_r+0xc>

080092d0 <__swhatbuf_r>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	460c      	mov	r4, r1
 80092d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d8:	2900      	cmp	r1, #0
 80092da:	b096      	sub	sp, #88	; 0x58
 80092dc:	4615      	mov	r5, r2
 80092de:	461e      	mov	r6, r3
 80092e0:	da0d      	bge.n	80092fe <__swhatbuf_r+0x2e>
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092e8:	f04f 0100 	mov.w	r1, #0
 80092ec:	bf0c      	ite	eq
 80092ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092f2:	2340      	movne	r3, #64	; 0x40
 80092f4:	2000      	movs	r0, #0
 80092f6:	6031      	str	r1, [r6, #0]
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	b016      	add	sp, #88	; 0x58
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
 80092fe:	466a      	mov	r2, sp
 8009300:	f000 f848 	bl	8009394 <_fstat_r>
 8009304:	2800      	cmp	r0, #0
 8009306:	dbec      	blt.n	80092e2 <__swhatbuf_r+0x12>
 8009308:	9901      	ldr	r1, [sp, #4]
 800930a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800930e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009312:	4259      	negs	r1, r3
 8009314:	4159      	adcs	r1, r3
 8009316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800931a:	e7eb      	b.n	80092f4 <__swhatbuf_r+0x24>

0800931c <__smakebuf_r>:
 800931c:	898b      	ldrh	r3, [r1, #12]
 800931e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009320:	079d      	lsls	r5, r3, #30
 8009322:	4606      	mov	r6, r0
 8009324:	460c      	mov	r4, r1
 8009326:	d507      	bpl.n	8009338 <__smakebuf_r+0x1c>
 8009328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	6123      	str	r3, [r4, #16]
 8009330:	2301      	movs	r3, #1
 8009332:	6163      	str	r3, [r4, #20]
 8009334:	b002      	add	sp, #8
 8009336:	bd70      	pop	{r4, r5, r6, pc}
 8009338:	ab01      	add	r3, sp, #4
 800933a:	466a      	mov	r2, sp
 800933c:	f7ff ffc8 	bl	80092d0 <__swhatbuf_r>
 8009340:	9900      	ldr	r1, [sp, #0]
 8009342:	4605      	mov	r5, r0
 8009344:	4630      	mov	r0, r6
 8009346:	f7ff fb0d 	bl	8008964 <_malloc_r>
 800934a:	b948      	cbnz	r0, 8009360 <__smakebuf_r+0x44>
 800934c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009350:	059a      	lsls	r2, r3, #22
 8009352:	d4ef      	bmi.n	8009334 <__smakebuf_r+0x18>
 8009354:	f023 0303 	bic.w	r3, r3, #3
 8009358:	f043 0302 	orr.w	r3, r3, #2
 800935c:	81a3      	strh	r3, [r4, #12]
 800935e:	e7e3      	b.n	8009328 <__smakebuf_r+0xc>
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	6020      	str	r0, [r4, #0]
 8009364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009368:	81a3      	strh	r3, [r4, #12]
 800936a:	9b00      	ldr	r3, [sp, #0]
 800936c:	6163      	str	r3, [r4, #20]
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	6120      	str	r0, [r4, #16]
 8009372:	b15b      	cbz	r3, 800938c <__smakebuf_r+0x70>
 8009374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009378:	4630      	mov	r0, r6
 800937a:	f000 f81d 	bl	80093b8 <_isatty_r>
 800937e:	b128      	cbz	r0, 800938c <__smakebuf_r+0x70>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	431d      	orrs	r5, r3
 8009390:	81a5      	strh	r5, [r4, #12]
 8009392:	e7cf      	b.n	8009334 <__smakebuf_r+0x18>

08009394 <_fstat_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	; (80093b4 <_fstat_r+0x20>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	f7f8 ff20 	bl	80021e6 <_fstat>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d102      	bne.n	80093b0 <_fstat_r+0x1c>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	b103      	cbz	r3, 80093b0 <_fstat_r+0x1c>
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	bd38      	pop	{r3, r4, r5, pc}
 80093b2:	bf00      	nop
 80093b4:	20000590 	.word	0x20000590

080093b8 <_isatty_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d06      	ldr	r5, [pc, #24]	; (80093d4 <_isatty_r+0x1c>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f7f8 ff1f 	bl	8002206 <_isatty>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_isatty_r+0x1a>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_isatty_r+0x1a>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	20000590 	.word	0x20000590

080093d8 <_sbrk_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d06      	ldr	r5, [pc, #24]	; (80093f4 <_sbrk_r+0x1c>)
 80093dc:	2300      	movs	r3, #0
 80093de:	4604      	mov	r4, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7f8 ff28 	bl	8002238 <_sbrk>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d102      	bne.n	80093f2 <_sbrk_r+0x1a>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	b103      	cbz	r3, 80093f2 <_sbrk_r+0x1a>
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	20000590 	.word	0x20000590

080093f8 <memcpy>:
 80093f8:	440a      	add	r2, r1
 80093fa:	4291      	cmp	r1, r2
 80093fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009400:	d100      	bne.n	8009404 <memcpy+0xc>
 8009402:	4770      	bx	lr
 8009404:	b510      	push	{r4, lr}
 8009406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800940a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800940e:	4291      	cmp	r1, r2
 8009410:	d1f9      	bne.n	8009406 <memcpy+0xe>
 8009412:	bd10      	pop	{r4, pc}

08009414 <__assert_func>:
 8009414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009416:	4614      	mov	r4, r2
 8009418:	461a      	mov	r2, r3
 800941a:	4b09      	ldr	r3, [pc, #36]	; (8009440 <__assert_func+0x2c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4605      	mov	r5, r0
 8009420:	68d8      	ldr	r0, [r3, #12]
 8009422:	b14c      	cbz	r4, 8009438 <__assert_func+0x24>
 8009424:	4b07      	ldr	r3, [pc, #28]	; (8009444 <__assert_func+0x30>)
 8009426:	9100      	str	r1, [sp, #0]
 8009428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800942c:	4906      	ldr	r1, [pc, #24]	; (8009448 <__assert_func+0x34>)
 800942e:	462b      	mov	r3, r5
 8009430:	f000 f844 	bl	80094bc <fiprintf>
 8009434:	f000 f854 	bl	80094e0 <abort>
 8009438:	4b04      	ldr	r3, [pc, #16]	; (800944c <__assert_func+0x38>)
 800943a:	461c      	mov	r4, r3
 800943c:	e7f3      	b.n	8009426 <__assert_func+0x12>
 800943e:	bf00      	nop
 8009440:	200000f4 	.word	0x200000f4
 8009444:	0800a176 	.word	0x0800a176
 8009448:	0800a183 	.word	0x0800a183
 800944c:	0800a1b1 	.word	0x0800a1b1

08009450 <_calloc_r>:
 8009450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009452:	fba1 2402 	umull	r2, r4, r1, r2
 8009456:	b94c      	cbnz	r4, 800946c <_calloc_r+0x1c>
 8009458:	4611      	mov	r1, r2
 800945a:	9201      	str	r2, [sp, #4]
 800945c:	f7ff fa82 	bl	8008964 <_malloc_r>
 8009460:	9a01      	ldr	r2, [sp, #4]
 8009462:	4605      	mov	r5, r0
 8009464:	b930      	cbnz	r0, 8009474 <_calloc_r+0x24>
 8009466:	4628      	mov	r0, r5
 8009468:	b003      	add	sp, #12
 800946a:	bd30      	pop	{r4, r5, pc}
 800946c:	220c      	movs	r2, #12
 800946e:	6002      	str	r2, [r0, #0]
 8009470:	2500      	movs	r5, #0
 8009472:	e7f8      	b.n	8009466 <_calloc_r+0x16>
 8009474:	4621      	mov	r1, r4
 8009476:	f7fe fb07 	bl	8007a88 <memset>
 800947a:	e7f4      	b.n	8009466 <_calloc_r+0x16>

0800947c <__ascii_mbtowc>:
 800947c:	b082      	sub	sp, #8
 800947e:	b901      	cbnz	r1, 8009482 <__ascii_mbtowc+0x6>
 8009480:	a901      	add	r1, sp, #4
 8009482:	b142      	cbz	r2, 8009496 <__ascii_mbtowc+0x1a>
 8009484:	b14b      	cbz	r3, 800949a <__ascii_mbtowc+0x1e>
 8009486:	7813      	ldrb	r3, [r2, #0]
 8009488:	600b      	str	r3, [r1, #0]
 800948a:	7812      	ldrb	r2, [r2, #0]
 800948c:	1e10      	subs	r0, r2, #0
 800948e:	bf18      	it	ne
 8009490:	2001      	movne	r0, #1
 8009492:	b002      	add	sp, #8
 8009494:	4770      	bx	lr
 8009496:	4610      	mov	r0, r2
 8009498:	e7fb      	b.n	8009492 <__ascii_mbtowc+0x16>
 800949a:	f06f 0001 	mvn.w	r0, #1
 800949e:	e7f8      	b.n	8009492 <__ascii_mbtowc+0x16>

080094a0 <__ascii_wctomb>:
 80094a0:	b149      	cbz	r1, 80094b6 <__ascii_wctomb+0x16>
 80094a2:	2aff      	cmp	r2, #255	; 0xff
 80094a4:	bf85      	ittet	hi
 80094a6:	238a      	movhi	r3, #138	; 0x8a
 80094a8:	6003      	strhi	r3, [r0, #0]
 80094aa:	700a      	strbls	r2, [r1, #0]
 80094ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80094b0:	bf98      	it	ls
 80094b2:	2001      	movls	r0, #1
 80094b4:	4770      	bx	lr
 80094b6:	4608      	mov	r0, r1
 80094b8:	4770      	bx	lr
	...

080094bc <fiprintf>:
 80094bc:	b40e      	push	{r1, r2, r3}
 80094be:	b503      	push	{r0, r1, lr}
 80094c0:	4601      	mov	r1, r0
 80094c2:	ab03      	add	r3, sp, #12
 80094c4:	4805      	ldr	r0, [pc, #20]	; (80094dc <fiprintf+0x20>)
 80094c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ca:	6800      	ldr	r0, [r0, #0]
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	f000 f837 	bl	8009540 <_vfiprintf_r>
 80094d2:	b002      	add	sp, #8
 80094d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094d8:	b003      	add	sp, #12
 80094da:	4770      	bx	lr
 80094dc:	200000f4 	.word	0x200000f4

080094e0 <abort>:
 80094e0:	b508      	push	{r3, lr}
 80094e2:	2006      	movs	r0, #6
 80094e4:	f000 f96e 	bl	80097c4 <raise>
 80094e8:	2001      	movs	r0, #1
 80094ea:	f7f8 fe49 	bl	8002180 <_exit>

080094ee <__sfputc_r>:
 80094ee:	6893      	ldr	r3, [r2, #8]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	b410      	push	{r4}
 80094f6:	6093      	str	r3, [r2, #8]
 80094f8:	da08      	bge.n	800950c <__sfputc_r+0x1e>
 80094fa:	6994      	ldr	r4, [r2, #24]
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	db01      	blt.n	8009504 <__sfputc_r+0x16>
 8009500:	290a      	cmp	r1, #10
 8009502:	d103      	bne.n	800950c <__sfputc_r+0x1e>
 8009504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009508:	f7fe ba29 	b.w	800795e <__swbuf_r>
 800950c:	6813      	ldr	r3, [r2, #0]
 800950e:	1c58      	adds	r0, r3, #1
 8009510:	6010      	str	r0, [r2, #0]
 8009512:	7019      	strb	r1, [r3, #0]
 8009514:	4608      	mov	r0, r1
 8009516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800951a:	4770      	bx	lr

0800951c <__sfputs_r>:
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	4606      	mov	r6, r0
 8009520:	460f      	mov	r7, r1
 8009522:	4614      	mov	r4, r2
 8009524:	18d5      	adds	r5, r2, r3
 8009526:	42ac      	cmp	r4, r5
 8009528:	d101      	bne.n	800952e <__sfputs_r+0x12>
 800952a:	2000      	movs	r0, #0
 800952c:	e007      	b.n	800953e <__sfputs_r+0x22>
 800952e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009532:	463a      	mov	r2, r7
 8009534:	4630      	mov	r0, r6
 8009536:	f7ff ffda 	bl	80094ee <__sfputc_r>
 800953a:	1c43      	adds	r3, r0, #1
 800953c:	d1f3      	bne.n	8009526 <__sfputs_r+0xa>
 800953e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009540 <_vfiprintf_r>:
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	460d      	mov	r5, r1
 8009546:	b09d      	sub	sp, #116	; 0x74
 8009548:	4614      	mov	r4, r2
 800954a:	4698      	mov	r8, r3
 800954c:	4606      	mov	r6, r0
 800954e:	b118      	cbz	r0, 8009558 <_vfiprintf_r+0x18>
 8009550:	6a03      	ldr	r3, [r0, #32]
 8009552:	b90b      	cbnz	r3, 8009558 <_vfiprintf_r+0x18>
 8009554:	f7fe f92e 	bl	80077b4 <__sinit>
 8009558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800955a:	07d9      	lsls	r1, r3, #31
 800955c:	d405      	bmi.n	800956a <_vfiprintf_r+0x2a>
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	059a      	lsls	r2, r3, #22
 8009562:	d402      	bmi.n	800956a <_vfiprintf_r+0x2a>
 8009564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009566:	f7fe fb0c 	bl	8007b82 <__retarget_lock_acquire_recursive>
 800956a:	89ab      	ldrh	r3, [r5, #12]
 800956c:	071b      	lsls	r3, r3, #28
 800956e:	d501      	bpl.n	8009574 <_vfiprintf_r+0x34>
 8009570:	692b      	ldr	r3, [r5, #16]
 8009572:	b99b      	cbnz	r3, 800959c <_vfiprintf_r+0x5c>
 8009574:	4629      	mov	r1, r5
 8009576:	4630      	mov	r0, r6
 8009578:	f7fe fa2e 	bl	80079d8 <__swsetup_r>
 800957c:	b170      	cbz	r0, 800959c <_vfiprintf_r+0x5c>
 800957e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009580:	07dc      	lsls	r4, r3, #31
 8009582:	d504      	bpl.n	800958e <_vfiprintf_r+0x4e>
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	b01d      	add	sp, #116	; 0x74
 800958a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958e:	89ab      	ldrh	r3, [r5, #12]
 8009590:	0598      	lsls	r0, r3, #22
 8009592:	d4f7      	bmi.n	8009584 <_vfiprintf_r+0x44>
 8009594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009596:	f7fe faf5 	bl	8007b84 <__retarget_lock_release_recursive>
 800959a:	e7f3      	b.n	8009584 <_vfiprintf_r+0x44>
 800959c:	2300      	movs	r3, #0
 800959e:	9309      	str	r3, [sp, #36]	; 0x24
 80095a0:	2320      	movs	r3, #32
 80095a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095aa:	2330      	movs	r3, #48	; 0x30
 80095ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009760 <_vfiprintf_r+0x220>
 80095b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095b4:	f04f 0901 	mov.w	r9, #1
 80095b8:	4623      	mov	r3, r4
 80095ba:	469a      	mov	sl, r3
 80095bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095c0:	b10a      	cbz	r2, 80095c6 <_vfiprintf_r+0x86>
 80095c2:	2a25      	cmp	r2, #37	; 0x25
 80095c4:	d1f9      	bne.n	80095ba <_vfiprintf_r+0x7a>
 80095c6:	ebba 0b04 	subs.w	fp, sl, r4
 80095ca:	d00b      	beq.n	80095e4 <_vfiprintf_r+0xa4>
 80095cc:	465b      	mov	r3, fp
 80095ce:	4622      	mov	r2, r4
 80095d0:	4629      	mov	r1, r5
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7ff ffa2 	bl	800951c <__sfputs_r>
 80095d8:	3001      	adds	r0, #1
 80095da:	f000 80a9 	beq.w	8009730 <_vfiprintf_r+0x1f0>
 80095de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095e0:	445a      	add	r2, fp
 80095e2:	9209      	str	r2, [sp, #36]	; 0x24
 80095e4:	f89a 3000 	ldrb.w	r3, [sl]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 80a1 	beq.w	8009730 <_vfiprintf_r+0x1f0>
 80095ee:	2300      	movs	r3, #0
 80095f0:	f04f 32ff 	mov.w	r2, #4294967295
 80095f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f8:	f10a 0a01 	add.w	sl, sl, #1
 80095fc:	9304      	str	r3, [sp, #16]
 80095fe:	9307      	str	r3, [sp, #28]
 8009600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009604:	931a      	str	r3, [sp, #104]	; 0x68
 8009606:	4654      	mov	r4, sl
 8009608:	2205      	movs	r2, #5
 800960a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960e:	4854      	ldr	r0, [pc, #336]	; (8009760 <_vfiprintf_r+0x220>)
 8009610:	f7f6 fdfe 	bl	8000210 <memchr>
 8009614:	9a04      	ldr	r2, [sp, #16]
 8009616:	b9d8      	cbnz	r0, 8009650 <_vfiprintf_r+0x110>
 8009618:	06d1      	lsls	r1, r2, #27
 800961a:	bf44      	itt	mi
 800961c:	2320      	movmi	r3, #32
 800961e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009622:	0713      	lsls	r3, r2, #28
 8009624:	bf44      	itt	mi
 8009626:	232b      	movmi	r3, #43	; 0x2b
 8009628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800962c:	f89a 3000 	ldrb.w	r3, [sl]
 8009630:	2b2a      	cmp	r3, #42	; 0x2a
 8009632:	d015      	beq.n	8009660 <_vfiprintf_r+0x120>
 8009634:	9a07      	ldr	r2, [sp, #28]
 8009636:	4654      	mov	r4, sl
 8009638:	2000      	movs	r0, #0
 800963a:	f04f 0c0a 	mov.w	ip, #10
 800963e:	4621      	mov	r1, r4
 8009640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009644:	3b30      	subs	r3, #48	; 0x30
 8009646:	2b09      	cmp	r3, #9
 8009648:	d94d      	bls.n	80096e6 <_vfiprintf_r+0x1a6>
 800964a:	b1b0      	cbz	r0, 800967a <_vfiprintf_r+0x13a>
 800964c:	9207      	str	r2, [sp, #28]
 800964e:	e014      	b.n	800967a <_vfiprintf_r+0x13a>
 8009650:	eba0 0308 	sub.w	r3, r0, r8
 8009654:	fa09 f303 	lsl.w	r3, r9, r3
 8009658:	4313      	orrs	r3, r2
 800965a:	9304      	str	r3, [sp, #16]
 800965c:	46a2      	mov	sl, r4
 800965e:	e7d2      	b.n	8009606 <_vfiprintf_r+0xc6>
 8009660:	9b03      	ldr	r3, [sp, #12]
 8009662:	1d19      	adds	r1, r3, #4
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	9103      	str	r1, [sp, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	bfbb      	ittet	lt
 800966c:	425b      	neglt	r3, r3
 800966e:	f042 0202 	orrlt.w	r2, r2, #2
 8009672:	9307      	strge	r3, [sp, #28]
 8009674:	9307      	strlt	r3, [sp, #28]
 8009676:	bfb8      	it	lt
 8009678:	9204      	strlt	r2, [sp, #16]
 800967a:	7823      	ldrb	r3, [r4, #0]
 800967c:	2b2e      	cmp	r3, #46	; 0x2e
 800967e:	d10c      	bne.n	800969a <_vfiprintf_r+0x15a>
 8009680:	7863      	ldrb	r3, [r4, #1]
 8009682:	2b2a      	cmp	r3, #42	; 0x2a
 8009684:	d134      	bne.n	80096f0 <_vfiprintf_r+0x1b0>
 8009686:	9b03      	ldr	r3, [sp, #12]
 8009688:	1d1a      	adds	r2, r3, #4
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	9203      	str	r2, [sp, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	bfb8      	it	lt
 8009692:	f04f 33ff 	movlt.w	r3, #4294967295
 8009696:	3402      	adds	r4, #2
 8009698:	9305      	str	r3, [sp, #20]
 800969a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009770 <_vfiprintf_r+0x230>
 800969e:	7821      	ldrb	r1, [r4, #0]
 80096a0:	2203      	movs	r2, #3
 80096a2:	4650      	mov	r0, sl
 80096a4:	f7f6 fdb4 	bl	8000210 <memchr>
 80096a8:	b138      	cbz	r0, 80096ba <_vfiprintf_r+0x17a>
 80096aa:	9b04      	ldr	r3, [sp, #16]
 80096ac:	eba0 000a 	sub.w	r0, r0, sl
 80096b0:	2240      	movs	r2, #64	; 0x40
 80096b2:	4082      	lsls	r2, r0
 80096b4:	4313      	orrs	r3, r2
 80096b6:	3401      	adds	r4, #1
 80096b8:	9304      	str	r3, [sp, #16]
 80096ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096be:	4829      	ldr	r0, [pc, #164]	; (8009764 <_vfiprintf_r+0x224>)
 80096c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096c4:	2206      	movs	r2, #6
 80096c6:	f7f6 fda3 	bl	8000210 <memchr>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d03f      	beq.n	800974e <_vfiprintf_r+0x20e>
 80096ce:	4b26      	ldr	r3, [pc, #152]	; (8009768 <_vfiprintf_r+0x228>)
 80096d0:	bb1b      	cbnz	r3, 800971a <_vfiprintf_r+0x1da>
 80096d2:	9b03      	ldr	r3, [sp, #12]
 80096d4:	3307      	adds	r3, #7
 80096d6:	f023 0307 	bic.w	r3, r3, #7
 80096da:	3308      	adds	r3, #8
 80096dc:	9303      	str	r3, [sp, #12]
 80096de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e0:	443b      	add	r3, r7
 80096e2:	9309      	str	r3, [sp, #36]	; 0x24
 80096e4:	e768      	b.n	80095b8 <_vfiprintf_r+0x78>
 80096e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80096ea:	460c      	mov	r4, r1
 80096ec:	2001      	movs	r0, #1
 80096ee:	e7a6      	b.n	800963e <_vfiprintf_r+0xfe>
 80096f0:	2300      	movs	r3, #0
 80096f2:	3401      	adds	r4, #1
 80096f4:	9305      	str	r3, [sp, #20]
 80096f6:	4619      	mov	r1, r3
 80096f8:	f04f 0c0a 	mov.w	ip, #10
 80096fc:	4620      	mov	r0, r4
 80096fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009702:	3a30      	subs	r2, #48	; 0x30
 8009704:	2a09      	cmp	r2, #9
 8009706:	d903      	bls.n	8009710 <_vfiprintf_r+0x1d0>
 8009708:	2b00      	cmp	r3, #0
 800970a:	d0c6      	beq.n	800969a <_vfiprintf_r+0x15a>
 800970c:	9105      	str	r1, [sp, #20]
 800970e:	e7c4      	b.n	800969a <_vfiprintf_r+0x15a>
 8009710:	fb0c 2101 	mla	r1, ip, r1, r2
 8009714:	4604      	mov	r4, r0
 8009716:	2301      	movs	r3, #1
 8009718:	e7f0      	b.n	80096fc <_vfiprintf_r+0x1bc>
 800971a:	ab03      	add	r3, sp, #12
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	462a      	mov	r2, r5
 8009720:	4b12      	ldr	r3, [pc, #72]	; (800976c <_vfiprintf_r+0x22c>)
 8009722:	a904      	add	r1, sp, #16
 8009724:	4630      	mov	r0, r6
 8009726:	f7fd fbf3 	bl	8006f10 <_printf_float>
 800972a:	4607      	mov	r7, r0
 800972c:	1c78      	adds	r0, r7, #1
 800972e:	d1d6      	bne.n	80096de <_vfiprintf_r+0x19e>
 8009730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009732:	07d9      	lsls	r1, r3, #31
 8009734:	d405      	bmi.n	8009742 <_vfiprintf_r+0x202>
 8009736:	89ab      	ldrh	r3, [r5, #12]
 8009738:	059a      	lsls	r2, r3, #22
 800973a:	d402      	bmi.n	8009742 <_vfiprintf_r+0x202>
 800973c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800973e:	f7fe fa21 	bl	8007b84 <__retarget_lock_release_recursive>
 8009742:	89ab      	ldrh	r3, [r5, #12]
 8009744:	065b      	lsls	r3, r3, #25
 8009746:	f53f af1d 	bmi.w	8009584 <_vfiprintf_r+0x44>
 800974a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800974c:	e71c      	b.n	8009588 <_vfiprintf_r+0x48>
 800974e:	ab03      	add	r3, sp, #12
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	462a      	mov	r2, r5
 8009754:	4b05      	ldr	r3, [pc, #20]	; (800976c <_vfiprintf_r+0x22c>)
 8009756:	a904      	add	r1, sp, #16
 8009758:	4630      	mov	r0, r6
 800975a:	f7fd fe7d 	bl	8007458 <_printf_i>
 800975e:	e7e4      	b.n	800972a <_vfiprintf_r+0x1ea>
 8009760:	0800a2b3 	.word	0x0800a2b3
 8009764:	0800a2bd 	.word	0x0800a2bd
 8009768:	08006f11 	.word	0x08006f11
 800976c:	0800951d 	.word	0x0800951d
 8009770:	0800a2b9 	.word	0x0800a2b9

08009774 <_raise_r>:
 8009774:	291f      	cmp	r1, #31
 8009776:	b538      	push	{r3, r4, r5, lr}
 8009778:	4604      	mov	r4, r0
 800977a:	460d      	mov	r5, r1
 800977c:	d904      	bls.n	8009788 <_raise_r+0x14>
 800977e:	2316      	movs	r3, #22
 8009780:	6003      	str	r3, [r0, #0]
 8009782:	f04f 30ff 	mov.w	r0, #4294967295
 8009786:	bd38      	pop	{r3, r4, r5, pc}
 8009788:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800978a:	b112      	cbz	r2, 8009792 <_raise_r+0x1e>
 800978c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009790:	b94b      	cbnz	r3, 80097a6 <_raise_r+0x32>
 8009792:	4620      	mov	r0, r4
 8009794:	f000 f830 	bl	80097f8 <_getpid_r>
 8009798:	462a      	mov	r2, r5
 800979a:	4601      	mov	r1, r0
 800979c:	4620      	mov	r0, r4
 800979e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097a2:	f000 b817 	b.w	80097d4 <_kill_r>
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d00a      	beq.n	80097c0 <_raise_r+0x4c>
 80097aa:	1c59      	adds	r1, r3, #1
 80097ac:	d103      	bne.n	80097b6 <_raise_r+0x42>
 80097ae:	2316      	movs	r3, #22
 80097b0:	6003      	str	r3, [r0, #0]
 80097b2:	2001      	movs	r0, #1
 80097b4:	e7e7      	b.n	8009786 <_raise_r+0x12>
 80097b6:	2400      	movs	r4, #0
 80097b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097bc:	4628      	mov	r0, r5
 80097be:	4798      	blx	r3
 80097c0:	2000      	movs	r0, #0
 80097c2:	e7e0      	b.n	8009786 <_raise_r+0x12>

080097c4 <raise>:
 80097c4:	4b02      	ldr	r3, [pc, #8]	; (80097d0 <raise+0xc>)
 80097c6:	4601      	mov	r1, r0
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	f7ff bfd3 	b.w	8009774 <_raise_r>
 80097ce:	bf00      	nop
 80097d0:	200000f4 	.word	0x200000f4

080097d4 <_kill_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4d07      	ldr	r5, [pc, #28]	; (80097f4 <_kill_r+0x20>)
 80097d8:	2300      	movs	r3, #0
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	4611      	mov	r1, r2
 80097e0:	602b      	str	r3, [r5, #0]
 80097e2:	f7f8 fcbd 	bl	8002160 <_kill>
 80097e6:	1c43      	adds	r3, r0, #1
 80097e8:	d102      	bne.n	80097f0 <_kill_r+0x1c>
 80097ea:	682b      	ldr	r3, [r5, #0]
 80097ec:	b103      	cbz	r3, 80097f0 <_kill_r+0x1c>
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	bd38      	pop	{r3, r4, r5, pc}
 80097f2:	bf00      	nop
 80097f4:	20000590 	.word	0x20000590

080097f8 <_getpid_r>:
 80097f8:	f7f8 bcaa 	b.w	8002150 <_getpid>

080097fc <atan2>:
 80097fc:	f000 bab0 	b.w	8009d60 <__ieee754_atan2>

08009800 <sqrt>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	ed2d 8b02 	vpush	{d8}
 8009806:	ec55 4b10 	vmov	r4, r5, d0
 800980a:	f000 f9cf 	bl	8009bac <__ieee754_sqrt>
 800980e:	4622      	mov	r2, r4
 8009810:	462b      	mov	r3, r5
 8009812:	4620      	mov	r0, r4
 8009814:	4629      	mov	r1, r5
 8009816:	eeb0 8a40 	vmov.f32	s16, s0
 800981a:	eef0 8a60 	vmov.f32	s17, s1
 800981e:	f7f7 f9a5 	bl	8000b6c <__aeabi_dcmpun>
 8009822:	b990      	cbnz	r0, 800984a <sqrt+0x4a>
 8009824:	2200      	movs	r2, #0
 8009826:	2300      	movs	r3, #0
 8009828:	4620      	mov	r0, r4
 800982a:	4629      	mov	r1, r5
 800982c:	f7f7 f976 	bl	8000b1c <__aeabi_dcmplt>
 8009830:	b158      	cbz	r0, 800984a <sqrt+0x4a>
 8009832:	f7fe f97b 	bl	8007b2c <__errno>
 8009836:	2321      	movs	r3, #33	; 0x21
 8009838:	6003      	str	r3, [r0, #0]
 800983a:	2200      	movs	r2, #0
 800983c:	2300      	movs	r3, #0
 800983e:	4610      	mov	r0, r2
 8009840:	4619      	mov	r1, r3
 8009842:	f7f7 f823 	bl	800088c <__aeabi_ddiv>
 8009846:	ec41 0b18 	vmov	d8, r0, r1
 800984a:	eeb0 0a48 	vmov.f32	s0, s16
 800984e:	eef0 0a68 	vmov.f32	s1, s17
 8009852:	ecbd 8b02 	vpop	{d8}
 8009856:	bd38      	pop	{r3, r4, r5, pc}

08009858 <atan>:
 8009858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	ec55 4b10 	vmov	r4, r5, d0
 8009860:	4bc3      	ldr	r3, [pc, #780]	; (8009b70 <atan+0x318>)
 8009862:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009866:	429e      	cmp	r6, r3
 8009868:	46ab      	mov	fp, r5
 800986a:	dd18      	ble.n	800989e <atan+0x46>
 800986c:	4bc1      	ldr	r3, [pc, #772]	; (8009b74 <atan+0x31c>)
 800986e:	429e      	cmp	r6, r3
 8009870:	dc01      	bgt.n	8009876 <atan+0x1e>
 8009872:	d109      	bne.n	8009888 <atan+0x30>
 8009874:	b144      	cbz	r4, 8009888 <atan+0x30>
 8009876:	4622      	mov	r2, r4
 8009878:	462b      	mov	r3, r5
 800987a:	4620      	mov	r0, r4
 800987c:	4629      	mov	r1, r5
 800987e:	f7f6 fd25 	bl	80002cc <__adddf3>
 8009882:	4604      	mov	r4, r0
 8009884:	460d      	mov	r5, r1
 8009886:	e006      	b.n	8009896 <atan+0x3e>
 8009888:	f1bb 0f00 	cmp.w	fp, #0
 800988c:	f300 8131 	bgt.w	8009af2 <atan+0x29a>
 8009890:	a59b      	add	r5, pc, #620	; (adr r5, 8009b00 <atan+0x2a8>)
 8009892:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009896:	ec45 4b10 	vmov	d0, r4, r5
 800989a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989e:	4bb6      	ldr	r3, [pc, #728]	; (8009b78 <atan+0x320>)
 80098a0:	429e      	cmp	r6, r3
 80098a2:	dc14      	bgt.n	80098ce <atan+0x76>
 80098a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80098a8:	429e      	cmp	r6, r3
 80098aa:	dc0d      	bgt.n	80098c8 <atan+0x70>
 80098ac:	a396      	add	r3, pc, #600	; (adr r3, 8009b08 <atan+0x2b0>)
 80098ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b2:	ee10 0a10 	vmov	r0, s0
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7f6 fd08 	bl	80002cc <__adddf3>
 80098bc:	4baf      	ldr	r3, [pc, #700]	; (8009b7c <atan+0x324>)
 80098be:	2200      	movs	r2, #0
 80098c0:	f7f7 f94a 	bl	8000b58 <__aeabi_dcmpgt>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d1e6      	bne.n	8009896 <atan+0x3e>
 80098c8:	f04f 3aff 	mov.w	sl, #4294967295
 80098cc:	e02b      	b.n	8009926 <atan+0xce>
 80098ce:	f000 f963 	bl	8009b98 <fabs>
 80098d2:	4bab      	ldr	r3, [pc, #684]	; (8009b80 <atan+0x328>)
 80098d4:	429e      	cmp	r6, r3
 80098d6:	ec55 4b10 	vmov	r4, r5, d0
 80098da:	f300 80bf 	bgt.w	8009a5c <atan+0x204>
 80098de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80098e2:	429e      	cmp	r6, r3
 80098e4:	f300 80a0 	bgt.w	8009a28 <atan+0x1d0>
 80098e8:	ee10 2a10 	vmov	r2, s0
 80098ec:	ee10 0a10 	vmov	r0, s0
 80098f0:	462b      	mov	r3, r5
 80098f2:	4629      	mov	r1, r5
 80098f4:	f7f6 fcea 	bl	80002cc <__adddf3>
 80098f8:	4ba0      	ldr	r3, [pc, #640]	; (8009b7c <atan+0x324>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	f7f6 fce4 	bl	80002c8 <__aeabi_dsub>
 8009900:	2200      	movs	r2, #0
 8009902:	4606      	mov	r6, r0
 8009904:	460f      	mov	r7, r1
 8009906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800990a:	4620      	mov	r0, r4
 800990c:	4629      	mov	r1, r5
 800990e:	f7f6 fcdd 	bl	80002cc <__adddf3>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7f6 ffb7 	bl	800088c <__aeabi_ddiv>
 800991e:	f04f 0a00 	mov.w	sl, #0
 8009922:	4604      	mov	r4, r0
 8009924:	460d      	mov	r5, r1
 8009926:	4622      	mov	r2, r4
 8009928:	462b      	mov	r3, r5
 800992a:	4620      	mov	r0, r4
 800992c:	4629      	mov	r1, r5
 800992e:	f7f6 fe83 	bl	8000638 <__aeabi_dmul>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	4680      	mov	r8, r0
 8009938:	4689      	mov	r9, r1
 800993a:	f7f6 fe7d 	bl	8000638 <__aeabi_dmul>
 800993e:	a374      	add	r3, pc, #464	; (adr r3, 8009b10 <atan+0x2b8>)
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	4606      	mov	r6, r0
 8009946:	460f      	mov	r7, r1
 8009948:	f7f6 fe76 	bl	8000638 <__aeabi_dmul>
 800994c:	a372      	add	r3, pc, #456	; (adr r3, 8009b18 <atan+0x2c0>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f7f6 fcbb 	bl	80002cc <__adddf3>
 8009956:	4632      	mov	r2, r6
 8009958:	463b      	mov	r3, r7
 800995a:	f7f6 fe6d 	bl	8000638 <__aeabi_dmul>
 800995e:	a370      	add	r3, pc, #448	; (adr r3, 8009b20 <atan+0x2c8>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	f7f6 fcb2 	bl	80002cc <__adddf3>
 8009968:	4632      	mov	r2, r6
 800996a:	463b      	mov	r3, r7
 800996c:	f7f6 fe64 	bl	8000638 <__aeabi_dmul>
 8009970:	a36d      	add	r3, pc, #436	; (adr r3, 8009b28 <atan+0x2d0>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fca9 	bl	80002cc <__adddf3>
 800997a:	4632      	mov	r2, r6
 800997c:	463b      	mov	r3, r7
 800997e:	f7f6 fe5b 	bl	8000638 <__aeabi_dmul>
 8009982:	a36b      	add	r3, pc, #428	; (adr r3, 8009b30 <atan+0x2d8>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f7f6 fca0 	bl	80002cc <__adddf3>
 800998c:	4632      	mov	r2, r6
 800998e:	463b      	mov	r3, r7
 8009990:	f7f6 fe52 	bl	8000638 <__aeabi_dmul>
 8009994:	a368      	add	r3, pc, #416	; (adr r3, 8009b38 <atan+0x2e0>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	f7f6 fc97 	bl	80002cc <__adddf3>
 800999e:	4642      	mov	r2, r8
 80099a0:	464b      	mov	r3, r9
 80099a2:	f7f6 fe49 	bl	8000638 <__aeabi_dmul>
 80099a6:	a366      	add	r3, pc, #408	; (adr r3, 8009b40 <atan+0x2e8>)
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	4680      	mov	r8, r0
 80099ae:	4689      	mov	r9, r1
 80099b0:	4630      	mov	r0, r6
 80099b2:	4639      	mov	r1, r7
 80099b4:	f7f6 fe40 	bl	8000638 <__aeabi_dmul>
 80099b8:	a363      	add	r3, pc, #396	; (adr r3, 8009b48 <atan+0x2f0>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f7f6 fc83 	bl	80002c8 <__aeabi_dsub>
 80099c2:	4632      	mov	r2, r6
 80099c4:	463b      	mov	r3, r7
 80099c6:	f7f6 fe37 	bl	8000638 <__aeabi_dmul>
 80099ca:	a361      	add	r3, pc, #388	; (adr r3, 8009b50 <atan+0x2f8>)
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	f7f6 fc7a 	bl	80002c8 <__aeabi_dsub>
 80099d4:	4632      	mov	r2, r6
 80099d6:	463b      	mov	r3, r7
 80099d8:	f7f6 fe2e 	bl	8000638 <__aeabi_dmul>
 80099dc:	a35e      	add	r3, pc, #376	; (adr r3, 8009b58 <atan+0x300>)
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	f7f6 fc71 	bl	80002c8 <__aeabi_dsub>
 80099e6:	4632      	mov	r2, r6
 80099e8:	463b      	mov	r3, r7
 80099ea:	f7f6 fe25 	bl	8000638 <__aeabi_dmul>
 80099ee:	a35c      	add	r3, pc, #368	; (adr r3, 8009b60 <atan+0x308>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f7f6 fc68 	bl	80002c8 <__aeabi_dsub>
 80099f8:	4632      	mov	r2, r6
 80099fa:	463b      	mov	r3, r7
 80099fc:	f7f6 fe1c 	bl	8000638 <__aeabi_dmul>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4640      	mov	r0, r8
 8009a06:	4649      	mov	r1, r9
 8009a08:	f7f6 fc60 	bl	80002cc <__adddf3>
 8009a0c:	4622      	mov	r2, r4
 8009a0e:	462b      	mov	r3, r5
 8009a10:	f7f6 fe12 	bl	8000638 <__aeabi_dmul>
 8009a14:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	d14b      	bne.n	8009ab6 <atan+0x25e>
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4629      	mov	r1, r5
 8009a22:	f7f6 fc51 	bl	80002c8 <__aeabi_dsub>
 8009a26:	e72c      	b.n	8009882 <atan+0x2a>
 8009a28:	ee10 0a10 	vmov	r0, s0
 8009a2c:	4b53      	ldr	r3, [pc, #332]	; (8009b7c <atan+0x324>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7f6 fc49 	bl	80002c8 <__aeabi_dsub>
 8009a36:	4b51      	ldr	r3, [pc, #324]	; (8009b7c <atan+0x324>)
 8009a38:	4606      	mov	r6, r0
 8009a3a:	460f      	mov	r7, r1
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	4620      	mov	r0, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	f7f6 fc43 	bl	80002cc <__adddf3>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	4639      	mov	r1, r7
 8009a4e:	f7f6 ff1d 	bl	800088c <__aeabi_ddiv>
 8009a52:	f04f 0a01 	mov.w	sl, #1
 8009a56:	4604      	mov	r4, r0
 8009a58:	460d      	mov	r5, r1
 8009a5a:	e764      	b.n	8009926 <atan+0xce>
 8009a5c:	4b49      	ldr	r3, [pc, #292]	; (8009b84 <atan+0x32c>)
 8009a5e:	429e      	cmp	r6, r3
 8009a60:	da1d      	bge.n	8009a9e <atan+0x246>
 8009a62:	ee10 0a10 	vmov	r0, s0
 8009a66:	4b48      	ldr	r3, [pc, #288]	; (8009b88 <atan+0x330>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f7f6 fc2c 	bl	80002c8 <__aeabi_dsub>
 8009a70:	4b45      	ldr	r3, [pc, #276]	; (8009b88 <atan+0x330>)
 8009a72:	4606      	mov	r6, r0
 8009a74:	460f      	mov	r7, r1
 8009a76:	2200      	movs	r2, #0
 8009a78:	4620      	mov	r0, r4
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	f7f6 fddc 	bl	8000638 <__aeabi_dmul>
 8009a80:	4b3e      	ldr	r3, [pc, #248]	; (8009b7c <atan+0x324>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	f7f6 fc22 	bl	80002cc <__adddf3>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	4639      	mov	r1, r7
 8009a90:	f7f6 fefc 	bl	800088c <__aeabi_ddiv>
 8009a94:	f04f 0a02 	mov.w	sl, #2
 8009a98:	4604      	mov	r4, r0
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	e743      	b.n	8009926 <atan+0xce>
 8009a9e:	462b      	mov	r3, r5
 8009aa0:	ee10 2a10 	vmov	r2, s0
 8009aa4:	4939      	ldr	r1, [pc, #228]	; (8009b8c <atan+0x334>)
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	f7f6 fef0 	bl	800088c <__aeabi_ddiv>
 8009aac:	f04f 0a03 	mov.w	sl, #3
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	460d      	mov	r5, r1
 8009ab4:	e737      	b.n	8009926 <atan+0xce>
 8009ab6:	4b36      	ldr	r3, [pc, #216]	; (8009b90 <atan+0x338>)
 8009ab8:	4e36      	ldr	r6, [pc, #216]	; (8009b94 <atan+0x33c>)
 8009aba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f7f6 fc01 	bl	80002c8 <__aeabi_dsub>
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	462b      	mov	r3, r5
 8009aca:	f7f6 fbfd 	bl	80002c8 <__aeabi_dsub>
 8009ace:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009ada:	f7f6 fbf5 	bl	80002c8 <__aeabi_dsub>
 8009ade:	f1bb 0f00 	cmp.w	fp, #0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	460d      	mov	r5, r1
 8009ae6:	f6bf aed6 	bge.w	8009896 <atan+0x3e>
 8009aea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009aee:	461d      	mov	r5, r3
 8009af0:	e6d1      	b.n	8009896 <atan+0x3e>
 8009af2:	a51d      	add	r5, pc, #116	; (adr r5, 8009b68 <atan+0x310>)
 8009af4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009af8:	e6cd      	b.n	8009896 <atan+0x3e>
 8009afa:	bf00      	nop
 8009afc:	f3af 8000 	nop.w
 8009b00:	54442d18 	.word	0x54442d18
 8009b04:	bff921fb 	.word	0xbff921fb
 8009b08:	8800759c 	.word	0x8800759c
 8009b0c:	7e37e43c 	.word	0x7e37e43c
 8009b10:	e322da11 	.word	0xe322da11
 8009b14:	3f90ad3a 	.word	0x3f90ad3a
 8009b18:	24760deb 	.word	0x24760deb
 8009b1c:	3fa97b4b 	.word	0x3fa97b4b
 8009b20:	a0d03d51 	.word	0xa0d03d51
 8009b24:	3fb10d66 	.word	0x3fb10d66
 8009b28:	c54c206e 	.word	0xc54c206e
 8009b2c:	3fb745cd 	.word	0x3fb745cd
 8009b30:	920083ff 	.word	0x920083ff
 8009b34:	3fc24924 	.word	0x3fc24924
 8009b38:	5555550d 	.word	0x5555550d
 8009b3c:	3fd55555 	.word	0x3fd55555
 8009b40:	2c6a6c2f 	.word	0x2c6a6c2f
 8009b44:	bfa2b444 	.word	0xbfa2b444
 8009b48:	52defd9a 	.word	0x52defd9a
 8009b4c:	3fadde2d 	.word	0x3fadde2d
 8009b50:	af749a6d 	.word	0xaf749a6d
 8009b54:	3fb3b0f2 	.word	0x3fb3b0f2
 8009b58:	fe231671 	.word	0xfe231671
 8009b5c:	3fbc71c6 	.word	0x3fbc71c6
 8009b60:	9998ebc4 	.word	0x9998ebc4
 8009b64:	3fc99999 	.word	0x3fc99999
 8009b68:	54442d18 	.word	0x54442d18
 8009b6c:	3ff921fb 	.word	0x3ff921fb
 8009b70:	440fffff 	.word	0x440fffff
 8009b74:	7ff00000 	.word	0x7ff00000
 8009b78:	3fdbffff 	.word	0x3fdbffff
 8009b7c:	3ff00000 	.word	0x3ff00000
 8009b80:	3ff2ffff 	.word	0x3ff2ffff
 8009b84:	40038000 	.word	0x40038000
 8009b88:	3ff80000 	.word	0x3ff80000
 8009b8c:	bff00000 	.word	0xbff00000
 8009b90:	0800a2e8 	.word	0x0800a2e8
 8009b94:	0800a2c8 	.word	0x0800a2c8

08009b98 <fabs>:
 8009b98:	ec51 0b10 	vmov	r0, r1, d0
 8009b9c:	ee10 2a10 	vmov	r2, s0
 8009ba0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ba4:	ec43 2b10 	vmov	d0, r2, r3
 8009ba8:	4770      	bx	lr
	...

08009bac <__ieee754_sqrt>:
 8009bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb0:	ec55 4b10 	vmov	r4, r5, d0
 8009bb4:	4e67      	ldr	r6, [pc, #412]	; (8009d54 <__ieee754_sqrt+0x1a8>)
 8009bb6:	43ae      	bics	r6, r5
 8009bb8:	ee10 0a10 	vmov	r0, s0
 8009bbc:	ee10 2a10 	vmov	r2, s0
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	462b      	mov	r3, r5
 8009bc4:	d10d      	bne.n	8009be2 <__ieee754_sqrt+0x36>
 8009bc6:	f7f6 fd37 	bl	8000638 <__aeabi_dmul>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4620      	mov	r0, r4
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	f7f6 fb7b 	bl	80002cc <__adddf3>
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	460d      	mov	r5, r1
 8009bda:	ec45 4b10 	vmov	d0, r4, r5
 8009bde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be2:	2d00      	cmp	r5, #0
 8009be4:	dc0b      	bgt.n	8009bfe <__ieee754_sqrt+0x52>
 8009be6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009bea:	4326      	orrs	r6, r4
 8009bec:	d0f5      	beq.n	8009bda <__ieee754_sqrt+0x2e>
 8009bee:	b135      	cbz	r5, 8009bfe <__ieee754_sqrt+0x52>
 8009bf0:	f7f6 fb6a 	bl	80002c8 <__aeabi_dsub>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	f7f6 fe48 	bl	800088c <__aeabi_ddiv>
 8009bfc:	e7eb      	b.n	8009bd6 <__ieee754_sqrt+0x2a>
 8009bfe:	1509      	asrs	r1, r1, #20
 8009c00:	f000 808d 	beq.w	8009d1e <__ieee754_sqrt+0x172>
 8009c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c08:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c10:	07c9      	lsls	r1, r1, #31
 8009c12:	bf5c      	itt	pl
 8009c14:	005b      	lslpl	r3, r3, #1
 8009c16:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009c1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c1e:	bf58      	it	pl
 8009c20:	0052      	lslpl	r2, r2, #1
 8009c22:	2500      	movs	r5, #0
 8009c24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009c28:	1076      	asrs	r6, r6, #1
 8009c2a:	0052      	lsls	r2, r2, #1
 8009c2c:	f04f 0e16 	mov.w	lr, #22
 8009c30:	46ac      	mov	ip, r5
 8009c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c36:	eb0c 0001 	add.w	r0, ip, r1
 8009c3a:	4298      	cmp	r0, r3
 8009c3c:	bfde      	ittt	le
 8009c3e:	1a1b      	suble	r3, r3, r0
 8009c40:	eb00 0c01 	addle.w	ip, r0, r1
 8009c44:	186d      	addle	r5, r5, r1
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	f1be 0e01 	subs.w	lr, lr, #1
 8009c4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009c50:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009c54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009c58:	d1ed      	bne.n	8009c36 <__ieee754_sqrt+0x8a>
 8009c5a:	4674      	mov	r4, lr
 8009c5c:	2720      	movs	r7, #32
 8009c5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009c62:	4563      	cmp	r3, ip
 8009c64:	eb01 000e 	add.w	r0, r1, lr
 8009c68:	dc02      	bgt.n	8009c70 <__ieee754_sqrt+0xc4>
 8009c6a:	d113      	bne.n	8009c94 <__ieee754_sqrt+0xe8>
 8009c6c:	4290      	cmp	r0, r2
 8009c6e:	d811      	bhi.n	8009c94 <__ieee754_sqrt+0xe8>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	eb00 0e01 	add.w	lr, r0, r1
 8009c76:	da57      	bge.n	8009d28 <__ieee754_sqrt+0x17c>
 8009c78:	f1be 0f00 	cmp.w	lr, #0
 8009c7c:	db54      	blt.n	8009d28 <__ieee754_sqrt+0x17c>
 8009c7e:	f10c 0801 	add.w	r8, ip, #1
 8009c82:	eba3 030c 	sub.w	r3, r3, ip
 8009c86:	4290      	cmp	r0, r2
 8009c88:	bf88      	it	hi
 8009c8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009c8e:	1a12      	subs	r2, r2, r0
 8009c90:	440c      	add	r4, r1
 8009c92:	46c4      	mov	ip, r8
 8009c94:	005b      	lsls	r3, r3, #1
 8009c96:	3f01      	subs	r7, #1
 8009c98:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009c9c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009ca0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009ca4:	d1dd      	bne.n	8009c62 <__ieee754_sqrt+0xb6>
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	d01b      	beq.n	8009ce2 <__ieee754_sqrt+0x136>
 8009caa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009d58 <__ieee754_sqrt+0x1ac>
 8009cae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009d5c <__ieee754_sqrt+0x1b0>
 8009cb2:	e9da 0100 	ldrd	r0, r1, [sl]
 8009cb6:	e9db 2300 	ldrd	r2, r3, [fp]
 8009cba:	f7f6 fb05 	bl	80002c8 <__aeabi_dsub>
 8009cbe:	e9da 8900 	ldrd	r8, r9, [sl]
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	4649      	mov	r1, r9
 8009cca:	f7f6 ff31 	bl	8000b30 <__aeabi_dcmple>
 8009cce:	b140      	cbz	r0, 8009ce2 <__ieee754_sqrt+0x136>
 8009cd0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009cd4:	e9da 0100 	ldrd	r0, r1, [sl]
 8009cd8:	e9db 2300 	ldrd	r2, r3, [fp]
 8009cdc:	d126      	bne.n	8009d2c <__ieee754_sqrt+0x180>
 8009cde:	3501      	adds	r5, #1
 8009ce0:	463c      	mov	r4, r7
 8009ce2:	106a      	asrs	r2, r5, #1
 8009ce4:	0863      	lsrs	r3, r4, #1
 8009ce6:	07e9      	lsls	r1, r5, #31
 8009ce8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009cec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009cf0:	bf48      	it	mi
 8009cf2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009cf6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009cfa:	461c      	mov	r4, r3
 8009cfc:	e76d      	b.n	8009bda <__ieee754_sqrt+0x2e>
 8009cfe:	0ad3      	lsrs	r3, r2, #11
 8009d00:	3815      	subs	r0, #21
 8009d02:	0552      	lsls	r2, r2, #21
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d0fa      	beq.n	8009cfe <__ieee754_sqrt+0x152>
 8009d08:	02dc      	lsls	r4, r3, #11
 8009d0a:	d50a      	bpl.n	8009d22 <__ieee754_sqrt+0x176>
 8009d0c:	f1c1 0420 	rsb	r4, r1, #32
 8009d10:	fa22 f404 	lsr.w	r4, r2, r4
 8009d14:	1e4d      	subs	r5, r1, #1
 8009d16:	408a      	lsls	r2, r1
 8009d18:	4323      	orrs	r3, r4
 8009d1a:	1b41      	subs	r1, r0, r5
 8009d1c:	e772      	b.n	8009c04 <__ieee754_sqrt+0x58>
 8009d1e:	4608      	mov	r0, r1
 8009d20:	e7f0      	b.n	8009d04 <__ieee754_sqrt+0x158>
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	3101      	adds	r1, #1
 8009d26:	e7ef      	b.n	8009d08 <__ieee754_sqrt+0x15c>
 8009d28:	46e0      	mov	r8, ip
 8009d2a:	e7aa      	b.n	8009c82 <__ieee754_sqrt+0xd6>
 8009d2c:	f7f6 face 	bl	80002cc <__adddf3>
 8009d30:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4640      	mov	r0, r8
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	f7f6 feee 	bl	8000b1c <__aeabi_dcmplt>
 8009d40:	b120      	cbz	r0, 8009d4c <__ieee754_sqrt+0x1a0>
 8009d42:	1ca0      	adds	r0, r4, #2
 8009d44:	bf08      	it	eq
 8009d46:	3501      	addeq	r5, #1
 8009d48:	3402      	adds	r4, #2
 8009d4a:	e7ca      	b.n	8009ce2 <__ieee754_sqrt+0x136>
 8009d4c:	3401      	adds	r4, #1
 8009d4e:	f024 0401 	bic.w	r4, r4, #1
 8009d52:	e7c6      	b.n	8009ce2 <__ieee754_sqrt+0x136>
 8009d54:	7ff00000 	.word	0x7ff00000
 8009d58:	20000268 	.word	0x20000268
 8009d5c:	20000270 	.word	0x20000270

08009d60 <__ieee754_atan2>:
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	ec57 6b11 	vmov	r6, r7, d1
 8009d68:	4273      	negs	r3, r6
 8009d6a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009ee8 <__ieee754_atan2+0x188>
 8009d6e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009d72:	4333      	orrs	r3, r6
 8009d74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009d78:	4543      	cmp	r3, r8
 8009d7a:	ec51 0b10 	vmov	r0, r1, d0
 8009d7e:	ee11 5a10 	vmov	r5, s2
 8009d82:	d80a      	bhi.n	8009d9a <__ieee754_atan2+0x3a>
 8009d84:	4244      	negs	r4, r0
 8009d86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d8a:	4304      	orrs	r4, r0
 8009d8c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009d90:	4544      	cmp	r4, r8
 8009d92:	ee10 9a10 	vmov	r9, s0
 8009d96:	468e      	mov	lr, r1
 8009d98:	d907      	bls.n	8009daa <__ieee754_atan2+0x4a>
 8009d9a:	4632      	mov	r2, r6
 8009d9c:	463b      	mov	r3, r7
 8009d9e:	f7f6 fa95 	bl	80002cc <__adddf3>
 8009da2:	ec41 0b10 	vmov	d0, r0, r1
 8009da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009daa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009dae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009db2:	4334      	orrs	r4, r6
 8009db4:	d103      	bne.n	8009dbe <__ieee754_atan2+0x5e>
 8009db6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dba:	f7ff bd4d 	b.w	8009858 <atan>
 8009dbe:	17bc      	asrs	r4, r7, #30
 8009dc0:	f004 0402 	and.w	r4, r4, #2
 8009dc4:	ea53 0909 	orrs.w	r9, r3, r9
 8009dc8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009dcc:	d107      	bne.n	8009dde <__ieee754_atan2+0x7e>
 8009dce:	2c02      	cmp	r4, #2
 8009dd0:	d05f      	beq.n	8009e92 <__ieee754_atan2+0x132>
 8009dd2:	2c03      	cmp	r4, #3
 8009dd4:	d1e5      	bne.n	8009da2 <__ieee754_atan2+0x42>
 8009dd6:	a140      	add	r1, pc, #256	; (adr r1, 8009ed8 <__ieee754_atan2+0x178>)
 8009dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ddc:	e7e1      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009dde:	4315      	orrs	r5, r2
 8009de0:	d106      	bne.n	8009df0 <__ieee754_atan2+0x90>
 8009de2:	f1be 0f00 	cmp.w	lr, #0
 8009de6:	da5f      	bge.n	8009ea8 <__ieee754_atan2+0x148>
 8009de8:	a13d      	add	r1, pc, #244	; (adr r1, 8009ee0 <__ieee754_atan2+0x180>)
 8009dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dee:	e7d8      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009df0:	4542      	cmp	r2, r8
 8009df2:	d10f      	bne.n	8009e14 <__ieee754_atan2+0xb4>
 8009df4:	4293      	cmp	r3, r2
 8009df6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009dfa:	d107      	bne.n	8009e0c <__ieee754_atan2+0xac>
 8009dfc:	2c02      	cmp	r4, #2
 8009dfe:	d84c      	bhi.n	8009e9a <__ieee754_atan2+0x13a>
 8009e00:	4b33      	ldr	r3, [pc, #204]	; (8009ed0 <__ieee754_atan2+0x170>)
 8009e02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e0a:	e7ca      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009e0c:	2c02      	cmp	r4, #2
 8009e0e:	d848      	bhi.n	8009ea2 <__ieee754_atan2+0x142>
 8009e10:	4b30      	ldr	r3, [pc, #192]	; (8009ed4 <__ieee754_atan2+0x174>)
 8009e12:	e7f6      	b.n	8009e02 <__ieee754_atan2+0xa2>
 8009e14:	4543      	cmp	r3, r8
 8009e16:	d0e4      	beq.n	8009de2 <__ieee754_atan2+0x82>
 8009e18:	1a9b      	subs	r3, r3, r2
 8009e1a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009e1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e22:	da1e      	bge.n	8009e62 <__ieee754_atan2+0x102>
 8009e24:	2f00      	cmp	r7, #0
 8009e26:	da01      	bge.n	8009e2c <__ieee754_atan2+0xcc>
 8009e28:	323c      	adds	r2, #60	; 0x3c
 8009e2a:	db1e      	blt.n	8009e6a <__ieee754_atan2+0x10a>
 8009e2c:	4632      	mov	r2, r6
 8009e2e:	463b      	mov	r3, r7
 8009e30:	f7f6 fd2c 	bl	800088c <__aeabi_ddiv>
 8009e34:	ec41 0b10 	vmov	d0, r0, r1
 8009e38:	f7ff feae 	bl	8009b98 <fabs>
 8009e3c:	f7ff fd0c 	bl	8009858 <atan>
 8009e40:	ec51 0b10 	vmov	r0, r1, d0
 8009e44:	2c01      	cmp	r4, #1
 8009e46:	d013      	beq.n	8009e70 <__ieee754_atan2+0x110>
 8009e48:	2c02      	cmp	r4, #2
 8009e4a:	d015      	beq.n	8009e78 <__ieee754_atan2+0x118>
 8009e4c:	2c00      	cmp	r4, #0
 8009e4e:	d0a8      	beq.n	8009da2 <__ieee754_atan2+0x42>
 8009e50:	a317      	add	r3, pc, #92	; (adr r3, 8009eb0 <__ieee754_atan2+0x150>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 fa37 	bl	80002c8 <__aeabi_dsub>
 8009e5a:	a317      	add	r3, pc, #92	; (adr r3, 8009eb8 <__ieee754_atan2+0x158>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	e014      	b.n	8009e8c <__ieee754_atan2+0x12c>
 8009e62:	a117      	add	r1, pc, #92	; (adr r1, 8009ec0 <__ieee754_atan2+0x160>)
 8009e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e68:	e7ec      	b.n	8009e44 <__ieee754_atan2+0xe4>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	e7e9      	b.n	8009e44 <__ieee754_atan2+0xe4>
 8009e70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e74:	4619      	mov	r1, r3
 8009e76:	e794      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009e78:	a30d      	add	r3, pc, #52	; (adr r3, 8009eb0 <__ieee754_atan2+0x150>)
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	f7f6 fa23 	bl	80002c8 <__aeabi_dsub>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	a10c      	add	r1, pc, #48	; (adr r1, 8009eb8 <__ieee754_atan2+0x158>)
 8009e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e8c:	f7f6 fa1c 	bl	80002c8 <__aeabi_dsub>
 8009e90:	e787      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009e92:	a109      	add	r1, pc, #36	; (adr r1, 8009eb8 <__ieee754_atan2+0x158>)
 8009e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e98:	e783      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009e9a:	a10b      	add	r1, pc, #44	; (adr r1, 8009ec8 <__ieee754_atan2+0x168>)
 8009e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea0:	e77f      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009ea2:	2000      	movs	r0, #0
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	e77c      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009ea8:	a105      	add	r1, pc, #20	; (adr r1, 8009ec0 <__ieee754_atan2+0x160>)
 8009eaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eae:	e778      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009eb0:	33145c07 	.word	0x33145c07
 8009eb4:	3ca1a626 	.word	0x3ca1a626
 8009eb8:	54442d18 	.word	0x54442d18
 8009ebc:	400921fb 	.word	0x400921fb
 8009ec0:	54442d18 	.word	0x54442d18
 8009ec4:	3ff921fb 	.word	0x3ff921fb
 8009ec8:	54442d18 	.word	0x54442d18
 8009ecc:	3fe921fb 	.word	0x3fe921fb
 8009ed0:	0800a308 	.word	0x0800a308
 8009ed4:	0800a320 	.word	0x0800a320
 8009ed8:	54442d18 	.word	0x54442d18
 8009edc:	c00921fb 	.word	0xc00921fb
 8009ee0:	54442d18 	.word	0x54442d18
 8009ee4:	bff921fb 	.word	0xbff921fb
 8009ee8:	7ff00000 	.word	0x7ff00000

08009eec <_init>:
 8009eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eee:	bf00      	nop
 8009ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef2:	bc08      	pop	{r3}
 8009ef4:	469e      	mov	lr, r3
 8009ef6:	4770      	bx	lr

08009ef8 <_fini>:
 8009ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efa:	bf00      	nop
 8009efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efe:	bc08      	pop	{r3}
 8009f00:	469e      	mov	lr, r3
 8009f02:	4770      	bx	lr
